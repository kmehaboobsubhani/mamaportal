import { ɵɵdefineInjectable, Injectable, Component, Input, Directive, Renderer2, ElementRef, NgModule, Optional, SkipSelf } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

class IconSetService {
    constructor() {
        // tslint:disable-next-line:variable-name
        this._icons = {};
    }
    set icons(iconSet) {
        this._icons = iconSet;
    }
    get icons() {
        return this._icons;
    }
    getIcon(name) {
        const icon = this.icons[name];
        if (!icon) {
            console.warn(`CoreUI WARN: Icon ${name} is not registered in IconService`);
        }
        return this.icons[name];
    }
}
IconSetService.ɵprov = ɵɵdefineInjectable({ factory: function IconSetService_Factory() { return new IconSetService(); }, token: IconSetService, providedIn: "root" });
IconSetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IconSetService.ctorParameters = () => [];

class IconComponent {
    constructor(sanitizer, iconSet) {
        this.sanitizer = sanitizer;
        this.iconSet = iconSet;
        this.attributes = { role: 'img' };
        this.size = '';
        this.use = '';
    }
    set name(name) {
        this._name = name;
    }
    get name() {
        const nameIsKebabCase = this._name && this._name.includes('-');
        return nameIsKebabCase ? this.toCamelCase(this._name) : this._name;
    }
    set viewBox(viewBox) {
        this._viewBox = viewBox;
    }
    get viewBox() {
        return this._viewBox || `0 0 ${this.scale}`;
    }
    get titleCode() {
        return this.title ? `<title>${this.title}</title>` : '';
    }
    get code() {
        if (this.content) {
            return this.content;
        }
        else if (this.iconSet) {
            return this.iconSet.getIcon(this.name);
        }
        console.warn(`c-icon component: icon name '${this.name}' does not exist for IconSet service. ` +
            `To use icon by 'name' prop you need to add it to IconSet service. \n`, this.name);
        return undefined;
    }
    get iconCode() {
        const code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code;
        return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code);
    }
    get scale() {
        return Array.isArray(this.code) && this.code.length > 1 ? this.code[0] : '64 64';
    }
    get computedSize() {
        const addCustom = !this.size && (this.width || this.height);
        return this.size === 'custom' || addCustom ? 'custom-size' : this.size;
    }
    get computedClasses() {
        const classes = {
            'c-icon': true,
            [`c-icon-${this.computedSize}`]: !!this.computedSize
        };
        return !!this.customClasses ? this.customClasses : classes;
    }
    toCamelCase(str) {
        return str.replace(/([-_][a-z0-9])/ig, ($1) => {
            return $1.toUpperCase().replace('-', '');
        });
    }
}
IconComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-icon',
                template: "<img *ngIf=\"src\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     [attr.alt]=\"title\"\r\n     [ngClass]=\"customClasses\"\r\n     [src]=\"src\"\r\n/>\r\n<svg  *ngIf=\"(!src) && (!use) && (!!code)\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      [attr.width]=\"width\"\r\n      [attr.height]=\"height || width\"\r\n      [attr.viewBox]=\"viewBox\"\r\n      [innerHtml]=\"iconCode\"\r\n      [ngClass]=\"computedClasses\"\r\n      [cHtmlAttr]=\"attributes\"\r\n      role=\"img\"\r\n      pointer-events=\"none\"\r\n>\r\n  {{titleCode}}\r\n</svg>\r\n<svg *ngIf=\"use\"\r\n     xmlns=\"http://www.w3.org/2000/svg\"\r\n     [attr.width]=\"width\"\r\n     [attr.height]=\"height || width\"\r\n     [ngClass]=\"computedClasses\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     role=\"img\"\r\n     pointer-events=\"none\"\r\n>\r\n  <use [attr.href]=\"use\"></use>\r\n</svg>\r\n",
                styles: [".c-icon{display:inline-block;color:inherit;text-align:center;fill:currentColor}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size){width:1rem;height:1rem;font-size:1rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-2xl{width:2rem;height:2rem;font-size:2rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-3xl{width:3rem;height:3rem;font-size:3rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-4xl{width:4rem;height:4rem;font-size:4rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-5xl{width:5rem;height:5rem;font-size:5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-6xl{width:6rem;height:6rem;font-size:6rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-7xl{width:7rem;height:7rem;font-size:7rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-8xl{width:8rem;height:8rem;font-size:8rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-9xl{width:9rem;height:9rem;font-size:9rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.c-icon-c-s,.c-icon-custom-size{width:auto!important;height:auto!important}"]
            },] }
];
IconComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IconSetService }
];
IconComponent.propDecorators = {
    attributes: [{ type: Input }],
    name: [{ type: Input }],
    content: [{ type: Input }],
    size: [{ type: Input }],
    src: [{ type: Input }],
    title: [{ type: Input }],
    use: [{ type: Input }],
    customClasses: [{ type: Input }],
    viewBox: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};

class HtmlAttributesDirective {
    constructor(renderer, el) {
        this.renderer = renderer;
        this.el = el;
    }
    ngOnInit() {
        const attribs = this.cHtmlAttr;
        for (const attr in attribs) {
            if (attr === 'style' && typeof (attribs[attr]) === 'object') {
                this.setStyle(attribs[attr]);
            }
            else if (attr === 'class') {
                this.addClass(attribs[attr]);
            }
            else {
                this.setAttrib(attr, attribs[attr]);
            }
        }
    }
    setStyle(styles) {
        // tslint:disable-next-line:forin
        for (const style in styles) {
            this.renderer.setStyle(this.el.nativeElement, style, styles[style]);
        }
    }
    addClass(classes) {
        const classArray = (Array.isArray(classes) ? classes : classes.split(' '));
        classArray.filter((element) => element.length > 0).forEach(element => {
            this.renderer.addClass(this.el.nativeElement, element);
        });
    }
    setAttrib(key, value) {
        value !== null ?
            this.renderer.setAttribute(this.el.nativeElement, key, value) :
            this.renderer.removeAttribute(this.el.nativeElement, key);
    }
}
HtmlAttributesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cHtmlAttr]',
                exportAs: 'cHtmlAttr'
            },] }
];
HtmlAttributesDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
HtmlAttributesDirective.propDecorators = {
    cHtmlAttr: [{ type: Input }]
};

class IconModule {
}
IconModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    IconComponent,
                    HtmlAttributesDirective
                ],
                imports: [
                    CommonModule,
                ],
                exports: [
                    IconComponent,
                    HtmlAttributesDirective
                ],
            },] }
];

class IconSetModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('CoreUI IconSetModule is already loaded. Import it in the AppModule only');
        }
    }
    static forRoot() {
        return {
            ngModule: IconSetModule,
            providers: [
                { provide: IconSetService }
            ]
        };
    }
}
IconSetModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                providers: [
                    IconSetService
                ]
            },] }
];
IconSetModule.ctorParameters = () => [
    { type: IconSetModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];

/*
 * Public API Surface of @coreui/icons-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { IconComponent, IconModule, IconSetModule, IconSetService, HtmlAttributesDirective as ɵa };
//# sourceMappingURL=coreui-icons-angular.js.map
