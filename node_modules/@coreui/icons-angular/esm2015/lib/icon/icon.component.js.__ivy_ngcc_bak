import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { IconSetService } from '../icon-set/icon-set.service';
export class IconComponent {
    constructor(sanitizer, iconSet) {
        this.sanitizer = sanitizer;
        this.iconSet = iconSet;
        this.attributes = { role: 'img' };
        this.size = '';
        this.use = '';
    }
    set name(name) {
        this._name = name;
    }
    get name() {
        const nameIsKebabCase = this._name && this._name.includes('-');
        return nameIsKebabCase ? this.toCamelCase(this._name) : this._name;
    }
    set viewBox(viewBox) {
        this._viewBox = viewBox;
    }
    get viewBox() {
        return this._viewBox || `0 0 ${this.scale}`;
    }
    get titleCode() {
        return this.title ? `<title>${this.title}</title>` : '';
    }
    get code() {
        if (this.content) {
            return this.content;
        }
        else if (this.iconSet) {
            return this.iconSet.getIcon(this.name);
        }
        console.warn(`c-icon component: icon name '${this.name}' does not exist for IconSet service. ` +
            `To use icon by 'name' prop you need to add it to IconSet service. \n`, this.name);
        return undefined;
    }
    get iconCode() {
        const code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code;
        return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code);
    }
    get scale() {
        return Array.isArray(this.code) && this.code.length > 1 ? this.code[0] : '64 64';
    }
    get computedSize() {
        const addCustom = !this.size && (this.width || this.height);
        return this.size === 'custom' || addCustom ? 'custom-size' : this.size;
    }
    get computedClasses() {
        const classes = {
            'c-icon': true,
            [`c-icon-${this.computedSize}`]: !!this.computedSize
        };
        return !!this.customClasses ? this.customClasses : classes;
    }
    toCamelCase(str) {
        return str.replace(/([-_][a-z0-9])/ig, ($1) => {
            return $1.toUpperCase().replace('-', '');
        });
    }
}
IconComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-icon',
                template: "<img *ngIf=\"src\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     [attr.alt]=\"title\"\r\n     [ngClass]=\"customClasses\"\r\n     [src]=\"src\"\r\n/>\r\n<svg  *ngIf=\"(!src) && (!use) && (!!code)\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      [attr.width]=\"width\"\r\n      [attr.height]=\"height || width\"\r\n      [attr.viewBox]=\"viewBox\"\r\n      [innerHtml]=\"iconCode\"\r\n      [ngClass]=\"computedClasses\"\r\n      [cHtmlAttr]=\"attributes\"\r\n      role=\"img\"\r\n      pointer-events=\"none\"\r\n>\r\n  {{titleCode}}\r\n</svg>\r\n<svg *ngIf=\"use\"\r\n     xmlns=\"http://www.w3.org/2000/svg\"\r\n     [attr.width]=\"width\"\r\n     [attr.height]=\"height || width\"\r\n     [ngClass]=\"computedClasses\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     role=\"img\"\r\n     pointer-events=\"none\"\r\n>\r\n  <use [attr.href]=\"use\"></use>\r\n</svg>\r\n",
                styles: [".c-icon{display:inline-block;color:inherit;text-align:center;fill:currentColor}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size){width:1rem;height:1rem;font-size:1rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-2xl{width:2rem;height:2rem;font-size:2rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-3xl{width:3rem;height:3rem;font-size:3rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-4xl{width:4rem;height:4rem;font-size:4rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-5xl{width:5rem;height:5rem;font-size:5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-6xl{width:6rem;height:6rem;font-size:6rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-7xl{width:7rem;height:7rem;font-size:7rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-8xl{width:8rem;height:8rem;font-size:8rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-9xl{width:9rem;height:9rem;font-size:9rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.c-icon-c-s,.c-icon-custom-size{width:auto!important;height:auto!important}"]
            },] }
];
IconComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IconSetService }
];
IconComponent.propDecorators = {
    attributes: [{ type: Input }],
    name: [{ type: Input }],
    content: [{ type: Input }],
    size: [{ type: Input }],
    src: [{ type: Input }],
    title: [{ type: Input }],
    use: [{ type: Input }],
    customClasses: [{ type: Input }],
    viewBox: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWkvaWNvbnMtYW5ndWxhci9zcmMvbGliL2ljb24vaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBZSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLFlBQVksRUFBVyxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQU81RCxNQUFNLE9BQU8sYUFBYTtJQXFFeEIsWUFDVSxTQUF1QixFQUN2QixPQUF1QjtRQUR2QixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBaEV4QixlQUFVLEdBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUM7UUFVakMsU0FBSSxHQUF3SCxFQUFFLENBQUM7UUFHL0gsUUFBRyxHQUFHLEVBQUUsQ0FBQztJQW9EZCxDQUFDO0lBaEVMLElBQ0ksSUFBSSxDQUFDLElBQVk7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUNELElBQUksSUFBSTtRQUNOLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3JFLENBQUM7SUFPRCxJQUNJLE9BQU8sQ0FBQyxPQUFlO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFDRCxJQUFJLE9BQU87UUFD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SztxQkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtEb21TYW5pdGl6ZXIsIFNhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHtJY29uU2V0U2VydmljZX0gZnJvbSAnLi4vaWNvbi1zZXQvaWNvbi1zZXQuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2MtaWNvbicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2ljb24uY29tcG9uZW50LnN2ZycsXHJcbiAgc3R5bGVVcmxzOiBbJy4vaWNvbi5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJY29uQ29tcG9uZW50IHtcclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICBwcml2YXRlIF92aWV3Qm94OiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXM6IGFueSA9IHsgcm9sZTogJ2ltZyd9O1xyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IG5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICB9XHJcbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG5hbWVJc0tlYmFiQ2FzZSA9IHRoaXMuX25hbWUgJiYgdGhpcy5fbmFtZS5pbmNsdWRlcygnLScpO1xyXG4gICAgcmV0dXJuIG5hbWVJc0tlYmFiQ2FzZSA/IHRoaXMudG9DYW1lbENhc2UodGhpcy5fbmFtZSkgOiB0aGlzLl9uYW1lO1xyXG4gIH1cclxuICBASW5wdXQoKSBjb250ZW50Pzogc3RyaW5nIHwgc3RyaW5nW107XHJcbiAgQElucHV0KCkgc2l6ZT86ICdjdXN0b20nIHwgJ2N1c3RvbS1zaXplJyB8ICdzbScgfCAnbGcnIHwgJ3hsJyB8ICcyeGwnIHwgJzN4bCcgfCAnNHhsJyB8ICc1eGwnIHwgJzZ4bCcgfCAnN3hsJyB8ICc4eGwnIHwgJzl4bCcgfCAnJyA9ICcnO1xyXG4gIEBJbnB1dCgpIHNyYz86IHN0cmluZztcclxuICBASW5wdXQoKSB0aXRsZT86IHN0cmluZztcclxuICBASW5wdXQoKSB1c2UgPSAnJztcclxuICBASW5wdXQoKSBjdXN0b21DbGFzc2VzPzogc3RyaW5nfHN0cmluZ1tdfFNldDxzdHJpbmc+fHtba2xhc3M6IHN0cmluZ106IGFueX07XHJcbiAgQElucHV0KClcclxuICBzZXQgdmlld0JveCh2aWV3Qm94OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3ZpZXdCb3ggPSB2aWV3Qm94O1xyXG4gIH1cclxuICBnZXQgdmlld0JveCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdCb3ggfHwgYDAgMCAkeyB0aGlzLnNjYWxlIH1gO1xyXG4gIH1cclxuICBASW5wdXQoKSB3aWR0aD87XHJcbiAgQElucHV0KCkgaGVpZ2h0PztcclxuXHJcbiAgZ2V0IHRpdGxlQ29kZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudGl0bGUgPyBgPHRpdGxlPiR7dGhpcy50aXRsZX08L3RpdGxlPmAgOiAnJztcclxuICB9XHJcblxyXG4gIGdldCBjb2RlKCk6IHN0cmluZ1tdIHwgdW5kZWZpbmVkIHwgc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLmNvbnRlbnQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pY29uU2V0KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmljb25TZXQuZ2V0SWNvbih0aGlzLm5hbWUpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS53YXJuKGBjLWljb24gY29tcG9uZW50OiBpY29uIG5hbWUgJyR7dGhpcy5uYW1lfScgZG9lcyBub3QgZXhpc3QgZm9yIEljb25TZXQgc2VydmljZS4gYCArXHJcbiAgICAgIGBUbyB1c2UgaWNvbiBieSAnbmFtZScgcHJvcCB5b3UgbmVlZCB0byBhZGQgaXQgdG8gSWNvblNldCBzZXJ2aWNlLiBcXG5gLFxyXG4gICAgICB0aGlzLm5hbWVcclxuICAgICk7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuICBnZXQgaWNvbkNvZGUoKTogU2FmZUh0bWwge1xyXG4gICAgY29uc3QgY29kZSA9IEFycmF5LmlzQXJyYXkodGhpcy5jb2RlKSA/IHRoaXMuY29kZVsxXSB8fCB0aGlzLmNvZGVbMF0gOiB0aGlzLmNvZGU7XHJcbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwodGhpcy50aXRsZUNvZGUgKyBjb2RlKTtcclxuICB9XHJcblxyXG4gIGdldCBzY2FsZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5jb2RlKSAmJiB0aGlzLmNvZGUubGVuZ3RoID4gMSA/IHRoaXMuY29kZVswXSA6ICc2NCA2NCc7XHJcbiAgfVxyXG5cclxuICBnZXQgY29tcHV0ZWRTaXplKCk6ICdjdXN0b20tc2l6ZScgfCAnc20nIHwgJ2xnJyB8ICd4bCcgfCAnMnhsJyB8ICczeGwnIHwgJzR4bCcgfCAnNXhsJyB8ICc2eGwnIHwgJzd4bCcgfCAnOHhsJyB8ICc5eGwnIHwgJycge1xyXG4gICAgY29uc3QgYWRkQ3VzdG9tID0gIXRoaXMuc2l6ZSAmJiAodGhpcy53aWR0aCB8fCB0aGlzLmhlaWdodCk7XHJcbiAgICByZXR1cm4gdGhpcy5zaXplID09PSAnY3VzdG9tJyB8fCBhZGRDdXN0b20gPyAnY3VzdG9tLXNpemUnIDogdGhpcy5zaXplO1xyXG4gIH1cclxuICBnZXQgY29tcHV0ZWRDbGFzc2VzKCk6IGFueSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0ge1xyXG4gICAgICAnYy1pY29uJzogdHJ1ZSxcclxuICAgICAgW2BjLWljb24tJHt0aGlzLmNvbXB1dGVkU2l6ZX1gXTogISF0aGlzLmNvbXB1dGVkU2l6ZVxyXG4gICAgfTtcclxuICAgIHJldHVybiAhIXRoaXMuY3VzdG9tQ2xhc3NlcyA/IHRoaXMuY3VzdG9tQ2xhc3NlcyA6IGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXHJcbiAgICBwcml2YXRlIGljb25TZXQ6IEljb25TZXRTZXJ2aWNlXHJcbiAgKSB7IH1cclxuXHJcbiAgdG9DYW1lbENhc2Uoc3RyKTogYW55IHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFstX11bYS16MC05XSkvaWcsICgkMSkgPT4ge1xyXG4gICAgICByZXR1cm4gJDEudG9VcHBlckNhc2UoKS5yZXBsYWNlKCctJywgJycpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==