{"version":3,"sources":["../../../projects/coreui/icons-angular/src/lib/icon-set/icon-set.service.ts","../../../projects/coreui/icons-angular/src/lib/icon/icon.component.ts","../../../projects/coreui/icons-angular/src/lib/shared/html-attr.directive.ts","../../../projects/coreui/icons-angular/src/lib/icon/icon.module.ts","../../../projects/coreui/icons-angular/src/lib/icon-set/icon-set.module.ts"],"names":["IconSetService","this","_icons","Object","defineProperty","prototype","iconSet","getIcon","name","icons","console","warn","Injectable","args","providedIn","IconComponent","sanitizer","attributes","role","size","use","_name","includes","toCamelCase","_viewBox","scale","viewBox","title","content","code","Array","isArray","bypassSecurityTrustHtml","titleCode","length","addCustom","width","height","classes","_a","c-icon","computedSize","customClasses","str","replace","$1","toUpperCase","Component","selector","template","DomSanitizer","Input","HtmlAttributesDirective","renderer","el","ngOnInit","attribs","cHtmlAttr","attr","setStyle","addClass","setAttrib","styles","style","nativeElement","_this","split","filter","element","forEach","key","value","setAttribute","removeAttribute","Directive","exportAs","Renderer2","ElementRef","NgModule","declarations","imports","CommonModule","exports","IconSetModule","parentModule","Error","forRoot","ngModule","providers","provide","decorators","type","Optional","SkipSelf"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nexport interface IIconSet {\r\n  [iconName: string]: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IconSetService {\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private _icons: IIconSet = {};\r\n\r\n  constructor() {}\r\n\r\n  set icons(iconSet) {\r\n    this._icons = iconSet;\r\n  }\r\n  get icons(): IIconSet {\r\n    return this._icons;\r\n  }\r\n\r\n  public getIcon(name): string[] {\r\n    const icon = this.icons[name];\r\n    if (!icon) {\r\n      console.warn(`CoreUI WARN: Icon ${name} is not registered in IconService`);\r\n    }\r\n    return this.icons[name];\r\n  }\r\n}\r\n","import { Component, HostBinding, Input } from '@angular/core';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {IconSetService} from '../icon-set/icon-set.service';\r\n\r\n@Component({\r\n  selector: 'c-icon',\r\n  templateUrl: './icon.component.svg',\r\n  styleUrls: ['./icon.component.scss']\r\n})\r\nexport class IconComponent {\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private _name: string;\r\n  // tslint:disable-next-line:variable-name\r\n  private _viewBox: string;\r\n\r\n  @Input() attributes: any = { role: 'img'};\r\n  @Input()\r\n  set name(name: string) {\r\n    this._name = name;\r\n  }\r\n  get name(): string {\r\n    const nameIsKebabCase = this._name && this._name.includes('-');\r\n    return nameIsKebabCase ? this.toCamelCase(this._name) : this._name;\r\n  }\r\n  @Input() content?: string | string[];\r\n  @Input() size?: 'custom' | 'custom-size' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | '8xl' | '9xl' | '' = '';\r\n  @Input() src?: string;\r\n  @Input() title?: string;\r\n  @Input() use = '';\r\n  @Input() customClasses?: string|string[]|Set<string>|{[klass: string]: any};\r\n  @Input()\r\n  set viewBox(viewBox: string) {\r\n    this._viewBox = viewBox;\r\n  }\r\n  get viewBox(): string {\r\n    return this._viewBox || `0 0 ${ this.scale }`;\r\n  }\r\n  @Input() width?;\r\n  @Input() height?;\r\n\r\n  get titleCode(): string {\r\n    return this.title ? `<title>${this.title}</title>` : '';\r\n  }\r\n\r\n  get code(): string[] | undefined | string {\r\n    if (this.content) {\r\n      return this.content;\r\n    } else if (this.iconSet) {\r\n      return this.iconSet.getIcon(this.name);\r\n    }\r\n    console.warn(`c-icon component: icon name '${this.name}' does not exist for IconSet service. ` +\r\n      `To use icon by 'name' prop you need to add it to IconSet service. \\n`,\r\n      this.name\r\n    );\r\n    return undefined;\r\n  }\r\n  get iconCode(): SafeHtml {\r\n    const code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code;\r\n    return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code);\r\n  }\r\n\r\n  get scale(): string {\r\n    return Array.isArray(this.code) && this.code.length > 1 ? this.code[0] : '64 64';\r\n  }\r\n\r\n  get computedSize(): 'custom-size' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | '8xl' | '9xl' | '' {\r\n    const addCustom = !this.size && (this.width || this.height);\r\n    return this.size === 'custom' || addCustom ? 'custom-size' : this.size;\r\n  }\r\n  get computedClasses(): any {\r\n    const classes = {\r\n      'c-icon': true,\r\n      [`c-icon-${this.computedSize}`]: !!this.computedSize\r\n    };\r\n    return !!this.customClasses ? this.customClasses : classes;\r\n  }\r\n\r\n  constructor(\r\n    private sanitizer: DomSanitizer,\r\n    private iconSet: IconSetService\r\n  ) { }\r\n\r\n  toCamelCase(str): any {\r\n    return str.replace(/([-_][a-z0-9])/ig, ($1) => {\r\n      return $1.toUpperCase().replace('-', '');\r\n    });\r\n  }\r\n}\r\n","import {Directive, ElementRef, Input, OnInit, Renderer2} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[cHtmlAttr]',\r\n  exportAs: 'cHtmlAttr'\r\n})\r\nexport class HtmlAttributesDirective implements OnInit {\r\n\r\n  @Input() cHtmlAttr: {[key: string]: any };\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private el: ElementRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const attribs = this.cHtmlAttr;\r\n    for (const attr in attribs) {\r\n      if (attr === 'style' && typeof(attribs[attr]) === 'object' ) {\r\n        this.setStyle(attribs[attr]);\r\n      } else if (attr === 'class') {\r\n        this.addClass(attribs[attr]);\r\n      } else {\r\n        this.setAttrib(attr, attribs[attr]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setStyle(styles): void {\r\n    // tslint:disable-next-line:forin\r\n    for (const style in styles) {\r\n      this.renderer.setStyle(this.el.nativeElement, style, styles[style] );\r\n    }\r\n  }\r\n\r\n  private addClass(classes): void {\r\n    const classArray = (Array.isArray(classes) ? classes : classes.split(' '));\r\n    classArray.filter((element) => element.length > 0).forEach(element => {\r\n      this.renderer.addClass(this.el.nativeElement, element );\r\n    });\r\n  }\r\n\r\n  private setAttrib(key, value): void {\r\n    value !== null ?\r\n      this.renderer.setAttribute(this.el.nativeElement, key, value ) :\r\n      this.renderer.removeAttribute(this.el.nativeElement, key);\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {IconComponent} from './icon.component';\r\nimport { HtmlAttributesDirective } from '../shared/html-attr.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    IconComponent,\r\n    HtmlAttributesDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    IconComponent,\r\n    HtmlAttributesDirective\r\n  ],\r\n})\r\nexport class IconModule {}\r\n","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {IconSetService} from './icon-set.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  providers: [\r\n    IconSetService\r\n  ]\r\n})\r\nexport class IconSetModule {\r\n  constructor(@Optional() @SkipSelf() parentModule?: IconSetModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'CoreUI IconSetModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n\r\n  static forRoot(): ModuleWithProviders<IconSetModule> {\r\n    return {\r\n      ngModule: IconSetModule,\r\n      providers: [\r\n        {provide: IconSetService}\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}