import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { AnimationBuilder, useAnimation } from '@angular/animations';
import classNames from 'classnames';
import { collapseAnimation, expandAnimation } from './collapse.animations';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/animations';
export class CollapseDirective {
    constructor(hostElement, animationBuilder) {
        this.hostElement = hostElement;
        this.animationBuilder = animationBuilder;
        this.duration = '400ms';
        this.transition = 'ease-in-out';
        this.animate = true;
        this.collapseChange = new EventEmitter();
        this._show = false;
        this._animate = this.animate;
        this.host = this.hostElement.nativeElement;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'navbar-collapse': !!this.navbar,
            show: !!this.show,
        });
        return classes;
    }
    ngOnInit() {
        this._show = this.show;
    }
    ngOnDestroy() {
        this.destroyPlayer();
    }
    ngOnChanges(changes) {
        if (changes.show) {
            (!changes.show.firstChange || !changes.show.currentValue) && this.toggle(changes.show.currentValue);
        }
    }
    ngDoCheck() {
        if (this._show !== this.show) {
            this.toggle();
        }
    }
    toggle(show = this.show) {
        this._show = show;
        this.createPlayer(show);
        this.player.play();
    }
    destroyPlayer() {
        if (this.player) {
            this.player.destroy();
        }
    }
    createPlayer(show = this.show) {
        if (this.player) {
            this.destroyPlayer();
        }
        let animationFactory;
        const duration = this._animate ? this.duration : '0ms';
        animationFactory = this.animationBuilder.build(useAnimation(show ? expandAnimation : collapseAnimation, { params: { time: duration, easing: this.transition } }));
        this.player = animationFactory.create(this.host);
        this.player.onStart(() => { this.collapseChange.emit(show ? 'opening' : 'collapsing'); });
        this.player.onDone(() => { this.collapseChange.emit(show ? 'open' : 'collapsed'); });
    }
}
CollapseDirective.ɵfac = function CollapseDirective_Factory(t) { return new (t || CollapseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AnimationBuilder)); };
CollapseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CollapseDirective, selectors: [["", "cCollapse", ""]], hostVars: 2, hostBindings: function CollapseDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { duration: "duration", transition: "transition", animate: "animate", navbar: "navbar", show: "show" }, outputs: { collapseChange: "collapseChange" }, exportAs: ["cCollapse"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
CollapseDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: AnimationBuilder }
];
CollapseDirective.propDecorators = {
    navbar: [{ type: Input }],
    duration: [{ type: Input }],
    transition: [{ type: Input }],
    show: [{ type: Input }],
    animate: [{ type: Input }],
    collapseChange: [{ type: Output }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CollapseDirective, [{
        type: Directive,
        args: [{
                selector: '[cCollapse]',
                exportAs: 'cCollapse'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.AnimationBuilder }]; }, { duration: [{
            type: Input
        }], transition: [{
            type: Input
        }], animate: [{
            type: Input
        }], collapseChange: [{
            type: Output
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], navbar: [{
            type: Input
        }], show: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,