import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { AnimationBuilder, useAnimation } from '@angular/animations';
import classNames from 'classnames';
import { collapseAnimation, expandAnimation } from './collapse.animations';
export class CollapseDirective {
    constructor(hostElement, animationBuilder) {
        this.hostElement = hostElement;
        this.animationBuilder = animationBuilder;
        this.duration = '400ms';
        this.transition = 'ease-in-out';
        this.animate = true;
        this.collapseChange = new EventEmitter();
        this._show = false;
        this._animate = this.animate;
        this.host = this.hostElement.nativeElement;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'navbar-collapse': !!this.navbar,
            show: !!this.show,
        });
        return classes;
    }
    ngOnInit() {
        this._show = this.show;
    }
    ngOnDestroy() {
        this.destroyPlayer();
    }
    ngOnChanges(changes) {
        if (changes.show) {
            (!changes.show.firstChange || !changes.show.currentValue) && this.toggle(changes.show.currentValue);
        }
    }
    ngDoCheck() {
        if (this._show !== this.show) {
            this.toggle();
        }
    }
    toggle(show = this.show) {
        this._show = show;
        this.createPlayer(show);
        this.player.play();
    }
    destroyPlayer() {
        if (this.player) {
            this.player.destroy();
        }
    }
    createPlayer(show = this.show) {
        if (this.player) {
            this.destroyPlayer();
        }
        let animationFactory;
        const duration = this._animate ? this.duration : '0ms';
        animationFactory = this.animationBuilder.build(useAnimation(show ? expandAnimation : collapseAnimation, { params: { time: duration, easing: this.transition } }));
        this.player = animationFactory.create(this.host);
        this.player.onStart(() => { this.collapseChange.emit(show ? 'opening' : 'collapsing'); });
        this.player.onDone(() => { this.collapseChange.emit(show ? 'open' : 'collapsed'); });
    }
}
CollapseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cCollapse]',
                exportAs: 'cCollapse',
            },] }
];
CollapseDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: AnimationBuilder }
];
CollapseDirective.propDecorators = {
    navbar: [{ type: Input }],
    duration: [{ type: Input }],
    transition: [{ type: Input }],
    show: [{ type: Input }],
    animate: [{ type: Input }],
    collapseChange: [{ type: Output }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9jb2xsYXBzZS9jb2xsYXBzZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFBVyxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQWdDLE1BQU0sRUFDdkcsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGdCQUFnQixFQUFtQixZQUFZLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRixPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFFcEMsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGVBQWUsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBTXpFLE1BQU0sT0FBTyxpQkFBaUI7SUE2QjVCLFlBQ1UsV0FBdUIsRUFDdkIsZ0JBQWtDO1FBRGxDLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUE1Qm5DLGFBQVEsR0FBRyxPQUFPLENBQUM7UUFDbkIsZUFBVSxHQUFHLGFBQWEsQ0FBQztRQUUzQixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBRWQsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRTlDLFVBQUssR0FBRyxLQUFLLENBQUM7UUFDdEIsYUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFzQnRCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQWxCRCxJQUNJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQztZQUN6QixpQkFBaUIsRUFBRSxDQUFDLENBQUMsSUFB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InNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLCBEb0NoZWNrLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QW5pbWF0aW9uQnVpbGRlciwgQW5pbWF0aW9uUGxheWVyLCB1c2VBbmltYXRpb259IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbmltcG9ydCB7Y29sbGFwc2VBbmltYXRpb24sIGV4cGFuZEFuaW1hdGlvbn0gZnJvbSAnLi9jb2xsYXBzZS5hbmltYXRpb25zJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2NDb2xsYXBzZV0nLFxyXG4gIGV4cG9ydEFzOiAnY0NvbGxhcHNlJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbGxhcHNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgRG9DaGVjayB7XHJcblxyXG4gIEBJbnB1dCgpIG5hdmJhcjogYm9vbGVhbjtcclxuICBASW5wdXQoKSBkdXJhdGlvbiA9ICc0MDBtcyc7XHJcbiAgQElucHV0KCkgdHJhbnNpdGlvbiA9ICdlYXNlLWluLW91dCc7XHJcbiAgQElucHV0KCkgc2hvdzogYm9vbGVhbjtcclxuICBASW5wdXQoKSBhbmltYXRlID0gdHJ1ZTtcclxuXHJcbiAgQE91dHB1dCgpIGNvbGxhcHNlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gIHByaXZhdGUgX3Nob3cgPSBmYWxzZTtcclxuICBfYW5pbWF0ZSA9IHRoaXMuYW5pbWF0ZTtcclxuXHJcbiAgcHJpdmF0ZSBwbGF5ZXI6IEFuaW1hdGlvblBsYXllcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGhvc3Q6IEhUTUxFbGVtZW50O1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcclxuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoe1xyXG4gICAgICAnbmF2YmFyLWNvbGxhcHNlJzogISF0aGlzLm5hdmJhcixcclxuICAgICAgc2hvdzogISF0aGlzLnNob3csXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBhbmltYXRpb25CdWlsZGVyOiBBbmltYXRpb25CdWlsZGVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLmhvc3QgPSB0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuX3Nob3cgPSB0aGlzLnNob3c7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGVzdHJveVBsYXllcigpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZXMuc2hvdykge1xyXG4gICAgICAoIWNoYW5nZXMuc2hvdy5maXJzdENoYW5nZSB8fCAhY2hhbmdlcy5zaG93LmN1cnJlbnRWYWx1ZSkgJiYgdGhpcy50b2dnbGUoY2hhbmdlcy5zaG93LmN1cnJlbnRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0RvQ2hlY2soKSB7XHJcbiAgICBpZiAodGhpcy5fc2hvdyAhPT0gdGhpcy5zaG93KSB7IHRoaXMudG9nZ2xlKCk7IH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZShzaG93ID0gdGhpcy5zaG93KSB7XHJcbiAgICB0aGlzLl9zaG93ID0gc2hvdztcclxuICAgIHRoaXMuY3JlYXRlUGxheWVyKHNob3cpO1xyXG4gICAgdGhpcy5wbGF5ZXIucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveVBsYXllcigpIHtcclxuICAgIGlmICh0aGlzLnBsYXllcikge1xyXG4gICAgICB0aGlzLnBsYXllci5kZXN0cm95KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQbGF5ZXIoc2hvdyA9IHRoaXMuc2hvdykge1xyXG4gICAgaWYgKHRoaXMucGxheWVyKSB7XHJcbiAgICAgIHRoaXMuZGVzdHJveVBsYXllcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBhbmltYXRpb25GYWN0b3J5O1xyXG5cclxuICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fYW5pbWF0ZSA/IHRoaXMuZHVyYXRpb24gOiAnMG1zJztcclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnYW5pbWF0ZT8nLCB0aGlzLl9hbmltYXRlLCAnc2hvdz8nLCBzaG93KTtcclxuXHJcbiAgICBhbmltYXRpb25GYWN0b3J5ID0gdGhpcy5hbmltYXRpb25CdWlsZGVyLmJ1aWxkKFxyXG4gICAgICB1c2VBbmltYXRpb24oc2hvdyA/IGV4cGFuZEFuaW1hdGlvbiA6IGNvbGxhcHNlQW5pbWF0aW9uLCB7IHBhcmFtczogeyB0aW1lOiBkdXJhdGlvbiwgZWFzaW5nOiB0aGlzLnRyYW5zaXRpb259fSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gaWYoc2hvdykge1xyXG4gICAgLy8gICBhbmltYXRpb25GYWN0b3J5ID0gdGhpcy5hbmltYXRpb25CdWlsZGVyLmJ1aWxkKFxyXG4gICAgLy8gICAgICAgdXNlQW5pbWF0aW9uKGV4cGFuZEFuaW1hdGlvbiwgeyBwYXJhbXM6IHsgdGltZTogZHVyYXRpb24sIGVhc2luZzogdGhpcy50cmFuc2l0aW9ufX0pXHJcbiAgICAvLyAgICAgKTtcclxuICAgIC8vIH0gZWxzZSB7XHJcbiAgICAvLyAgIGFuaW1hdGlvbkZhY3RvcnkgPSB0aGlzLmFuaW1hdGlvbkJ1aWxkZXIuYnVpbGQoXHJcbiAgICAvLyAgICAgICB1c2VBbmltYXRpb24oY29sbGFwc2VBbmltYXRpb24sIHsgcGFyYW1zOiB7IHRpbWU6IGR1cmF0aW9uLCBlYXNpbmc6IHRoaXMudHJhbnNpdGlvbn19KVxyXG4gICAgLy8gICAgICk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgdGhpcy5wbGF5ZXIgPSBhbmltYXRpb25GYWN0b3J5LmNyZWF0ZSh0aGlzLmhvc3QpO1xyXG4gICAgdGhpcy5wbGF5ZXIub25TdGFydCgoKSA9PiB7dGhpcy5jb2xsYXBzZUNoYW5nZS5lbWl0KHNob3cgPyAnb3BlbmluZycgOiAnY29sbGFwc2luZycpOyB9ICk7XHJcbiAgICB0aGlzLnBsYXllci5vbkRvbmUoKCkgPT4ge3RoaXMuY29sbGFwc2VDaGFuZ2UuZW1pdChzaG93ID8gJ29wZW4nIDogJ2NvbGxhcHNlZCcpOyB9ICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==