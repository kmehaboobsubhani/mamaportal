import { Component, HostBinding, Input } from '@angular/core';
import { chkBoolProp } from '../../shared/check-bool-prop';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class FormCheckComponent {
    constructor() { }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        if (this.variant === 'switch') {
            this.custom = true;
        }
        const variantClass = this.custom ? 'custom-control' : 'form-check';
        const isCustom = chkBoolProp(this.custom);
        const classes = {
            'form-check': !isCustom,
            'custom-control': isCustom,
            [`custom-${this.variant}`]: !!this.variant,
            [`${variantClass}-inline`]: chkBoolProp(this.inline),
            disabled: chkBoolProp(this.disabled)
        };
        return classes;
    }
    ngOnInit() {
    }
}
FormCheckComponent.ɵfac = function FormCheckComponent_Factory(t) { return new (t || FormCheckComponent)(); };
FormCheckComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormCheckComponent, selectors: [["c-form-check"]], hostVars: 2, hostBindings: function FormCheckComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { custom: "custom", disabled: "disabled", inline: "inline", variant: "variant" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function FormCheckComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
FormCheckComponent.ctorParameters = () => [];
FormCheckComponent.propDecorators = {
    custom: [{ type: Input }],
    disabled: [{ type: Input }],
    inline: [{ type: Input }],
    variant: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormCheckComponent, [{
        type: Component,
        args: [{
                selector: 'c-form-check',
                template: "<ng-content></ng-content>\n",
                styles: [""]
            }]
    }], function () { return []; }, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], custom: [{
            type: Input
        }], disabled: [{
            type: Input
        }], inline: [{
            type: Input
        }], variant: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jaGVjay5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvZm9ybS9mb3JtLWNoZWNrL2Zvcm0tY2hlY2suY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFPM0QsTUFBTSxPQUFPLGtCQUFrQjtBQUFJLElBK0JqQyxnQkFBZ0IsQ0FBQztBQUNuQixJQXhCRSxJQUNJLFVBQVU7QUFDaEIsUUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFdBQVc7QUFDakIsUUFDSSxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQ25DLFlBQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDekIsU0FBSztBQUNMLFFBQUksTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUN2RSxRQUFJLE1BQU0sUUFBUSxHQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0MsUUFDSSxNQUFNLE9BQU8sR0FBRztBQUNwQixZQUFNLFlBQVksRUFBRSxDQUFDLFFBQVE7QUFDN0IsWUFBTSxnQkFBZ0IsRUFBRSxRQUFRO0FBQ2hDLFlBQU0sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUNoRCxZQUFNLENBQUMsR0FBRyxZQUFZLFNBQVMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzFELFlBQU0sUUFBUSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQzFDLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsSUFBRSxDQUFDO0FBQ0gsSUFHRSxRQUFRO0FBQU0sSUFDZCxDQUFDO0FBQ0g7Z0RBeENDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUUsY0FBYztrQkFDeEIsdUNBQTBDLDhDQUUzQzs7Ozs7eUJBQ0k7QUFBRTtBQUNOO0FBRVEscUJBRE4sS0FBSztBQUFNLHVCQUNYLEtBQUs7QUFBTSxxQkFDWCxLQUFLO0FBQU0sc0JBQ1gsS0FBSztBQUFNLHlCQUdYLFdBQVcsU0FBQyxPQUFPO0FBQ2xCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUErQkEsQUFBQSxBQUFBLEFBdkJBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFDQSxBQUFBLEFBdkNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBjaGtCb29sUHJvcCB9IGZyb20gJy4uLy4uL3NoYXJlZC9jaGVjay1ib29sLXByb3AnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjLWZvcm0tY2hlY2snLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtLWNoZWNrLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9mb3JtLWNoZWNrLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1DaGVja0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpIGN1c3RvbTogYm9vbGVhbjtcclxuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcclxuICBASW5wdXQoKSBpbmxpbmU6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgdmFyaWFudDogJ2NoZWNrYm94JyB8ICdyYWRpbycgfCAnc3dpdGNoJztcclxuXHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxyXG4gIGdldCBnZXRDbGFzc2VzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaG9zdENsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgaG9zdENsYXNzZXMoKSB7XHJcblxyXG4gICAgaWYgKHRoaXMudmFyaWFudCA9PT0gJ3N3aXRjaCcpIHtcclxuICAgICAgdGhpcy5jdXN0b20gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFyaWFudENsYXNzID0gdGhpcy5jdXN0b20gPyAnY3VzdG9tLWNvbnRyb2wnIDogJ2Zvcm0tY2hlY2snO1xyXG4gICAgY29uc3QgaXNDdXN0b20gPSAgY2hrQm9vbFByb3AodGhpcy5jdXN0b20pO1xyXG5cclxuICAgIGNvbnN0IGNsYXNzZXMgPSB7XHJcbiAgICAgICdmb3JtLWNoZWNrJzogIWlzQ3VzdG9tLFxyXG4gICAgICAnY3VzdG9tLWNvbnRyb2wnOiBpc0N1c3RvbSxcclxuICAgICAgW2BjdXN0b20tJHt0aGlzLnZhcmlhbnR9YF06ICEhdGhpcy52YXJpYW50LFxyXG4gICAgICBbYCR7dmFyaWFudENsYXNzfS1pbmxpbmVgXTogY2hrQm9vbFByb3AodGhpcy5pbmxpbmUpLFxyXG4gICAgICBkaXNhYmxlZDogY2hrQm9vbFByb3AodGhpcy5kaXNhYmxlZClcclxuICAgIH07XHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gIH1cclxuXHJcbn1cclxuIl19