import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import { chkBoolProp } from '../../shared/check-bool-prop';
import * as ɵngcc0 from '@angular/core';
export class SelectDirective {
    constructor() {
        this.sizing = '';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const isCustom = chkBoolProp(this.custom);
        const classes = classNames({
            'form-control': !isCustom,
            [`form-control-${this.sizing}`]: !!this.sizing && !isCustom,
            'custom-select': isCustom,
            [`custom-select-${this.sizing}`]: !!this.sizing && isCustom,
            'is-valid': this.valid === true,
            'is-invalid': this.valid === false,
        });
        return classes;
    }
}
SelectDirective.ɵfac = function SelectDirective_Factory(t) { return new (t || SelectDirective)(); };
SelectDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SelectDirective, selectors: [["", "cSelect", ""]], hostVars: 2, hostBindings: function SelectDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { sizing: "sizing", valid: "valid", custom: "custom" } });
SelectDirective.ctorParameters = () => [];
SelectDirective.propDecorators = {
    valid: [{ type: Input }],
    custom: [{ type: Input }],
    sizing: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectDirective, [{
        type: Directive,
        args: [{
                selector: '[cSelect]'
            }]
    }], function () { return []; }, { sizing: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], valid: [{
            type: Input
        }], custom: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9mb3JtL3NlbGVjdC9zZWxlY3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUszRCxNQUFNLE9BQU8sZUFBZTtBQUM1QixJQXdCRTtBQUFpQixRQXJCUixXQUFNLEdBQThCLEVBQUUsQ0FBQztBQUNsRCxJQW9Ca0IsQ0FBQztBQUNuQixJQXBCRSxJQUNJLFVBQVU7QUFDaEIsUUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFdBQVc7QUFDakIsUUFDSSxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLFFBQ0ksTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDO0FBQy9CLFlBQU0sY0FBYyxFQUFFLENBQUMsUUFBUTtBQUMvQixZQUFNLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUTtBQUNqRSxZQUFNLGVBQWUsRUFBRSxRQUFRO0FBQy9CLFlBQU0sQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksUUFBUTtBQUNqRSxZQUFNLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUk7QUFDckMsWUFBTSxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLO0FBQ3hDLFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixJQUFFLENBQUM7QUFDSDs2Q0E1QkMsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRTtFQUFXLGVBQ3RCOzsyRUFDSTtBQUFFO0FBRVU7QUFDUSxvQkFEdEIsS0FBSztBQUFNLHFCQUNYLEtBQUs7QUFBTSxxQkFDWCxLQUFLO0FBQU0seUJBRVgsV0FBVyxTQUFDLE9BQU87QUFDbEI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFkQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUF5QkEsQUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQXFCQSxBQUFBLEFBbkJBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUEzQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCB7IGNoa0Jvb2xQcm9wIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2NoZWNrLWJvb2wtcHJvcCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tjU2VsZWN0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNlbGVjdERpcmVjdGl2ZSB7XHJcblxyXG4gIEBJbnB1dCgpIHZhbGlkOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGN1c3RvbTogYm9vbGVhbjtcclxuICBASW5wdXQoKSBzaXppbmc6ICcnIHwgJ3NtJyB8ICdsZycgfCBzdHJpbmcgPSAnJztcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgZ2V0IGdldENsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ob3N0Q2xhc3NlcztcclxuICB9XHJcblxyXG4gIGdldCBob3N0Q2xhc3NlcygpIHtcclxuXHJcbiAgICBjb25zdCBpc0N1c3RvbSA9IGNoa0Jvb2xQcm9wKHRoaXMuY3VzdG9tKTtcclxuXHJcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyh7XHJcbiAgICAgICdmb3JtLWNvbnRyb2wnOiAhaXNDdXN0b20sXHJcbiAgICAgIFtgZm9ybS1jb250cm9sLSR7dGhpcy5zaXppbmd9YF06ICEhdGhpcy5zaXppbmcgJiYgIWlzQ3VzdG9tLFxyXG4gICAgICAnY3VzdG9tLXNlbGVjdCc6IGlzQ3VzdG9tLFxyXG4gICAgICBbYGN1c3RvbS1zZWxlY3QtJHt0aGlzLnNpemluZ31gXTogISF0aGlzLnNpemluZyAmJiBpc0N1c3RvbSxcclxuICAgICAgJ2lzLXZhbGlkJzogdGhpcy52YWxpZCA9PT0gdHJ1ZSxcclxuICAgICAgJ2lzLWludmFsaWQnOiB0aGlzLnZhbGlkID09PSBmYWxzZSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG59XHJcbiJdfQ==