import { Component, HostBinding, Input } from '@angular/core';
import { chkBoolProp } from '../../shared/check-bool-prop';
export class InputGroupAddonComponent {
    constructor() { }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const addon = chkBoolProp(this.prepend) ? 'prepend' : 'append';
        const classes = {
            [`input-group-${addon}`]: true,
        };
        return classes;
    }
    ngOnInit() { }
}
InputGroupAddonComponent.decorators = [
    { type: Component, args: [{
                template: "<ng-content></ng-content>\n",
                styles: [":host ::ng-deep .btn:not(:hover):not(:focus){box-shadow:none!important}"]
            },] }
];
InputGroupAddonComponent.ctorParameters = () => [];
InputGroupAddonComponent.propDecorators = {
    prepend: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
export class InputGroupPrependComponent extends InputGroupAddonComponent {
    constructor() {
        super(...arguments);
        this.prepend = true;
    }
}
InputGroupPrependComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-input-group-prepend',
                template: "<ng-content></ng-content>\n",
                styles: [":host ::ng-deep .btn:not(:hover):not(:focus){box-shadow:none!important}"]
            },] }
];
export class InputGroupAppendComponent extends InputGroupAddonComponent {
    constructor() {
        super(...arguments);
        this.prepend = false;
    }
}
InputGroupAppendComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-input-group-append',
                template: "<ng-content></ng-content>\n",
                styles: [":host ::ng-deep .btn:not(:hover):not(:focus){box-shadow:none!important}"]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtYWRkb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9mb3JtL2lucHV0LWdyb3VwLWFkZG9uL2lucHV0LWdyb3VwLWFkZG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBTzNELE1BQU0sT0FBTyx3QkFBd0I7SUFnQm5DLGdCQUFlLENBQUM7SUFiaEIsSUFDSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUUvRCxNQUFNLE9BQU8sR0FBRztZQUNkLENBQUMsZUFBZSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUk7U0FDL0IsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFHRCxRQUFRLEtBQVUsQ0FBQzs7O1lBdkJwQixTQUFTLFNBQUM7Z0JBRVQsdUNBQWlEOzthQUVsRDs7OztzQkFFRSxLQUFLO3lCQUVMLFdBQVcsU0FBQyxPQUFPOztBQXVCdEIsTUFBTSxPQUFPLDBCQUEyQixTQUFRLHdCQUF3QjtJQUx4RTs7UUFNRSxZQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLENBQUM7OztZQVBBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyx1Q0FBaUQ7O2FBRWxEOztBQVVELE1BQU0sT0FBTyx5QkFBMEIsU0FBUSx3QkFBd0I7SUFMdkU7O1FBTUUsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUNsQixDQUFDOzs7WUFQQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsdUNBQWlEOzthQUVsRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY2hrQm9vbFByb3AgfSBmcm9tICcuLi8uLi9zaGFyZWQvY2hlY2stYm9vbC1wcm9wJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHNlbGVjdG9yOiAnYy1pbnB1dC1ncm91cC1hZGRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1ncm91cC1hZGRvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lucHV0LWdyb3VwLWFkZG9uLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBBZGRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHByZXBlbmQ6IGJvb2xlYW47XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGdldCBnZXRDbGFzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xuICB9XG5cbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xuICAgIGNvbnN0IGFkZG9uID0gY2hrQm9vbFByb3AodGhpcy5wcmVwZW5kKSA/ICdwcmVwZW5kJyA6ICdhcHBlbmQnO1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgIFtgaW5wdXQtZ3JvdXAtJHthZGRvbn1gXTogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtaW5wdXQtZ3JvdXAtcHJlcGVuZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1ncm91cC1hZGRvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lucHV0LWdyb3VwLWFkZG9uLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBQcmVwZW5kQ29tcG9uZW50IGV4dGVuZHMgSW5wdXRHcm91cEFkZG9uQ29tcG9uZW50IHtcbiAgcHJlcGVuZCA9IHRydWU7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtaW5wdXQtZ3JvdXAtYXBwZW5kJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LWdyb3VwLWFkZG9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtZ3JvdXAtYWRkb24uY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cEFwcGVuZENvbXBvbmVudCBleHRlbmRzIElucHV0R3JvdXBBZGRvbkNvbXBvbmVudCB7XG4gIHByZXBlbmQgPSBmYWxzZTtcbn1cbiJdfQ==