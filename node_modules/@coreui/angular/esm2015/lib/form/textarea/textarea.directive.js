import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import { chkBoolProp } from '../../shared/check-bool-prop';
import * as ɵngcc0 from '@angular/core';
export class TextareaDirective {
    constructor() {
        this.sizing = '';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const isPlainText = this.isPlainText;
        const classes = classNames({
            'form-control': !isPlainText,
            'form-control-plaintext': isPlainText,
            [`form-control-${this.sizing}`]: !!this.sizing,
            'is-valid': this.valid === true,
            'is-invalid': this.valid === false,
        });
        return classes;
    }
    get isPlainText() {
        return chkBoolProp(this.plaintext);
    }
}
TextareaDirective.ɵfac = function TextareaDirective_Factory(t) { return new (t || TextareaDirective)(); };
TextareaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TextareaDirective, selectors: [["", "cTextarea", ""]], hostVars: 2, hostBindings: function TextareaDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { sizing: "sizing", valid: "valid", plaintext: "plaintext" } });
TextareaDirective.propDecorators = {
    valid: [{ type: Input }],
    plaintext: [{ type: Input }],
    sizing: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextareaDirective, [{
        type: Directive,
        args: [{
                selector: '[cTextarea]'
            }]
    }], function () { return []; }, { sizing: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], valid: [{
            type: Input
        }], plaintext: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2Zvcm0vdGV4dGFyZWEvdGV4dGFyZWEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUszRCxNQUFNLE9BQU8saUJBQWlCO0FBQzlCLElBSkE7QUFDRyxRQU1RLFdBQU0sR0FBOEIsRUFBRSxDQUFDO0FBQ2xELElBd0JBLENBQUM7QUFDRCxJQXhCRSxJQUNJLFVBQVU7QUFDaEIsUUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFdBQVc7QUFDakIsUUFDSSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQ3pDLFFBQ0ksTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDO0FBQy9CLFlBQU0sY0FBYyxFQUFFLENBQUMsV0FBVztBQUNsQyxZQUFNLHdCQUF3QixFQUFFLFdBQVc7QUFDM0MsWUFBTSxDQUFDLGdCQUFnQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDcEQsWUFBTSxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJO0FBQ3JDLFlBQU0sWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztBQUN4QyxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFdBQVc7QUFDakIsUUFBSSxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkMsSUFBRSxDQUFDO0FBQ0g7K0NBL0JDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUU7QUFBYSxlQUN4Qjs7aUZBQ0k7QUFBRTtBQUVFLG9CQUFOLEtBQUs7QUFBTSx3QkFDWCxLQUFLO0FBQU0scUJBQ1gsS0FBSztBQUFNLHlCQUVYLFdBQVcsU0FBQyxPQUFPO0FBQ2xCOzs7Ozs7Ozs7Ozs7Ozs7O0FBZEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBeUJBLEFBQUEsQUF2QkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBOUJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgeyBjaGtCb29sUHJvcCB9IGZyb20gJy4uLy4uL3NoYXJlZC9jaGVjay1ib29sLXByb3AnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbY1RleHRhcmVhXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRleHRhcmVhRGlyZWN0aXZlIHtcclxuXHJcbiAgQElucHV0KCkgdmFsaWQ6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgcGxhaW50ZXh0OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHNpemluZzogJycgfCAnc20nIHwgJ2xnJyB8IHN0cmluZyA9ICcnO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcclxuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xyXG5cclxuICAgIGNvbnN0IGlzUGxhaW5UZXh0ID0gdGhpcy5pc1BsYWluVGV4dDtcclxuXHJcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyh7XHJcbiAgICAgICdmb3JtLWNvbnRyb2wnOiAhaXNQbGFpblRleHQsXHJcbiAgICAgICdmb3JtLWNvbnRyb2wtcGxhaW50ZXh0JzogaXNQbGFpblRleHQsXHJcbiAgICAgIFtgZm9ybS1jb250cm9sLSR7dGhpcy5zaXppbmd9YF06ICEhdGhpcy5zaXppbmcsXHJcbiAgICAgICdpcy12YWxpZCc6IHRoaXMudmFsaWQgPT09IHRydWUsXHJcbiAgICAgICdpcy1pbnZhbGlkJzogdGhpcy52YWxpZCA9PT0gZmFsc2UsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzUGxhaW5UZXh0KCkge1xyXG4gICAgcmV0dXJuIGNoa0Jvb2xQcm9wKHRoaXMucGxhaW50ZXh0KTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==