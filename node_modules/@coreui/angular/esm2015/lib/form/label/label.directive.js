import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import { chkBoolProp } from '../../shared/check-bool-prop';
import * as ɵngcc0 from '@angular/core';
export class LabelDirective {
    constructor() {
        this.col = '';
        this.sizing = '';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const isCustom = chkBoolProp(this.custom);
        const classes = classNames({
            'custom-control-label': isCustom,
            'custom-file-label': isCustom && this.variant === 'file',
            'form-check-label': !isCustom && ['checkbox', 'radio', 'switch'].includes(this.variant),
            'sr-only': chkBoolProp(this.hidden),
            'visually-hidden': chkBoolProp(this.hidden),
            'col-form-label': this.col === 'col',
            [`col-form-label-${this.sizing}`]: !!this.sizing && this.col === 'col',
        });
        return classes;
    }
}
LabelDirective.ɵfac = function LabelDirective_Factory(t) { return new (t || LabelDirective)(); };
LabelDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LabelDirective, selectors: [["", "cLabel", ""]], hostVars: 2, hostBindings: function LabelDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { col: ["cLabel", "col"], sizing: "sizing", hidden: "hidden", variant: "variant", custom: "custom" } });
LabelDirective.ctorParameters = () => [];
LabelDirective.propDecorators = {
    col: [{ type: Input, args: ['cLabel',] }],
    hidden: [{ type: Input }],
    variant: [{ type: Input }],
    sizing: [{ type: Input }],
    custom: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LabelDirective, [{
        type: Directive,
        args: [{
                selector: '[cLabel]'
            }]
    }], function () { return []; }, { col: [{
            type: Input,
            args: ['cLabel']
        }], sizing: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], hidden: [{
            type: Input
        }], variant: [{
            type: Input
        }], custom: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2Zvcm0vbGFiZWwvbGFiZWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFFcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUszRCxNQUFNLE9BQU8sY0FBYztBQUUzQixJQTZCRTtBQUFpQixRQTdCQSxRQUFHLEdBQWUsRUFBRSxDQUFDO0FBQ3ZDLFFBRVUsV0FBTSxHQUE4QixFQUFFLENBQUM7QUFDakQsSUF5QmlCLENBQUM7QUFFbkIsSUF6QkUsSUFDSSxVQUFVO0FBQ2YsUUFBRyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDM0IsSUFBQyxDQUFDO0FBRUgsSUFBRSxJQUFJLFdBQVc7QUFFakIsUUFBSSxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTlDLFFBQUksTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QjtBQUNMLFlBQU8sc0JBQXNCLEVBQUUsUUFBUTtBQUN2QyxZQUFPLG1CQUFtQixFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE1BQU07QUFDL0QsWUFBTyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDOUYsWUFBTyxTQUFTLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDMUMsWUFBTyxpQkFBaUIsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNsRCxZQUFPLGdCQUFnQixFQUFFLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSztBQUMzQyxZQUFPLENBQUMsa0JBQWtCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSztBQUM3RSxTQUFNLENBQ0YsQ0FBQztBQUNMLFFBQUcsT0FBTyxPQUFPLENBQUM7QUFDbEIsSUFBQyxDQUFDO0FBRUg7NENBbENDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUU7R0FBVSxlQUNyQjs7eUhBQ0s7QUFBRTtBQUVZO0FBQ04sa0JBRFgsS0FBSyxTQUFDLFFBQVE7QUFBUSxxQkFDdEIsS0FBSztBQUFNLHNCQUNYLEtBQUs7QUFBTSxxQkFDWCxLQUFLO0FBQU0scUJBQ1gsS0FBSztBQUFNLHlCQUVYLFdBQVcsU0FBQyxPQUFPO0FBQ2pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBK0JBLEFBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBMEJBLEFBQUEsQUF2QkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBaENBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHsgY2hrQm9vbFByb3AgfSBmcm9tICcuLi8uLi9zaGFyZWQvY2hlY2stYm9vbC1wcm9wJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NMYWJlbF0nXG59KVxuZXhwb3J0IGNsYXNzIExhYmVsRGlyZWN0aXZlIHtcblxuICBASW5wdXQoJ2NMYWJlbCcpIGNvbDogJ2NvbCcgfCAnJyA9ICcnO1xuICBASW5wdXQoKSBoaWRkZW46IGJvb2xlYW47XG4gIEBJbnB1dCgpIHZhcmlhbnQ6ICdmaWxlJyB8ICdjaGVja2JveCcgfCAncmFkaW8nIHwgJ3N3aXRjaCcgO1xuICBASW5wdXQoKSBzaXppbmc6ICcnIHwgJ3NtJyB8ICdsZycgfCBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgY3VzdG9tOiBib29sZWFuO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcbiAgICByZXR1cm4gdGhpcy5ob3N0Q2xhc3NlcztcbiAgfVxuXG4gIGdldCBob3N0Q2xhc3NlcygpIHtcblxuICAgIGNvbnN0IGlzQ3VzdG9tID0gY2hrQm9vbFByb3AodGhpcy5jdXN0b20pO1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoXG4gICAgICB7XG4gICAgICAgICdjdXN0b20tY29udHJvbC1sYWJlbCc6IGlzQ3VzdG9tLFxuICAgICAgICAnY3VzdG9tLWZpbGUtbGFiZWwnOiBpc0N1c3RvbSAmJiB0aGlzLnZhcmlhbnQgPT09ICdmaWxlJyxcbiAgICAgICAgJ2Zvcm0tY2hlY2stbGFiZWwnOiAhaXNDdXN0b20gJiYgWydjaGVja2JveCcsICdyYWRpbycsICdzd2l0Y2gnXS5pbmNsdWRlcyh0aGlzLnZhcmlhbnQpLFxuICAgICAgICAnc3Itb25seSc6IGNoa0Jvb2xQcm9wKHRoaXMuaGlkZGVuKSxcbiAgICAgICAgJ3Zpc3VhbGx5LWhpZGRlbic6IGNoa0Jvb2xQcm9wKHRoaXMuaGlkZGVuKSxcbiAgICAgICAgJ2NvbC1mb3JtLWxhYmVsJzogdGhpcy5jb2wgPT09ICdjb2wnLFxuICAgICAgICBbYGNvbC1mb3JtLWxhYmVsLSR7dGhpcy5zaXppbmd9YF06ICEhdGhpcy5zaXppbmcgJiYgdGhpcy5jb2wgPT09ICdjb2wnLFxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxufVxuIl19