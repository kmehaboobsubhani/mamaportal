import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import { chkBoolProp } from '../../shared/check-bool-prop';
export class InputDirective {
    constructor(hostElement) {
        this.hostElement = hostElement;
        this.sizing = '';
        this.type = 'text';
        this.host = this.hostElement.nativeElement;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const isPlainText = this.isPlainText;
        const isCustom = chkBoolProp(this.custom);
        const classes = classNames({
            'form-control': !isPlainText && this.isFormControl,
            'form-control-plaintext': isPlainText,
            'form-control-range': this.type === 'range',
            'form-control-file': this.type === 'file' && !isCustom,
            'custom-file-input': this.type === 'file' && isCustom,
            'form-check-input': this.isFormCheck && !isCustom,
            'custom-control-input': this.isFormCheck && isCustom,
            [`form-control-${this.sizing}`]: !!this.sizing,
            'is-valid': this.valid === true,
            'is-invalid': this.valid === false,
        });
        return classes;
    }
    get isPlainText() {
        return chkBoolProp(this.plaintext);
    }
    get isFormControl() {
        const nonTextControls = ['range', 'checkbox', 'radio', 'file'];
        return !nonTextControls.includes(this.type);
    }
    get isFormCheck() {
        const formCheck = ['checkbox', 'radio'];
        return formCheck.includes(this.type);
    }
    ngOnInit() { }
    get attributes() {
        return this.host.getAttributeNames();
    }
    get isReadonly() {
        return this.host.getAttribute('readonly') != null;
    }
    get isDisabled() {
        return this.host.getAttribute('disabled') != null;
    }
}
InputDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cInput]',
            },] }
];
InputDirective.ctorParameters = () => [
    { type: ElementRef }
];
InputDirective.propDecorators = {
    valid: [{ type: Input }],
    plaintext: [{ type: Input }],
    sizing: [{ type: Input }],
    custom: [{ type: Input }],
    type: [{ type: HostBinding, args: ['type',] }, { type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9mb3JtL2lucHV0L2lucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUE4QjNELE1BQU0sT0FBTyxjQUFjO0lBbUR6QixZQUNVLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBOUN4QixXQUFNLEdBQThCLEVBQUUsQ0FBQztRQUl2QyxTQUFJLEdBQWUsTUFBTSxDQUFDO1FBNENqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBQzdDLENBQUM7SUEzQ0QsSUFDSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFFYixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3JDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUMsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDO1lBQ3pCLGNBQWMsRUFBRSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsYUFBYTtZQUNsRCx3QkFBd0IsRUFBRSxXQUFXO1lBQ3JDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTztZQUMzQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLFFBQVE7WUFDdEQsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLElBQUksUUFBUTtZQUNyRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsV0FBVyxJQUFLLENBQUMsUUFBUTtZQUNsRCxzQkFBc0IsRUFBRSxJQUFJLENBQUMsV0FBVyxJQUFLLFFBQVE7WUFDckQsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQzlDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUk7WUFDL0IsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztTQUNuQyxDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELE9BQU8sQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsTUFBTSxTQUFTLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDeEMsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBUUQsUUFBUSxLQUFJLENBQUM7SUFFYixJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDcEQsQ0FBQztJQUNELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ3BELENBQUM7OztZQXZFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7YUFDckI7OztZQS9CbUIsVUFBVTs7O29CQW9DM0IsS0FBSzt3QkFDTCxLQUFLO3FCQUNMLEtBQUs7cUJBQ0wsS0FBSzttQkFFTCxXQUFXLFNBQUMsTUFBTSxjQUNsQixLQUFLO3lCQUVMLFdBQVcsU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IHsgY2hrQm9vbFByb3AgfSBmcm9tICcuLi8uLi9zaGFyZWQvY2hlY2stYm9vbC1wcm9wJztcclxuXHJcbmV4cG9ydCB0eXBlIFRJbnB1dFR5cGUgPVxyXG4gIHwgJ2J1dHRvbidcclxuICB8ICdjb2xvcidcclxuICB8ICdkYXRlJ1xyXG4gIHwgJ2RhdGV0aW1lJ1xyXG4gIHwgJ2RhdGV0aW1lLWxvY2FsJ1xyXG4gIHwgJ2VtYWlsJ1xyXG4gIHwgJ2ZpbGUnXHJcbiAgfCAnaGlkZGVuJ1xyXG4gIHwgJ2ltYWdlJ1xyXG4gIHwgJ21vbnRoJ1xyXG4gIHwgJ251bWJlcidcclxuICB8ICdwYXNzd29yZCdcclxuICB8ICdyYW5nZSdcclxuICB8ICdyZXNldCdcclxuICB8ICdzZWFyY2gnXHJcbiAgfCAnc3VibWl0J1xyXG4gIHwgJ3RlbCdcclxuICB8ICd0ZXh0J1xyXG4gIHwgJ3RpbWUnXHJcbiAgfCAndXJsJ1xyXG4gIHwgJ3dlZWsnXHJcbiAgfCAnY2hlY2tib3gnXHJcbiAgfCAncmFkaW8nO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbY0lucHV0XScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbnB1dERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIHByaXZhdGUgaG9zdDogRWxlbWVudDtcclxuXHJcbiAgQElucHV0KCkgdmFsaWQ6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgcGxhaW50ZXh0OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHNpemluZzogJycgfCAnc20nIHwgJ2xnJyB8IHN0cmluZyA9ICcnO1xyXG4gIEBJbnB1dCgpIGN1c3RvbTogYm9vbGVhbjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCd0eXBlJylcclxuICBASW5wdXQoKSB0eXBlOiBUSW5wdXRUeXBlID0gJ3RleHQnO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcclxuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xyXG5cclxuICAgIGNvbnN0IGlzUGxhaW5UZXh0ID0gdGhpcy5pc1BsYWluVGV4dDtcclxuICAgIGNvbnN0IGlzQ3VzdG9tID0gY2hrQm9vbFByb3AodGhpcy5jdXN0b20pO1xyXG5cclxuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHtcclxuICAgICAgJ2Zvcm0tY29udHJvbCc6ICFpc1BsYWluVGV4dCAmJiB0aGlzLmlzRm9ybUNvbnRyb2wsXHJcbiAgICAgICdmb3JtLWNvbnRyb2wtcGxhaW50ZXh0JzogaXNQbGFpblRleHQsXHJcbiAgICAgICdmb3JtLWNvbnRyb2wtcmFuZ2UnOiB0aGlzLnR5cGUgPT09ICdyYW5nZScsXHJcbiAgICAgICdmb3JtLWNvbnRyb2wtZmlsZSc6IHRoaXMudHlwZSA9PT0gJ2ZpbGUnICYmICFpc0N1c3RvbSxcclxuICAgICAgJ2N1c3RvbS1maWxlLWlucHV0JzogdGhpcy50eXBlID09PSAnZmlsZScgJiYgaXNDdXN0b20sXHJcbiAgICAgICdmb3JtLWNoZWNrLWlucHV0JzogdGhpcy5pc0Zvcm1DaGVjayAgJiYgIWlzQ3VzdG9tLFxyXG4gICAgICAnY3VzdG9tLWNvbnRyb2wtaW5wdXQnOiB0aGlzLmlzRm9ybUNoZWNrICAmJiBpc0N1c3RvbSxcclxuICAgICAgW2Bmb3JtLWNvbnRyb2wtJHt0aGlzLnNpemluZ31gXTogISF0aGlzLnNpemluZyxcclxuICAgICAgJ2lzLXZhbGlkJzogdGhpcy52YWxpZCA9PT0gdHJ1ZSxcclxuICAgICAgJ2lzLWludmFsaWQnOiB0aGlzLnZhbGlkID09PSBmYWxzZSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgaXNQbGFpblRleHQoKSB7XHJcbiAgICByZXR1cm4gY2hrQm9vbFByb3AodGhpcy5wbGFpbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzRm9ybUNvbnRyb2woKSB7XHJcbiAgICBjb25zdCBub25UZXh0Q29udHJvbHMgPSBbJ3JhbmdlJywgJ2NoZWNrYm94JywgJ3JhZGlvJywgJ2ZpbGUnXTtcclxuICAgIHJldHVybiAhbm9uVGV4dENvbnRyb2xzLmluY2x1ZGVzKHRoaXMudHlwZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgaXNGb3JtQ2hlY2soKSB7XHJcbiAgICBjb25zdCBmb3JtQ2hlY2sgPSBbJ2NoZWNrYm94JywgJ3JhZGlvJ107XHJcbiAgICByZXR1cm4gZm9ybUNoZWNrLmluY2x1ZGVzKHRoaXMudHlwZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsXHJcbiAgKSB7XHJcbiAgICB0aGlzLmhvc3QgPSB0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHt9XHJcblxyXG4gIGdldCBhdHRyaWJ1dGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaG9zdC5nZXRBdHRyaWJ1dGVOYW1lcygpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzUmVhZG9ubHkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ob3N0LmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSAhPSBudWxsO1xyXG4gIH1cclxuICBnZXQgaXNEaXNhYmxlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmhvc3QuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpICE9IG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==