import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import { chkBoolProp } from '../../shared/check-bool-prop';
import * as ɵngcc0 from '@angular/core';
export class InputDirective {
    constructor(hostElement) {
        this.hostElement = hostElement;
        this.sizing = '';
        this.type = 'text';
        this.host = this.hostElement.nativeElement;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const isPlainText = this.isPlainText;
        const isCustom = chkBoolProp(this.custom);
        const classes = classNames({
            'form-control': !isPlainText && this.isFormControl,
            'form-control-plaintext': isPlainText,
            'form-control-range': this.type === 'range',
            'form-control-file': this.type === 'file' && !isCustom,
            'custom-file-input': this.type === 'file' && isCustom,
            'form-check-input': this.isFormCheck && !isCustom,
            'custom-control-input': this.isFormCheck && isCustom,
            [`form-control-${this.sizing}`]: !!this.sizing,
            'is-valid': this.valid === true,
            'is-invalid': this.valid === false,
        });
        return classes;
    }
    get isPlainText() {
        return chkBoolProp(this.plaintext);
    }
    get isFormControl() {
        const nonTextControls = ['range', 'checkbox', 'radio', 'file'];
        return !nonTextControls.includes(this.type);
    }
    get isFormCheck() {
        const formCheck = ['checkbox', 'radio'];
        return formCheck.includes(this.type);
    }
    ngOnInit() { }
    get attributes() {
        return this.host.getAttributeNames();
    }
    get isReadonly() {
        return this.host.getAttribute('readonly') != null;
    }
    get isDisabled() {
        return this.host.getAttribute('disabled') != null;
    }
}
InputDirective.ɵfac = function InputDirective_Factory(t) { return new (t || InputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
InputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InputDirective, selectors: [["", "cInput", ""]], hostVars: 3, hostBindings: function InputDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("type", ctx.type);
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { sizing: "sizing", type: "type", valid: "valid", plaintext: "plaintext", custom: "custom" } });
InputDirective.ctorParameters = () => [
    { type: ElementRef }
];
InputDirective.propDecorators = {
    valid: [{ type: Input }],
    plaintext: [{ type: Input }],
    sizing: [{ type: Input }],
    custom: [{ type: Input }],
    type: [{ type: HostBinding, args: ['type',] }, { type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputDirective, [{
        type: Directive,
        args: [{
                selector: '[cInput]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { sizing: [{
            type: Input
        }], type: [{
            type: HostBinding,
            args: ['type']
        }, {
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], valid: [{
            type: Input
        }], plaintext: [{
            type: Input
        }], custom: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,