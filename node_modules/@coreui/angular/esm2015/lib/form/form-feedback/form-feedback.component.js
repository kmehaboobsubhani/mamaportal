import { Component, HostBinding, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class FormFeedbackComponent {
    constructor() { }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const validMode = this.tooltip ? 'tooltip' : 'feedback';
        const classes = {
            [`valid-${validMode}`]: this.valid === true,
            [`invalid-${validMode}`]: this.valid !== true,
        };
        return classes;
    }
}
FormFeedbackComponent.ɵfac = function FormFeedbackComponent_Factory(t) { return new (t || FormFeedbackComponent)(); };
FormFeedbackComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormFeedbackComponent, selectors: [["c-form-feedback"]], hostVars: 2, hostBindings: function FormFeedbackComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { valid: "valid", tooltip: "tooltip" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function FormFeedbackComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
FormFeedbackComponent.ctorParameters = () => [];
FormFeedbackComponent.propDecorators = {
    valid: [{ type: Input }],
    tooltip: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormFeedbackComponent, [{
        type: Component,
        args: [{
                selector: 'c-form-feedback',
                template: "<ng-content></ng-content>\n",
                styles: [""]
            }]
    }], function () { return []; }, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], valid: [{
            type: Input
        }], tooltip: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1mZWVkYmFjay5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvZm9ybS9mb3JtLWZlZWRiYWNrL2Zvcm0tZmVlZGJhY2suY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQU85RCxNQUFNLE9BQU8scUJBQXFCO0FBQ2xDLElBb0JFLGdCQUFnQixDQUFDO0FBQ25CLElBakJFLElBQ0ksVUFBVTtBQUNoQixRQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksV0FBVztBQUNqQixRQUNJLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQzVELFFBQ0ksTUFBTSxPQUFPLEdBQUc7QUFDcEIsWUFBTSxDQUFDLFNBQVMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUk7QUFDakQsWUFBTSxDQUFDLFdBQVcsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUk7QUFDbkQsU0FBSyxDQUFDO0FBQ04sUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixJQUFFLENBQUM7QUFDSDttREF6QkMsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSxpQkFBaUI7ZUFDM0IsdUNBQTZDLDhDQUU5Qzs7Ozs7eUJBQ0k7QUFBRTtBQUVVO0FBRWhCLG9CQUZFLEtBQUs7QUFBTSxzQkFDWCxLQUFLO0FBQU0seUJBRVgsV0FBVyxTQUFDLE9BQU87QUFDbEI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQXFCQSxBQUFBLEFBQUEsQUFoQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBeEJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2MtZm9ybS1mZWVkYmFjaycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0tZmVlZGJhY2suY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2Zvcm0tZmVlZGJhY2suY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRm9ybUZlZWRiYWNrQ29tcG9uZW50IHtcclxuXHJcbiAgQElucHV0KCkgdmFsaWQ6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgdG9vbHRpcDogYm9vbGVhbjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgZ2V0IGdldENsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ob3N0Q2xhc3NlcztcclxuICB9XHJcblxyXG4gIGdldCBob3N0Q2xhc3NlcygpIHtcclxuXHJcbiAgICBjb25zdCB2YWxpZE1vZGUgPSB0aGlzLnRvb2x0aXAgPyAndG9vbHRpcCcgOiAnZmVlZGJhY2snO1xyXG5cclxuICAgIGNvbnN0IGNsYXNzZXMgPSB7XHJcbiAgICAgIFtgdmFsaWQtJHt2YWxpZE1vZGV9YF06IHRoaXMudmFsaWQgPT09IHRydWUsXHJcbiAgICAgIFtgaW52YWxpZC0ke3ZhbGlkTW9kZX1gXTogdGhpcy52YWxpZCAhPT0gdHJ1ZSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG59XHJcbiJdfQ==