import { Component, HostBinding, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class FormTextComponent {
    constructor() {
        this.tag = 'small';
        this.color = 'muted';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = {
            'form-text': true,
            [`${this.tag}`]: true,
            [`text-${this.color}`]: !!this.color,
        };
        return classes;
    }
}
FormTextComponent.ɵfac = function FormTextComponent_Factory(t) { return new (t || FormTextComponent)(); };
FormTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormTextComponent, selectors: [["c-form-text"]], hostVars: 2, hostBindings: function FormTextComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { tag: "tag", color: "color" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function FormTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
FormTextComponent.ctorParameters = () => [];
FormTextComponent.propDecorators = {
    tag: [{ type: Input }],
    color: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormTextComponent, [{
        type: Component,
        args: [{
                selector: 'c-form-text',
                template: "<ng-content></ng-content>\n",
                styles: [""]
            }]
    }], function () { return []; }, { tag: [{
            type: Input
        }], color: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9mb3JtL2Zvcm0tdGV4dC9mb3JtLXRleHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQU85RCxNQUFNLE9BQU8saUJBQWlCO0FBQzdCLElBaUJDO0FBQ0YsUUFsQlcsUUFBRyxHQUFHLE9BQU8sQ0FBQztBQUN4QixRQUFVLFVBQUssR0FBRyxPQUFPLENBQUM7QUFFM0IsSUFjaUIsQ0FBQztBQUNqQixJQWZDLElBQ0ksVUFBVTtBQUNmLFFBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzNCLElBQUMsQ0FBQztBQUVILElBQUUsSUFBSSxXQUFXO0FBQ2hCLFFBQUcsTUFBTSxPQUFPLEdBQUc7QUFDbkIsWUFBSyxXQUFXLEVBQUUsSUFBSTtBQUN0QixZQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJO0FBQzFCLFlBQUssQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztBQUN6QyxTQUFJLENBQUM7QUFDTCxRQUFHLE9BQU8sT0FBTyxDQUFDO0FBQ2xCLElBQUMsQ0FBQztBQUVIOytDQXZCQyxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFO0FBQWEsbUJBQ3ZCLHVDQUF5Qyw4Q0FFMUM7Ozs7O3lCQUNLO0FBQUU7QUFDYTtBQUdqQixrQkFIRCxLQUFLO0FBQU0sb0JBQ1gsS0FBSztBQUFNLHlCQUVYLFdBQVcsU0FBQyxPQUFPO0FBQ2pCOzs7Ozs7Ozs7Ozs7Ozs7O0FBWkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFrQkEsQUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFnQkEsQUFBQSxBQWRBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXJCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLWZvcm0tdGV4dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtLXRleHQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9mb3JtLXRleHQuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybVRleHRDb21wb25lbnQge1xuICBASW5wdXQoKSB0YWcgPSAnc21hbGwnO1xuICBASW5wdXQoKSBjb2xvciA9ICdtdXRlZCc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGdldCBnZXRDbGFzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xuICB9XG5cbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICAnZm9ybS10ZXh0JzogdHJ1ZSxcbiAgICAgIFtgJHt0aGlzLnRhZ31gXTogdHJ1ZSxcbiAgICAgIFtgdGV4dC0ke3RoaXMuY29sb3J9YF06ICEhdGhpcy5jb2xvcixcbiAgICB9O1xuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7fVxufVxuIl19