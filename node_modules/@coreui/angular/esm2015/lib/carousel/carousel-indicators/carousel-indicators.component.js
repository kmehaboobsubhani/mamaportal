import { Component } from '@angular/core';
import { CarouselState } from '../carousel-state';
import { CarouselService } from '../carousel.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../carousel.service';
import * as ɵngcc2 from '../carousel-state';
import * as ɵngcc3 from '@angular/common';

const _c0 = function (a0) { return { active: a0 }; };
function CarouselIndicatorsComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "li", 2);
    ɵngcc0.ɵɵlistener("click", function CarouselIndicatorsComponent_ng_container_1_Template_li_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); const i_r2 = ctx.index; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onClick(i_r2); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.active === i_r2));
} }
export class CarouselIndicatorsComponent {
    constructor(carouselService, carouselState) {
        this.carouselService = carouselService;
        this.carouselState = carouselState;
        this.items = [];
        this.active = 0;
    }
    ngOnInit() {
        this.carouselStateSubscribe();
    }
    ngOnDestroy() {
        this.carouselStateSubscribe(false);
    }
    onClick(index) {
        if (index !== this.active) {
            const direction = index < this.active ? 'prev' : 'next';
            this.carouselState.state = { direction, activeItemIndex: index };
        }
    }
    carouselStateSubscribe(subscribe = true) {
        if (subscribe) {
            this.carouselIndexSubscription = this.carouselService.carouselIndex$.subscribe((nextIndex) => {
                var _a, _b, _c;
                this.items = (_c = (_b = (_a = this.carouselState) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.items) === null || _c === void 0 ? void 0 : _c.map(item => item.index);
                if ('active' in nextIndex) {
                    this.active = nextIndex.active;
                }
            });
        }
        else {
            this.carouselIndexSubscription.unsubscribe();
        }
    }
}
CarouselIndicatorsComponent.ɵfac = function CarouselIndicatorsComponent_Factory(t) { return new (t || CarouselIndicatorsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CarouselService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.CarouselState)); };
CarouselIndicatorsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CarouselIndicatorsComponent, selectors: [["c-carousel-indicators"]], decls: 2, vars: 1, consts: [[1, "carousel-indicators"], [4, "ngFor", "ngForOf"], [3, "click"]], template: function CarouselIndicatorsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ol", 0);
        ɵngcc0.ɵɵtemplate(1, CarouselIndicatorsComponent_ng_container_1_Template, 2, 4, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items);
    } }, directives: [ɵngcc3.NgForOf], styles: [""] });
CarouselIndicatorsComponent.ctorParameters = () => [
    { type: CarouselService },
    { type: CarouselState }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CarouselIndicatorsComponent, [{
        type: Component,
        args: [{
                selector: 'c-carousel-indicators',
                template: "<ol class=\"carousel-indicators\">\n  <ng-container *ngFor=\"let item of items; let i=index\">\n    <li (click)=\"onClick(i)\" [class]=\"{active: active === i}\"></li>\n  </ng-container>\n</ol>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.CarouselService }, { type: ɵngcc2.CarouselState }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtaW5kaWNhdG9ycy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvY2Fyb3VzZWwvY2Fyb3VzZWwtaW5kaWNhdG9ycy9jYXJvdXNlbC1pbmRpY2F0b3JzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU90RCxNQUFNLE9BQU8sMkJBQTJCO0FBQUksSUFNMUMsWUFDVSxlQUFnQyxFQUNoQyxhQUE0QjtBQUNwQyxRQUZRLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtBQUM1QyxRQUFZLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQ3ZDLFFBUkMsVUFBSyxHQUFHLEVBQUUsQ0FBQztBQUNaLFFBQUMsV0FBTSxHQUFHLENBQUMsQ0FBQztBQUViLElBS0ssQ0FBQztBQUVOLElBQUUsUUFBUTtBQUFNLFFBQ1osSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDakMsSUFBQyxDQUFDO0FBRUgsSUFBRSxXQUFXO0FBQ1osUUFBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEMsSUFBQyxDQUFDO0FBRUgsSUFBRSxPQUFPLENBQUMsS0FBSztBQUNkLFFBQUcsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUM5QixZQUFLLE1BQU0sU0FBUyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUM3RCxZQUFLLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsU0FBUyxFQUFHLGVBQWUsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUN2RSxTQUFJO0FBQ0osSUFBQyxDQUFDO0FBRUgsSUFBVSxzQkFBc0IsQ0FBQyxZQUFxQixJQUFJO0FBQ3pELFFBQUcsSUFBSSxTQUFTLEVBQUU7QUFDbEIsWUFBSyxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDbEc7QUFBaUMsZ0JBQTFCLElBQUksQ0FBQyxLQUFLLHFCQUFHLElBQUksQ0FBQyxhQUFhLDBDQUFFLEtBQUssMENBQUUsS0FBSywwQ0FBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUUsZ0JBQU8sSUFBSSxRQUFRLElBQUksU0FBUyxFQUFFO0FBQ2xDLG9CQUFTLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUN4QyxpQkFBUTtBQUNSLFlBQUssQ0FBQyxDQUFDLENBQUM7QUFDUixTQUFJO0FBQUUsYUFBSTtBQUNWLFlBQUssSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2xELFNBQUk7QUFDSixJQUFDLENBQUM7QUFDRjt5REEzQ0EsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSx1QkFBdUIsbUJBQ2pDO3dIQUFtRCw4Q0FFcEQ7Ozs7Ozs7dURBQ0s7QUFBRTtBQUFzRCxZQVByRCxlQUFlO0FBQUssWUFEcEIsYUFBYTtBQUFJOzs7Ozs7Ozs7QUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQTFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQU5BLEFBQUEsQUFEQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDYXJvdXNlbFN0YXRlIH0gZnJvbSAnLi4vY2Fyb3VzZWwtc3RhdGUnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxTZXJ2aWNlIH0gZnJvbSAnLi4vY2Fyb3VzZWwuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJvdXNlbC1pbmRpY2F0b3JzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY2Fyb3VzZWwtaW5kaWNhdG9ycy5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBDYXJvdXNlbEluZGljYXRvcnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIGl0ZW1zID0gW107XG4gIGFjdGl2ZSA9IDA7XG5cbiAgcHJpdmF0ZSBjYXJvdXNlbEluZGV4U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjYXJvdXNlbFNlcnZpY2U6IENhcm91c2VsU2VydmljZSxcbiAgICBwcml2YXRlIGNhcm91c2VsU3RhdGU6IENhcm91c2VsU3RhdGVcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY2Fyb3VzZWxTdGF0ZVN1YnNjcmliZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5jYXJvdXNlbFN0YXRlU3Vic2NyaWJlKGZhbHNlKTtcbiAgfVxuXG4gIG9uQ2xpY2soaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggIT09IHRoaXMuYWN0aXZlKSB7XG4gICAgICBjb25zdCBkaXJlY3Rpb24gPSBpbmRleCA8IHRoaXMuYWN0aXZlID8gJ3ByZXYnIDogJ25leHQnO1xuICAgICAgdGhpcy5jYXJvdXNlbFN0YXRlLnN0YXRlID0geyBkaXJlY3Rpb24sICBhY3RpdmVJdGVtSW5kZXg6IGluZGV4IH07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjYXJvdXNlbFN0YXRlU3Vic2NyaWJlKHN1YnNjcmliZTogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLmNhcm91c2VsSW5kZXhTdWJzY3JpcHRpb24gPSB0aGlzLmNhcm91c2VsU2VydmljZS5jYXJvdXNlbEluZGV4JC5zdWJzY3JpYmUoKG5leHRJbmRleCkgPT4ge1xuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5jYXJvdXNlbFN0YXRlPy5zdGF0ZT8uaXRlbXM/Lm1hcChpdGVtID0+IGl0ZW0uaW5kZXgpO1xuICAgICAgICBpZiAoJ2FjdGl2ZScgaW4gbmV4dEluZGV4KSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmUgPSBuZXh0SW5kZXguYWN0aXZlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYXJvdXNlbEluZGV4U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=