import { Injectable } from '@angular/core';
import { CarouselService } from './carousel.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './carousel.service';
export class CarouselState {
    constructor(carouselService) {
        this.carouselService = carouselService;
        this._state = {
            activeItemIndex: -1,
            animate: true,
            items: [],
            direction: 'next',
        };
    }
    get state() {
        return this._state;
    }
    set state(state) {
        const prevState = Object.assign({}, this._state);
        const nextState = Object.assign(Object.assign({}, this._state), state);
        this._state = nextState;
        if (prevState.activeItemIndex !== nextState.activeItemIndex) {
            this.carouselService.setIndex({ active: nextState.activeItemIndex });
        }
    }
    setItems(newItems) {
        if (newItems.length) {
            const itemsArray = newItems.toArray();
            itemsArray.forEach((item, i) => {
                item.index = i;
            });
            this.state = {
                items: itemsArray,
            };
        }
        else {
            this.reset();
        }
    }
    setNextIndex(nextIndex) {
        this.carouselService.setIndex(nextIndex);
    }
    direction(direction = 'next') {
        this.state = { direction };
        const { activeItemIndex, items } = this.state;
        const itemsCount = items.length;
        return direction === 'next' ?
            (activeItemIndex === itemsCount - 1 ? 0 : activeItemIndex + 1) :
            (activeItemIndex === 0 ? itemsCount - 1 : activeItemIndex - 1);
    }
    reset() {
        this.state = {
            activeItemIndex: -1,
            animate: true,
            items: [],
            direction: 'next',
        };
    }
}
CarouselState.ɵfac = function CarouselState_Factory(t) { return new (t || CarouselState)(ɵngcc0.ɵɵinject(ɵngcc1.CarouselService)); };
CarouselState.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CarouselState, factory: CarouselState.ɵfac });
CarouselState.ctorParameters = () => [
    { type: CarouselService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CarouselState, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.CarouselService }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtc3RhdGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvY2Fyb3VzZWwvY2Fyb3VzZWwtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQUlyRCxNQUFNLE9BQU8sYUFBYTtBQUMxQixJQU9FLFlBQW9CLGVBQWdDO0FBQUssUUFBckMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQUUsUUFQOUMsV0FBTSxHQUFtQjtBQUNuQyxZQUFJLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDdkIsWUFBSSxPQUFPLEVBQUUsSUFBSTtBQUNqQixZQUFJLEtBQUssRUFBRSxFQUFFO0FBQ2IsWUFBSSxTQUFTLEVBQUUsTUFBTTtBQUNyQixTQUFHLENBQUM7QUFDSixJQUN5RCxDQUFDO0FBQzFELElBQ0UsSUFBSSxLQUFLO0FBQ1gsUUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLEtBQUssQ0FBQyxLQUFLO0FBQ2pCLFFBQUksTUFBTSxTQUFTLHFCQUFRLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztBQUN6QyxRQUFJLE1BQU0sU0FBUyxtQ0FBUSxJQUFJLENBQUMsTUFBTSxHQUFLLEtBQUssQ0FBRSxDQUFDO0FBQ25ELFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7QUFDNUIsUUFBSSxJQUFJLFNBQVMsQ0FBQyxlQUFlLEtBQUssU0FBUyxDQUFDLGVBQWUsRUFBRTtBQUNqRSxZQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDO0FBQ3pFLFNBQUs7QUFDTCxJQUFFLENBQUM7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LEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUExREEsQUFBQSxBQUhBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElDYXJvdXNlbFN0YXRlIH0gZnJvbSAnLi9jYXJvdXNlbC1zdGF0ZS50eXBlJztcclxuaW1wb3J0IHsgQ2Fyb3VzZWxTZXJ2aWNlIH0gZnJvbSAnLi9jYXJvdXNlbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2Fyb3VzZWxJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9jYXJvdXNlbC1pdGVtL2Nhcm91c2VsLWl0ZW0uY29tcG9uZW50JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENhcm91c2VsU3RhdGUge1xyXG4gIHByaXZhdGUgX3N0YXRlOiBJQ2Fyb3VzZWxTdGF0ZSA9IHtcclxuICAgIGFjdGl2ZUl0ZW1JbmRleDogLTEsXHJcbiAgICBhbmltYXRlOiB0cnVlLFxyXG4gICAgaXRlbXM6IFtdLFxyXG4gICAgZGlyZWN0aW9uOiAnbmV4dCcsXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjYXJvdXNlbFNlcnZpY2U6IENhcm91c2VsU2VydmljZSkge31cclxuXHJcbiAgZ2V0IHN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xyXG4gIH1cclxuXHJcbiAgc2V0IHN0YXRlKHN0YXRlKSB7XHJcbiAgICBjb25zdCBwcmV2U3RhdGUgPSB7IC4uLnRoaXMuX3N0YXRlIH07XHJcbiAgICBjb25zdCBuZXh0U3RhdGUgPSB7IC4uLnRoaXMuX3N0YXRlLCAuLi5zdGF0ZSB9O1xyXG4gICAgdGhpcy5fc3RhdGUgPSBuZXh0U3RhdGU7XHJcbiAgICBpZiAocHJldlN0YXRlLmFjdGl2ZUl0ZW1JbmRleCAhPT0gbmV4dFN0YXRlLmFjdGl2ZUl0ZW1JbmRleCkge1xyXG4gICAgICB0aGlzLmNhcm91c2VsU2VydmljZS5zZXRJbmRleCh7YWN0aXZlOiBuZXh0U3RhdGUuYWN0aXZlSXRlbUluZGV4fSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRJdGVtcyhuZXdJdGVtcykge1xyXG4gICAgaWYgKG5ld0l0ZW1zLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBpdGVtc0FycmF5ID0gbmV3SXRlbXMudG9BcnJheSgpO1xyXG4gICAgICBpdGVtc0FycmF5LmZvckVhY2goKGl0ZW06IENhcm91c2VsSXRlbUNvbXBvbmVudCwgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaXRlbS5pbmRleCA9IGk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgIGl0ZW1zOiBpdGVtc0FycmF5LFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0TmV4dEluZGV4KG5leHRJbmRleCkge1xyXG4gICAgdGhpcy5jYXJvdXNlbFNlcnZpY2Uuc2V0SW5kZXgobmV4dEluZGV4KTtcclxuICB9XHJcblxyXG4gIGRpcmVjdGlvbihkaXJlY3Rpb246ICduZXh0JyB8ICdwcmV2JyA9ICduZXh0JyApIHtcclxuICAgIHRoaXMuc3RhdGUgPSB7IGRpcmVjdGlvbiB9O1xyXG4gICAgY29uc3QgeyBhY3RpdmVJdGVtSW5kZXgsIGl0ZW1zIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgaXRlbXNDb3VudCA9IGl0ZW1zLmxlbmd0aDtcclxuICAgIHJldHVybiBkaXJlY3Rpb24gPT09ICduZXh0JyA/XHJcbiAgICAgIChhY3RpdmVJdGVtSW5kZXggPT09IGl0ZW1zQ291bnQgLSAxID8gMCA6IGFjdGl2ZUl0ZW1JbmRleCArIDEpIDpcclxuICAgICAgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gMCA/IGl0ZW1zQ291bnQgLSAxIDogYWN0aXZlSXRlbUluZGV4IC0gMSk7XHJcbiAgfVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGFjdGl2ZUl0ZW1JbmRleDogLTEsXHJcbiAgICAgIGFuaW1hdGU6IHRydWUsXHJcbiAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=