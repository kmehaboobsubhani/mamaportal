import { Component, ContentChildren, HostBinding, } from '@angular/core';
import { slideAnimation } from '../carousel.animation';
import { CarouselItemComponent } from '../carousel-item/carousel-item.component';
import { CarouselState } from '../carousel-state';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../carousel-state';

const _c0 = ["*"];
export class CarouselInnerComponent {
    constructor(carouselState) {
        this.carouselState = carouselState;
        this.carouselInnerClass = true;
        this.slide = { left: true };
    }
    ngOnInit() { }
    ngAfterContentInit() {
        this.setItems();
    }
    ngAfterContentChecked() {
        var _a;
        this.setItems();
        const state = (_a = this.carouselState) === null || _a === void 0 ? void 0 : _a.state;
        const nextIndex = state === null || state === void 0 ? void 0 : state.activeItemIndex;
        const nextDirection = state === null || state === void 0 ? void 0 : state.direction;
        if (this.activeIndex !== nextIndex) {
            this.animate = state === null || state === void 0 ? void 0 : state.animate;
            this.slide = { left: nextDirection === 'next' };
            this.activeIndex = state === null || state === void 0 ? void 0 : state.activeItemIndex;
        }
    }
    setItems() {
        if (this.prevContentItems !== this.contentItems) {
            this.prevContentItems = this.contentItems;
            this.carouselState.setItems(this.contentItems);
        }
    }
}
CarouselInnerComponent.ɵfac = function CarouselInnerComponent_Factory(t) { return new (t || CarouselInnerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CarouselState)); };
CarouselInnerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CarouselInnerComponent, selectors: [["c-carousel-inner"]], contentQueries: function CarouselInnerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CarouselItemComponent, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentItems = _t);
    } }, hostVars: 2, hostBindings: function CarouselInnerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("carousel-inner", ctx.carouselInnerClass);
    } }, ngContentSelectors: _c0, decls: 2, vars: 2, template: function CarouselInnerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("@slideAnimation", ctx.slide)("@.disabled", !ctx.animate);
    } }, styles: ["[_nghost-%COMP%]{display:block}"], data: { animation: [slideAnimation] } });
CarouselInnerComponent.ctorParameters = () => [
    { type: CarouselState }
];
CarouselInnerComponent.propDecorators = {
    carouselInnerClass: [{ type: HostBinding, args: ['class.carousel-inner',] }],
    contentItems: [{ type: ContentChildren, args: [CarouselItemComponent,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CarouselInnerComponent, [{
        type: Component,
        args: [{
                selector: 'c-carousel-inner',
                template: "<div [@slideAnimation]=\"slide\" [@.disabled]=\"!animate\">\n  <ng-content></ng-content>\n</div>\n",
                animations: [slideAnimation],
                styles: [":host{display:block}"]
            }]
    }], function () { return [{ type: ɵngcc1.CarouselState }]; }, { carouselInnerClass: [{
            type: HostBinding,
            args: ['class.carousel-inner']
        }], contentItems: [{
            type: ContentChildren,
            args: [CarouselItemComponent]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtaW5uZXIuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2Nhcm91c2VsL2Nhcm91c2VsLWlubmVyL2Nhcm91c2VsLWlubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsU0FBUyxFQUNULGVBQWUsRUFDZixXQUFXLEdBR1osTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7QUFRbEQsTUFBTSxPQUFPLHNCQUFzQjtBQUNqQyxJQVNBLFlBQW9CLGFBQTRCO0FBQUssUUFBakMsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBRSxRQVJiLHVCQUFrQixHQUFHLElBQUksQ0FBQztBQUNqRSxRQUtFLFVBQUssR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUN2QixJQUNxRCxDQUFDO0FBQ3RELElBQ0UsUUFBUSxLQUFVLENBQUM7QUFDckIsSUFDRSxrQkFBa0I7QUFDcEIsUUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDcEIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxxQkFBcUI7QUFDdkI7QUFBaUIsUUFBYixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDcEIsUUFBSSxNQUFNLEtBQUssU0FBRyxJQUFJLENBQUMsYUFBYSwwQ0FBRSxLQUFLLENBQUM7QUFDNUMsUUFBSSxNQUFNLFNBQVMsR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsZUFBZSxDQUFDO0FBQzdDLFFBQUksTUFBTSxhQUFhLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQztBQUMzQyxRQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7QUFDeEMsWUFBTSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLENBQUM7QUFDcEMsWUFBTSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUMsSUFBSSxFQUFFLGFBQWEsS0FBSyxNQUFNLEVBQUMsQ0FBQztBQUNwRCxZQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQztBQUNoRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQ3JELFlBQU0sSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDaEQsWUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckQsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO29EQTFDQyxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFLGtCQUFrQixtQkFDNUI7OEVBQThDLG1CQUU5QyxVQUFVLEVBQUUsQ0FBRSxjQUFjLENBQUUsa0VBQy9COzs7Ozs7Ozs7Ozs7OzsrRkFDSTtBQUFFO0FBQ1ksWUFUVixhQUFhO0FBQUk7QUFBSTtBQUd6QixpQ0FPRixXQUFXLFNBQUMsc0JBQXNCO0FBQVEsMkJBRTFDLGVBQWUsU0FBQyxxQkFBcUI7QUFBTzs7Ozs7Ozs7Ozs7Ozs7OztBQXhCQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBekNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBUEEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyQ29udGVudENoZWNrZWQsXHJcbiAgQWZ0ZXJDb250ZW50SW5pdCxcclxuICBDb21wb25lbnQsXHJcbiAgQ29udGVudENoaWxkcmVuLFxyXG4gIEhvc3RCaW5kaW5nLFxyXG4gIE9uSW5pdCxcclxuICBRdWVyeUxpc3QsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBzbGlkZUFuaW1hdGlvbiB9IGZyb20gJy4uL2Nhcm91c2VsLmFuaW1hdGlvbic7XHJcbmltcG9ydCB7IENhcm91c2VsSXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2Nhcm91c2VsLWl0ZW0vY2Fyb3VzZWwtaXRlbS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYXJvdXNlbFN0YXRlIH0gZnJvbSAnLi4vY2Fyb3VzZWwtc3RhdGUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjLWNhcm91c2VsLWlubmVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2Fyb3VzZWwtaW5uZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2Nhcm91c2VsLWlubmVyLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgYW5pbWF0aW9uczogWyBzbGlkZUFuaW1hdGlvbiBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2Fyb3VzZWxJbm5lckNvbXBvbmVudFxyXG4gIGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlckNvbnRlbnRDaGVja2VkIHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhcm91c2VsLWlubmVyJykgY2Fyb3VzZWxJbm5lckNsYXNzID0gdHJ1ZTtcclxuXHJcbiAgQENvbnRlbnRDaGlsZHJlbihDYXJvdXNlbEl0ZW1Db21wb25lbnQpIHByaXZhdGUgY29udGVudEl0ZW1zITogUXVlcnlMaXN0PENhcm91c2VsSXRlbUNvbXBvbmVudD47XHJcbiAgcHJpdmF0ZSBwcmV2Q29udGVudEl0ZW1zOiBRdWVyeUxpc3Q8Q2Fyb3VzZWxJdGVtQ29tcG9uZW50PjtcclxuICBhY3RpdmVJbmRleDogbnVtYmVyO1xyXG4gIGFuaW1hdGU6IGJvb2xlYW47XHJcbiAgc2xpZGUgPSB7bGVmdDogdHJ1ZX07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Fyb3VzZWxTdGF0ZTogQ2Fyb3VzZWxTdGF0ZSkge31cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7fVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLnNldEl0ZW1zKCk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XHJcbiAgICB0aGlzLnNldEl0ZW1zKCk7XHJcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuY2Fyb3VzZWxTdGF0ZT8uc3RhdGU7XHJcbiAgICBjb25zdCBuZXh0SW5kZXggPSBzdGF0ZT8uYWN0aXZlSXRlbUluZGV4O1xyXG4gICAgY29uc3QgbmV4dERpcmVjdGlvbiA9IHN0YXRlPy5kaXJlY3Rpb247XHJcbiAgICBpZiAodGhpcy5hY3RpdmVJbmRleCAhPT0gbmV4dEluZGV4KSB7XHJcbiAgICAgIHRoaXMuYW5pbWF0ZSA9IHN0YXRlPy5hbmltYXRlO1xyXG4gICAgICB0aGlzLnNsaWRlID0ge2xlZnQ6IG5leHREaXJlY3Rpb24gPT09ICduZXh0J307XHJcbiAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBzdGF0ZT8uYWN0aXZlSXRlbUluZGV4O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0SXRlbXMoKSB7XHJcbiAgICBpZiAodGhpcy5wcmV2Q29udGVudEl0ZW1zICE9PSB0aGlzLmNvbnRlbnRJdGVtcykge1xyXG4gICAgICB0aGlzLnByZXZDb250ZW50SXRlbXMgPSB0aGlzLmNvbnRlbnRJdGVtcztcclxuICAgICAgdGhpcy5jYXJvdXNlbFN0YXRlLnNldEl0ZW1zKHRoaXMuY29udGVudEl0ZW1zKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19