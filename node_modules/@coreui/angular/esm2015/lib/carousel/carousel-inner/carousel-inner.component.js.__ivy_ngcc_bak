import { Component, ContentChildren, HostBinding, } from '@angular/core';
import { slideAnimation } from '../carousel.animation';
import { CarouselItemComponent } from '../carousel-item/carousel-item.component';
import { CarouselState } from '../carousel-state';
export class CarouselInnerComponent {
    constructor(carouselState) {
        this.carouselState = carouselState;
        this.carouselInnerClass = true;
        this.slide = { left: true };
    }
    ngOnInit() { }
    ngAfterContentInit() {
        this.setItems();
    }
    ngAfterContentChecked() {
        var _a;
        this.setItems();
        const state = (_a = this.carouselState) === null || _a === void 0 ? void 0 : _a.state;
        const nextIndex = state === null || state === void 0 ? void 0 : state.activeItemIndex;
        const nextDirection = state === null || state === void 0 ? void 0 : state.direction;
        if (this.activeIndex !== nextIndex) {
            this.animate = state === null || state === void 0 ? void 0 : state.animate;
            this.slide = { left: nextDirection === 'next' };
            this.activeIndex = state === null || state === void 0 ? void 0 : state.activeItemIndex;
        }
    }
    setItems() {
        if (this.prevContentItems !== this.contentItems) {
            this.prevContentItems = this.contentItems;
            this.carouselState.setItems(this.contentItems);
        }
    }
}
CarouselInnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-carousel-inner',
                template: "<div [@slideAnimation]=\"slide\" [@.disabled]=\"!animate\">\n  <ng-content></ng-content>\n</div>\n",
                animations: [slideAnimation],
                styles: [":host{display:block}"]
            },] }
];
CarouselInnerComponent.ctorParameters = () => [
    { type: CarouselState }
];
CarouselInnerComponent.propDecorators = {
    carouselInnerClass: [{ type: HostBinding, args: ['class.carousel-inner',] }],
    contentItems: [{ type: ContentChildren, args: [CarouselItemComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtaW5uZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9jYXJvdXNlbC9jYXJvdXNlbC1pbm5lci9jYXJvdXNlbC1pbm5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsV0FBVyxHQUdaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNqRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFRbEQsTUFBTSxPQUFPLHNCQUFzQjtJQVVqQyxZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVJYLHVCQUFrQixHQUFHLElBQUksQ0FBQztRQU0vRCxVQUFLLEdBQUcsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUM7SUFFOEIsQ0FBQztJQUVwRCxRQUFRLEtBQVUsQ0FBQztJQUVuQixrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxxQkFBcUI7O1FBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixNQUFNLEtBQUssU0FBRyxJQUFJLENBQUMsYUFBYSwwQ0FBRSxLQUFLLENBQUM7UUFDeEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQztRQUN6QyxNQUFNLGFBQWEsR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsU0FBUyxDQUFDO1FBQ3ZDLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsT0FBTyxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBQyxJQUFJLEVBQUUsYUFBYSxLQUFLLE1BQU0sRUFBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQztTQUMzQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLFlBQVksRUFBRTtZQUMvQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUMxQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDaEQ7SUFDSCxDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLDhHQUE4QztnQkFFOUMsVUFBVSxFQUFFLENBQUUsY0FBYyxDQUFFOzthQUMvQjs7O1lBUFEsYUFBYTs7O2lDQVVuQixXQUFXLFNBQUMsc0JBQXNCOzJCQUVsQyxlQUFlLFNBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBZnRlckNvbnRlbnRDaGVja2VkLFxyXG4gIEFmdGVyQ29udGVudEluaXQsXHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbnRlbnRDaGlsZHJlbixcclxuICBIb3N0QmluZGluZyxcclxuICBPbkluaXQsXHJcbiAgUXVlcnlMaXN0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgc2xpZGVBbmltYXRpb24gfSBmcm9tICcuLi9jYXJvdXNlbC5hbmltYXRpb24nO1xyXG5pbXBvcnQgeyBDYXJvdXNlbEl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9jYXJvdXNlbC1pdGVtL2Nhcm91c2VsLWl0ZW0uY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2Fyb3VzZWxTdGF0ZSB9IGZyb20gJy4uL2Nhcm91c2VsLXN0YXRlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYy1jYXJvdXNlbC1pbm5lcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2Nhcm91c2VsLWlubmVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jYXJvdXNlbC1pbm5lci5jb21wb25lbnQuc2NzcyddLFxyXG4gIGFuaW1hdGlvbnM6IFsgc2xpZGVBbmltYXRpb24gXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIENhcm91c2VsSW5uZXJDb21wb25lbnRcclxuICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jYXJvdXNlbC1pbm5lcicpIGNhcm91c2VsSW5uZXJDbGFzcyA9IHRydWU7XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oQ2Fyb3VzZWxJdGVtQ29tcG9uZW50KSBwcml2YXRlIGNvbnRlbnRJdGVtcyE6IFF1ZXJ5TGlzdDxDYXJvdXNlbEl0ZW1Db21wb25lbnQ+O1xyXG4gIHByaXZhdGUgcHJldkNvbnRlbnRJdGVtczogUXVlcnlMaXN0PENhcm91c2VsSXRlbUNvbXBvbmVudD47XHJcbiAgYWN0aXZlSW5kZXg6IG51bWJlcjtcclxuICBhbmltYXRlOiBib29sZWFuO1xyXG4gIHNsaWRlID0ge2xlZnQ6IHRydWV9O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhcm91c2VsU3RhdGU6IENhcm91c2VsU3RhdGUpIHt9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge31cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5zZXRJdGVtcygpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xyXG4gICAgdGhpcy5zZXRJdGVtcygpO1xyXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmNhcm91c2VsU3RhdGU/LnN0YXRlO1xyXG4gICAgY29uc3QgbmV4dEluZGV4ID0gc3RhdGU/LmFjdGl2ZUl0ZW1JbmRleDtcclxuICAgIGNvbnN0IG5leHREaXJlY3Rpb24gPSBzdGF0ZT8uZGlyZWN0aW9uO1xyXG4gICAgaWYgKHRoaXMuYWN0aXZlSW5kZXggIT09IG5leHRJbmRleCkge1xyXG4gICAgICB0aGlzLmFuaW1hdGUgPSBzdGF0ZT8uYW5pbWF0ZTtcclxuICAgICAgdGhpcy5zbGlkZSA9IHtsZWZ0OiBuZXh0RGlyZWN0aW9uID09PSAnbmV4dCd9O1xyXG4gICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gc3RhdGU/LmFjdGl2ZUl0ZW1JbmRleDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEl0ZW1zKCkge1xyXG4gICAgaWYgKHRoaXMucHJldkNvbnRlbnRJdGVtcyAhPT0gdGhpcy5jb250ZW50SXRlbXMpIHtcclxuICAgICAgdGhpcy5wcmV2Q29udGVudEl0ZW1zID0gdGhpcy5jb250ZW50SXRlbXM7XHJcbiAgICAgIHRoaXMuY2Fyb3VzZWxTdGF0ZS5zZXRJdGVtcyh0aGlzLmNvbnRlbnRJdGVtcyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==