import { ChangeDetectorRef, Component, HostBinding, HostListener, Input, ViewChild, } from '@angular/core';
import classNames from 'classnames';
import { CarouselState } from '../carousel-state';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../carousel-state';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["content"];
function CarouselControlComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", null, 2);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
} }
function CarouselControlComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r2.carouselControlIconClass);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r2.direction);
} }
const _c1 = ["*"];
export class CarouselControlComponent {
    constructor(changeDetector, carouselState) {
        this.changeDetector = changeDetector;
        this.carouselState = carouselState;
        this.direction = 'next';
        this.hasContent = true;
    }
    get hostRole() {
        return 'button';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get carouselControlClass() {
        return `carousel-control-${this.direction}`;
    }
    get carouselControlIconClass() {
        return `carousel-control-${this.direction}-icon`;
    }
    get hostClasses() {
        const classes = classNames(this.carouselControlClass);
        return classes;
    }
    onKeyUp($event) {
        if ($event.key === 'Enter') {
            this.play();
        }
        if ($event.key === 'ArrowLeft') {
            this.play('prev');
        }
        if ($event.key === 'ArrowRight') {
            this.play('next');
        }
    }
    onClick($event) {
        this.play();
    }
    ngOnInit() { }
    ngAfterViewInit() {
        this.hasContent = this.content.nativeElement.childNodes.length;
        this.changeDetector.detectChanges();
    }
    play(direction = this.direction) {
        const nextIndex = this.carouselState.direction(direction);
        this.carouselState.state = { activeItemIndex: nextIndex };
    }
}
CarouselControlComponent.ɵfac = function CarouselControlComponent_Factory(t) { return new (t || CarouselControlComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CarouselState)); };
CarouselControlComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CarouselControlComponent, selectors: [["c-carousel-control"]], viewQuery: function CarouselControlComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, hostVars: 3, hostBindings: function CarouselControlComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function CarouselControlComponent_keyup_HostBindingHandler($event) { return ctx.onKeyUp($event); })("click", function CarouselControlComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.hostRole);
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { direction: "direction" }, ngContentSelectors: _c1, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["default", ""], ["content", ""]], template: function CarouselControlComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, CarouselControlComponent_div_0_Template, 3, 0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, CarouselControlComponent_ng_template_1_Template, 1, 3, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasContent)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf], styles: [""] });
CarouselControlComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: CarouselState }
];
CarouselControlComponent.propDecorators = {
    direction: [{ type: Input }],
    content: [{ type: ViewChild, args: ['content',] }],
    hostRole: [{ type: HostBinding, args: ['attr.role',] }],
    getClasses: [{ type: HostBinding, args: ['class',] }],
    onKeyUp: [{ type: HostListener, args: ['keyup', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CarouselControlComponent, [{
        type: Component,
        args: [{
                selector: 'c-carousel-control',
                template: "<div #content *ngIf = \"hasContent; else default\"><ng-content></ng-content></div>\n<ng-template #default>\n  <span [class]=\"carouselControlIconClass\" [attr.aria-label]=\"direction\"></span>\n</ng-template>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.CarouselState }]; }, { direction: [{
            type: Input
        }], hostRole: [{
            type: HostBinding,
            args: ['attr.role']
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], onKeyUp: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], content: [{
            type: ViewChild,
            args: ['content']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvY2Fyb3VzZWwvY2Fyb3VzZWwtY29udHJvbC9jYXJvdXNlbC1jb250cm9sLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLFNBQVMsRUFFVCxXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFFTCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU9sRCxNQUFNLE9BQU8sd0JBQXdCO0FBQUksSUFnRHZDLFlBQ1UsY0FBaUMsRUFDakMsYUFBNEI7QUFDckMsUUFGUyxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7QUFBRSxRQUNuQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUN4QyxRQWxEVyxjQUFTLEdBQW9CLE1BQU0sQ0FBQztBQUMvQyxRQUdFLGVBQVUsR0FBRyxJQUFJLENBQUM7QUFDcEIsSUE2Q0ssQ0FBQztBQUNOLElBN0NFLElBQ0ksUUFBUTtBQUFNLFFBQ2hCLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLElBQUUsQ0FBQztBQUNILElBQ0UsSUFDSSxVQUFVO0FBQ2hCLFFBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxvQkFBb0I7QUFDMUIsUUFBSSxPQUFPLG9CQUFvQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLHdCQUF3QjtBQUM5QixRQUFJLE9BQU8sb0JBQW9CLElBQUksQ0FBQyxTQUFTLE9BQU8sQ0FBQztBQUNyRCxJQUFFLENBQUM7QUFDSCxJQUNF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QSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBcEVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBakJBLEFBQUEsQUFXQSxBQUFBLEFBUUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQWtCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBYUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgSW5wdXQsXHJcbiAgT25Jbml0LFxyXG4gIFZpZXdDaGlsZCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5pbXBvcnQgeyBDYXJvdXNlbFN0YXRlIH0gZnJvbSAnLi4vY2Fyb3VzZWwtc3RhdGUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjLWNhcm91c2VsLWNvbnRyb2wnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJvdXNlbC1jb250cm9sLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jYXJvdXNlbC1jb250cm9sLmNvbXBvbmVudC5zY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYXJvdXNlbENvbnRyb2xDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgpIGRpcmVjdGlvbjogJ3ByZXYnIHwgJ25leHQnID0gJ25leHQnO1xyXG5cclxuICBAVmlld0NoaWxkKCdjb250ZW50JykgY29udGVudDogRWxlbWVudFJlZjtcclxuXHJcbiAgaGFzQ29udGVudCA9IHRydWU7XHJcblxyXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcclxuICBnZXQgaG9zdFJvbGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAnYnV0dG9uJztcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxyXG4gIGdldCBnZXRDbGFzc2VzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaG9zdENsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgY2Fyb3VzZWxDb250cm9sQ2xhc3MoKSB7XHJcbiAgICByZXR1cm4gYGNhcm91c2VsLWNvbnRyb2wtJHt0aGlzLmRpcmVjdGlvbn1gO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNhcm91c2VsQ29udHJvbEljb25DbGFzcygpIHtcclxuICAgIHJldHVybiBgY2Fyb3VzZWwtY29udHJvbC0ke3RoaXMuZGlyZWN0aW9ufS1pY29uYDtcclxuICB9XHJcblxyXG4gIGdldCBob3N0Q2xhc3NlcygpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHRoaXMuY2Fyb3VzZWxDb250cm9sQ2xhc3MpO1xyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdrZXl1cCcsIFsnJGV2ZW50J10pXHJcbiAgb25LZXlVcCgkZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGlmICgkZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKCRldmVudC5rZXkgPT09ICdBcnJvd0xlZnQnKSB7XHJcbiAgICAgIHRoaXMucGxheSgncHJldicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCRldmVudC5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xyXG4gICAgICB0aGlzLnBsYXkoJ25leHQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICBwdWJsaWMgb25DbGljaygkZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgIHRoaXMucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIHByaXZhdGUgY2Fyb3VzZWxTdGF0ZTogQ2Fyb3VzZWxTdGF0ZVxyXG4gICkge31cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7fVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmhhc0NvbnRlbnQgPSB0aGlzLmNvbnRlbnQubmF0aXZlRWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCBhcyBib29sZWFuO1xyXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBsYXkoZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb24pIHtcclxuICAgIGNvbnN0IG5leHRJbmRleCA9IHRoaXMuY2Fyb3VzZWxTdGF0ZS5kaXJlY3Rpb24oZGlyZWN0aW9uKTtcclxuICAgIHRoaXMuY2Fyb3VzZWxTdGF0ZS5zdGF0ZSA9IHsgYWN0aXZlSXRlbUluZGV4OiBuZXh0SW5kZXggfTtcclxuICB9XHJcbn1cclxuIl19