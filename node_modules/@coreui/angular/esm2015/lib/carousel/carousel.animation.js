import { animate, group, query, state, style, transition, trigger, } from '@angular/animations';
export function toLeft(fromState, toState) {
    return toState.left === true;
}
export function toRight(fromState, toState) {
    return toState.left === false;
}
export const slideAnimation = trigger('slideAnimation', [
    state('*', style({ transform: 'translateX(0)', display: 'block', opacity: 1 })),
    transition(toLeft, group([
        query(':leave', [
            animate('0.6s ease-in-out', style({
                transform: 'translateX(-100%)',
            })),
        ], { optional: true }),
        query(':enter', [
            style({
                transform: 'translateX(100%)',
            }),
            animate('0.6s ease-in-out', style('*')),
        ], { optional: true }),
    ])),
    transition(toRight, group([
        query(':enter', [
            style({
                transform: 'translateX(-100%)',
            }),
            animate('0.6s ease-in-out', style('*')),
        ], { optional: true }),
        query(':leave', [
            animate('0.6s ease-in-out', style({
                transform: 'translateX(100%)',
            })),
        ], { optional: true }),
    ])),
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9jYXJvdXNlbC9jYXJvdXNlbC5hbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sR0FDUixNQUFNLHFCQUFxQixDQUFDO0FBRTdCLE1BQU0sVUFBVSxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQVk7SUFDNUMsT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztBQUMvQixDQUFDO0FBQ0QsTUFBTSxVQUFVLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBWTtJQUM3QyxPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixFQUFFO0lBQ3RELEtBQUssQ0FDSCxHQUFHLEVBQ0gsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUNwRTtJQUNELFVBQVUsQ0FDUixNQUFNLEVBQ04sS0FBSyxDQUFDO1FBQ0osS0FBSyxDQUNILFFBQVEsRUFDUjtZQUNFLE9BQU8sQ0FDTCxrQkFBa0IsRUFDbEIsS0FBSyxDQUFDO2dCQUNKLFNBQVMsRUFBRSxtQkFBbUI7YUFDL0IsQ0FBQyxDQUNIO1NBQ0YsRUFDRCxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FDbkI7UUFDRCxLQUFLLENBQ0gsUUFBUSxFQUNSO1lBQ0UsS0FBSyxDQUFDO2dCQUNKLFNBQVMsRUFBRSxrQkFBa0I7YUFDOUIsQ0FBQztZQUNGLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEMsRUFDRCxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FDbkI7S0FDRixDQUFDLENBQ0g7SUFDRCxVQUFVLENBQ1IsT0FBTyxFQUNQLEtBQUssQ0FBQztRQUNKLEtBQUssQ0FDSCxRQUFRLEVBQ1I7WUFDRSxLQUFLLENBQUM7Z0JBQ0osU0FBUyxFQUFFLG1CQUFtQjthQUMvQixDQUFDO1lBQ0YsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QyxFQUNELEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUNuQjtRQUNELEtBQUssQ0FDSCxRQUFRLEVBQ1I7WUFDRSxPQUFPLENBQ0wsa0JBQWtCLEVBQ2xCLEtBQUssQ0FBQztnQkFDSixTQUFTLEVBQUUsa0JBQWtCO2FBQzlCLENBQUMsQ0FDSDtTQUNGLEVBQ0QsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQ25CO0tBQ0YsQ0FBQyxDQUNIO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgZ3JvdXAsXG4gIHF1ZXJ5LFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9MZWZ0KGZyb21TdGF0ZSwgdG9TdGF0ZTogYW55KSB7XG4gIHJldHVybiB0b1N0YXRlLmxlZnQgPT09IHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9SaWdodChmcm9tU3RhdGUsIHRvU3RhdGU6IGFueSkge1xuICByZXR1cm4gdG9TdGF0ZS5sZWZ0ID09PSBmYWxzZTtcbn1cblxuZXhwb3J0IGNvbnN0IHNsaWRlQW5pbWF0aW9uID0gdHJpZ2dlcignc2xpZGVBbmltYXRpb24nLCBbXG4gIHN0YXRlKFxuICAgICcqJyxcbiAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCknLCBkaXNwbGF5OiAnYmxvY2snLCBvcGFjaXR5OiAxIH0pXG4gICksXG4gIHRyYW5zaXRpb24oXG4gICAgdG9MZWZ0LFxuICAgIGdyb3VwKFtcbiAgICAgIHF1ZXJ5KFxuICAgICAgICAnOmxlYXZlJyxcbiAgICAgICAgW1xuICAgICAgICAgIGFuaW1hdGUoXG4gICAgICAgICAgICAnMC42cyBlYXNlLWluLW91dCcsXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTEwMCUpJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgXSxcbiAgICAgICAgeyBvcHRpb25hbDogdHJ1ZSB9XG4gICAgICApLFxuICAgICAgcXVlcnkoXG4gICAgICAgICc6ZW50ZXInLFxuICAgICAgICBbXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgxMDAlKScsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYW5pbWF0ZSgnMC42cyBlYXNlLWluLW91dCcsIHN0eWxlKCcqJykpLFxuICAgICAgICBdLFxuICAgICAgICB7IG9wdGlvbmFsOiB0cnVlIH1cbiAgICAgICksXG4gICAgXSlcbiAgKSxcbiAgdHJhbnNpdGlvbihcbiAgICB0b1JpZ2h0LFxuICAgIGdyb3VwKFtcbiAgICAgIHF1ZXJ5KFxuICAgICAgICAnOmVudGVyJyxcbiAgICAgICAgW1xuICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTEwMCUpJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBhbmltYXRlKCcwLjZzIGVhc2UtaW4tb3V0Jywgc3R5bGUoJyonKSksXG4gICAgICAgIF0sXG4gICAgICAgIHsgb3B0aW9uYWw6IHRydWUgfVxuICAgICAgKSxcbiAgICAgIHF1ZXJ5KFxuICAgICAgICAnOmxlYXZlJyxcbiAgICAgICAgW1xuICAgICAgICAgIGFuaW1hdGUoXG4gICAgICAgICAgICAnMC42cyBlYXNlLWluLW91dCcsXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMTAwJSknLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICBdLFxuICAgICAgICB7IG9wdGlvbmFsOiB0cnVlIH1cbiAgICAgICksXG4gICAgXSlcbiAgKSxcbl0pO1xuIl19