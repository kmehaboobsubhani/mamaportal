import { Injectable } from '@angular/core';
import { CarouselService } from './carousel.service';
export class CarouselState {
    constructor(carouselService) {
        this.carouselService = carouselService;
        this._state = {
            activeItemIndex: -1,
            animate: true,
            items: [],
            direction: 'next',
        };
    }
    get state() {
        return this._state;
    }
    set state(state) {
        const prevState = Object.assign({}, this._state);
        const nextState = Object.assign(Object.assign({}, this._state), state);
        this._state = nextState;
        if (prevState.activeItemIndex !== nextState.activeItemIndex) {
            this.carouselService.setIndex({ active: nextState.activeItemIndex });
        }
    }
    setItems(newItems) {
        if (newItems.length) {
            const itemsArray = newItems.toArray();
            itemsArray.forEach((item, i) => {
                item.index = i;
            });
            this.state = {
                items: itemsArray,
            };
        }
        else {
            this.reset();
        }
    }
    setNextIndex(nextIndex) {
        this.carouselService.setIndex(nextIndex);
    }
    direction(direction = 'next') {
        this.state = { direction };
        const { activeItemIndex, items } = this.state;
        const itemsCount = items.length;
        return direction === 'next' ?
            (activeItemIndex === itemsCount - 1 ? 0 : activeItemIndex + 1) :
            (activeItemIndex === 0 ? itemsCount - 1 : activeItemIndex - 1);
    }
    reset() {
        this.state = {
            activeItemIndex: -1,
            animate: true,
            items: [],
            direction: 'next',
        };
    }
}
CarouselState.decorators = [
    { type: Injectable }
];
CarouselState.ctorParameters = () => [
    { type: CarouselService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtc3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2Nhcm91c2VsL2Nhcm91c2VsLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXJELE1BQU0sT0FBTyxhQUFhO0lBUXhCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQVA1QyxXQUFNLEdBQW1CO1lBQy9CLGVBQWUsRUFBRSxDQUFDLENBQUM7WUFDbkIsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsRUFBRTtZQUNULFNBQVMsRUFBRSxNQUFNO1NBQ2xCLENBQUM7SUFFcUQsQ0FBQztJQUV4RCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLEtBQUs7UUFDYixNQUFNLFNBQVMscUJBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQ3JDLE1BQU0sU0FBUyxtQ0FBUSxJQUFJLENBQUMsTUFBTSxHQUFLLEtBQUssQ0FBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hCLElBQUksU0FBUyxDQUFDLGVBQWUsS0FBSyxTQUFTLENBQUMsZUFBZSxFQUFFO1lBQzNELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDO1NBQ3BFO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxRQUFRO1FBQ2YsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ25CLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN0QyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBMkIsRUFBRSxDQUFTLEVBQUUsRUFBRTtnQkFDNUQsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHO2dCQUNYLEtBQUssRUFBRSxVQUFVO2FBQ2xCLENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLFNBQVM7UUFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFNBQVMsQ0FBQyxZQUE2QixNQUFNO1FBQzNDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQztRQUMzQixNQUFNLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxPQUFPLFNBQVMsS0FBSyxNQUFNLENBQUMsQ0FBQztZQUMzQixDQUFDLGVBQWUsS0FBSyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLENBQUMsZUFBZSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNYLGVBQWUsRUFBRSxDQUFDLENBQUM7WUFDbkIsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsRUFBRTtZQUNULFNBQVMsRUFBRSxNQUFNO1NBQ2xCLENBQUM7SUFDSixDQUFDOzs7WUExREYsVUFBVTs7O1lBSEYsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSUNhcm91c2VsU3RhdGUgfSBmcm9tICcuL2Nhcm91c2VsLXN0YXRlLnR5cGUnO1xyXG5pbXBvcnQgeyBDYXJvdXNlbFNlcnZpY2UgfSBmcm9tICcuL2Nhcm91c2VsLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDYXJvdXNlbEl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2Nhcm91c2VsLWl0ZW0vY2Fyb3VzZWwtaXRlbS5jb21wb25lbnQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2Fyb3VzZWxTdGF0ZSB7XHJcbiAgcHJpdmF0ZSBfc3RhdGU6IElDYXJvdXNlbFN0YXRlID0ge1xyXG4gICAgYWN0aXZlSXRlbUluZGV4OiAtMSxcclxuICAgIGFuaW1hdGU6IHRydWUsXHJcbiAgICBpdGVtczogW10sXHJcbiAgICBkaXJlY3Rpb246ICduZXh0JyxcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhcm91c2VsU2VydmljZTogQ2Fyb3VzZWxTZXJ2aWNlKSB7fVxyXG5cclxuICBnZXQgc3RhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhdGU7XHJcbiAgfVxyXG5cclxuICBzZXQgc3RhdGUoc3RhdGUpIHtcclxuICAgIGNvbnN0IHByZXZTdGF0ZSA9IHsgLi4udGhpcy5fc3RhdGUgfTtcclxuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHsgLi4udGhpcy5fc3RhdGUsIC4uLnN0YXRlIH07XHJcbiAgICB0aGlzLl9zdGF0ZSA9IG5leHRTdGF0ZTtcclxuICAgIGlmIChwcmV2U3RhdGUuYWN0aXZlSXRlbUluZGV4ICE9PSBuZXh0U3RhdGUuYWN0aXZlSXRlbUluZGV4KSB7XHJcbiAgICAgIHRoaXMuY2Fyb3VzZWxTZXJ2aWNlLnNldEluZGV4KHthY3RpdmU6IG5leHRTdGF0ZS5hY3RpdmVJdGVtSW5kZXh9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEl0ZW1zKG5ld0l0ZW1zKSB7XHJcbiAgICBpZiAobmV3SXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IGl0ZW1zQXJyYXkgPSBuZXdJdGVtcy50b0FycmF5KCk7XHJcbiAgICAgIGl0ZW1zQXJyYXkuZm9yRWFjaCgoaXRlbTogQ2Fyb3VzZWxJdGVtQ29tcG9uZW50LCBpOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpdGVtLmluZGV4ID0gaTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgaXRlbXM6IGl0ZW1zQXJyYXksXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXROZXh0SW5kZXgobmV4dEluZGV4KSB7XHJcbiAgICB0aGlzLmNhcm91c2VsU2VydmljZS5zZXRJbmRleChuZXh0SW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgZGlyZWN0aW9uKGRpcmVjdGlvbjogJ25leHQnIHwgJ3ByZXYnID0gJ25leHQnICkge1xyXG4gICAgdGhpcy5zdGF0ZSA9IHsgZGlyZWN0aW9uIH07XHJcbiAgICBjb25zdCB7IGFjdGl2ZUl0ZW1JbmRleCwgaXRlbXMgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBpdGVtc0NvdW50ID0gaXRlbXMubGVuZ3RoO1xyXG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gJ25leHQnID9cclxuICAgICAgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gaXRlbXNDb3VudCAtIDEgPyAwIDogYWN0aXZlSXRlbUluZGV4ICsgMSkgOlxyXG4gICAgICAoYWN0aXZlSXRlbUluZGV4ID09PSAwID8gaXRlbXNDb3VudCAtIDEgOiBhY3RpdmVJdGVtSW5kZXggLSAxKTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgYWN0aXZlSXRlbUluZGV4OiAtMSxcclxuICAgICAgYW5pbWF0ZTogdHJ1ZSxcclxuICAgICAgaXRlbXM6IFtdLFxyXG4gICAgICBkaXJlY3Rpb246ICduZXh0JyxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==