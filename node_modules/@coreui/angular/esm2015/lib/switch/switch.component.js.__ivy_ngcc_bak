import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2 } from '@angular/core';
export class SwitchComponent {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.variant = '';
        this.labelOn = '';
        this.labelOff = '';
        this.size = '';
        this.shape = '';
        this.tabindex = '0';
        this.type = 'checkbox';
        this.value = 'on';
        this.data = {};
        this._props = {
            autofocus: false,
            checked: false,
            disabled: false,
            required: false,
        };
        this.hostTabIndex = -1;
        this.toggle = new EventEmitter();
        this.classes = {};
        this.host = this.hostElement.nativeElement;
    }
    get label() {
        return !!this.labelOn || !!this.labelOff;
    }
    set autofocus(value) {
        this._props.autofocus = typeof value === 'string' || !!value;
    }
    get autofocus() {
        return this._props.autofocus;
    }
    set checked(value) {
        this._props.checked = typeof value === 'string' || !!value;
    }
    get checked() {
        return this._props.checked;
    }
    set disabled(value) {
        this._props.disabled = typeof value === 'string' || !!value;
        this.tabindex = this._props.disabled ? -1 : this.tabindex;
    }
    get disabled() {
        return this._props.disabled;
    }
    set required(value) {
        this._props.required = typeof value === 'string' || !!value;
    }
    get required() {
        return this._props.required;
    }
    ngOnInit() {
        this.data = {
            'data-checked': this.labelOn,
            'data-unchecked': this.labelOff
        };
        this.setClasses();
    }
    setClasses() {
        const variant = this.variant ? `-${this.variant}` : '';
        this.classes['c-switch'] = true;
        this.classes['form-check-label'] = true;
        this.classes[`c-switch-${this.size}`] = !!this.size;
        this.classes[`c-switch-${this.shape}`] = !!this.shape;
        this.classes[`c-switch${variant}-${this.color}`] = !!this.color;
        this.classes['c-switch-label'] = !!this.label || typeof this.label === 'string';
    }
    ngOnChanges(changes) {
        if (changes.color) {
            this.classes[`c-switch-${changes.color.previousValue}`] = false;
        }
        if (changes.size) {
            this.classes[`c-switch-${changes.size.previousValue}`] = false;
        }
        if (changes.variant) {
            this.classes[`c-switch-variant-${changes.variant.previousValue}-alt`] = false;
            this.classes[`c-switch-variant-${changes.variant.previousValue}`] = false;
        }
        if (changes.shape) {
            this.classes[`c-switch-${changes.shape.previousValue}`] = false;
        }
        this.setClasses();
    }
    onKeyDown(e) {
        if (e.code === 'Space' && e.target === this.host.firstChild) {
            e.stopImmediatePropagation();
            e.stopPropagation();
            e.preventDefault();
        }
    }
    onKeyUp(e) {
        if (e.key === 'Enter') {
            this.toggleSwitch();
        }
    }
    onClick(e) {
        if (e.target.tagName === 'INPUT') {
            if (e instanceof MouseEvent) {
                this.toggleSwitch();
            }
        }
    }
    toggleSwitch() {
        if (this.disabled) {
            return false;
        }
        this.checked = !this.checked;
        this.toggle.emit(this);
    }
}
SwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-switch',
                template: "<label [ngClass]=\"classes\" [tabindex]=\"-1\">\n  <input\n    class=\"c-switch-input form-check-input\"\n    [tabindex]=\"tabindex\"\n    [type]=\"type\"\n    [autofocus]=\"autofocus\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [name]=\"name ? name : ''\"\n    [value]=\"value\">\n  <span class=\"c-switch-slider\" attr.data-checked=\"{{labelOn}}\" attr.data-unchecked=\"{{labelOff}}\"></span>\n</label>\n",
                styles: [":host{outline:0}:host,:host .c-switch,:host .c-switch-input,:host .c-switch-slider{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host .c-switch-label:focus{outline:0}.c-switch:focus{outline-style:auto;outline-offset:1px}.c-switch-slider:focus,.c-switch:hover{outline:none}"]
            },] }
];
SwitchComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
SwitchComponent.propDecorators = {
    color: [{ type: Input }],
    variant: [{ type: Input }],
    labelOn: [{ type: Input }],
    labelOff: [{ type: Input }],
    size: [{ type: Input }],
    shape: [{ type: Input }],
    name: [{ type: Input }],
    tabindex: [{ type: Input }],
    type: [{ type: Input }],
    value: [{ type: Input }],
    autofocus: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    hostTabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    toggle: [{ type: Output, args: ['checked',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onKeyUp: [{ type: HostListener, args: ['keyup', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,