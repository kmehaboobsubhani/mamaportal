import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export class SwitchComponent {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.variant = '';
        this.labelOn = '';
        this.labelOff = '';
        this.size = '';
        this.shape = '';
        this.tabindex = '0';
        this.type = 'checkbox';
        this.value = 'on';
        this.data = {};
        this._props = {
            autofocus: false,
            checked: false,
            disabled: false,
            required: false,
        };
        this.hostTabIndex = -1;
        this.toggle = new EventEmitter();
        this.classes = {};
        this.host = this.hostElement.nativeElement;
    }
    get label() {
        return !!this.labelOn || !!this.labelOff;
    }
    set autofocus(value) {
        this._props.autofocus = typeof value === 'string' || !!value;
    }
    get autofocus() {
        return this._props.autofocus;
    }
    set checked(value) {
        this._props.checked = typeof value === 'string' || !!value;
    }
    get checked() {
        return this._props.checked;
    }
    set disabled(value) {
        this._props.disabled = typeof value === 'string' || !!value;
        this.tabindex = this._props.disabled ? -1 : this.tabindex;
    }
    get disabled() {
        return this._props.disabled;
    }
    set required(value) {
        this._props.required = typeof value === 'string' || !!value;
    }
    get required() {
        return this._props.required;
    }
    ngOnInit() {
        this.data = {
            'data-checked': this.labelOn,
            'data-unchecked': this.labelOff
        };
        this.setClasses();
    }
    setClasses() {
        const variant = this.variant ? `-${this.variant}` : '';
        this.classes['c-switch'] = true;
        this.classes['form-check-label'] = true;
        this.classes[`c-switch-${this.size}`] = !!this.size;
        this.classes[`c-switch-${this.shape}`] = !!this.shape;
        this.classes[`c-switch${variant}-${this.color}`] = !!this.color;
        this.classes['c-switch-label'] = !!this.label || typeof this.label === 'string';
    }
    ngOnChanges(changes) {
        if (changes.color) {
            this.classes[`c-switch-${changes.color.previousValue}`] = false;
        }
        if (changes.size) {
            this.classes[`c-switch-${changes.size.previousValue}`] = false;
        }
        if (changes.variant) {
            this.classes[`c-switch-variant-${changes.variant.previousValue}-alt`] = false;
            this.classes[`c-switch-variant-${changes.variant.previousValue}`] = false;
        }
        if (changes.shape) {
            this.classes[`c-switch-${changes.shape.previousValue}`] = false;
        }
        this.setClasses();
    }
    onKeyDown(e) {
        if (e.code === 'Space' && e.target === this.host.firstChild) {
            e.stopImmediatePropagation();
            e.stopPropagation();
            e.preventDefault();
        }
    }
    onKeyUp(e) {
        if (e.key === 'Enter') {
            this.toggleSwitch();
        }
    }
    onClick(e) {
        if (e.target.tagName === 'INPUT') {
            if (e instanceof MouseEvent) {
                this.toggleSwitch();
            }
        }
    }
    toggleSwitch() {
        if (this.disabled) {
            return false;
        }
        this.checked = !this.checked;
        this.toggle.emit(this);
    }
}
SwitchComponent.ɵfac = function SwitchComponent_Factory(t) { return new (t || SwitchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
SwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SwitchComponent, selectors: [["c-switch"]], hostVars: 1, hostBindings: function SwitchComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function SwitchComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })("keyup", function SwitchComponent_keyup_HostBindingHandler($event) { return ctx.onKeyUp($event); })("click", function SwitchComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.hostTabIndex);
    } }, inputs: { variant: "variant", labelOn: "labelOn", labelOff: "labelOff", size: "size", shape: "shape", tabindex: "tabindex", type: "type", value: "value", autofocus: "autofocus", checked: "checked", disabled: "disabled", required: "required", color: "color", name: "name" }, outputs: { toggle: "checked" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 12, consts: [[3, "ngClass", "tabindex"], [1, "c-switch-input", "form-check-input", 3, "tabindex", "type", "autofocus", "checked", "disabled", "required", "name", "value"], [1, "c-switch-slider"]], template: function SwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelement(1, "input", 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.classes)("tabindex", -1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("tabindex", ctx.tabindex)("type", ctx.type)("autofocus", ctx.autofocus)("checked", ctx.checked)("disabled", ctx.disabled)("required", ctx.required)("name", ctx.name ? ctx.name : "")("value", ctx.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("data-checked", ctx.labelOn)("data-unchecked", ctx.labelOff);
    } }, directives: [ɵngcc1.NgClass], styles: ["[_nghost-%COMP%]{outline:0}[_nghost-%COMP%], [_nghost-%COMP%]   .c-switch[_ngcontent-%COMP%], [_nghost-%COMP%]   .c-switch-input[_ngcontent-%COMP%], [_nghost-%COMP%]   .c-switch-slider[_ngcontent-%COMP%]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[_nghost-%COMP%]   .c-switch-label[_ngcontent-%COMP%]:focus{outline:0}.c-switch[_ngcontent-%COMP%]:focus{outline-style:auto;outline-offset:1px}.c-switch-slider[_ngcontent-%COMP%]:focus, .c-switch[_ngcontent-%COMP%]:hover{outline:none}"] });
SwitchComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
SwitchComponent.propDecorators = {
    color: [{ type: Input }],
    variant: [{ type: Input }],
    labelOn: [{ type: Input }],
    labelOff: [{ type: Input }],
    size: [{ type: Input }],
    shape: [{ type: Input }],
    name: [{ type: Input }],
    tabindex: [{ type: Input }],
    type: [{ type: Input }],
    value: [{ type: Input }],
    autofocus: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    hostTabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    toggle: [{ type: Output, args: ['checked',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onKeyUp: [{ type: HostListener, args: ['keyup', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwitchComponent, [{
        type: Component,
        args: [{
                selector: 'c-switch',
                template: "<label [ngClass]=\"classes\" [tabindex]=\"-1\">\n  <input\n    class=\"c-switch-input form-check-input\"\n    [tabindex]=\"tabindex\"\n    [type]=\"type\"\n    [autofocus]=\"autofocus\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [name]=\"name ? name : ''\"\n    [value]=\"value\">\n  <span class=\"c-switch-slider\" attr.data-checked=\"{{labelOn}}\" attr.data-unchecked=\"{{labelOff}}\"></span>\n</label>\n",
                styles: [":host{outline:0}:host,:host .c-switch,:host .c-switch-input,:host .c-switch-slider{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host .c-switch-label:focus{outline:0}.c-switch:focus{outline-style:auto;outline-offset:1px}.c-switch-slider:focus,.c-switch:hover{outline:none}"]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { variant: [{
            type: Input
        }], labelOn: [{
            type: Input
        }], labelOff: [{
            type: Input
        }], size: [{
            type: Input
        }], shape: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], type: [{
            type: Input
        }], value: [{
            type: Input
        }], hostTabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], toggle: [{
            type: Output,
            args: ['checked']
        }], autofocus: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], required: [{
            type: Input
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onKeyUp: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], color: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,