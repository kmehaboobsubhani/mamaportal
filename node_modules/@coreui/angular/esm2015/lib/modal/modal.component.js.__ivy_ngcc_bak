import { Component, ContentChild, ElementRef, ChangeDetectorRef, Input, HostListener, Renderer2, Inject, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
export class ModalComponent {
    constructor(document, renderer, elementRef, changeDetectorRef) {
        this.document = document;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.closeOnBackdrop = true;
        this.size = '';
        this.color = '';
        this.modalClasses = {
            modal: true,
            fade: true
        };
        this.dialogClasses = {
            'modal-dialog': true
        };
        this.backdropClasses = {
            'modal-backdrop': true,
            fade: true,
            show: true
        };
        this.visible = false;
        this.visibleAnimate = false;
    }
    ngOnInit() {
        this.setClasses();
    }
    ngOnDestroy() {
        this.hide();
    }
    setClasses() {
        this.dialogClasses[`modal-${this.size}`] = !!this.size;
        this.dialogClasses[`modal-${this.color}`] = !!this.color;
    }
    show() {
        this.renderer.addClass(this.document.body, 'modal-open');
        this.visible = true;
        this.modalClasses[`d-block`] = true;
        setTimeout(() => {
            this.visibleAnimate = true;
        });
    }
    hide() {
        this.renderer.removeClass(this.document.body, 'modal-open');
        this.visibleAnimate = false;
        setTimeout(() => {
            this.visible = false;
            this.modalClasses[`d-block`] = false;
            this.changeDetectorRef.markForCheck();
        }, 200);
    }
    onContainerClicked(event) {
        if (event.target.classList.contains('modal') && this.isTopmost() && this.closeOnBackdrop) {
            this.hide();
        }
    }
    onKeyDownHandler(event) {
        if (event.key === 'Escape' && this.isTopmost()) {
            this.hide();
        }
    }
    isTopmost() {
        const isTopmost = !this.elementRef.nativeElement.querySelector(':scope c-modal > .modal');
        return isTopmost;
    }
}
ModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-modal',
                template: "<div\n  role=\"dialog\"\n  tabindex=\"-1\"\n  [class.show]=\"visibleAnimate\"\n  [ngClass]=\"modalClasses\"\n  *ngIf=\"visible\">\n  <div [ngClass]=\"dialogClasses\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <ng-container *ngTemplateOutlet=\"header\" class=\"modal-title\"></ng-container>\n        <button class=\"close\" data-dismiss=\"modal\" type=\"button\" aria-label=\"Close\" (click)=\"hide()\">\u00D7</button>\n      </div>\n      <div class=\"modal-body\">\n        <ng-container *ngTemplateOutlet=\"body\"></ng-container>\n      </div>\n      <div class=\"modal-footer\">\n        <ng-container *ngTemplateOutlet=\"footer\"></ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n<div\n  *ngIf=\"visibleAnimate\"\n  [ngClass]=\"backdropClasses\">\n</div>\n",
                styles: [""]
            },] }
];
ModalComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
ModalComponent.propDecorators = {
    header: [{ type: ContentChild, args: ['modalHeader', { static: true },] }],
    body: [{ type: ContentChild, args: ['modalBody', { static: true },] }],
    footer: [{ type: ContentChild, args: ['modalFooter', { static: true },] }],
    closeOnBackdrop: [{ type: Input }],
    size: [{ type: Input }],
    color: [{ type: Input }],
    onContainerClicked: [{ type: HostListener, args: ['click', ['$event'],] }],
    onKeyDownHandler: [{ type: HostListener, args: ['document:keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9tb2RhbC9tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxZQUFZLEVBQ1osVUFBVSxFQUdWLGlCQUFpQixFQUNqQixLQUFLLEVBQ0wsWUFBWSxFQUFVLFNBQVMsRUFBRSxNQUFNLEdBQ3hDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQU96QyxNQUFNLE9BQU8sY0FBYztJQXVCekIsWUFDNEIsUUFBYSxFQUMvQixRQUFtQixFQUNuQixVQUFzQixFQUN0QixpQkFBb0M7UUFIbEIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUMvQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQXZCckMsb0JBQWUsR0FBRyxJQUFJLENBQUM7UUFDdkIsU0FBSSxHQUE0QixFQUFFLENBQUM7UUFDbkMsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUVwQixpQkFBWSxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUM7UUFDRixrQkFBYSxHQUFHO1lBQ2QsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQztRQUNGLG9CQUFlLEdBQUc7WUFDaEIsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQztRQUNGLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsbUJBQWMsR0FBRyxLQUFLLENBQUM7SUFPbkIsQ0FBQztJQUVMLFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN2RCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDM0QsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztRQUV6RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNwQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRTVELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNyQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUdELGtCQUFrQixDQUFDLEtBQWlCO1FBQ2xDLElBQUssS0FBSyxDQUFDLE1BQXNCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6RyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtJQUNILENBQUM7SUFHRCxnQkFBZ0IsQ0FBQyxLQUFvQjtRQUVuQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtJQUNILENBQUM7SUFLRCxTQUFTO1FBQ1AsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUMxRixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7WUF6RkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxTQUFTO2dCQUNuQix1MEJBQXFDOzthQUV0Qzs7OzRDQXlCSSxNQUFNLFNBQUMsUUFBUTtZQWpDSSxTQUFTO1lBTC9CLFVBQVU7WUFHVixpQkFBaUI7OztxQkFZaEIsWUFBWSxTQUFDLGFBQWEsRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUM7bUJBQzFDLFlBQVksU0FBQyxXQUFXLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDO3FCQUN4QyxZQUFZLFNBQUMsYUFBYSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQzs4QkFDMUMsS0FBSzttQkFDTCxLQUFLO29CQUNMLEtBQUs7aUNBeURMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7K0JBT2hDLFlBQVksU0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25EZXN0cm95LFxuICBDb250ZW50Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIFRlbXBsYXRlUmVmLFxuICAvLyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIElucHV0LFxuICBIb3N0TGlzdGVuZXIsIE9uSW5pdCwgUmVuZGVyZXIyLCBJbmplY3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYy1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tb2RhbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21vZGFsLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIEBDb250ZW50Q2hpbGQoJ21vZGFsSGVhZGVyJywge3N0YXRpYzogdHJ1ZX0pIGhlYWRlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgQENvbnRlbnRDaGlsZCgnbW9kYWxCb2R5Jywge3N0YXRpYzogdHJ1ZX0pIGJvZHk6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBDb250ZW50Q2hpbGQoJ21vZGFsRm9vdGVyJywge3N0YXRpYzogdHJ1ZX0pIGZvb3RlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgY2xvc2VPbkJhY2tkcm9wID0gdHJ1ZTtcbiAgQElucHV0KCkgc2l6ZTogJ3NtJyB8ICcnIHwgJ2xnJyB8ICd4bCcgPSAnJztcbiAgQElucHV0KCkgY29sb3IgPSAnJztcblxuICBtb2RhbENsYXNzZXMgPSB7XG4gICAgbW9kYWw6IHRydWUsXG4gICAgZmFkZTogdHJ1ZVxuICB9O1xuICBkaWFsb2dDbGFzc2VzID0ge1xuICAgICdtb2RhbC1kaWFsb2cnOiB0cnVlXG4gIH07XG4gIGJhY2tkcm9wQ2xhc3NlcyA9IHtcbiAgICAnbW9kYWwtYmFja2Ryb3AnOiB0cnVlLFxuICAgIGZhZGU6IHRydWUsXG4gICAgc2hvdzogdHJ1ZVxuICB9O1xuICB2aXNpYmxlID0gZmFsc2U7XG4gIHZpc2libGVBbmltYXRlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55LFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldENsYXNzZXMoKTtcbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgfVxuXG4gIHNldENsYXNzZXMoKSB7XG4gICAgdGhpcy5kaWFsb2dDbGFzc2VzW2Btb2RhbC0ke3RoaXMuc2l6ZX1gXSA9ICEhdGhpcy5zaXplO1xuICAgIHRoaXMuZGlhbG9nQ2xhc3Nlc1tgbW9kYWwtJHt0aGlzLmNvbG9yfWBdID0gISF0aGlzLmNvbG9yO1xuICB9XG5cbiAgc2hvdygpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZG9jdW1lbnQuYm9keSwgJ21vZGFsLW9wZW4nKTtcblxuICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5tb2RhbENsYXNzZXNbYGQtYmxvY2tgXSA9IHRydWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnZpc2libGVBbmltYXRlID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGhpZGUoKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmRvY3VtZW50LmJvZHksICdtb2RhbC1vcGVuJyk7XG5cbiAgICB0aGlzLnZpc2libGVBbmltYXRlID0gZmFsc2U7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMubW9kYWxDbGFzc2VzW2BkLWJsb2NrYF0gPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfSwgMjAwKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgb25Db250YWluZXJDbGlja2VkKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgaWYgKChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC5jb250YWlucygnbW9kYWwnKSAmJiB0aGlzLmlzVG9wbW9zdCgpICYmIHRoaXMuY2xvc2VPbkJhY2tkcm9wKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duJywgWyckZXZlbnQnXSlcbiAgb25LZXlEb3duSGFuZGxlcihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIC8vIElmIEVTQyBrZXkgYW5kIFRPUCBNT1NUIG1vZGFsLCBjbG9zZSBpdC5cbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJyAmJiB0aGlzLmlzVG9wbW9zdCgpKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgbW9kYWwgaXMgdGhlIHRvcCBtb3N0IG1vZGFsLlxuICAgKi9cbiAgaXNUb3Btb3N0KCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGlzVG9wbW9zdCA9ICF0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgYy1tb2RhbCA+IC5tb2RhbCcpO1xuICAgIHJldHVybiBpc1RvcG1vc3Q7XG4gIH1cbn1cbiJdfQ==