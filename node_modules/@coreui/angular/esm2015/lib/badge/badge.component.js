import { Component, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class BadgeComponent {
    constructor(hostElement, renderer) {
        this.hostElement = hostElement;
        this.renderer = renderer;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            badge: true,
            [`badge-${this.color}`]: !!this.color,
            [`badge-${this.shape}`]: !!this.shape
        });
        return classes;
    }
    ngOnChanges(changes) {
        if (changes.color) {
            const classOff = `badge-${changes.color.previousValue}`;
            this.renderer.removeClass(this.hostElement.nativeElement, classOff);
        }
        if (changes.shape) {
            const classOff = `badge-${changes.shape.previousValue}`;
            this.renderer.removeClass(this.hostElement.nativeElement, classOff);
        }
    }
}
BadgeComponent.ɵfac = function BadgeComponent_Factory(t) { return new (t || BadgeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
BadgeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BadgeComponent, selectors: [["c-badge"]], hostVars: 2, hostBindings: function BadgeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { shape: "shape", color: "color" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function BadgeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
BadgeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
BadgeComponent.propDecorators = {
    shape: [{ type: Input }],
    color: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BadgeComponent, [{
        type: Component,
        args: [{
                selector: 'c-badge',
                template: '<ng-content></ng-content>',
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], shape: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2JhZGdlL2JhZGdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDN0csT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDOzs7O0FBT3BDLE1BQU0sT0FBTyxjQUFjO0FBQUksSUFzQjdCLFlBQ1UsV0FBdUIsRUFDdkIsUUFBbUI7QUFDN0IsUUFGVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtBQUFFLFFBQ3pCLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBRSxJQUMzQixDQUFDO0FBQ1AsSUFyQkUsSUFDSSxVQUFVO0FBQ2hCLFFBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxXQUFXO0FBQ2pCLFFBQ0ksTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QjtBQUNOLFlBQVEsS0FBSyxFQUFFLElBQUk7QUFDbkIsWUFBUSxDQUFDLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLO0FBQzdDLFlBQVEsQ0FBQyxTQUFTLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztBQUM3QyxTQUFPLENBQ0YsQ0FBQztBQUNOLFFBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsSUFBRSxDQUFDO0FBQ0gsSUFNUyxXQUFXLENBQUMsT0FBc0I7QUFBSyxRQUM1QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDdkIsWUFBTSxNQUFNLFFBQVEsR0FBRyxTQUFTLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDOUQsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRSxTQUFLO0FBQ0wsUUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDdkIsWUFBTSxNQUFNLFFBQVEsR0FBRyxTQUFTLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDOUQsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRSxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7NENBMUNDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUUsU0FBUyxtQkFDbkIsUUFBUSxFQUFFLDJCQUEyQjtpQkFFdEM7Ozs7O3lCQUNJO0FBQUU7QUFBeUMsWUFSN0IsVUFBVTtBQUFLLFlBQTRCLFNBQVM7QUFBSTtBQUFJO0FBQzVFLG9CQVNBLEtBQUs7QUFBTSxvQkFDWCxLQUFLO0FBQU0seUJBRVgsV0FBVyxTQUFDLE9BQU87QUFDbEI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFkQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBc0JBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFwQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQXpDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjLWJhZGdlJyxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxyXG4gIHN0eWxlVXJsczogWycuL2JhZGdlLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEJhZGdlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KCkgc2hhcGU6IHN0cmluZztcclxuICBASW5wdXQoKSBjb2xvcjogc3RyaW5nO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcclxuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xyXG5cclxuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKFxyXG4gICAgICB7XHJcbiAgICAgICAgYmFkZ2U6IHRydWUsXHJcbiAgICAgICAgW2BiYWRnZS0ke3RoaXMuY29sb3J9YF06ICEhdGhpcy5jb2xvcixcclxuICAgICAgICBbYGJhZGdlLSR7dGhpcy5zaGFwZX1gXTogISF0aGlzLnNoYXBlXHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgKSB7IH1cclxuXHJcbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmIChjaGFuZ2VzLmNvbG9yKSB7XHJcbiAgICAgIGNvbnN0IGNsYXNzT2ZmID0gYGJhZGdlLSR7Y2hhbmdlcy5jb2xvci5wcmV2aW91c1ZhbHVlfWA7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBjbGFzc09mZik7XHJcbiAgICB9XHJcbiAgICBpZiAoY2hhbmdlcy5zaGFwZSkge1xyXG4gICAgICBjb25zdCBjbGFzc09mZiA9IGBiYWRnZS0ke2NoYW5nZXMuc2hhcGUucHJldmlvdXNWYWx1ZX1gO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgY2xhc3NPZmYpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=