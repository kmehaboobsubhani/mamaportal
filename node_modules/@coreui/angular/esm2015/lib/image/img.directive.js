import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';
export class ImgDirective {
    constructor() {
        this.align = '';
        this.placeholderColor = 'transparent';
    }
    get getStyles() {
        return { backgroundColor: this.placeholderColor };
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames(this.alignClass, {
            'img-thumbnail': this.thumbnail,
            'img-fluid': this.fluid || this.fluidGrow,
            'w-100': this.fluidGrow,
            'd-block': this.block,
            [`${this.shape}`]: this.shape,
        });
        return classes;
    }
    get alignClass() {
        return this.align === 'center' ? 'mx-auto' :
            this.align === 'right' ? 'float-right' :
                this.align === 'left' ? 'float-left' : '';
    }
    ngOnInit() { }
}
ImgDirective.ɵfac = function ImgDirective_Factory(t) { return new (t || ImgDirective)(); };
ImgDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ImgDirective, selectors: [["", "cImg", ""]], hostVars: 4, hostBindings: function ImgDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ctx.getStyles);
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { align: "align", placeholderColor: "placeholderColor", block: "block", fluid: "fluid", fluidGrow: "fluidGrow", shape: "shape", thumbnail: "thumbnail" } });
ImgDirective.ctorParameters = () => [];
ImgDirective.propDecorators = {
    block: [{ type: Input }],
    fluid: [{ type: Input }],
    fluidGrow: [{ type: Input }],
    shape: [{ type: Input }],
    thumbnail: [{ type: Input }],
    align: [{ type: Input }],
    placeholderColor: [{ type: Input }],
    getStyles: [{ type: HostBinding, args: ['style',] }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImgDirective, [{
        type: Directive,
        args: [{
                selector: '[cImg]'
            }]
    }], function () { return []; }, { align: [{
            type: Input
        }], placeholderColor: [{
            type: Input
        }], getStyles: [{
            type: HostBinding,
            args: ['style']
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], block: [{
            type: Input
        }], fluid: [{
            type: Input
        }], fluidGrow: [{
            type: Input
        }], shape: [{
            type: Input
        }], thumbnail: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9pbWFnZS9pbWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7O0FBS3BDLE1BQU0sT0FBTyxZQUFZO0FBQUksSUF3QzNCO0FBQWlCLFFBakNSLFVBQUssR0FBcUMsRUFBRSxDQUFDO0FBQ3hELFFBQVcscUJBQWdCLEdBQUcsYUFBYSxDQUFDO0FBQzVDLElBK0JpQixDQUFDO0FBQ2xCLElBL0JFLElBQ0ksU0FBUztBQUNmLFFBQUksT0FBTyxFQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQztBQUNwRCxJQUFFLENBQUM7QUFDSCxJQUNFLElBQ0ksVUFBVTtBQUNoQixRQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksV0FBVztBQUNqQixRQUFJLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FDeEIsSUFBSSxDQUFDLFVBQVUsRUFDZjtBQUNOLFlBQVEsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQ3ZDLFlBQVEsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVM7QUFDakQsWUFBUSxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVM7QUFDL0IsWUFBUSxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDN0IsWUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDckMsU0FBTyxDQUNGLENBQUM7QUFDTixRQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxVQUFVO0FBQ2hCLFFBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEQsWUFBTSxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDOUMsZ0JBQVEsSUFBSSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2xELElBQUUsQ0FBQztBQUNILElBR0UsUUFBUSxLQUFVLENBQUM7QUFDckI7MENBOUNDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUU7S0FBUSxlQUNuQjs7OzZLQUNJO0FBQUU7QUFDTjtBQUVHLG9CQURELEtBQUs7QUFBTSxvQkFDWCxLQUFLO0FBQU0sd0JBQ1gsS0FBSztBQUFNLG9CQUNYLEtBQUs7QUFBTSx3QkFDWCxLQUFLO0FBQU0sb0JBQ1gsS0FBSztBQUFNLCtCQUNYLEtBQUs7QUFBTSx3QkFFWCxXQUFXLFNBQUMsT0FBTztBQUNqQix5QkFJRixXQUFXLFNBQUMsT0FBTztBQUNsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBd0NBLEFBakNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBZ0NBLEFBQUEsQUE5QkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQTdDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbY0ltZ10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbWdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBASW5wdXQoKSBibG9jazogYm9vbGVhbjtcclxuICBASW5wdXQoKSBmbHVpZDogYm9vbGVhbjtcclxuICBASW5wdXQoKSBmbHVpZEdyb3c6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgc2hhcGU6IHN0cmluZyB8ICdyb3VuZGVkJyB8ICdyb3VuZGVkLXRvcCcgfCAncm91bmRlZC1yaWdodCcgfCAncm91bmRlZC1ib3R0b20nIHwgJ3JvdW5kZWQtbGVmdCcgfCAncm91bmRlZC1jaXJjbGUnIHwgJ3JvdW5kZWQtcGlsbCcgfCAncm91bmRlZC0wJyB8ICdyb3VuZGVkLXNtJyB8ICdyb3VuZGVkLWxnJyA7XHJcbiAgQElucHV0KCkgdGh1bWJuYWlsOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGFsaWduOiAnJyB8ICdsZWZ0JyB8ICdyaWdodCcgfCAnY2VudGVyJyA9ICcnO1xyXG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ3N0eWxlJylcclxuICBnZXQgZ2V0U3R5bGVzKCkge1xyXG4gICAgcmV0dXJuIHtiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucGxhY2Vob2xkZXJDb2xvcn07XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcclxuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoXHJcbiAgICAgIHRoaXMuYWxpZ25DbGFzcyxcclxuICAgICAge1xyXG4gICAgICAgICdpbWctdGh1bWJuYWlsJzogdGhpcy50aHVtYm5haWwsXHJcbiAgICAgICAgJ2ltZy1mbHVpZCc6IHRoaXMuZmx1aWQgfHwgdGhpcy5mbHVpZEdyb3csXHJcbiAgICAgICAgJ3ctMTAwJzogdGhpcy5mbHVpZEdyb3csXHJcbiAgICAgICAgJ2QtYmxvY2snOiB0aGlzLmJsb2NrLFxyXG4gICAgICAgIFtgJHt0aGlzLnNoYXBlfWBdOiB0aGlzLnNoYXBlLFxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgYWxpZ25DbGFzcygpIHtcclxuICAgIHJldHVybiB0aGlzLmFsaWduID09PSAnY2VudGVyJyA/ICdteC1hdXRvJyA6XHJcbiAgICAgIHRoaXMuYWxpZ24gPT09ICdyaWdodCcgPyAnZmxvYXQtcmlnaHQnIDpcclxuICAgICAgICB0aGlzLmFsaWduID09PSAnbGVmdCcgPyAnZmxvYXQtbGVmdCcgOiAnJztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7fVxyXG59XHJcbiJdfQ==