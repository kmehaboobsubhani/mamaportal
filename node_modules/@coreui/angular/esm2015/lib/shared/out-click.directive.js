import { Directive, ElementRef, HostListener, } from '@angular/core';
import { OutClickService } from './out-click.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './out-click.service';
export class OutClickDirective {
    constructor(elementRef, outClickService) {
        this.elementRef = elementRef;
        this.outClickService = outClickService;
    }
    onDocumentClick($event) {
        const targetElement = $event.target;
        if (targetElement && !this.elementRef.nativeElement.contains(targetElement)) {
            this.outClickService.onClick({ event: $event });
        }
    }
    ngOnInit() {
        this.outClickSubscription = this.outClickService.outClick$.subscribe((message) => {
        });
    }
    ngOnDestroy() {
        this.outClickSubscription.unsubscribe();
    }
}
OutClickDirective.ɵfac = function OutClickDirective_Factory(t) { return new (t || OutClickDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OutClickService)); };
OutClickDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OutClickDirective, selectors: [["", "cOutClick", ""]], hostBindings: function OutClickDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function OutClickDirective_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, exportAs: ["cOutClick"] });
OutClickDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: OutClickService }
];
OutClickDirective.propDecorators = {
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OutClickDirective, [{
        type: Directive,
        args: [{
                selector: '[cOutClick]',
                exportAs: 'cOutClick'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.OutClickService }]; }, { onDocumentClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0LWNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9zaGFyZWQvb3V0LWNsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEdBR2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7QUFTdEQsTUFBTSxPQUFPLGlCQUFpQjtBQUFJLElBR2hDLFlBQ1UsVUFBc0IsRUFDdEIsZUFBZ0M7QUFDeEMsUUFGUSxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQ2xDLFFBQVksb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQzNDLElBQUksQ0FBQztBQUVOLElBQ1MsZUFBZSxDQUFDLE1BQWtCO0FBQUssUUFDNUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQXFCLENBQUM7QUFDdEQsUUFFRyxJQUFJLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNoRixZQUFLLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDckQsU0FBSTtBQUNKLElBQUMsQ0FBQztBQUVILElBQUUsUUFBUTtBQUNULFFBQUcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FDbEUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtBQUNqQixRQUVLLENBQUMsQ0FDRixDQUFDO0FBQ0wsSUFBQyxDQUFDO0FBRUgsSUFBRSxXQUFXO0FBQ1osUUFBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDM0MsSUFBQyxDQUFDO0FBQ0Y7K0NBbENBLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUUsYUFBYSxtQkFDdkIsUUFBUSxFQUFFLFdBQVcsZ0JBQ3RCOzs7b0NBQ0s7QUFBRTtBQUE0QyxZQWZsRCxVQUFVO0FBQ1QsWUFLTSxlQUFlO0FBQUk7QUFBSTtBQUd0Qiw4QkFjUCxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDdkM7Ozs7Ozs7Ozs7O0FBMUJBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWpDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFkQSxBQUFBLEFBTUEsQUFBQSxBQWlCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT3V0Q2xpY2tTZXJ2aWNlIH0gZnJvbSAnLi9vdXQtY2xpY2suc2VydmljZSc7XG5cbi8qKlxuICogRGV0ZWN0cyBjbGljayBvdXRzaWRlIHRoZSBlbGVtZW50XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjT3V0Q2xpY2tdJyxcbiAgZXhwb3J0QXM6ICdjT3V0Q2xpY2snLFxufSlcbmV4cG9ydCBjbGFzcyBPdXRDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBvdXRDbGlja1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG91dENsaWNrU2VydmljZTogT3V0Q2xpY2tTZXJ2aWNlXG4gICkge31cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycsIFsnJGV2ZW50J10pXG4gIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soJGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9ICRldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgLy8gJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNsaWNrIHdhcyBvdXRzaWRlIHRoZSBlbGVtZW50XG4gICAgaWYgKHRhcmdldEVsZW1lbnQgJiYgIXRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKHRhcmdldEVsZW1lbnQpKSB7XG4gICAgICB0aGlzLm91dENsaWNrU2VydmljZS5vbkNsaWNrKHsgZXZlbnQ6ICRldmVudCB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm91dENsaWNrU3Vic2NyaXB0aW9uID0gdGhpcy5vdXRDbGlja1NlcnZpY2Uub3V0Q2xpY2skLnN1YnNjcmliZShcbiAgICAgIChtZXNzYWdlKSA9PiB7XG4gICAgICAgIC8vIHRvZG9cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ291dENsaWNrJywgbWVzc2FnZSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMub3V0Q2xpY2tTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19