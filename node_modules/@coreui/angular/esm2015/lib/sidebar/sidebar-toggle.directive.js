import { Directive, HostListener, Input } from '@angular/core';
import { SidebarService } from './sidebar.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './sidebar.service';
export class SidebarToggleDirective {
    constructor(sidebarService) {
        this.sidebarService = sidebarService;
    }
    toggleOpen($event) {
        $event.preventDefault();
        this.sidebarService.toggle({ open: 'toggle', id: this.id });
    }
}
SidebarToggleDirective.ɵfac = function SidebarToggleDirective_Factory(t) { return new (t || SidebarToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SidebarService)); };
SidebarToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SidebarToggleDirective, selectors: [["", "cSidebarToggle", ""]], hostBindings: function SidebarToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SidebarToggleDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } }, inputs: { id: ["cSidebarToggle", "id"] }, exportAs: ["cSidebarToggle"] });
SidebarToggleDirective.ctorParameters = () => [
    { type: SidebarService }
];
SidebarToggleDirective.propDecorators = {
    id: [{ type: Input, args: ['cSidebarToggle',] }],
    toggleOpen: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SidebarToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[cSidebarToggle]',
                exportAs: 'cSidebarToggle'
            }]
    }], function () { return [{ type: ɵngcc1.SidebarService }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], id: [{
            type: Input,
            args: ['cSidebarToggle']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL3NpZGViYXIvc2lkZWJhci10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7OztBQVNqRCxNQUFNLE9BQU8sc0JBQXNCO0FBRW5DLElBRUUsWUFDVSxjQUE4QjtBQUN0QyxRQURRLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUN6QyxJQUFJLENBQUM7QUFFTixJQUNFLFVBQVUsQ0FBQyxNQUFXO0FBQ3ZCLFFBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzNCLFFBRUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMvRCxJQUFDLENBQUM7QUFDRjtvREFuQkEsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSxrQkFBa0IsbUJBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7U0FDM0I7O21GQUNLO0FBQUU7QUFFVSxZQVhWLGNBQWM7QUFBSTtBQUFJO0FBR1osaUJBUWYsS0FBSyxTQUFDLGdCQUFnQjtBQUFRLHlCQU05QixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQzlCOzs7Ozs7Ozs7Ozs7OztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFsQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBUkEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtTaWRlYmFyU2VydmljZX0gZnJvbSAnLi9zaWRlYmFyLnNlcnZpY2UnO1xuXG4vKipcbiAqIEFsbG93cyB0aGUgc2lkZWJhciB0byBiZSB0b2dnbGVkIHZpYSBjbGljay5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NTaWRlYmFyVG9nZ2xlXScsXG4gIGV4cG9ydEFzOiAnY1NpZGViYXJUb2dnbGUnLFxufSlcbmV4cG9ydCBjbGFzcyBTaWRlYmFyVG9nZ2xlRGlyZWN0aXZlIHtcblxuICBASW5wdXQoJ2NTaWRlYmFyVG9nZ2xlJykgaWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHNpZGViYXJTZXJ2aWNlOiBTaWRlYmFyU2VydmljZVxuICApIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICB0b2dnbGVPcGVuKCRldmVudDogYW55KSB7XG4gICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gY29uc3Qge2JyZWFrcG9pbnQsIGFzaWRlfSA9IHRoaXM7XG4gICAgLy8gdGhpcy5zaWRlYmFyU2VydmljZS50b2dnbGUoeyBvcGVuOiB1bmRlZmluZWQsIGJyZWFrcG9pbnQ6IGJyZWFrcG9pbnQsIGFzaWRlOiBhc2lkZSwgaWQ6IHRoaXMuaWQgfSk7XG4gICAgdGhpcy5zaWRlYmFyU2VydmljZS50b2dnbGUoeyBvcGVuOiAndG9nZ2xlJywgaWQ6IHRoaXMuaWQgfSk7XG4gIH1cbn1cbiJdfQ==