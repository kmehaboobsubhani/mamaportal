import { Component, ElementRef, HostBinding, Input, Optional, Renderer2 } from '@angular/core';
import { Router } from '@angular/router';
import { SidebarNavHelper } from './sidebar-nav.service';
import { SidebarService } from '../sidebar.service';
import { SidebarComponent } from '../sidebar.component';
export class SidebarNavComponent {
    constructor(sidebar, helper, router, renderer, hostElement, sidebarService) {
        this.sidebar = sidebar;
        this.helper = helper;
        this.router = router;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.sidebarService = sidebarService;
        this.navItems = [];
        this.dropdownMode = 'closeInactive';
        this.role = 'nav';
        this.navItemsArray = [];
    }
    get sidebarNavClass() {
        return !this.dropdownItems;
    }
    get sidebarNavDropdownItemsClass() {
        return this.dropdownItems;
    }
    ngOnChanges(changes) {
        this.navItemsArray = Array.isArray(this.navItems) ? this.navItems.slice() : [];
    }
    hideMobile() {
        if (this.sidebar && this.sidebar.hideOnMobileClick && this.sidebar.isOnMobile) {
            this.sidebarService.toggle({ open: false, sidebar: this.sidebar });
        }
    }
}
SidebarNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-sidebar-nav',
                template: "<!--<c-sidebar-nav-items-->\r\n<!--  class=\"c-sidebar-nav\"-->\r\n<!--  [items]=\"navItemsArray\">-->\r\n<!--</c-sidebar-nav-items>-->\r\n<ng-container *ngFor=\"let item of navItemsArray\">\r\n  <ng-container [ngSwitch]=\"helper.itemType(item)\">\r\n    <c-sidebar-nav-dropdown\r\n      *ngSwitchCase=\"'dropdown'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\">\r\n    </c-sidebar-nav-dropdown>\r\n<!--\r\n    <c-sidebar-nav-dropdown\r\n      *ngSwitchCase=\"'dropdown'\"\r\n      [item]=\"item\"\r\n      [class.c-show]=\"helper.isActive(router, item)\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      cSidebarNavDropdown\r\n      [dropdownMode]=\"dropdownMode\"\r\n      [routerLinkActive]=\"'c-show'\">\r\n    </c-sidebar-nav-dropdown>\r\n-->\r\n    <c-sidebar-nav-divider\r\n      *ngSwitchCase=\"'divider'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      [cHtmlAttr]=\"item.attributes\">\r\n    </c-sidebar-nav-divider>\r\n    <c-sidebar-nav-title\r\n      *ngSwitchCase=\"'title'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      [cHtmlAttr]=\"item.attributes\">\r\n    </c-sidebar-nav-title>\r\n    <c-sidebar-nav-label\r\n      *ngSwitchCase=\"'label'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\">\r\n    </c-sidebar-nav-label>\r\n    <ng-container\r\n      *ngSwitchCase=\"'empty'\">\r\n    </ng-container>\r\n    <c-sidebar-nav-link\r\n      *ngSwitchDefault\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      (linkClick)=\"hideMobile()\"\r\n    >\r\n    </c-sidebar-nav-link>\r\n  </ng-container>\r\n</ng-container>\r\n",
                styles: [':host {flex: 1;}',
                    '.c-sidebar-minimized :host {overflow: visible !important;}']
            },] }
];
SidebarNavComponent.ctorParameters = () => [
    { type: SidebarComponent, decorators: [{ type: Optional }] },
    { type: SidebarNavHelper },
    { type: Router },
    { type: Renderer2 },
    { type: ElementRef },
    { type: SidebarService }
];
SidebarNavComponent.propDecorators = {
    navItems: [{ type: Input }],
    dropdownMode: [{ type: Input }],
    dropdownItems: [{ type: Input }],
    sidebarNavClass: [{ type: HostBinding, args: ['class.c-sidebar-nav',] }],
    sidebarNavDropdownItemsClass: [{ type: HostBinding, args: ['class.c-sidebar-nav-dropdown-items',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1uYXYuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9zaWRlYmFyL3NpZGViYXItbmF2L3NpZGViYXItbmF2LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFhLFFBQVEsRUFBRSxTQUFTLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZILE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUl6QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFVdEQsTUFBTSxPQUFPLG1CQUFtQjtJQW1COUIsWUFDcUIsT0FBeUIsRUFDckMsTUFBd0IsRUFDeEIsTUFBYyxFQUNiLFFBQW1CLEVBQ25CLFdBQXVCLEVBQ3ZCLGNBQThCO1FBTG5CLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ3JDLFdBQU0sR0FBTixNQUFNLENBQWtCO1FBQ3hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQXhCL0IsYUFBUSxHQUFlLEVBQUUsQ0FBQztRQUMxQixpQkFBWSxHQUFnRCxlQUFlLENBQUM7UUFhM0QsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUVoQyxrQkFBYSxHQUFlLEVBQUUsQ0FBQztJQVNsQyxDQUFDO0lBckJMLElBQ0ksZUFBZTtRQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFDSSw0QkFBNEI7UUFDOUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFlTSxXQUFXLENBQUMsT0FBc0I7UUFFdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2pGLENBQUM7SUFFTSxVQUFVO1FBT2YsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDN0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztTQUNsRTtJQUNILENBQUM7OztZQW5ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLGdzREFBMkM7eUJBRXpDLGtCQUFrQjtvQkFDbEIsNERBQTREO2FBRS9EOzs7WUFUTyxnQkFBZ0IsdUJBOEJuQixRQUFRO1lBaENMLGdCQUFnQjtZQUpmLE1BQU07WUFEeUQsU0FBUztZQUE5RCxVQUFVO1lBTXJCLGNBQWM7Ozt1QkFZbkIsS0FBSzsyQkFDTCxLQUFLOzRCQUNMLEtBQUs7OEJBRUwsV0FBVyxTQUFDLHFCQUFxQjsyQ0FLakMsV0FBVyxTQUFDLG9DQUFvQzttQkFLaEQsV0FBVyxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkNoYW5nZXMsIE9wdGlvbmFsLCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbmltcG9ydCB7IElOYXZEYXRhIH0gZnJvbSAnLi9zaWRlYmFyLW5hdic7XHJcbmltcG9ydCB7U2lkZWJhck5hdkhlbHBlcn0gZnJvbSAnLi9zaWRlYmFyLW5hdi5zZXJ2aWNlJztcclxuaW1wb3J0IHtTaWRlYmFyU2VydmljZX0gZnJvbSAnLi4vc2lkZWJhci5zZXJ2aWNlJztcclxuaW1wb3J0IHtTaWRlYmFyQ29tcG9uZW50fSBmcm9tICcuLi9zaWRlYmFyLmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Mtc2lkZWJhci1uYXYnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zaWRlYmFyLW5hdi5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVzOiBbXHJcbiAgICAnOmhvc3Qge2ZsZXg6IDE7fScsXHJcbiAgICAnLmMtc2lkZWJhci1taW5pbWl6ZWQgOmhvc3Qge292ZXJmbG93OiB2aXNpYmxlICFpbXBvcnRhbnQ7fSdcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaWRlYmFyTmF2Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBASW5wdXQoKSBuYXZJdGVtczogSU5hdkRhdGFbXSA9IFtdO1xyXG4gIEBJbnB1dCgpIGRyb3Bkb3duTW9kZTogJ2Nsb3NlSW5hY3RpdmUnIHwgJ25vQWN0aW9uJyB8ICdvcGVuQWN0aXZlJyA9ICdjbG9zZUluYWN0aXZlJztcclxuICBASW5wdXQoKSBkcm9wZG93bkl0ZW1zOiBib29sZWFuO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmMtc2lkZWJhci1uYXYnKVxyXG4gIGdldCBzaWRlYmFyTmF2Q2xhc3MoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuZHJvcGRvd25JdGVtcztcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYy1zaWRlYmFyLW5hdi1kcm9wZG93bi1pdGVtcycpXHJcbiAgZ2V0IHNpZGViYXJOYXZEcm9wZG93bkl0ZW1zQ2xhc3MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kcm9wZG93bkl0ZW1zO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKSByb2xlID0gJ25hdic7XHJcblxyXG4gIHB1YmxpYyBuYXZJdGVtc0FycmF5OiBJTmF2RGF0YVtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQE9wdGlvbmFsKCkgcHVibGljIHNpZGViYXI6IFNpZGViYXJDb21wb25lbnQsXHJcbiAgICBwdWJsaWMgaGVscGVyOiBTaWRlYmFyTmF2SGVscGVyLFxyXG4gICAgcHVibGljIHJvdXRlcjogUm91dGVyLFxyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgcHJpdmF0ZSBob3N0RWxlbWVudDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgc2lkZWJhclNlcnZpY2U6IFNpZGViYXJTZXJ2aWNlXHJcbiAgKSB7IH1cclxuXHJcbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdzaWRlYmFyLW5hdiBjaGFuZ2VzJywgY2hhbmdlcyk7XHJcbiAgICB0aGlzLm5hdkl0ZW1zQXJyYXkgPSBBcnJheS5pc0FycmF5KHRoaXMubmF2SXRlbXMpID8gdGhpcy5uYXZJdGVtcy5zbGljZSgpIDogW107XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGlkZU1vYmlsZSgpIHtcclxuICAgIC8vIHRvZG86IHByb3BlciBzY3JvbGxJbnRvVmlldygpIGFmdGVyIE5hdmlnYXRpb25FbmRcclxuICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZygnc2Nyb2xsJylcclxuICAgIC8vICAgdGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAvLyB9LCAxMDAwKTtcclxuICAgIC8vIHRoaXMuc2lkZWJhclNlcnZpY2UudG9nZ2xlKHtvcGVuOiBmYWxzZSwgYnJlYWtwb2ludDogJyd9KTtcclxuICAgIGlmICh0aGlzLnNpZGViYXIgJiYgdGhpcy5zaWRlYmFyLmhpZGVPbk1vYmlsZUNsaWNrICYmIHRoaXMuc2lkZWJhci5pc09uTW9iaWxlKSB7XHJcbiAgICAgIHRoaXMuc2lkZWJhclNlcnZpY2UudG9nZ2xlKHtvcGVuOiBmYWxzZSwgc2lkZWJhcjogdGhpcy5zaWRlYmFyfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==