import { Component, HostBinding, Input } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import classNames from 'classnames';
import { SidebarNavHelper } from './sidebar-nav.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './sidebar-nav.service';

function SidebarNavDropdownComponent_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 3);
    ɵngcc0.ɵɵpipe(1, "cSidebarNavIcon");
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r0.item));
} }
function SidebarNavDropdownComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵpipe(1, "cSidebarNavBadge");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.item));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.item.badge.text);
} }
export class SidebarNavDropdownComponent {
    constructor(router, helper) {
        this.router = router;
        this.helper = helper;
        this.dropdownMode = 'closeInactive';
        this.navItems = [];
        this.navigationEndObservable = router.events.pipe(filter(event => event instanceof NavigationEnd));
    }
    get getClasses() {
        return this.hostClasses;
    }
    ngOnInit() {
        this.navItems = [...this.item.children];
        this.navSubscription = this.navigationEndObservable.subscribe(event => {
            const itemArray = this.item.url.split('/');
            const urlArray = event.url.split('/');
            const samePath = itemArray.every((value, index) => value === urlArray[index]);
            this.openDropdown(samePath);
        });
    }
    openDropdown(open) {
        this.open = open;
    }
    toggleDropdown() {
        this.open = !this.open;
    }
    ngOnDestroy() {
        this.navSubscription.unsubscribe();
    }
    get hostClasses() {
        const classes = classNames(this.ngClass, this.class, {
            'c-sidebar-nav-dropdown': true,
            'c-show': this.open,
        });
        return classes;
    }
}
SidebarNavDropdownComponent.ɵfac = function SidebarNavDropdownComponent_Factory(t) { return new (t || SidebarNavDropdownComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SidebarNavHelper)); };
SidebarNavDropdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SidebarNavDropdownComponent, selectors: [["c-sidebar-nav-dropdown"]], hostVars: 2, hostBindings: function SidebarNavDropdownComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { dropdownMode: "dropdownMode", item: "item", show: "show", class: "class", ngClass: "ngClass" }, features: [ɵngcc0.ɵɵProvidersFeature([SidebarNavHelper])], decls: 6, vars: 6, consts: [["cSidebarNavDropdownToggle", "", 1, "c-sidebar-nav-dropdown-toggle", 3, "cHtmlAttr"], [3, "ngClass", 4, "ngIf"], [3, "dropdownItems", "navItems"], [3, "ngClass"]], template: function SidebarNavDropdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "a", 0);
        ɵngcc0.ɵɵtemplate(1, SidebarNavDropdownComponent_i_1_Template, 2, 3, "i", 1);
        ɵngcc0.ɵɵelementContainerStart(2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(4, SidebarNavDropdownComponent_span_4_Template, 3, 4, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "c-sidebar-nav", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("cHtmlAttr", ctx.item.attributes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helper.hasIcon(ctx.item));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.item.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helper.hasBadge(ctx.item));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("dropdownItems", true)("navItems", ctx.navItems);
    } }, styles: [".c-sidebar-nav-dropdown-toggle[_ngcontent-%COMP%]{cursor:pointer}.c-sidebar-nav-dropdown-items[_ngcontent-%COMP%]{display:block}"] });
SidebarNavDropdownComponent.ctorParameters = () => [
    { type: Router },
    { type: SidebarNavHelper }
];
SidebarNavDropdownComponent.propDecorators = {
    item: [{ type: Input }],
    dropdownMode: [{ type: Input }],
    show: [{ type: Input }],
    class: [{ type: Input }],
    ngClass: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SidebarNavDropdownComponent, [{
        type: Component,
        args: [{
                selector: 'c-sidebar-nav-dropdown',
                template: `
    <a class="c-sidebar-nav-dropdown-toggle"
       cSidebarNavDropdownToggle
       [cHtmlAttr]="item.attributes">
      <i *ngIf="helper.hasIcon(item)" [ngClass]="item | cSidebarNavIcon"></i>
      <ng-container>{{ item.name }}</ng-container>
      <span *ngIf="helper.hasBadge(item)" [ngClass]="item | cSidebarNavBadge">{{ item.badge.text }}</span>
    </a>
    <c-sidebar-nav
      [dropdownItems]="true"
      [navItems]="navItems">
    </c-sidebar-nav>
  `,
                providers: [SidebarNavHelper],
                styles: [".c-sidebar-nav-dropdown-toggle{cursor:pointer}.c-sidebar-nav-dropdown-items{display:block}"]
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.SidebarNavHelper }]; }, { dropdownMode: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], item: [{
            type: Input
        }], show: [{
            type: Input
        }], class: [{
            type: Input
        }], ngClass: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,