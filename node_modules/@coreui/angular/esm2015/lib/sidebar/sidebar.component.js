import { Component, ElementRef, HostBinding, Inject, Input, Renderer2 } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BreakpointObserver } from '@angular/cdk/layout';
import classNames from 'classnames';
import { SidebarService } from './sidebar.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/layout';
import * as ɵngcc2 from './sidebar.service';

const _c0 = ["*"];
export class SidebarComponent {
    constructor(document, renderer, hostElement, breakpointObserver, sidebarService) {
        this.document = document;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.breakpointObserver = breakpointObserver;
        this.sidebarService = sidebarService;
        this.fixed = true;
        this.unfoldable = false;
        this.overlaid = false;
        this.minimize = false;
        this.breakpoint = 'lg';
        this.mobile = 'lg';
        this.size = '';
        this.hideOnMobileClick = true;
        this.colorScheme = 'dark';
        this.minimized = this.minimize;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get getDesktopBreakpoint() {
        return getComputedStyle(this.hostElement.nativeElement).getPropertyValue(`--breakpoint-${this.breakpoint}`);
    }
    get hasBreakpoint() {
        return !!this.breakpoint;
    }
    get getMobileBreakpoint() {
        return getComputedStyle(this.hostElement.nativeElement).getPropertyValue(`--breakpoint-${this.mobile}`);
    }
    set isOnMobile(value) {
        this._isOnMobile = value;
    }
    get isOnMobile() {
        const isMobile = Boolean(this._isOnMobile);
        return isMobile;
    }
    set isOnDesktop(value) {
        this._isOnDesktop = this.hasBreakpoint ? value : false;
    }
    get isOnDesktop() {
        return this._isOnDesktop;
    }
    get isOpen() {
        let opened;
        if (this.isOnDesktop) {
            opened = this.openDesktop;
        }
        else {
            opened = (this.openMobile === true);
        }
        return opened;
    }
    get hostClasses() {
        const classes = classNames({
            'c-sidebar': true,
            'c-sidebar-fixed': this.fixed && !this.overlaid,
            'c-sidebar-right': this.aside,
            'c-sidebar-minimized': this.minimize && !this.unfoldable,
            'c-sidebar-unfoldable': this.minimize && this.unfoldable,
            'c-sidebar-overlaid': this.overlaid,
            'c-sidebar-show': this.openMobile === true,
            [`c-sidebar-${this.breakpoint}-show`]: (!!this.breakpoint) && this.openDesktop,
            [`c-sidebar-${this.colorScheme}`]: !!this.colorScheme,
            [`c-sidebar-${this.size}`]: !!this.size,
        });
        return classes;
    }
    ngOnInit() {
        this.stateToggleSubscribe();
        this.layoutChangeSubscribe();
        this.setInitialState();
    }
    layoutChangeSubscribe(subscribe = true) {
        const onDesktop = `(min-width: ${this.getDesktopBreakpoint})`;
        const onMobile = this.breakpoint === false ? `(max-width: ${this.getMobileBreakpoint})` : `(max-width: ${this.getDesktopBreakpoint})`;
        if (subscribe) {
            const layoutChanges = this.breakpointObserver.observe([
                onDesktop,
                onMobile,
            ]);
            this.layoutChangesSubscription = layoutChanges.subscribe(result => {
                this.isOnMobile = result.breakpoints[onMobile];
                this.isOnDesktop = result.breakpoints[onDesktop];
                const openMobile = this.isOnMobile ? false : this.isOpen ? this.isOpen : this.show;
                this.sidebarService.toggle({ open: openMobile, sidebar: this });
            });
        }
        else {
            this.layoutChangesSubscription.unsubscribe();
        }
    }
    ngOnDestroy() {
        this.stateToggleSubscribe(false);
        this.layoutChangeSubscribe(false);
    }
    setInitialState() {
        this.openMobile = this.isOnDesktop ? false : this.isOnMobile ? false : this.show;
        this.openDesktop = this.hasBreakpoint;
        this.sidebarService.toggle({ minimize: this.minimize, open: this.isOpen, sidebar: this });
    }
    getState() {
        return { opened: this.isOpen, minimized: this.minimized, id: this.id };
    }
    open(state) {
        const toggle = (state.open === 'toggle');
        if (this.isOnDesktop) {
            this.openDesktop = toggle ? !this.openDesktop : state.open;
            this.openMobile = false;
        }
        else {
            this.openMobile = toggle ? !this.openMobile : state.open;
            if (this.openMobile && this.isOnMobile) {
                this.setBackdrop();
            }
            else {
                this.clearBackdrop();
            }
        }
    }
    stateToggleSubscribe(subscribe = true) {
        if (subscribe) {
            this.stateToggleSubscription = this.sidebarService.sidebarState$.subscribe((state) => {
                if (this === state.sidebar || this.id === state.id) {
                    if ('minimize' in state) {
                        this.minimizeSidebar(state);
                    }
                    if ('open' in state) {
                        this.open(state);
                    }
                }
            });
        }
        else {
            this.stateToggleSubscription.unsubscribe();
        }
    }
    hideMobile(e) {
        if (this.isOpen) {
            if (!e.target.closest('[cSidebarNavDropdownToggle]')) {
                this.sidebarService.toggle({ open: false, sidebar: this });
            }
        }
    }
    setBackdrop() {
        const backdrop = this.document.getElementsByClassName('c-sidebar-backdrop');
        if (backdrop.length === 0) {
            this.backdrop = this.renderer.createElement('div');
            this.renderer.addClass(this.backdrop, 'c-sidebar-backdrop');
            this.renderer.appendChild(this.document.body, this.backdrop);
            this.renderer.listen(this.backdrop, 'click', (e) => {
                this.hideMobile(e);
            });
        }
        if (this.backdrop && this.isOnMobile && this.isOpen) {
            this.renderer.addClass(this.backdrop, 'c-show');
            this.renderer.removeClass(this.backdrop, 'd-none');
        }
        else {
            this.renderer.addClass(this.backdrop, 'd-none');
            this.renderer.removeClass(this.backdrop, 'c-show');
        }
    }
    clearBackdrop() {
        if (this.backdrop) {
            this.renderer.listen(this.backdrop, 'click', (e) => { });
            this.renderer.removeChild(this.document.body, this.backdrop);
        }
    }
    minimizeSidebar(state) {
        const toggle = (state.minimize === 'toggle');
        this.minimize = toggle ? !this.minimize : !!state.minimize;
    }
    ngOnChanges(changes) {
        if (changes.breakpoint) {
            const { previousValue, currentValue } = Object.assign({}, changes.breakpoint);
            if (typeof currentValue === 'string') {
                this.renderer.addClass(this.hostElement.nativeElement, `c-sidebar-${currentValue}-show`);
            }
            this.renderer.removeClass(this.hostElement.nativeElement, `c-sidebar-${previousValue}-show`);
        }
        if (changes.size) {
            const { previousValue, currentValue } = Object.assign({}, changes.size);
            if (typeof currentValue === 'string') {
                this.renderer.addClass(this.hostElement.nativeElement, `c-sidebar-${currentValue}`);
            }
            this.renderer.removeClass(this.hostElement.nativeElement, `c-sidebar-${previousValue}`);
        }
        if (changes.colorScheme) {
            const { previousValue, currentValue } = Object.assign({}, changes.colorScheme);
            if (typeof currentValue === 'string') {
                this.renderer.addClass(this.hostElement.nativeElement, `c-sidebar-${currentValue}`);
            }
            this.renderer.removeClass(this.hostElement.nativeElement, `c-sidebar-${previousValue}`);
        }
    }
}
SidebarComponent.ɵfac = function SidebarComponent_Factory(t) { return new (t || SidebarComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BreakpointObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SidebarService)); };
SidebarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SidebarComponent, selectors: [["c-sidebar"]], hostVars: 2, hostBindings: function SidebarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { fixed: "fixed", unfoldable: "unfoldable", overlaid: "overlaid", minimize: "minimize", breakpoint: "breakpoint", mobile: "mobile", size: "size", hideOnMobileClick: "hideOnMobileClick", colorScheme: "colorScheme", show: "show", aside: "aside", id: "id" }, exportAs: ["cSidebar"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function SidebarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
SidebarComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: BreakpointObserver },
    { type: SidebarService }
];
SidebarComponent.propDecorators = {
    fixed: [{ type: Input }],
    unfoldable: [{ type: Input }],
    overlaid: [{ type: Input }],
    minimize: [{ type: Input }],
    breakpoint: [{ type: Input }],
    mobile: [{ type: Input }],
    show: [{ type: Input }],
    size: [{ type: Input }],
    aside: [{ type: Input }],
    hideOnMobileClick: [{ type: Input }],
    colorScheme: [{ type: Input }],
    id: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SidebarComponent, [{
        type: Component,
        args: [{
                selector: 'c-sidebar',
                exportAs: 'cSidebar',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.BreakpointObserver }, { type: ɵngcc2.SidebarService }]; }, { fixed: [{
            type: Input
        }], unfoldable: [{
            type: Input
        }], overlaid: [{
            type: Input
        }], minimize: [{
            type: Input
        }], breakpoint: [{
            type: Input
        }], mobile: [{
            type: Input
        }], size: [{
            type: Input
        }], hideOnMobileClick: [{
            type: Input
        }], colorScheme: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], show: [{
            type: Input
        }], aside: [{
            type: Input
        }], id: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,