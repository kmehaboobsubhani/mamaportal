import { Component, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class CardFooterComponent {
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'card-footer': true,
            [`bg-${this.color}`]: this.color,
            [`border-${this.borderColor}`]: this.borderColor,
            [`text-${this.textColor}`]: this.textColor,
            [`text-${this.align}`]: this.align
        });
        return classes;
    }
}
CardFooterComponent.ɵfac = function CardFooterComponent_Factory(t) { return new (t || CardFooterComponent)(); };
CardFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardFooterComponent, selectors: [["c-card-footer"], ["", "c-card-footer", ""]], hostVars: 2, hostBindings: function CardFooterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { align: "align", color: "color", borderColor: "borderColor", textColor: "textColor" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function CardFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
CardFooterComponent.propDecorators = {
    align: [{ type: Input }],
    color: [{ type: Input }],
    borderColor: [{ type: Input }],
    textColor: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CardFooterComponent, [{
        type: Component,
        args: [{
                selector: 'c-card-footer, [c-card-footer]',
                template: '<ng-content></ng-content>'
            }]
    }], null, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], align: [{
            type: Input
        }], color: [{
            type: Input
        }], borderColor: [{
            type: Input
        }], textColor: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1mb290ZXIuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2NhcmQvY2FyZC1mb290ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7Ozs7QUFNcEMsTUFBTSxPQUFPLG1CQUFtQjtBQUVoQyxJQUtFLElBQ0ksVUFBVTtBQUNmLFFBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzNCLElBQUMsQ0FBQztBQUVILElBQUUsSUFBSSxXQUFXO0FBRWpCLFFBQUksTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QjtBQUNMLFlBQU8sYUFBYSxFQUFFLElBQUk7QUFDMUIsWUFBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDdkMsWUFBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVc7QUFDdkQsWUFBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVM7QUFDakQsWUFBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDekMsU0FBTSxDQUNGLENBQUM7QUFDTCxRQUFHLE9BQU8sT0FBTyxDQUFDO0FBQ2xCLElBQUMsQ0FBQztBQUNGO2lEQTdCQSxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFO2VBQWdDLG1CQUMxQyxRQUFRLEVBQUUsMkJBQTJCLGVBQ3RDOzs7Ozs2QkFDSztBQUFFO0FBRUksb0JBQVQsS0FBSztBQUFNLG9CQUNYLEtBQUs7QUFBTSwwQkFDWCxLQUFLO0FBQU0sd0JBQ1gsS0FBSztBQUFNLHlCQUVYLFdBQVcsU0FBQyxPQUFPO0FBQ2pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE1QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYy1jYXJkLWZvb3RlciwgW2MtY2FyZC1mb290ZXJdJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBDYXJkRm9vdGVyQ29tcG9uZW50IHtcblxuICBASW5wdXQoKSBhbGlnbjogJ2xlZnQnIHwgJ2NlbnRlcicgfCAncmlnaHQnO1xuICBASW5wdXQoKSBjb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBib3JkZXJDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSB0ZXh0Q29sb3I6IHN0cmluZztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgZ2V0IGdldENsYXNzZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9zdENsYXNzZXM7XG4gIH1cblxuICBnZXQgaG9zdENsYXNzZXMoKSB7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyhcbiAgICAgIHtcbiAgICAgICAgJ2NhcmQtZm9vdGVyJzogdHJ1ZSxcbiAgICAgICAgW2BiZy0ke3RoaXMuY29sb3J9YF06IHRoaXMuY29sb3IsXG4gICAgICAgIFtgYm9yZGVyLSR7dGhpcy5ib3JkZXJDb2xvcn1gXTogdGhpcy5ib3JkZXJDb2xvcixcbiAgICAgICAgW2B0ZXh0LSR7dGhpcy50ZXh0Q29sb3J9YF06IHRoaXMudGV4dENvbG9yLFxuICAgICAgICBbYHRleHQtJHt0aGlzLmFsaWdufWBdOiB0aGlzLmFsaWduXG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH1cbn1cbiJdfQ==