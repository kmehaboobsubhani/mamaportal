import { Component, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class CardComponent {
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            card: true,
            [`card-accent-${this.accentColor}`]: this.accentColor,
            [`text-${this.align}`]: this.align,
            [`bg-${this.color}`]: this.color,
            [`border-${this.borderColor}`]: this.borderColor,
            [`text-${this.textColor}`]: this.textColor
        });
        return classes;
    }
}
CardComponent.ɵfac = function CardComponent_Factory(t) { return new (t || CardComponent)(); };
CardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardComponent, selectors: [["c-card"], ["", "c-card", ""]], hostVars: 2, hostBindings: function CardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { accentColor: "accentColor", align: "align", color: "color", borderColor: "borderColor", textColor: "textColor" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function CardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
CardComponent.propDecorators = {
    accentColor: [{ type: Input }],
    align: [{ type: Input }],
    color: [{ type: Input }],
    borderColor: [{ type: Input }],
    textColor: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CardComponent, [{
        type: Component,
        args: [{
                selector: 'c-card, [c-card]',
                template: `<ng-content></ng-content>`
            }]
    }], null, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], accentColor: [{
            type: Input
        }], align: [{
            type: Input
        }], color: [{
            type: Input
        }], borderColor: [{
            type: Input
        }], textColor: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvY2FyZC9jYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDOzs7O0FBTXBDLE1BQU0sT0FBTyxhQUFhO0FBRTFCLElBT0UsSUFDSSxVQUFVO0FBQ2YsUUFBRyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDM0IsSUFBQyxDQUFDO0FBRUgsSUFBRSxJQUFJLFdBQVc7QUFFakIsUUFBSSxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQ3hCO0FBQ0wsWUFBTyxJQUFJLEVBQUUsSUFBSTtBQUNqQixZQUFPLENBQUMsZUFBZSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVztBQUM1RCxZQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSztBQUN6QyxZQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSztBQUN2QyxZQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVztBQUN2RCxZQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUNqRCxTQUFNLENBQ0YsQ0FBQztBQUNMLFFBQUcsT0FBTyxPQUFPLENBQUM7QUFDbEIsSUFBQyxDQUFDO0FBQ0Y7MkNBaENBLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUU7YUFBa0IsbUJBQzVCLFFBQVEsRUFBRSwyQkFBMkIsZUFDdEM7Ozs7OzZCQUNLO0FBQUU7QUFFSSwwQkFDVCxLQUFLO0FBQU0sb0JBQ1gsS0FBSztBQUFNLG9CQUNYLEtBQUs7QUFBTSwwQkFDWCxLQUFLO0FBQU0sd0JBQ1gsS0FBSztBQUFNLHlCQUVYLFdBQVcsU0FBQyxPQUFPO0FBQ2pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUEvQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBSUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtY2FyZCwgW2MtY2FyZF0nLFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gXG59KVxuZXhwb3J0IGNsYXNzIENhcmRDb21wb25lbnQge1xuXG4gIC8vIEBJbnB1dCgpIGJvZHlXcmFwcGVyID0gZmFsc2U7XG4gIEBJbnB1dCgpIGFjY2VudENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFsaWduOiAnbGVmdCcgfCAnY2VudGVyJyB8ICdyaWdodCcgO1xuICBASW5wdXQoKSBjb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBib3JkZXJDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSB0ZXh0Q29sb3I6IHN0cmluZztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgZ2V0IGdldENsYXNzZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9zdENsYXNzZXM7XG4gIH1cblxuICBnZXQgaG9zdENsYXNzZXMoKSB7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyhcbiAgICAgIHtcbiAgICAgICAgY2FyZDogdHJ1ZSxcbiAgICAgICAgW2BjYXJkLWFjY2VudC0ke3RoaXMuYWNjZW50Q29sb3J9YF06IHRoaXMuYWNjZW50Q29sb3IsXG4gICAgICAgIFtgdGV4dC0ke3RoaXMuYWxpZ259YF06IHRoaXMuYWxpZ24sXG4gICAgICAgIFtgYmctJHt0aGlzLmNvbG9yfWBdOiB0aGlzLmNvbG9yLFxuICAgICAgICBbYGJvcmRlci0ke3RoaXMuYm9yZGVyQ29sb3J9YF06IHRoaXMuYm9yZGVyQ29sb3IsXG4gICAgICAgIFtgdGV4dC0ke3RoaXMudGV4dENvbG9yfWBdOiB0aGlzLnRleHRDb2xvclxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG59XG4iXX0=