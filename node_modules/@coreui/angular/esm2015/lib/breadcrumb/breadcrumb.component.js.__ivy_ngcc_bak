import { Component, HostBinding, Input } from '@angular/core';
import { Observable } from 'rxjs';
export class BreadcrumbComponent {
    constructor() {
        this.divider = false;
        this.breadcrumbClass = true;
    }
    ngOnInit() {
    }
    ngOnChanges(changes) {
        if (changes.items) {
            this.setup();
        }
    }
    setup() {
        if (this.items && this.items.length > 0) {
            this.breadcrumbs = new Observable((observer) => {
                if (this.items) {
                    observer.next(this.items);
                }
            });
        }
    }
    ngOnDestroy() {
        this.breadcrumbs = null;
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-breadcrumb',
                template: "<ng-container>\n  <ng-template ngFor let-breadcrumb [ngForOf]=\"breadcrumbs | async\" let-last = last>\n    <ng-container *ngIf=\"breadcrumb.label && (breadcrumb.url.slice(-1) == '/' || last)\">\n      <div *ngIf=\"!last\" class=\"breadcrumb-item\">\n        <a [routerLink]=\"breadcrumb.url\"\n           [cHtmlAttr]=\"breadcrumb.attributes\"\n           [target]=\"breadcrumb.attributes?.target\"\n           [queryParams]=\"breadcrumb.linkProps?.queryParams\"\n           [fragment]=\"breadcrumb.linkProps?.fragment\"\n           [queryParamsHandling]=\"breadcrumb.linkProps?.queryParamsHandling\"\n           [preserveFragment]=\"breadcrumb.linkProps?.preserveFragment\"\n           [skipLocationChange]=\"breadcrumb.linkProps?.skipLocationChange\"\n           [replaceUrl]=\"breadcrumb.linkProps?.replaceUrl\"\n           [state]=\"breadcrumb.linkProps?.state\"\n           i18n>{{breadcrumb.label}}\n        </a>\n      </div>\n      <span *ngIf=\"!last && divider\" ngPreserveWhitespaces=\"true\"> {{divider}} </span>\n      <span class=\"breadcrumb-item active\" *ngIf=\"last\" [cHtmlAttr]=\"breadcrumb.attributes\" i18n>{{breadcrumb.label}}</span>\n    </ng-container>\n  </ng-template>\n  <ng-content></ng-content>\n</ng-container>\n",
                styles: [""]
            },] }
];
BreadcrumbComponent.ctorParameters = () => [];
BreadcrumbComponent.propDecorators = {
    items: [{ type: Input }],
    divider: [{ type: Input }],
    breadcrumbClass: [{ type: HostBinding, args: ['class.breadcrumb',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUE4QyxNQUFNLGVBQWUsQ0FBQztBQUd6RyxPQUFPLEVBQUMsVUFBVSxFQUFXLE1BQU0sTUFBTSxDQUFDO0FBTzFDLE1BQU0sT0FBTyxtQkFBbUI7SUFROUI7UUFMUyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ1Esb0JBQWUsR0FBRyxJQUFJLENBQUM7SUFNcEQsQ0FBQztJQUVFLFFBQVE7SUFFZixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3ZDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxLQUFLO1FBRUgsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksVUFBVSxDQUFxQixDQUFDLFFBQXNDLEVBQUUsRUFBRTtnQkFDL0YsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMzQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7OztZQXhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLHV1Q0FBMEM7O2FBRTNDOzs7O29CQUdFLEtBQUs7c0JBQ0wsS0FBSzs4QkFDTCxXQUFXLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7SUJyZWFkY3J1bWJJdGVtc30gZnJvbSAnLi9icmVhZGNydW1iJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgT2JzZXJ2ZXJ9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLWJyZWFkY3J1bWInLFxuICB0ZW1wbGF0ZVVybDogJy4vYnJlYWRjcnVtYi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2JyZWFkY3J1bWIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgaXRlbXM6IElCcmVhZGNydW1iSXRlbXNbXTtcbiAgQElucHV0KCkgZGl2aWRlciA9IGZhbHNlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJyZWFkY3J1bWInKSBicmVhZGNydW1iQ2xhc3MgPSB0cnVlO1xuXG4gIHB1YmxpYyBicmVhZGNydW1icztcblxuICBjb25zdHJ1Y3RvcihcbiAgICAvLyBwdWJsaWMgc2VydmljZTogQnJlYWRjcnVtYlNlcnZpY2UsXG4gICkgeyB9XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIHRoaXMuc2V0dXAoKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuaXRlbXMpIHtcbiAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICB9XG4gIH1cblxuICBzZXR1cCgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnYnJlYWRjcnVtYiBzZXR1cCcsIHRoaXMuaXRlbXMpXG4gICAgaWYgKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmJyZWFkY3J1bWJzID0gbmV3IE9ic2VydmFibGU8SUJyZWFkY3J1bWJJdGVtc1tdPigob2JzZXJ2ZXI6IE9ic2VydmVyPElCcmVhZGNydW1iSXRlbXNbXT4pID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICBvYnNlcnZlci5uZXh0KHRoaXMuaXRlbXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmJyZWFkY3J1bWJzID0gbnVsbDtcbiAgfVxufVxuIl19