import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2 } from '@angular/core';
import classNames from 'classnames';
import { filter } from 'rxjs/operators';
import { ToasterService } from '../toaster/toaster.service';
import { animate, state, style, transition, trigger } from '@angular/animations';
export class ToastComponent {
    constructor(hostElement, renderer, ref, toasterService) {
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.ref = ref;
        this.toasterService = toasterService;
        this.autohide = true;
        this.delay = 5000;
        this.fade = true;
        this.shown = new EventEmitter();
        this.hidden = new EventEmitter();
        this.timer = new EventEmitter();
    }
    set clock(value) {
        this._clock = value;
        this.timer.emit(this._clock);
    }
    get clock() {
        return this._clock;
    }
    get animationDisabled() {
        return !this.fade;
    }
    get animateType() {
        return this.show ? 'show' : 'hide';
    }
    onMouseOver() {
        this.clearTimer();
        this.clearClock();
    }
    onMouseOut() {
        this.setTimer();
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            toast: true,
            [`toast-${this.color}`]: !!this.color,
        });
        return classes;
    }
    ngOnInit() {
        if (this.show) {
            this.toasterService.setState({ toast: this, show: this.show, position: this.position });
            this.setTimer();
        }
        this.stateToasterSubscribe(true);
    }
    ngOnDestroy() {
        this.clearTimer();
        this.clearClock();
        this.stateToasterSubscribe(false);
    }
    ngOnChanges(changes) {
        if (changes.color) {
            this.renderer.removeClass(this.hostElement.nativeElement, `toast-${changes.color.previousValue}`);
        }
        if (changes.show) {
            this.toasterService.setState({ toast: this, show: this.show, position: this.position });
        }
    }
    setTimer() {
        this.clearTimer();
        if (this.autohide) {
            this.timerId = this.delay > 0 ? setTimeout(() => this.onClose(), this.delay) : null;
            this.setClock();
        }
    }
    clearTimer() {
        clearTimeout(this.timerId);
        this.timerId = null;
    }
    onClose() {
        this.clearTimer();
        this.show = false;
        this.hidden.emit();
        this.toasterService.setState({ toast: this, show: this.show, position: this.position });
    }
    setClock() {
        this.clearClock();
        this.clock = 0;
        this.clockId = setInterval(() => {
            this.clock += 1;
        }, 1000);
        this.clockTimerId = setTimeout(() => {
            this.clearClock();
        }, this.delay);
    }
    clearClock() {
        clearTimeout(this.clockTimerId);
        clearInterval(this.clockId);
        this.clockId = null;
    }
    stateToasterSubscribe(subscribe = true) {
        if (subscribe) {
            const filtered = this.toasterService.toasterState$.pipe(filter(state => state.toast === this));
            this.stateToasterSubscription = filtered.subscribe((state) => {
                this.state = state.toast;
            });
        }
        else {
            this.stateToasterSubscription.unsubscribe();
        }
    }
}
ToastComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-toast',
                template: "<ng-content></ng-content>\n",
                animations: [
                    trigger('fadeInOut', [
                        state('show', style({ opacity: 1 })),
                        state('void', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                        state('hide', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                        transition('show => *', [
                            animate('{{ time }} {{ easing }}', style({ opacity: 0 })),
                            animate('{{ time }} {{ easing }}', style({ height: 0, padding: 0, border: 0, margin: 0 })),
                        ], {
                            params: { time: '300ms', easing: 'ease-out' }
                        }),
                        transition('* => show', [
                            animate('{{ time }} {{ easing }}', style({ opacity: 1, height: '*', padding: '*', border: '*', margin: '*' })),
                        ], {
                            params: { time: '300ms', easing: 'ease-in' }
                        })
                    ])
                ],
                styles: [""]
            },] }
];
ToastComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ToasterService }
];
ToastComponent.propDecorators = {
    autohide: [{ type: Input }],
    color: [{ type: Input }],
    delay: [{ type: Input }],
    fade: [{ type: Input }],
    show: [{ type: Input }],
    index: [{ type: Input }],
    shown: [{ type: Output }],
    hidden: [{ type: Output }],
    timer: [{ type: Output }],
    animationDisabled: [{ type: HostBinding, args: ['@.disabled',] }],
    animateType: [{ type: HostBinding, args: ['@fadeInOut',] }],
    onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
    onMouseOut: [{ type: HostListener, args: ['mouseout',] }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,