import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2 } from '@angular/core';
import classNames from 'classnames';
import { filter } from 'rxjs/operators';
import { ToasterService } from '../toaster/toaster.service';
import { animate, state, style, transition, trigger } from '@angular/animations';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../toaster/toaster.service';

const _c0 = ["*"];
export class ToastComponent {
    constructor(hostElement, renderer, ref, toasterService) {
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.ref = ref;
        this.toasterService = toasterService;
        this.autohide = true;
        this.delay = 5000;
        this.fade = true;
        this.shown = new EventEmitter();
        this.hidden = new EventEmitter();
        this.timer = new EventEmitter();
    }
    set clock(value) {
        this._clock = value;
        this.timer.emit(this._clock);
    }
    get clock() {
        return this._clock;
    }
    get animationDisabled() {
        return !this.fade;
    }
    get animateType() {
        return this.show ? 'show' : 'hide';
    }
    onMouseOver() {
        this.clearTimer();
        this.clearClock();
    }
    onMouseOut() {
        this.setTimer();
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            toast: true,
            [`toast-${this.color}`]: !!this.color,
        });
        return classes;
    }
    ngOnInit() {
        if (this.show) {
            this.toasterService.setState({ toast: this, show: this.show, position: this.position });
            this.setTimer();
        }
        this.stateToasterSubscribe(true);
    }
    ngOnDestroy() {
        this.clearTimer();
        this.clearClock();
        this.stateToasterSubscribe(false);
    }
    ngOnChanges(changes) {
        if (changes.color) {
            this.renderer.removeClass(this.hostElement.nativeElement, `toast-${changes.color.previousValue}`);
        }
        if (changes.show) {
            this.toasterService.setState({ toast: this, show: this.show, position: this.position });
        }
    }
    setTimer() {
        this.clearTimer();
        if (this.autohide) {
            this.timerId = this.delay > 0 ? setTimeout(() => this.onClose(), this.delay) : null;
            this.setClock();
        }
    }
    clearTimer() {
        clearTimeout(this.timerId);
        this.timerId = null;
    }
    onClose() {
        this.clearTimer();
        this.show = false;
        this.hidden.emit();
        this.toasterService.setState({ toast: this, show: this.show, position: this.position });
    }
    setClock() {
        this.clearClock();
        this.clock = 0;
        this.clockId = setInterval(() => {
            this.clock += 1;
        }, 1000);
        this.clockTimerId = setTimeout(() => {
            this.clearClock();
        }, this.delay);
    }
    clearClock() {
        clearTimeout(this.clockTimerId);
        clearInterval(this.clockId);
        this.clockId = null;
    }
    stateToasterSubscribe(subscribe = true) {
        if (subscribe) {
            const filtered = this.toasterService.toasterState$.pipe(filter(state => state.toast === this));
            this.stateToasterSubscription = filtered.subscribe((state) => {
                this.state = state.toast;
            });
        }
        else {
            this.stateToasterSubscription.unsubscribe();
        }
    }
}
ToastComponent.ɵfac = function ToastComponent_Factory(t) { return new (t || ToastComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ToasterService)); };
ToastComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ToastComponent, selectors: [["c-toast"]], hostVars: 4, hostBindings: function ToastComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseover", function ToastComponent_mouseover_HostBindingHandler() { return ctx.onMouseOver(); })("mouseout", function ToastComponent_mouseout_HostBindingHandler() { return ctx.onMouseOut(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵsyntheticHostProperty("@.disabled", ctx.animationDisabled)("@fadeInOut", ctx.animateType);
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { autohide: "autohide", delay: "delay", fade: "fade", show: "show", color: "color", index: "index" }, outputs: { shown: "shown", hidden: "hidden", timer: "timer" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ToastComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""], data: { animation: [
            trigger('fadeInOut', [
                state('show', style({ opacity: 1 })),
                state('void', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                state('hide', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                transition('show => *', [
                    animate('{{ time }} {{ easing }}', style({ opacity: 0 })),
                    animate('{{ time }} {{ easing }}', style({ height: 0, padding: 0, border: 0, margin: 0 })),
                ], {
                    params: { time: '300ms', easing: 'ease-out' }
                }),
                transition('* => show', [
                    animate('{{ time }} {{ easing }}', style({ opacity: 1, height: '*', padding: '*', border: '*', margin: '*' })),
                ], {
                    params: { time: '300ms', easing: 'ease-in' }
                })
            ])
        ] } });
ToastComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ToasterService }
];
ToastComponent.propDecorators = {
    autohide: [{ type: Input }],
    color: [{ type: Input }],
    delay: [{ type: Input }],
    fade: [{ type: Input }],
    show: [{ type: Input }],
    index: [{ type: Input }],
    shown: [{ type: Output }],
    hidden: [{ type: Output }],
    timer: [{ type: Output }],
    animationDisabled: [{ type: HostBinding, args: ['@.disabled',] }],
    animateType: [{ type: HostBinding, args: ['@fadeInOut',] }],
    onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
    onMouseOut: [{ type: HostListener, args: ['mouseout',] }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastComponent, [{
        type: Component,
        args: [{
                selector: 'c-toast',
                template: "<ng-content></ng-content>\n",
                animations: [
                    trigger('fadeInOut', [
                        state('show', style({ opacity: 1 })),
                        state('void', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                        state('hide', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                        transition('show => *', [
                            animate('{{ time }} {{ easing }}', style({ opacity: 0 })),
                            animate('{{ time }} {{ easing }}', style({ height: 0, padding: 0, border: 0, margin: 0 })),
                        ], {
                            params: { time: '300ms', easing: 'ease-out' }
                        }),
                        transition('* => show', [
                            animate('{{ time }} {{ easing }}', style({ opacity: 1, height: '*', padding: '*', border: '*', margin: '*' })),
                        ], {
                            params: { time: '300ms', easing: 'ease-in' }
                        })
                    ])
                ],
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ToasterService }]; }, { autohide: [{
            type: Input
        }], delay: [{
            type: Input
        }], fade: [{
            type: Input
        }], shown: [{
            type: Output
        }], hidden: [{
            type: Output
        }], timer: [{
            type: Output
        }], animationDisabled: [{
            type: HostBinding,
            args: ['@.disabled']
        }], animateType: [{
            type: HostBinding,
            args: ['@fadeInOut']
        }], onMouseOver: [{
            type: HostListener,
            args: ['mouseover']
        }], onMouseOut: [{
            type: HostListener,
            args: ['mouseout']
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], show: [{
            type: Input
        }], color: [{
            type: Input
        }], index: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,