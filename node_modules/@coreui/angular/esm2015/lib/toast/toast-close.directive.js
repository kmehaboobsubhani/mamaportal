import { Directive, HostListener, Input } from '@angular/core';
import { ToasterService } from './toaster/toaster.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './toaster/toaster.service';
export class ToastCloseDirective {
    constructor(toasterService) {
        this.toasterService = toasterService;
    }
    toggleOpen($event) {
        $event.preventDefault();
        this.toasterService.setState({ show: false, toast: this.toast });
    }
}
ToastCloseDirective.ɵfac = function ToastCloseDirective_Factory(t) { return new (t || ToastCloseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ToasterService)); };
ToastCloseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ToastCloseDirective, selectors: [["", "cToastClose", ""]], hostBindings: function ToastCloseDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ToastCloseDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } }, inputs: { toast: ["cToastClose", "toast"] }, exportAs: ["cToastClose"] });
ToastCloseDirective.ctorParameters = () => [
    { type: ToasterService }
];
ToastCloseDirective.propDecorators = {
    toast: [{ type: Input, args: ['cToastClose',] }],
    toggleOpen: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastCloseDirective, [{
        type: Directive,
        args: [{
                selector: '[cToastClose]',
                exportAs: 'cToastClose'
            }]
    }], function () { return [{ type: ɵngcc1.ToasterService }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], toast: [{
            type: Input,
            args: ['cToastClose']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY2xvc2UuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL3RvYXN0L3RvYXN0LWNsb3NlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFNM0QsTUFBTSxPQUFPLG1CQUFtQjtBQUVoQyxJQVFFLFlBQW9CLGNBQThCO0FBQUssUUFBbkMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0FBQUUsSUFBRSxDQUFDO0FBRXpELElBUEUsVUFBVSxDQUFDLE1BQVc7QUFDdkIsUUFBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDM0IsUUFBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO0FBQ2xFLElBQUMsQ0FBQztBQUVIO2lEQWRDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUUsZUFBZSxtQkFDekIsUUFBUSxFQUFFLGFBQWE7U0FDeEI7O21GQUNLO0FBQUU7QUFFVSxZQVJULGNBQWM7QUFBSTtBQUFJO0FBRXJCLG9CQU1QLEtBQUssU0FBQyxhQUFhO0FBQVEseUJBRTNCLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDOUI7Ozs7Ozs7Ozs7Ozs7O0FBWkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFMQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTEEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVG9hc3RlclNlcnZpY2UgfSBmcm9tICcuL3RvYXN0ZXIvdG9hc3Rlci5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NUb2FzdENsb3NlXScsXG4gIGV4cG9ydEFzOiAnY1RvYXN0Q2xvc2UnLFxufSlcbmV4cG9ydCBjbGFzcyBUb2FzdENsb3NlRGlyZWN0aXZlIHtcblxuICBASW5wdXQoJ2NUb2FzdENsb3NlJykgdG9hc3Q6IGFueTtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIHRvZ2dsZU9wZW4oJGV2ZW50OiBhbnkpIHtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnRvYXN0ZXJTZXJ2aWNlLnNldFN0YXRlKHtzaG93OiBmYWxzZSwgdG9hc3Q6IHRoaXMudG9hc3R9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9hc3RlclNlcnZpY2U6IFRvYXN0ZXJTZXJ2aWNlKSB7IH1cblxufVxuIl19