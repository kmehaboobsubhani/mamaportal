import { Component, ComponentFactoryResolver, ContentChildren, ElementRef, HostBinding, Input, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import classNames from 'classnames';
import { ToasterService } from './toaster.service';
import { ToasterHostDirective } from './toaster-host.directive';
import { ToastComponent } from '../toast/toast.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './toaster.service';
import * as ɵngcc2 from './toaster-host.directive';

function ToasterComponent_ng_template_0_Template(rf, ctx) { }
const _c0 = ["*"];
export var ToasterPosition;
(function (ToasterPosition) {
    ToasterPosition["Static"] = "static";
    ToasterPosition["TopCenter"] = "top-center";
    ToasterPosition["TopFull"] = "top-full";
    ToasterPosition["TopLeft"] = "top-left";
    ToasterPosition["TopRight"] = "top-right";
    ToasterPosition["BottomCenter"] = "bottom-center";
    ToasterPosition["BottomFull"] = "bottom-full";
    ToasterPosition["BottomLeft"] = "bottom-left";
    ToasterPosition["BottomRight"] = "bottom-right";
})(ToasterPosition || (ToasterPosition = {}));
export class ToasterComponent {
    constructor(componentFactoryResolver, hostElement, renderer, toasterService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.toasterService = toasterService;
        this.positions = Object.values(ToasterPosition);
        this.toastsDynamic = [];
        this.position = ToasterPosition.TopRight;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            toaster: true,
            [`toaster-${this.position}`]: this.position !== 'static' && !!this.position
        });
        return classes;
    }
    ngOnInit() {
        this.stateToasterSubscribe(true);
    }
    ngOnDestroy() {
        this.stateToasterSubscribe(false);
    }
    ngAfterContentChecked() {
        this.toasts = this.contentToasts;
    }
    stateToasterSubscribe(subscribe = true) {
        if (subscribe) {
            this.stateToasterSubscription = this.toasterService.toasterState$.subscribe((state) => {
                var _a;
                if (state.show === false) {
                    this.removeToast(state);
                }
                if (state.show === true && ((_a = state.toast) === null || _a === void 0 ? void 0 : _a.dynamic) === undefined) { }
            });
        }
        else {
            this.stateToasterSubscription.unsubscribe();
        }
    }
    addToast(toast, options) {
        const factory = this.componentFactoryResolver.resolveComponentFactory(toast);
        const componentRef = this.toasterHost.viewContainerRef.createComponent(factory);
        this.toastsDynamic.push(componentRef);
        const index = this.toastsDynamic.indexOf(componentRef);
        for (const [key, value] of Object.entries(options)) {
            componentRef.instance[key] = value;
        }
        componentRef.instance['position'] = this.position;
        componentRef.instance['dynamic'] = true;
        componentRef.instance['index'] = index;
        componentRef.instance['show'] = true;
        componentRef.changeDetectorRef.detectChanges();
        return componentRef;
    }
    removeToast(state) {
        var _a, _b;
        (_a = this.toastsDynamic) === null || _a === void 0 ? void 0 : _a.forEach(item => {
            if (state.toast.dynamic && (item.instance === state.toast)) {
                item.destroy();
            }
        });
        (_b = this.toasts) === null || _b === void 0 ? void 0 : _b.forEach(item => {
            if (item.element.nativeElement === state.toast.hostElement.nativeElement) {
                state.toast.show = false;
                setTimeout(() => {
                    item.element.nativeElement.remove();
                }, 300);
            }
        });
    }
}
ToasterComponent.ɵfac = function ToasterComponent_Factory(t) { return new (t || ToasterComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ToasterService)); };
ToasterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ToasterComponent, selectors: [["c-toaster"]], contentQueries: function ToasterComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ToastComponent, 0, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentToasts = _t);
    } }, viewQuery: function ToasterComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(ToasterHostDirective, 3);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toasterHost = _t.first);
    } }, hostVars: 2, hostBindings: function ToasterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { position: "position" }, ngContentSelectors: _c0, decls: 2, vars: 0, consts: [["cToasterHost", ""]], template: function ToasterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ToasterComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
        ɵngcc0.ɵɵprojection(1, 0, ["cToasterHost", ""]);
    } }, directives: [ɵngcc2.ToasterHostDirective], styles: [""] });
ToasterComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ToasterService }
];
ToasterComponent.propDecorators = {
    position: [{ type: Input }],
    toasterHost: [{ type: ViewChild, args: [ToasterHostDirective, { static: true },] }],
    contentToasts: [{ type: ContentChildren, args: [ToastComponent, { read: ViewContainerRef },] }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToasterComponent, [{
        type: Component,
        args: [{
                selector: 'c-toaster',
                template: "<ng-template cToasterHost></ng-template>\n<ng-content cToasterHost></ng-content>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.ToasterService }]; }, { position: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], toasterHost: [{
            type: ViewChild,
            args: [ToasterHostDirective, { static: true }]
        }], contentToasts: [{
            type: ContentChildren,
            args: [ToastComponent, { read: ViewContainerRef }]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,