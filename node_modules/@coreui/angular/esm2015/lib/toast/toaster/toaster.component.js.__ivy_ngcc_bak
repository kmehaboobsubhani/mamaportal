import { Component, ComponentFactoryResolver, ContentChildren, ElementRef, HostBinding, Input, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import classNames from 'classnames';
import { ToasterService } from './toaster.service';
import { ToasterHostDirective } from './toaster-host.directive';
import { ToastComponent } from '../toast/toast.component';
export var ToasterPosition;
(function (ToasterPosition) {
    ToasterPosition["Static"] = "static";
    ToasterPosition["TopCenter"] = "top-center";
    ToasterPosition["TopFull"] = "top-full";
    ToasterPosition["TopLeft"] = "top-left";
    ToasterPosition["TopRight"] = "top-right";
    ToasterPosition["BottomCenter"] = "bottom-center";
    ToasterPosition["BottomFull"] = "bottom-full";
    ToasterPosition["BottomLeft"] = "bottom-left";
    ToasterPosition["BottomRight"] = "bottom-right";
})(ToasterPosition || (ToasterPosition = {}));
export class ToasterComponent {
    constructor(componentFactoryResolver, hostElement, renderer, toasterService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.toasterService = toasterService;
        this.positions = Object.values(ToasterPosition);
        this.toastsDynamic = [];
        this.position = ToasterPosition.TopRight;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            toaster: true,
            [`toaster-${this.position}`]: this.position !== 'static' && !!this.position
        });
        return classes;
    }
    ngOnInit() {
        this.stateToasterSubscribe(true);
    }
    ngOnDestroy() {
        this.stateToasterSubscribe(false);
    }
    ngAfterContentChecked() {
        this.toasts = this.contentToasts;
    }
    stateToasterSubscribe(subscribe = true) {
        if (subscribe) {
            this.stateToasterSubscription = this.toasterService.toasterState$.subscribe((state) => {
                var _a;
                if (state.show === false) {
                    this.removeToast(state);
                }
                if (state.show === true && ((_a = state.toast) === null || _a === void 0 ? void 0 : _a.dynamic) === undefined) { }
            });
        }
        else {
            this.stateToasterSubscription.unsubscribe();
        }
    }
    addToast(toast, options) {
        const factory = this.componentFactoryResolver.resolveComponentFactory(toast);
        const componentRef = this.toasterHost.viewContainerRef.createComponent(factory);
        this.toastsDynamic.push(componentRef);
        const index = this.toastsDynamic.indexOf(componentRef);
        for (const [key, value] of Object.entries(options)) {
            componentRef.instance[key] = value;
        }
        componentRef.instance['position'] = this.position;
        componentRef.instance['dynamic'] = true;
        componentRef.instance['index'] = index;
        componentRef.instance['show'] = true;
        componentRef.changeDetectorRef.detectChanges();
        return componentRef;
    }
    removeToast(state) {
        var _a, _b;
        (_a = this.toastsDynamic) === null || _a === void 0 ? void 0 : _a.forEach(item => {
            if (state.toast.dynamic && (item.instance === state.toast)) {
                item.destroy();
            }
        });
        (_b = this.toasts) === null || _b === void 0 ? void 0 : _b.forEach(item => {
            if (item.element.nativeElement === state.toast.hostElement.nativeElement) {
                state.toast.show = false;
                setTimeout(() => {
                    item.element.nativeElement.remove();
                }, 300);
            }
        });
    }
}
ToasterComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-toaster',
                template: "<ng-template cToasterHost></ng-template>\n<ng-content cToasterHost></ng-content>\n",
                styles: [""]
            },] }
];
ToasterComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ToasterService }
];
ToasterComponent.propDecorators = {
    position: [{ type: Input }],
    toasterHost: [{ type: ViewChild, args: [ToasterHostDirective, { static: true },] }],
    contentToasts: [{ type: ContentChildren, args: [ToastComponent, { read: ViewContainerRef },] }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,