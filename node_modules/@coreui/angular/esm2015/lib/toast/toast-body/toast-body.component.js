import { Component, HostBinding, Optional } from '@angular/core';
import { ToastComponent } from '../toast/toast.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../toast/toast.component';

const _c0 = ["*"];
export class ToastBodyComponent {
    constructor(toast) {
        this.toast = toast;
        this.toastBodyClass = true;
    }
    ngOnInit() {
    }
}
ToastBodyComponent.ɵfac = function ToastBodyComponent_Factory(t) { return new (t || ToastBodyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ToastComponent, 8)); };
ToastBodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ToastBodyComponent, selectors: [["c-toast-body"]], hostVars: 2, hostBindings: function ToastBodyComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("toast-body", ctx.toastBodyClass);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ToastBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{display:block}"] });
ToastBodyComponent.ctorParameters = () => [
    { type: ToastComponent, decorators: [{ type: Optional }] }
];
ToastBodyComponent.propDecorators = {
    toastBodyClass: [{ type: HostBinding, args: ['class.toast-body',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastBodyComponent, [{
        type: Component,
        args: [{
                selector: 'c-toast-body',
                template: "<ng-content></ng-content>\n",
                styles: [":host{display:block}"]
            }]
    }], function () { return [{ type: ɵngcc1.ToastComponent, decorators: [{
                type: Optional
            }] }]; }, { toastBodyClass: [{
            type: HostBinding,
            args: ['class.toast-body']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtYm9keS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvdG9hc3QvdG9hc3QtYm9keS90b2FzdC1ib2R5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBVSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7OztBQU8xRCxNQUFNLE9BQU8sa0JBQWtCO0FBQUksSUFJakMsWUFDcUIsS0FBc0I7QUFDekMsUUFEbUIsVUFBSyxHQUFMLEtBQUssQ0FBaUI7QUFDNUMsUUFKa0MsbUJBQWMsR0FBRyxJQUFJLENBQUM7QUFFekQsSUFFTSxDQUFDO0FBRVAsSUFBRSxRQUFRO0FBQU0sSUFDZCxDQUFDO0FBRUg7Z0RBaEJDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUUsY0FBYyxtQkFDeEI7T0FBMEMsa0VBRTNDOzs7Ozt3REFDSztBQUFFO0FBRVIsWUFUUyxjQUFjLHVCQVlsQixRQUFRO0FBQU87QUFBSTtBQUdoQiw2QkFOTCxXQUFXLFNBQUMsa0JBQWtCO0FBQU87Ozs7Ozs7Ozs7Ozs7O0FBVkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFkQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQU5BLEFBQUEsQUFZQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBPbkluaXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUb2FzdENvbXBvbmVudCB9IGZyb20gJy4uL3RvYXN0L3RvYXN0LmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtdG9hc3QtYm9keScsXG4gIHRlbXBsYXRlVXJsOiAnLi90b2FzdC1ib2R5LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdG9hc3QtYm9keS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0Qm9keUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy50b2FzdC1ib2R5JykgdG9hc3RCb2R5Q2xhc3MgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIHB1YmxpYyB0b2FzdD86IFRvYXN0Q29tcG9uZW50XG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gIH1cblxufVxuIl19