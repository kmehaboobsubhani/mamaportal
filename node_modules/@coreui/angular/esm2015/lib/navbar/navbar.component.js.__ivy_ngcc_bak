import { Component, ContentChild, ElementRef, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import { BreakpointObserver } from '@angular/cdk/layout';
import { CollapseDirective } from '../collapse';
export class NavbarComponent {
    constructor(hostElement, breakpointObserver) {
        this.hostElement = hostElement;
        this.breakpointObserver = breakpointObserver;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const expandClassSuffix = this.expandable === true ? '' : `-${this.expandable}`;
        const classes = classNames({
            navbar: true,
            'navbar-light': this.light,
            'navbar-dark': !this.light,
            [`navbar-expand${expandClassSuffix}`]: !!this.expandable,
            [`bg-${this.color}`]: !!this.color,
            [`fixed-${this.fixed}`]: !!this.fixed,
            'sticky-top': this.sticky,
        });
        return classes;
    }
    get breakpoint() {
        if (typeof this.expandable === 'string') {
            return getComputedStyle(this.hostElement.nativeElement).getPropertyValue(`--breakpoint-${this.expandable}`);
        }
    }
    ngOnInit() { }
    ngAfterContentInit() {
        if (this.breakpoint) {
            const onBreakpoint = `(min-width: ${this.breakpoint})`;
            this.breakpointObserver.observe([onBreakpoint]).subscribe(result => {
                const { animate } = Object.assign({}, this.collapse);
                this.collapse._animate = false;
                this.collapse.show = false;
                setTimeout(() => {
                    this.collapse.show = result.matches;
                }, 0);
                setTimeout(() => {
                    this.collapse._animate = animate;
                });
            });
        }
    }
}
NavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-navbar',
                template: "<ng-content></ng-content>\n",
                styles: [""]
            },] }
];
NavbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: BreakpointObserver }
];
NavbarComponent.propDecorators = {
    light: [{ type: Input }],
    color: [{ type: Input }],
    fixed: [{ type: Input }],
    sticky: [{ type: Input }],
    expandable: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }],
    collapse: [{ type: ContentChild, args: [CollapseDirective,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvbmF2YmFyL25hdmJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLFdBQVcsRUFDWCxLQUFLLEVBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRXZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQVFoRCxNQUFNLE9BQU8sZUFBZTtJQXdDMUIsWUFDVSxXQUF1QixFQUN2QixrQkFBc0M7UUFEdEMsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdkIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUU3QyxDQUFDO0lBcENKLElBQ0ksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoRixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQ3hCO1lBQ0UsTUFBTSxFQUFFLElBQUk7WUFDWixjQUFjLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDMUIsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDMUIsQ0FBQyxnQkFBZ0IsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUN4RCxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQ2xDLENBQUMsU0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDckMsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQzFCLENBQ0YsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7WUFDdkMsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUM3RztJQUNILENBQUM7SUFhRCxRQUFRLEtBQVcsQ0FBQztJQUVwQixrQkFBa0I7UUFFaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLE1BQU0sWUFBWSxHQUFHLGVBQWUsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDakUsTUFBTSxFQUFDLE9BQU8sRUFBQyxxQkFBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUMzQixVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQ3RDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDTixVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztnQkFDbkMsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBRUgsQ0FBQzs7O1lBdkVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsdUNBQXNDOzthQUd2Qzs7O1lBZkMsVUFBVTtZQU1KLGtCQUFrQjs7O29CQVl2QixLQUFLO29CQUNMLEtBQUs7b0JBQ0wsS0FBSztxQkFDTCxLQUFLO3lCQUNMLEtBQUs7eUJBRUwsV0FBVyxTQUFDLE9BQU87dUJBNEJuQixZQUFZLFNBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBZnRlckNvbnRlbnRDaGVja2VkLFxyXG4gIEFmdGVyQ29udGVudEluaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgQ29udGVudENoaWxkLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgSW5wdXQsXHJcbiAgT25Jbml0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQge0JyZWFrcG9pbnRPYnNlcnZlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL2xheW91dCc7XHJcblxyXG5pbXBvcnQgeyBDb2xsYXBzZURpcmVjdGl2ZSB9IGZyb20gJy4uL2NvbGxhcHNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYy1uYXZiYXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXZiYXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL25hdmJhci5jb21wb25lbnQuc2NzcyddLFxyXG4gIC8vIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmF2YmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcclxuXHJcbiAgQElucHV0KCkgbGlnaHQ6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZztcclxuICBASW5wdXQoKSBmaXhlZDogJ3RvcCcgfCAnYm90dG9tJztcclxuICBASW5wdXQoKSBzdGlja3k6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgZXhwYW5kYWJsZTogYm9vbGVhbiB8IHN0cmluZztcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgZ2V0IGdldENsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ob3N0Q2xhc3NlcztcclxuICB9XHJcblxyXG4gIGdldCBob3N0Q2xhc3NlcygpIHtcclxuICAgIGNvbnN0IGV4cGFuZENsYXNzU3VmZml4ID0gdGhpcy5leHBhbmRhYmxlID09PSB0cnVlID8gJycgOiBgLSR7dGhpcy5leHBhbmRhYmxlfWA7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyhcclxuICAgICAge1xyXG4gICAgICAgIG5hdmJhcjogdHJ1ZSxcclxuICAgICAgICAnbmF2YmFyLWxpZ2h0JzogdGhpcy5saWdodCxcclxuICAgICAgICAnbmF2YmFyLWRhcmsnOiAhdGhpcy5saWdodCxcclxuICAgICAgICBbYG5hdmJhci1leHBhbmQke2V4cGFuZENsYXNzU3VmZml4fWBdOiAhIXRoaXMuZXhwYW5kYWJsZSxcclxuICAgICAgICBbYGJnLSR7dGhpcy5jb2xvcn1gXTogISF0aGlzLmNvbG9yLFxyXG4gICAgICAgIFtgZml4ZWQtJHt0aGlzLmZpeGVkfWBdOiAhIXRoaXMuZml4ZWQsXHJcbiAgICAgICAgJ3N0aWNreS10b3AnOiB0aGlzLnN0aWNreSxcclxuICAgICAgfSxcclxuICAgICk7XHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIGdldCBicmVha3BvaW50KCkge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLmV4cGFuZGFibGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShgLS1icmVha3BvaW50LSR7dGhpcy5leHBhbmRhYmxlfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQENvbnRlbnRDaGlsZChDb2xsYXBzZURpcmVjdGl2ZSwgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IGZhbHNlIH0pIGNvbGxhcHNlITogQ29sbGFwc2VEaXJlY3RpdmU7XHJcbiAgQENvbnRlbnRDaGlsZChDb2xsYXBzZURpcmVjdGl2ZSkgY29sbGFwc2UhOiBDb2xsYXBzZURpcmVjdGl2ZTtcclxuXHJcbiAgY29sbGFwc2VSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBob3N0RWxlbWVudDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgYnJlYWtwb2ludE9ic2VydmVyOiBCcmVha3BvaW50T2JzZXJ2ZXIsXHJcbiAgICAvLyBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZlxyXG4gICkge31cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7IH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgLy8gY2hpbGQgaXMgc2V0XHJcbiAgICBpZiAodGhpcy5icmVha3BvaW50KSB7XHJcbiAgICAgIGNvbnN0IG9uQnJlYWtwb2ludCA9IGAobWluLXdpZHRoOiAke3RoaXMuYnJlYWtwb2ludH0pYDtcclxuICAgICAgdGhpcy5icmVha3BvaW50T2JzZXJ2ZXIub2JzZXJ2ZShbb25CcmVha3BvaW50XSkuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgY29uc3Qge2FuaW1hdGV9ID0gey4uLnRoaXMuY29sbGFwc2V9O1xyXG4gICAgICAgIHRoaXMuY29sbGFwc2UuX2FuaW1hdGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbGxhcHNlLnNob3cgPSBmYWxzZTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuY29sbGFwc2Uuc2hvdyA9IHJlc3VsdC5tYXRjaGVzO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5jb2xsYXBzZS5fYW5pbWF0ZSA9IGFuaW1hdGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn1cclxuIl19