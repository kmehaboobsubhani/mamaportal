import { Component, ContentChild, ElementRef, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import { BreakpointObserver } from '@angular/cdk/layout';
import { CollapseDirective } from '../collapse';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/layout';

const _c0 = ["*"];
export class NavbarComponent {
    constructor(hostElement, breakpointObserver) {
        this.hostElement = hostElement;
        this.breakpointObserver = breakpointObserver;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const expandClassSuffix = this.expandable === true ? '' : `-${this.expandable}`;
        const classes = classNames({
            navbar: true,
            'navbar-light': this.light,
            'navbar-dark': !this.light,
            [`navbar-expand${expandClassSuffix}`]: !!this.expandable,
            [`bg-${this.color}`]: !!this.color,
            [`fixed-${this.fixed}`]: !!this.fixed,
            'sticky-top': this.sticky,
        });
        return classes;
    }
    get breakpoint() {
        if (typeof this.expandable === 'string') {
            return getComputedStyle(this.hostElement.nativeElement).getPropertyValue(`--breakpoint-${this.expandable}`);
        }
    }
    ngOnInit() { }
    ngAfterContentInit() {
        if (this.breakpoint) {
            const onBreakpoint = `(min-width: ${this.breakpoint})`;
            this.breakpointObserver.observe([onBreakpoint]).subscribe(result => {
                const { animate } = Object.assign({}, this.collapse);
                this.collapse._animate = false;
                this.collapse.show = false;
                setTimeout(() => {
                    this.collapse.show = result.matches;
                }, 0);
                setTimeout(() => {
                    this.collapse._animate = animate;
                });
            });
        }
    }
}
NavbarComponent.ɵfac = function NavbarComponent_Factory(t) { return new (t || NavbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BreakpointObserver)); };
NavbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NavbarComponent, selectors: [["c-navbar"]], contentQueries: function NavbarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CollapseDirective, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.collapse = _t.first);
    } }, hostVars: 2, hostBindings: function NavbarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { light: "light", color: "color", fixed: "fixed", sticky: "sticky", expandable: "expandable" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function NavbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
NavbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: BreakpointObserver }
];
NavbarComponent.propDecorators = {
    light: [{ type: Input }],
    color: [{ type: Input }],
    fixed: [{ type: Input }],
    sticky: [{ type: Input }],
    expandable: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }],
    collapse: [{ type: ContentChild, args: [CollapseDirective,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavbarComponent, [{
        type: Component,
        args: [{
                selector: 'c-navbar',
                template: "<ng-content></ng-content>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.BreakpointObserver }]; }, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], light: [{
            type: Input
        }], color: [{
            type: Input
        }], fixed: [{
            type: Input
        }], sticky: [{
            type: Input
        }], expandable: [{
            type: Input
        }], collapse: [{
            type: ContentChild,
            args: [CollapseDirective]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,