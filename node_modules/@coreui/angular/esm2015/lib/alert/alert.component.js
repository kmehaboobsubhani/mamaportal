import { Component, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { transition, trigger, style, state, animate } from '@angular/animations';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common';

function AlertComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 1);
    ɵngcc0.ɵɵlistener("click", function AlertComponent_ng_template_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.onClose(); });
    ɵngcc0.ɵɵelement(1, "span", 2);
    ɵngcc0.ɵɵelementStart(2, "span", 3);
    ɵngcc0.ɵɵtext(3, "Close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r0.safeIcon, ɵngcc0.ɵɵsanitizeHtml);
} }
const _c0 = ["*"];
export class AlertComponent {
    constructor(sanitizer, hostElement, renderer) {
        this.sanitizer = sanitizer;
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.color = 'info';
        this.closeButton = false;
        this.show = true;
        this.fade = false;
        this.iconHtml = '<span>&times;</span>';
        this.timeout = 0;
        this.dismissed = new EventEmitter();
        this.timer = new EventEmitter();
    }
    get clock() {
        const time = this._clock;
        this.timer.emit(time);
        return time;
    }
    get animationDisabled() {
        return !this.fade;
    }
    get animateType() {
        return this.show ? 'show' : 'hide';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            alert: true,
            'alert-dismissible': !!this.closeButton,
            [`alert-${this.color}`]: !!this.color
        });
        return classes;
    }
    ngOnInit() {
        this.safeIcon = this.sanitizer.sanitize(SecurityContext.HTML, this.iconHtml);
        if (this.show && this.timeout) {
            this.setTimer();
        }
    }
    ngOnDestroy() {
        this.clearTimer();
        this.clearClock();
    }
    ngOnChanges(changes) {
        if (changes.color) {
            this.renderer.removeClass(this.hostElement.nativeElement, `alert-${changes.color.previousValue}`);
        }
        if (changes.timeout) {
            this.setTimer();
        }
    }
    setTimer() {
        this.clearTimer();
        this.timerId = this.timeout > 0 ? setTimeout(() => this.onClose(), this.timeout) : null;
        this.setClock();
    }
    clearTimer() {
        clearTimeout(this.timerId);
        this.timerId = null;
    }
    onClose() {
        this.clearTimer();
        if (this.show) {
            this.show = false;
            this.hide = true;
            this.dismissed.emit(this);
        }
    }
    setClock() {
        this.clearClock();
        this._clock = 0;
        this.clockId = setInterval(() => {
            this._clock += 1;
        }, 1000);
        setTimeout(() => {
            this.clearClock();
        }, this.timeout);
    }
    clearClock() {
        clearInterval(this.clockId);
        this.clockId = null;
    }
    onAnimationEvent(event) {
        console.warn(event);
        if (event.phaseName === 'done' && event.toState === 'hide') {
        }
        if (event.phaseName === 'start' && event.toState === 'show') {
        }
    }
}
AlertComponent.ɵfac = function AlertComponent_Factory(t) { return new (t || AlertComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AlertComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AlertComponent, selectors: [["c-alert"]], hostVars: 4, hostBindings: function AlertComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵsyntheticHostProperty("@.disabled", ctx.animationDisabled)("@fadeInOut", ctx.animateType);
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { color: "color", closeButton: "closeButton", show: "show", fade: "fade", iconHtml: "iconHtml", timeout: "timeout" }, outputs: { dismissed: "dismissed", timer: "timer" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 3, vars: 1, consts: [[3, "ngIf"], ["type", "button", "aria-label", "Close", 1, "close", 3, "click"], ["aria-hidden", "true", 3, "innerHTML"], [1, "sr-only"]], template: function AlertComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, AlertComponent_ng_template_1_Template, 4, 1, "ng-template", 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.closeButton);
    } }, directives: [ɵngcc2.NgIf], styles: ["[_nghost-%COMP%]{display:block}"], data: { animation: [
            trigger('fadeInOut', [
                state('show', style({ opacity: 1 })),
                state('hide', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                transition('show => hide', [
                    animate('.3s ease-out', style({ opacity: 0 })),
                    animate('.3s ease-out', style({ height: 0, padding: 0, border: 0, margin: 0 }))
                ]),
                transition('hide => show', [
                    animate('.3s ease-in', style({ height: '*', padding: '*', border: '*', margin: '*' })),
                    animate('.3s ease-in', style({ opacity: '*' }))
                ])
            ])
        ] } });
AlertComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef },
    { type: Renderer2 }
];
AlertComponent.propDecorators = {
    color: [{ type: Input }],
    closeButton: [{ type: Input }],
    show: [{ type: Input }],
    fade: [{ type: Input }],
    iconHtml: [{ type: Input }],
    timeout: [{ type: Input }],
    dismissed: [{ type: Output }],
    timer: [{ type: Output }],
    animationDisabled: [{ type: HostBinding, args: ['@.disabled',] }],
    animateType: [{ type: HostBinding, args: ['@fadeInOut',] }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertComponent, [{
        type: Component,
        args: [{
                selector: 'c-alert',
                template: "<!--<div [@fadeInOut]=\"show ? 'show' : 'hide'\" [class]=\"alertClasses\">-->\n<ng-container>\n  <ng-template [ngIf]=\"closeButton\">\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose()\">\n      <span aria-hidden=\"true\" [innerHTML]=\"safeIcon\"></span>\n      <span class=\"sr-only\">Close</span>\n    </button>\n  </ng-template>\n  <ng-content></ng-content>\n</ng-container>\n",
                animations: [
                    trigger('fadeInOut', [
                        state('show', style({ opacity: 1 })),
                        state('hide', style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                        transition('show => hide', [
                            animate('.3s ease-out', style({ opacity: 0 })),
                            animate('.3s ease-out', style({ height: 0, padding: 0, border: 0, margin: 0 }))
                        ]),
                        transition('hide => show', [
                            animate('.3s ease-in', style({ height: '*', padding: '*', border: '*', margin: '*' })),
                            animate('.3s ease-in', style({ opacity: '*' }))
                        ])
                    ])
                ],
                styles: [":host{display:block}"]
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { color: [{
            type: Input
        }], closeButton: [{
            type: Input
        }], show: [{
            type: Input
        }], fade: [{
            type: Input
        }], iconHtml: [{
            type: Input
        }], timeout: [{
            type: Input
        }], dismissed: [{
            type: Output
        }], timer: [{
            type: Output
        }], animationDisabled: [{
            type: HostBinding,
            args: ['@.disabled']
        }], animateType: [{
            type: HostBinding,
            args: ['@fadeInOut']
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,