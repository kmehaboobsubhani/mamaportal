import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';
export class RowDirective {
    constructor() {
        this.noGutters = false;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const alignV = `align-items-${this.alignV}`;
        const alignH = `justify-content-${this.alignH}`;
        const classes = { row: true };
        classes['no-gutters'] = !!this.noGutters;
        classes[alignV] = !!this.alignV;
        classes[alignH] = !!this.alignH;
        return classNames(classes);
    }
}
RowDirective.ɵfac = function RowDirective_Factory(t) { return new (t || RowDirective)(); };
RowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RowDirective, selectors: [["", "cRow", ""]], hostVars: 2, hostBindings: function RowDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { noGutters: "noGutters", alignV: "alignV", alignH: "alignH" } });
RowDirective.propDecorators = {
    noGutters: [{ type: Input }],
    alignV: [{ type: Input }],
    alignH: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RowDirective, [{
        type: Directive,
        args: [{
                selector: '[cRow]'
            }]
    }], function () { return []; }, { noGutters: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], alignV: [{
            type: Input
        }], alignH: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkL3Jvdy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQzs7QUFLcEMsTUFBTSxPQUFPLFlBQVk7QUFDekIsSUFKQTtBQUNHLFFBSVEsY0FBUyxHQUFHLEtBQUssQ0FBQztBQUM3QixJQW1CQSxDQUFDO0FBQ0QsSUFqQkUsSUFDSSxVQUFVO0FBQ2hCLFFBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxXQUFXO0FBQU0sUUFDbkIsTUFBTSxNQUFNLEdBQUcsZUFBZSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDaEQsUUFBSSxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3BELFFBQ0ksTUFBTSxPQUFPLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDbEMsUUFDSSxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDN0MsUUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDcEMsUUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDcEMsUUFBSSxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSDswQ0F6QkMsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRTtLQUFRLGVBQ25COzttRkFDSTtBQUFFO0FBRUUsd0JBQU4sS0FBSztBQUFNLHFCQUNYLEtBQUs7QUFBTSxxQkFDWCxLQUFLO0FBQU0seUJBRVgsV0FBVyxTQUFDLE9BQU87QUFDbEI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUhBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQW9CQSxBQUFBLEFBaEJBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF4QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tjUm93XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJvd0RpcmVjdGl2ZSB7XHJcblxyXG4gIEBJbnB1dCgpIG5vR3V0dGVycyA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGFsaWduVjogJ3N0YXJ0JyB8ICdlbmQnIHwgJ2NlbnRlcicgfCAnYmFzZWxpbmUnIHwgJ3N0cmV0Y2gnO1xyXG4gIEBJbnB1dCgpIGFsaWduSDogJ3N0YXJ0JyB8ICdlbmQnIHwgJ2NlbnRlcicgfCAnYXJvdW5kJyB8ICdiZXR3ZWVuJztcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgZ2V0IGdldENsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ob3N0Q2xhc3NlcztcclxuICB9XHJcblxyXG4gIGdldCBob3N0Q2xhc3NlcygpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgYWxpZ25WID0gYGFsaWduLWl0ZW1zLSR7dGhpcy5hbGlnblZ9YDtcclxuICAgIGNvbnN0IGFsaWduSCA9IGBqdXN0aWZ5LWNvbnRlbnQtJHt0aGlzLmFsaWduSH1gO1xyXG5cclxuICAgIGNvbnN0IGNsYXNzZXMgPSB7IHJvdzogdHJ1ZSB9O1xyXG5cclxuICAgIGNsYXNzZXNbJ25vLWd1dHRlcnMnXSA9ICEhdGhpcy5ub0d1dHRlcnM7XHJcbiAgICBjbGFzc2VzW2FsaWduVl0gPSAhIXRoaXMuYWxpZ25WO1xyXG4gICAgY2xhc3Nlc1thbGlnbkhdID0gISF0aGlzLmFsaWduSDtcclxuICAgIHJldHVybiBjbGFzc05hbWVzKGNsYXNzZXMpO1xyXG4gIH1cclxufVxyXG4iXX0=