import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';
export class ColDirective {
    constructor() {
        this.suffix = {
            xs: '-xs',
            sm: '-sm',
            md: '-md',
            lg: '-lg',
            xl: '-xl',
            xxl: '-xxl',
            col: ''
        };
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        let classes = Object.create(null);
        const suffix = this.suffix;
        let addColClass = false;
        Object.keys(suffix).forEach((key) => {
            const prop = this[key];
            const breakpoint = suffix[key];
            classes[`col${breakpoint}`] = prop === true;
            classes[`col${breakpoint}-${prop}`] = (typeof prop === 'number') || (typeof prop === 'string');
            if (typeof prop === 'object') {
                classes[`col${breakpoint}-${prop.size}`] = !!prop.size;
                classes[`offset${breakpoint}-${prop.offset}`] = !!prop.offset;
                classes[`order${breakpoint}-${prop.order}`] = !!prop.order;
                addColClass = addColClass || !!prop.offset || !!prop.order;
            }
        });
        classes = classNames(addColClass ? 'col' : '', classes);
        return classes || 'col';
    }
}
ColDirective.ɵfac = function ColDirective_Factory(t) { return new (t || ColDirective)(); };
ColDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ColDirective, selectors: [["", "cCol", ""]], hostVars: 2, hostBindings: function ColDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { xs: "xs", sm: "sm", md: "md", lg: "lg", xl: "xl", xxl: "xxl", col: "col" } });
ColDirective.propDecorators = {
    xs: [{ type: Input }],
    sm: [{ type: Input }],
    md: [{ type: Input }],
    lg: [{ type: Input }],
    xl: [{ type: Input }],
    xxl: [{ type: Input }],
    col: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColDirective, [{
        type: Directive,
        args: [{
                selector: '[cCol]'
            }]
    }], function () { return []; }, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], xs: [{
            type: Input
        }], sm: [{
            type: Input
        }], md: [{
            type: Input
        }], lg: [{
            type: Input
        }], xl: [{
            type: Input
        }], xxl: [{
            type: Input
        }], col: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkL2NvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQzs7QUFhcEMsTUFBTSxPQUFPLFlBQVk7QUFDekIsSUFKQTtBQUNHLFFBaUJnQixXQUFNLEdBQUc7QUFDNUIsWUFBSSxFQUFFLEVBQUUsS0FBSztBQUNiLFlBQUksRUFBRSxFQUFFLEtBQUs7QUFDYixZQUFJLEVBQUUsRUFBRSxLQUFLO0FBQ2IsWUFBSSxFQUFFLEVBQUUsS0FBSztBQUNiLFlBQUksRUFBRSxFQUFFLEtBQUs7QUFDYixZQUFJLEdBQUcsRUFBRSxNQUFNO0FBQ2YsWUFBSSxHQUFHLEVBQUUsRUFBRTtBQUFFLFNBQ1YsQ0FBQztBQUNKLElBeUJBLENBQUM7QUFDRCxJQXhDRSxJQUNJLFVBQVU7QUFDaEIsUUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0gsSUFXRSxJQUFJLFdBQVc7QUFBTSxRQUVuQixJQUFJLE9BQU8sR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLFFBQ0ksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMvQixRQUFJLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztBQUM1QixRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7QUFDeEMsWUFBTSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsWUFBTSxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckMsWUFBTSxPQUFPLENBQUMsTUFBTSxVQUFVLEVBQUUsQ0FBQyxHQUFHLElBQUksS0FBSyxJQUFJLENBQUM7QUFDbEQsWUFBTSxPQUFPLENBQUMsTUFBTSxVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUM7QUFDckcsWUFBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtBQUNwQyxnQkFBUSxPQUFPLENBQUMsTUFBTSxVQUFVLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDL0QsZ0JBQVEsT0FBTyxDQUFDLFNBQVMsVUFBVSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3RFLGdCQUFRLE9BQU8sQ0FBQyxRQUFRLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUNuRSxnQkFBUSxXQUFXLEdBQUcsV0FBVyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ25FLGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFDSSxPQUFPLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUQsUUFBSSxPQUFPLE9BQU8sSUFBSSxLQUFLLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0g7MENBbkRDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUU7S0FBUSxlQUNuQjs7aUdBQ0k7QUFBRTtBQUVFLGlCQUFOLEtBQUs7QUFBTSxpQkFDWCxLQUFLO0FBQU0saUJBQ1gsS0FBSztBQUFNLGlCQUNYLEtBQUs7QUFBTSxpQkFDWCxLQUFLO0FBQU0sa0JBQ1gsS0FBSztBQUFNLGtCQUNYLEtBQUs7QUFBTSx5QkFFWCxXQUFXLFNBQUMsT0FBTztBQUNsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBekJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWFBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFrQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBMEJBLEFBQUEsQUF2Q0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVlBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBbERBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbmludGVyZmFjZSBCcE9iamVjdCB7XHJcbiAgc2l6ZT86IG51bWJlciB8IHN0cmluZztcclxuICBvZmZzZXQ/OiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgb3JkZXI/OiBudW1iZXIgfCBzdHJpbmc7XHJcbn1cclxuXHJcbnR5cGUgQnJlYWtQb2ludCA9ICggc3RyaW5nIHwgbnVtYmVyIHwgQnBPYmplY3QgKTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2NDb2xdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29sRGlyZWN0aXZlIHtcclxuXHJcbiAgQElucHV0KCkgeHM6IEJyZWFrUG9pbnQ7XHJcbiAgQElucHV0KCkgc206IEJyZWFrUG9pbnQ7XHJcbiAgQElucHV0KCkgbWQ6IEJyZWFrUG9pbnQ7XHJcbiAgQElucHV0KCkgbGc6IEJyZWFrUG9pbnQ7XHJcbiAgQElucHV0KCkgeGw6IEJyZWFrUG9pbnQ7XHJcbiAgQElucHV0KCkgeHhsOiBCcmVha1BvaW50O1xyXG4gIEBJbnB1dCgpIGNvbDogQnJlYWtQb2ludDtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgZ2V0IGdldENsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ob3N0Q2xhc3NlcztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgc3VmZml4ID0ge1xyXG4gICAgeHM6ICcteHMnLFxyXG4gICAgc206ICctc20nLFxyXG4gICAgbWQ6ICctbWQnLFxyXG4gICAgbGc6ICctbGcnLFxyXG4gICAgeGw6ICcteGwnLFxyXG4gICAgeHhsOiAnLXh4bCcsXHJcbiAgICBjb2w6ICcnIC8vIGNvbCBtdXN0IGJlIHRoZSBsYXN0XHJcbiAgfTtcclxuXHJcbiAgZ2V0IGhvc3RDbGFzc2VzKCk6IHN0cmluZyB7XHJcblxyXG4gICAgbGV0IGNsYXNzZXM6IGFueSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblxyXG4gICAgY29uc3Qgc3VmZml4ID0gdGhpcy5zdWZmaXg7XHJcbiAgICBsZXQgYWRkQ29sQ2xhc3MgPSBmYWxzZTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhzdWZmaXgpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wID0gdGhpc1trZXldO1xyXG4gICAgICBjb25zdCBicmVha3BvaW50ID0gc3VmZml4W2tleV07XHJcbiAgICAgIGNsYXNzZXNbYGNvbCR7YnJlYWtwb2ludH1gXSA9IHByb3AgPT09IHRydWU7XHJcbiAgICAgIGNsYXNzZXNbYGNvbCR7YnJlYWtwb2ludH0tJHtwcm9wfWBdID0gKHR5cGVvZiBwcm9wID09PSAnbnVtYmVyJykgfHwgKHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJyk7XHJcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBjbGFzc2VzW2Bjb2wke2JyZWFrcG9pbnR9LSR7cHJvcC5zaXplfWBdID0gISFwcm9wLnNpemU7XHJcbiAgICAgICAgY2xhc3Nlc1tgb2Zmc2V0JHticmVha3BvaW50fS0ke3Byb3Aub2Zmc2V0fWBdID0gISFwcm9wLm9mZnNldDtcclxuICAgICAgICBjbGFzc2VzW2BvcmRlciR7YnJlYWtwb2ludH0tJHtwcm9wLm9yZGVyfWBdID0gISFwcm9wLm9yZGVyO1xyXG4gICAgICAgIGFkZENvbENsYXNzID0gYWRkQ29sQ2xhc3MgfHwgISFwcm9wLm9mZnNldCB8fCAhIXByb3Aub3JkZXI7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNsYXNzZXMgPSBjbGFzc05hbWVzKGFkZENvbENsYXNzID8gJ2NvbCcgOiAnJywgY2xhc3Nlcyk7XHJcbiAgICByZXR1cm4gY2xhc3NlcyB8fCAnY29sJztcclxuICB9XHJcblxyXG59XHJcbiJdfQ==