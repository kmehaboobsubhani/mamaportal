import { Component, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ContainerComponent {
    constructor() {
        this.fluid = false;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            container: !this.fluid,
            'container-fluid': !!this.fluid
        });
        return classes;
    }
}
ContainerComponent.ɵfac = function ContainerComponent_Factory(t) { return new (t || ContainerComponent)(); };
ContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContainerComponent, selectors: [["c-container"], ["", "cContainer", ""]], hostVars: 2, hostBindings: function ContainerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { fluid: "fluid" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{display:block}"] });
ContainerComponent.propDecorators = {
    fluid: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContainerComponent, [{
        type: Component,
        args: [{
                selector: 'c-container, [cContainer]',
                template: '<ng-content></ng-content>',
                styles: [":host{display:block}"]
            }]
    }], function () { return []; }, { fluid: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkL2NvbnRhaW5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQzs7OztBQU9wQyxNQUFNLE9BQU8sa0JBQWtCO0FBQy9CLElBTkE7QUFDRyxRQU1RLFVBQUssR0FBRyxLQUFLLENBQUM7QUFDekIsSUFnQkEsQ0FBQztBQUNELElBaEJFLElBQ0ksVUFBVTtBQUNoQixRQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksV0FBVztBQUNqQixRQUNJLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FDeEI7QUFDTixZQUFRLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLO0FBQzlCLFlBQVEsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLO0FBQ3ZDLFNBQU8sQ0FDRixDQUFDO0FBQ04sUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixJQUFFLENBQUM7QUFDSDtnREF4QkMsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRTtZQUEyQixtQkFDckMsUUFBUSxFQUFFLDJCQUEyQixrRUFFdEM7Ozs7O3dEQUNJO0FBQUU7QUFFRSxvQkFBTixLQUFLO0FBQU0seUJBRVgsV0FBVyxTQUFDLE9BQU87QUFDbEI7Ozs7Ozs7Ozs7Ozs7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFMQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFpQkEsQUFBQSxBQWZBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF2QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBR0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjLWNvbnRhaW5lciwgW2NDb250YWluZXJdJyxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxyXG4gIHN0eWxlVXJsczogWycuL2NvbnRhaW5lci5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb250YWluZXJDb21wb25lbnQge1xyXG5cclxuICBASW5wdXQoKSBmbHVpZCA9IGZhbHNlO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcclxuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xyXG5cclxuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKFxyXG4gICAgICB7XHJcbiAgICAgICAgY29udGFpbmVyOiAhdGhpcy5mbHVpZCxcclxuICAgICAgICAnY29udGFpbmVyLWZsdWlkJzogISF0aGlzLmZsdWlkXHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==