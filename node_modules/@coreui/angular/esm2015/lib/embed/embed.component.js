import { Component, ContentChild, HostBinding, Input, } from '@angular/core';
import classNames from 'classnames';
import { EmbedItemDirective } from './embed-item.directive';
import * as ɵngcc0 from '@angular/core';

const _c0 = [[["iframe"]]];
const _c1 = ["iframe"];
export class EmbedComponent {
    constructor() {
        this.ratio = '16by9';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'embed-responsive': true,
            [`embed-responsive-${this.ratio}`]: !!this.ratio,
        });
        return classes;
    }
    ngOnInit() { }
    ngAfterContentInit() {
    }
}
EmbedComponent.ɵfac = function EmbedComponent_Factory(t) { return new (t || EmbedComponent)(); };
EmbedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EmbedComponent, selectors: [["c-embed"]], contentQueries: function EmbedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, EmbedItemDirective, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.embedItem = _t.first);
    } }, hostVars: 2, hostBindings: function EmbedComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { ratio: "ratio" }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function EmbedComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
EmbedComponent.ctorParameters = () => [];
EmbedComponent.propDecorators = {
    ratio: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }],
    embedItem: [{ type: ContentChild, args: [EmbedItemDirective,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmbedComponent, [{
        type: Component,
        args: [{
                selector: 'c-embed',
                template: "<ng-content select=\"iframe\"></ng-content>\n",
                styles: [""]
            }]
    }], function () { return []; }, { ratio: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], embedItem: [{
            type: ContentChild,
            args: [EmbedItemDirective]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZWQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2VtYmVkL2VtYmVkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUVwQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7Ozs7QUFPNUQsTUFBTSxPQUFPLGNBQWM7QUFBSSxJQWtCN0I7QUFDRixRQWxCVyxVQUFLLEdBQXdDLE9BQU8sQ0FBQztBQUVoRSxJQWVpQixDQUFDO0FBRWxCLElBakJFLElBQ0ksVUFBVTtBQUNmLFFBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzNCLElBQUMsQ0FBQztBQUVILElBQUUsSUFBSSxXQUFXO0FBQ2hCLFFBQUcsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDO0FBQzlCLFlBQUssa0JBQWtCLEVBQUUsSUFBSTtBQUM3QixZQUFLLENBQUMsb0JBQW9CLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztBQUNyRCxTQUFJLENBQUMsQ0FBQztBQUNOLFFBQUcsT0FBTyxPQUFPLENBQUM7QUFDbEIsSUFBQyxDQUFDO0FBRUgsSUFJRSxRQUFRLEtBQVUsQ0FBQztBQUVyQixJQUFFLGtCQUFrQjtBQUNuQixJQUNDLENBQUM7QUFDRjs0Q0E5QkEsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRTtFQUFTLG1CQUNuQix5REFBcUMsOENBRXRDOzs7Ozs7Ozs7O3lCQUNLO0FBQUU7QUFBMkM7QUFDL0Isb0JBQWpCLEtBQUs7QUFBTSx5QkFFWCxXQUFXLFNBQUMsT0FBTztBQUNoQix3QkFZSCxZQUFZLFNBQUMsa0JBQWtCO0FBQU87Ozs7Ozs7Ozs7Ozs7Ozs7O0FBakNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFrQkEsQUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWlCQSxBQUFBLEFBZkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUE3QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFhQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHsgRW1iZWRJdGVtRGlyZWN0aXZlIH0gZnJvbSAnLi9lbWJlZC1pdGVtLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtZW1iZWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZW1iZWQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9lbWJlZC5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBFbWJlZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBJbnB1dCgpIHJhdGlvOiAnMjFieTknIHwgJzE2Ynk5JyB8ICc0YnkzJyB8ICcxYnkxJyA9ICcxNmJ5OSc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGdldCBnZXRDbGFzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xuICB9XG5cbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHtcbiAgICAgICdlbWJlZC1yZXNwb25zaXZlJzogdHJ1ZSxcbiAgICAgIFtgZW1iZWQtcmVzcG9uc2l2ZS0ke3RoaXMucmF0aW99YF06ICEhdGhpcy5yYXRpbyxcbiAgICB9KTtcbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGQoRW1iZWRJdGVtRGlyZWN0aXZlKSBlbWJlZEl0ZW0hOiBFbWJlZEl0ZW1EaXJlY3RpdmU7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ2VtYmVkSXRlbScsIHRoaXMuZW1iZWRJdGVtKTtcbiAgfVxufVxuIl19