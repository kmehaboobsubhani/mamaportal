import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';
export class ListGroupDirective {
    constructor() { }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'list-group': true,
            'list-group-horizontal': this.horizontal === true || this.horizontal === '',
            [`list-group-horizontal-${this.horizontal}`]: this.horizontal && this.horizontal !== true,
            'list-group-flush': !!this.flush,
            'list-group-accent': !!this.accent,
        });
        return classes;
    }
}
ListGroupDirective.ɵfac = function ListGroupDirective_Factory(t) { return new (t || ListGroupDirective)(); };
ListGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ListGroupDirective, selectors: [["", "cListGroup", ""], ["c-list-group"]], hostVars: 2, hostBindings: function ListGroupDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { horizontal: "horizontal", accent: "accent", flush: "flush" } });
ListGroupDirective.ctorParameters = () => [];
ListGroupDirective.propDecorators = {
    horizontal: [{ type: Input }],
    accent: [{ type: Input }],
    flush: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListGroupDirective, [{
        type: Directive,
        args: [{
                selector: '[cListGroup], c-list-group'
            }]
    }], function () { return []; }, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], horizontal: [{
            type: Input
        }], accent: [{
            type: Input
        }], flush: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvbGlzdC1ncm91cC9saXN0LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDOztBQUtwQyxNQUFNLE9BQU8sa0JBQWtCO0FBRS9CLElBc0JFLGdCQUFrQixDQUFDO0FBRXJCLElBcEJFLElBQ0ksVUFBVTtBQUNmLFFBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzNCLElBQUMsQ0FBQztBQUVILElBQUUsSUFBSSxXQUFXO0FBQ2hCLFFBQUcsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QjtBQUNMLFlBQU8sWUFBWSxFQUFFLElBQUk7QUFDekIsWUFBTyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDbEYsWUFBTyxDQUFDLHlCQUF5QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSTtBQUNoRyxZQUFPLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztBQUN2QyxZQUFPLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUN6QyxTQUFNLENBQ0YsQ0FBQztBQUNMLFFBQUcsT0FBTyxPQUFPLENBQUM7QUFDbEIsSUFBQyxDQUFDO0FBRUg7Z0RBM0JDLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUU7YUFBNEIsZUFDdkM7O21GQUNLO0FBQUU7QUFFWTtBQUNGLHlCQURmLEtBQUs7QUFBTSxxQkFDWCxLQUFLO0FBQU0sb0JBQ1gsS0FBSztBQUFNLHlCQUVYLFdBQVcsU0FBQyxPQUFPO0FBQ2pCOzs7Ozs7Ozs7Ozs7Ozs7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUF3QkEsQUFBQSxBQUFBLEFBbEJBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXpCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY0xpc3RHcm91cF0sIGMtbGlzdC1ncm91cCdcbn0pXG5leHBvcnQgY2xhc3MgTGlzdEdyb3VwRGlyZWN0aXZlIHtcblxuICBASW5wdXQoKSBob3Jpem9udGFsOiBzdHJpbmcgfCBib29sZWFuO1xuICBASW5wdXQoKSBhY2NlbnQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGZsdXNoOiBib29sZWFuO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICBnZXQgZ2V0Q2xhc3NlcygpIHtcbiAgICByZXR1cm4gdGhpcy5ob3N0Q2xhc3NlcztcbiAgfVxuXG4gIGdldCBob3N0Q2xhc3NlcygpIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyhcbiAgICAgIHtcbiAgICAgICAgJ2xpc3QtZ3JvdXAnOiB0cnVlLFxuICAgICAgICAnbGlzdC1ncm91cC1ob3Jpem9udGFsJzogdGhpcy5ob3Jpem9udGFsID09PSB0cnVlIHx8IHRoaXMuaG9yaXpvbnRhbCA9PT0gJycsXG4gICAgICAgIFtgbGlzdC1ncm91cC1ob3Jpem9udGFsLSR7dGhpcy5ob3Jpem9udGFsfWBdOiB0aGlzLmhvcml6b250YWwgJiYgdGhpcy5ob3Jpem9udGFsICE9PSB0cnVlLFxuICAgICAgICAnbGlzdC1ncm91cC1mbHVzaCc6ICEhdGhpcy5mbHVzaCxcbiAgICAgICAgJ2xpc3QtZ3JvdXAtYWNjZW50JzogISF0aGlzLmFjY2VudCxcbiAgICAgIH0sXG4gICAgKTtcbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCApIHsgIH1cblxufVxuIl19