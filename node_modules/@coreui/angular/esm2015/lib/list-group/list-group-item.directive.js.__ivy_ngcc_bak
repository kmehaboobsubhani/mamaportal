import { Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import classNames from 'classnames';
export class ListGroupItemDirective {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.host = this.hostElement.nativeElement;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'list-group-item': true,
            'list-group-item-action': this.action,
            'list-group-item-divider': this.divider,
            active: this.active,
            disabled: this.disabled,
            [`list-group-item-${this.color}`]: !!this.color,
            [`list-group-item-accent-${this.accent}`]: !!this.accent
        });
        return classes;
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes.color) {
            this.renderer.addClass(this.host, `list-group-item-${changes.color.currentValue}`);
            this.renderer.removeClass(this.host, `list-group-item-${changes.color.previousValue}`);
        }
        if (changes.accent) {
            this.renderer.addClass(this.host, `list-group-item-accent-${changes.accent.currentValue}`);
            this.renderer.removeClass(this.host, `list-group-item-accent-${changes.accent.previousValue}`);
        }
    }
}
ListGroupItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cListGroupItem], c-list-group-item',
                exportAs: 'cListGroupItem'
            },] }
];
ListGroupItemDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ListGroupItemDirective.propDecorators = {
    accent: [{ type: Input }],
    action: [{ type: Input }],
    active: [{ type: Input }],
    color: [{ type: Input }],
    divider: [{ type: Input }],
    disabled: [{ type: HostBinding, args: ['attr.disabled',] }, { type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1ncm91cC1pdGVtLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvbGlzdC1ncm91cC9saXN0LWdyb3VwLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBTXBDLE1BQU0sT0FBTyxzQkFBc0I7SUFpQ2pDLFlBQ1UsUUFBbUIsRUFDbkIsV0FBdUI7UUFEdkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUUvQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBQzdDLENBQUM7SUEzQkQsSUFDSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQ3hCO1lBQ0UsaUJBQWlCLEVBQUUsSUFBSTtZQUN2Qix3QkFBd0IsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNyQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsT0FBTztZQUN2QyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLENBQUMsbUJBQW1CLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztZQUMvQyxDQUFDLDBCQUEwQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07U0FDekQsQ0FDRixDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQVdELFFBQVEsS0FBSyxDQUFDO0lBRWQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztZQUNuRixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLG1CQUFtQixPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7U0FDMUY7UUFDRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSwwQkFBMEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1lBQzNGLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUNoRztJQUNILENBQUM7OztZQXZERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFDQUFxQztnQkFDL0MsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7O1lBTnFFLFNBQVM7WUFBNUQsVUFBVTs7O3FCQVMxQixLQUFLO3FCQUNMLEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLO3NCQUNMLEtBQUs7dUJBRUwsV0FBVyxTQUFDLGVBQWUsY0FDM0IsS0FBSzt5QkFFTCxXQUFXLFNBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjTGlzdEdyb3VwSXRlbV0sIGMtbGlzdC1ncm91cC1pdGVtJyxcbiAgZXhwb3J0QXM6ICdjTGlzdEdyb3VwSXRlbSdcbn0pXG5leHBvcnQgY2xhc3MgTGlzdEdyb3VwSXRlbURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcblxuICBASW5wdXQoKSBhY2NlbnQ6IG51bGwgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIGFjdGlvbjogbnVsbCB8IGJvb2xlYW47XG4gIEBJbnB1dCgpIGFjdGl2ZTogbnVsbCB8IGJvb2xlYW47XG4gIEBJbnB1dCgpIGNvbG9yOiBudWxsIHwgc3RyaW5nO1xuICBASW5wdXQoKSBkaXZpZGVyOiBudWxsIHwgYm9vbGVhbjtcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGlzYWJsZWQnKVxuICBASW5wdXQoKSBkaXNhYmxlZDogbnVsbCB8IHN0cmluZyB8IGJvb2xlYW47XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGdldCBnZXRDbGFzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xuICB9XG5cbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKFxuICAgICAge1xuICAgICAgICAnbGlzdC1ncm91cC1pdGVtJzogdHJ1ZSxcbiAgICAgICAgJ2xpc3QtZ3JvdXAtaXRlbS1hY3Rpb24nOiB0aGlzLmFjdGlvbixcbiAgICAgICAgJ2xpc3QtZ3JvdXAtaXRlbS1kaXZpZGVyJzogdGhpcy5kaXZpZGVyLFxuICAgICAgICBhY3RpdmU6IHRoaXMuYWN0aXZlLFxuICAgICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgW2BsaXN0LWdyb3VwLWl0ZW0tJHt0aGlzLmNvbG9yfWBdOiAhIXRoaXMuY29sb3IsXG4gICAgICAgIFtgbGlzdC1ncm91cC1pdGVtLWFjY2VudC0ke3RoaXMuYWNjZW50fWBdOiAhIXRoaXMuYWNjZW50XG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH1cblxuICBob3N0OiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBob3N0RWxlbWVudDogRWxlbWVudFJlZixcbiAgKSB7XG4gICAgdGhpcy5ob3N0ID0gdGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuY29sb3IpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QsIGBsaXN0LWdyb3VwLWl0ZW0tJHtjaGFuZ2VzLmNvbG9yLmN1cnJlbnRWYWx1ZX1gKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmhvc3QsIGBsaXN0LWdyb3VwLWl0ZW0tJHtjaGFuZ2VzLmNvbG9yLnByZXZpb3VzVmFsdWV9YCk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLmFjY2VudCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QsIGBsaXN0LWdyb3VwLWl0ZW0tYWNjZW50LSR7Y2hhbmdlcy5hY2NlbnQuY3VycmVudFZhbHVlfWApO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmhvc3QsIGBsaXN0LWdyb3VwLWl0ZW0tYWNjZW50LSR7Y2hhbmdlcy5hY2NlbnQucHJldmlvdXNWYWx1ZX1gKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==