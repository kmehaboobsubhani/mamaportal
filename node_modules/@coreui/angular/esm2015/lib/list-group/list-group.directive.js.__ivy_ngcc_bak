import { Directive, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
export class ListGroupDirective {
    constructor() { }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'list-group': true,
            'list-group-horizontal': this.horizontal === true || this.horizontal === '',
            [`list-group-horizontal-${this.horizontal}`]: this.horizontal && this.horizontal !== true,
            'list-group-flush': !!this.flush,
            'list-group-accent': !!this.accent,
        });
        return classes;
    }
}
ListGroupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cListGroup], c-list-group'
            },] }
];
ListGroupDirective.ctorParameters = () => [];
ListGroupDirective.propDecorators = {
    horizontal: [{ type: Input }],
    accent: [{ type: Input }],
    flush: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2xpc3QtZ3JvdXAvbGlzdC1ncm91cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUtwQyxNQUFNLE9BQU8sa0JBQWtCO0lBd0I3QixnQkFBa0IsQ0FBQztJQWxCbkIsSUFDSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQ3hCO1lBQ0UsWUFBWSxFQUFFLElBQUk7WUFDbEIsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFO1lBQzNFLENBQUMseUJBQXlCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJO1lBQ3pGLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNoQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07U0FDbkMsQ0FDRixDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7O1lBekJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNEJBQTRCO2FBQ3ZDOzs7O3lCQUdFLEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLO3lCQUVMLFdBQVcsU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NMaXN0R3JvdXBdLCBjLWxpc3QtZ3JvdXAnXG59KVxuZXhwb3J0IGNsYXNzIExpc3RHcm91cERpcmVjdGl2ZSB7XG5cbiAgQElucHV0KCkgaG9yaXpvbnRhbDogc3RyaW5nIHwgYm9vbGVhbjtcbiAgQElucHV0KCkgYWNjZW50OiBib29sZWFuO1xuICBASW5wdXQoKSBmbHVzaDogYm9vbGVhbjtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgZ2V0IGdldENsYXNzZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9zdENsYXNzZXM7XG4gIH1cblxuICBnZXQgaG9zdENsYXNzZXMoKSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoXG4gICAgICB7XG4gICAgICAgICdsaXN0LWdyb3VwJzogdHJ1ZSxcbiAgICAgICAgJ2xpc3QtZ3JvdXAtaG9yaXpvbnRhbCc6IHRoaXMuaG9yaXpvbnRhbCA9PT0gdHJ1ZSB8fCB0aGlzLmhvcml6b250YWwgPT09ICcnLFxuICAgICAgICBbYGxpc3QtZ3JvdXAtaG9yaXpvbnRhbC0ke3RoaXMuaG9yaXpvbnRhbH1gXTogdGhpcy5ob3Jpem9udGFsICYmIHRoaXMuaG9yaXpvbnRhbCAhPT0gdHJ1ZSxcbiAgICAgICAgJ2xpc3QtZ3JvdXAtZmx1c2gnOiAhIXRoaXMuZmx1c2gsXG4gICAgICAgICdsaXN0LWdyb3VwLWFjY2VudCc6ICEhdGhpcy5hY2NlbnQsXG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvciggKSB7ICB9XG5cbn1cblxuIl19