import { Component, ChangeDetectorRef, HostBinding, ViewChild, Input } from '@angular/core';
export class TogglerComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.displayFlex = true;
        this.hasContent = true;
    }
    get buttonClass() {
        if (this.inHeader) {
            return 'c-header-toggler';
        }
        else if (this.inNavbar) {
            return 'navbar-toggler';
        }
    }
    get iconClass() {
        if (this.inHeader) {
            return 'c-header-toggler-icon';
        }
        else if (this.inNavbar) {
            return 'navbar-toggler-icon';
        }
    }
    ngAfterViewInit() {
        this.hasContent = this.content.nativeElement.childNodes.length;
        this.changeDetector.detectChanges();
    }
}
TogglerComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-toggler',
                template: "<div #content *ngIf = \"hasContent; else default\" class=\"d-flex\"><ng-content></ng-content></div>\n<ng-template #default>\n  <button [class]=\"buttonClass\" type=\"button\">\n    <span [class]=\"iconClass\"></span>\n  </button>\n</ng-template>\n",
                styles: [""]
            },] }
];
TogglerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
TogglerComponent.propDecorators = {
    inHeader: [{ type: Input }],
    inNavbar: [{ type: Input }],
    displayFlex: [{ type: HostBinding, args: ['class.d-flex',] }],
    content: [{ type: ViewChild, args: ['content',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL3RvZ2dsZXIvdG9nZ2xlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxpQkFBaUIsRUFDakIsV0FBVyxFQUNYLFNBQVMsRUFFVCxLQUFLLEVBQ04sTUFBTSxlQUFlLENBQUM7QUFPdkIsTUFBTSxPQUFPLGdCQUFnQjtJQVczQixZQUFvQixjQUFpQztRQUFqQyxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFOeEIsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFJaEQsZUFBVSxHQUFHLElBQUksQ0FBQztJQUV1QyxDQUFDO0lBRTFELElBQUksV0FBVztRQUNiLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixPQUFPLGtCQUFrQixDQUFDO1NBQzNCO2FBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3hCLE9BQU8sZ0JBQWdCLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLE9BQU8sdUJBQXVCLENBQUM7U0FDaEM7YUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDeEIsT0FBTyxxQkFBcUIsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBaUIsQ0FBQztRQUUxRSxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLG1RQUF1Qzs7YUFFeEM7OztZQVhDLGlCQUFpQjs7O3VCQWNoQixLQUFLO3VCQUNMLEtBQUs7MEJBRUwsV0FBVyxTQUFDLGNBQWM7c0JBRTFCLFNBQVMsU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBWaWV3Q2hpbGQsXHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBJbnB1dFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjLXRvZ2dsZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi90b2dnbGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi90b2dnbGVyLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFRvZ2dsZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQElucHV0KCkgaW5IZWFkZXI6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgaW5OYXZiYXI6IGJvb2xlYW47XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZC1mbGV4JykgZGlzcGxheUZsZXggPSB0cnVlO1xyXG5cclxuICBAVmlld0NoaWxkKCdjb250ZW50JykgY29udGVudDogRWxlbWVudFJlZjtcclxuXHJcbiAgaGFzQ29udGVudCA9IHRydWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cclxuXHJcbiAgZ2V0IGJ1dHRvbkNsYXNzKCkge1xyXG4gICAgaWYgKHRoaXMuaW5IZWFkZXIpIHtcclxuICAgICAgcmV0dXJuICdjLWhlYWRlci10b2dnbGVyJztcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pbk5hdmJhcikge1xyXG4gICAgICByZXR1cm4gJ25hdmJhci10b2dnbGVyJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBpY29uQ2xhc3MoKSB7XHJcbiAgICBpZiAodGhpcy5pbkhlYWRlcikge1xyXG4gICAgICByZXR1cm4gJ2MtaGVhZGVyLXRvZ2dsZXItaWNvbic7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaW5OYXZiYXIpIHtcclxuICAgICAgcmV0dXJuICduYXZiYXItdG9nZ2xlci1pY29uJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuaGFzQ29udGVudCA9IHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoIGFzIGJvb2xlYW47XHJcbiAgICAvLyBjb25zb2xlLmxvZygndGhpcy5oYXNDb250ZW50JywgdGhpcy5oYXNDb250ZW50LCB0aGlzLmNvbnRlbnQubmF0aXZlRWxlbWVudCk7XHJcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcclxuICB9XHJcbn1cclxuIl19