import { Component, ChangeDetectorRef, HostBinding, ViewChild, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["content"];
function TogglerComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2, 3);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
} }
function TogglerComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r2.buttonClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r2.iconClass);
} }
const _c1 = ["*"];
export class TogglerComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.displayFlex = true;
        this.hasContent = true;
    }
    get buttonClass() {
        if (this.inHeader) {
            return 'c-header-toggler';
        }
        else if (this.inNavbar) {
            return 'navbar-toggler';
        }
    }
    get iconClass() {
        if (this.inHeader) {
            return 'c-header-toggler-icon';
        }
        else if (this.inNavbar) {
            return 'navbar-toggler-icon';
        }
    }
    ngAfterViewInit() {
        this.hasContent = this.content.nativeElement.childNodes.length;
        this.changeDetector.detectChanges();
    }
}
TogglerComponent.ɵfac = function TogglerComponent_Factory(t) { return new (t || TogglerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
TogglerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TogglerComponent, selectors: [["c-toggler"]], viewQuery: function TogglerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, hostVars: 2, hostBindings: function TogglerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("d-flex", ctx.displayFlex);
    } }, inputs: { inHeader: "inHeader", inNavbar: "inNavbar" }, ngContentSelectors: _c1, decls: 3, vars: 2, consts: [["class", "d-flex", 4, "ngIf", "ngIfElse"], ["default", ""], [1, "d-flex"], ["content", ""], ["type", "button"]], template: function TogglerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, TogglerComponent_div_0_Template, 3, 0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, TogglerComponent_ng_template_1_Template, 2, 4, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasContent)("ngIfElse", _r1);
    } }, directives: [ɵngcc1.NgIf], styles: [""] });
TogglerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
TogglerComponent.propDecorators = {
    inHeader: [{ type: Input }],
    inNavbar: [{ type: Input }],
    displayFlex: [{ type: HostBinding, args: ['class.d-flex',] }],
    content: [{ type: ViewChild, args: ['content',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TogglerComponent, [{
        type: Component,
        args: [{
                selector: 'c-toggler',
                template: "<div #content *ngIf = \"hasContent; else default\" class=\"d-flex\"><ng-content></ng-content></div>\n<ng-template #default>\n  <button [class]=\"buttonClass\" type=\"button\">\n    <span [class]=\"iconClass\"></span>\n  </button>\n</ng-template>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { displayFlex: [{
            type: HostBinding,
            args: ['class.d-flex']
        }], inHeader: [{
            type: Input
        }], inNavbar: [{
            type: Input
        }], content: [{
            type: ViewChild,
            args: ['content']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvdG9nZ2xlci90b2dnbGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsU0FBUyxFQUVULEtBQUssRUFDTixNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT3ZCLE1BQU0sT0FBTyxnQkFBZ0I7QUFBSSxJQVcvQixZQUFvQixjQUFpQztBQUFLLFFBQXRDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtBQUFFLFFBTjFCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ2xELFFBR0UsZUFBVSxHQUFHLElBQUksQ0FBQztBQUNwQixJQUMyRCxDQUFDO0FBQzVELElBQ0UsSUFBSSxXQUFXO0FBQ2pCLFFBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3ZCLFlBQU0sT0FBTyxrQkFBa0IsQ0FBQztBQUNoQyxTQUFLO0FBQUUsYUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDOUIsWUFBTSxPQUFPLGdCQUFnQixDQUFDO0FBQzlCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksU0FBUztBQUNmLFFBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3ZCLFlBQU0sT0FBTyx1QkFBdUIsQ0FBQztBQUNyQyxTQUFLO0FBQUUsYUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDOUIsWUFBTSxPQUFPLHFCQUFxQixDQUFDO0FBQ25DLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLGVBQWU7QUFDakIsUUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFpQixDQUFDO0FBQzlFLFFBQ0ksSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN4QyxJQUFFLENBQUM7QUFDSDs4Q0F2Q0MsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSxXQUFXLG1CQUNyQjs7OztDQUF1QzsrQkFFeEM7Ozs7Ozs7Ozs7b0RBQ0k7QUFBRTtBQUEyQyxZQVpoRCxpQkFBaUI7QUFDbEI7QUFBSTtBQUVPLHVCQVdULEtBQUs7QUFBTSx1QkFDWCxLQUFLO0FBQU0sMEJBRVgsV0FBVyxTQUFDLGNBQWM7QUFBUSxzQkFFbEMsU0FBUyxTQUFDLFNBQVM7QUFBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXRCQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBV0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU5BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXRDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQVhBLEFBQUEsQUFjQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIEhvc3RCaW5kaW5nLFxyXG4gIFZpZXdDaGlsZCxcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIElucHV0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2MtdG9nZ2xlcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3RvZ2dsZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3RvZ2dsZXIuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVG9nZ2xlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBASW5wdXQoKSBpbkhlYWRlcjogYm9vbGVhbjtcclxuICBASW5wdXQoKSBpbk5hdmJhcjogYm9vbGVhbjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5kLWZsZXgnKSBkaXNwbGF5RmxleCA9IHRydWU7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2NvbnRlbnQnKSBjb250ZW50OiBFbGVtZW50UmVmO1xyXG5cclxuICBoYXNDb250ZW50ID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxyXG5cclxuICBnZXQgYnV0dG9uQ2xhc3MoKSB7XHJcbiAgICBpZiAodGhpcy5pbkhlYWRlcikge1xyXG4gICAgICByZXR1cm4gJ2MtaGVhZGVyLXRvZ2dsZXInO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmluTmF2YmFyKSB7XHJcbiAgICAgIHJldHVybiAnbmF2YmFyLXRvZ2dsZXInO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IGljb25DbGFzcygpIHtcclxuICAgIGlmICh0aGlzLmluSGVhZGVyKSB7XHJcbiAgICAgIHJldHVybiAnYy1oZWFkZXItdG9nZ2xlci1pY29uJztcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pbk5hdmJhcikge1xyXG4gICAgICByZXR1cm4gJ25hdmJhci10b2dnbGVyLWljb24nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5oYXNDb250ZW50ID0gdGhpcy5jb250ZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggYXMgYm9vbGVhbjtcclxuICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzLmhhc0NvbnRlbnQnLCB0aGlzLmhhc0NvbnRlbnQsIHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50KTtcclxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gIH1cclxufVxyXG4iXX0=