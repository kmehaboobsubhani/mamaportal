import { Component, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ButtonGroupComponent {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.size = '';
        this.vertical = null;
        this.classes = Object.create(null);
        this.aria = 'Button group';
        this.host = this.hostElement.nativeElement;
    }
    get hostRole() {
        return 'group';
    }
    ngOnInit() {
        this.addClasses();
    }
    addClasses() {
        this.setClasses();
        for (const [key, value] of Object.entries(this.classes)) {
            if (value) {
                this.renderer.addClass(this.host, key);
            }
        }
    }
    setClasses() {
        this.classes['btn-group-vertical'] = Boolean(this.vertical) || this.vertical != null;
        this.classes['btn-group'] = !this.classes['btn-group-vertical'];
        this.classes[`btn-group-${this.size}`] = Boolean(this.size);
    }
}
ButtonGroupComponent.ɵfac = function ButtonGroupComponent_Factory(t) { return new (t || ButtonGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ButtonGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ButtonGroupComponent, selectors: [["c-button-group"]], hostVars: 2, hostBindings: function ButtonGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-label", ctx.aria)("role", ctx.hostRole);
    } }, inputs: { size: "size", vertical: "vertical" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ButtonGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
ButtonGroupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ButtonGroupComponent.propDecorators = {
    size: [{ type: Input }],
    vertical: [{ type: Input }],
    aria: [{ type: HostBinding, args: ['attr.aria-label',] }],
    hostRole: [{ type: HostBinding, args: ['attr.role',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonGroupComponent, [{
        type: Component,
        args: [{
                selector: 'c-button-group',
                template: '<ng-content></ng-content>',
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { size: [{
            type: Input
        }], vertical: [{
            type: Input
        }], aria: [{
            type: HostBinding,
            args: ['attr.aria-label']
        }], hostRole: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9idXR0b24vYnV0dG9uLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7OztBQU8zRixNQUFNLE9BQU8sb0JBQW9CO0FBQUksSUFlbkMsWUFDVSxRQUFtQixFQUNuQixXQUF1QjtBQUNoQyxRQUZTLGFBQVEsR0FBUixRQUFRLENBQVc7QUFDL0IsUUFBWSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtBQUNuQyxRQWhCVyxTQUFJLEdBQXFCLEVBQUUsQ0FBQztBQUN0QyxRQUFVLGFBQVEsR0FBNEIsSUFBSSxDQUFDO0FBRXBELFFBQVUsWUFBTyxHQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUMsUUFFaUMsU0FBSSxHQUFHLGNBQWMsQ0FBQztBQUV4RCxRQVNJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7QUFDOUMsSUFBQyxDQUFDO0FBRUgsSUFaRSxJQUNJLFFBQVE7QUFBTSxRQUNoQixPQUFPLE9BQU8sQ0FBQztBQUNsQixJQUFDLENBQUM7QUFFSCxJQU9FLFFBQVE7QUFDVCxRQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNyQixJQUFDLENBQUM7QUFFSCxJQUFFLFVBQVU7QUFDWCxRQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNyQixRQUFHLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUM1RCxZQUFLLElBQUksS0FBSyxFQUFFO0FBQ2hCLGdCQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDOUMsYUFBTTtBQUNOLFNBQUk7QUFDSixJQUFDLENBQUM7QUFFSCxJQUFFLFVBQVU7QUFDWCxRQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO0FBQ3hGLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNuRSxRQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9ELElBQUMsQ0FBQztBQUNGO2tEQTdDQSxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFLGdCQUFnQixtQkFDMUIsUUFBUSxFQUFFLDJCQUEyQjtZQUV0Qzs7Ozs7eUJBQ0s7QUFBRTtBQUVSLFlBVDJELFNBQVM7QUFBSyxZQUF0RCxVQUFVO0FBQUk7QUFBSTtBQUF5QyxtQkFTM0UsS0FBSztBQUFNLHVCQUNYLEtBQUs7QUFBTSxtQkFLWCxXQUFXLFNBQUMsaUJBQWlCO0FBQVEsdUJBRXJDLFdBQVcsU0FBQyxXQUFXO0FBQ3JCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFlQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFmQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBVkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBU0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE1Q0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBTkEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQUFBLEFBQ0EsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtYnV0dG9uLWdyb3VwJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgc3R5bGVVcmxzOiBbJy4vYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQnV0dG9uR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHNpemU6ICdzbScgfCAnbGcnIHwgJycgPSAnJztcbiAgQElucHV0KCkgdmVydGljYWw6IGJvb2xlYW4gfCBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBwcml2YXRlIGNsYXNzZXM6IGFueSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgaG9zdDtcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbCcpIGFyaWEgPSAnQnV0dG9uIGdyb3VwJztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gIGdldCBob3N0Um9sZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnZ3JvdXAnO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICkge1xuICAgIHRoaXMuaG9zdCA9IHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYWRkQ2xhc3NlcygpO1xuICB9XG5cbiAgYWRkQ2xhc3NlcygpIHtcbiAgICB0aGlzLnNldENsYXNzZXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmNsYXNzZXMpKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QsIGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0Q2xhc3NlcygpIHtcbiAgICB0aGlzLmNsYXNzZXNbJ2J0bi1ncm91cC12ZXJ0aWNhbCddID0gQm9vbGVhbih0aGlzLnZlcnRpY2FsKSB8fCB0aGlzLnZlcnRpY2FsICE9IG51bGw7XG4gICAgdGhpcy5jbGFzc2VzWydidG4tZ3JvdXAnXSA9ICF0aGlzLmNsYXNzZXNbJ2J0bi1ncm91cC12ZXJ0aWNhbCddO1xuICAgIHRoaXMuY2xhc3Nlc1tgYnRuLWdyb3VwLSR7dGhpcy5zaXplfWBdID0gQm9vbGVhbih0aGlzLnNpemUpO1xuICB9XG59XG4iXX0=