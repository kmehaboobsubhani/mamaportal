import { Component, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
export class ButtonGroupComponent {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.size = '';
        this.vertical = null;
        this.classes = Object.create(null);
        this.aria = 'Button group';
        this.host = this.hostElement.nativeElement;
    }
    get hostRole() {
        return 'group';
    }
    ngOnInit() {
        this.addClasses();
    }
    addClasses() {
        this.setClasses();
        for (const [key, value] of Object.entries(this.classes)) {
            if (value) {
                this.renderer.addClass(this.host, key);
            }
        }
    }
    setClasses() {
        this.classes['btn-group-vertical'] = Boolean(this.vertical) || this.vertical != null;
        this.classes['btn-group'] = !this.classes['btn-group-vertical'];
        this.classes[`btn-group-${this.size}`] = Boolean(this.size);
    }
}
ButtonGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-button-group',
                template: '<ng-content></ng-content>',
                styles: [""]
            },] }
];
ButtonGroupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ButtonGroupComponent.propDecorators = {
    size: [{ type: Input }],
    vertical: [{ type: Input }],
    aria: [{ type: HostBinding, args: ['attr.aria-label',] }],
    hostRole: [{ type: HostBinding, args: ['attr.role',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvYnV0dG9uL2J1dHRvbi1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFPM0YsTUFBTSxPQUFPLG9CQUFvQjtJQWUvQixZQUNVLFFBQW1CLEVBQ25CLFdBQXVCO1FBRHZCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFmeEIsU0FBSSxHQUFxQixFQUFFLENBQUM7UUFDNUIsYUFBUSxHQUE0QixJQUFJLENBQUM7UUFFMUMsWUFBTyxHQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFHWCxTQUFJLEdBQUcsY0FBYyxDQUFDO1FBV3BELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQVZELElBQ0ksUUFBUTtRQUNWLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFTRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN2RCxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO1FBQ3JGLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7O1lBNUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUUsMkJBQTJCOzthQUV0Qzs7O1lBTjBELFNBQVM7WUFBakQsVUFBVTs7O21CQVMxQixLQUFLO3VCQUNMLEtBQUs7bUJBS0wsV0FBVyxTQUFDLGlCQUFpQjt1QkFFN0IsV0FBVyxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtYnV0dG9uLWdyb3VwJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgc3R5bGVVcmxzOiBbJy4vYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQnV0dG9uR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHNpemU6ICdzbScgfCAnbGcnIHwgJycgPSAnJztcbiAgQElucHV0KCkgdmVydGljYWw6IGJvb2xlYW4gfCBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBwcml2YXRlIGNsYXNzZXM6IGFueSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgaG9zdDtcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbCcpIGFyaWEgPSAnQnV0dG9uIGdyb3VwJztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gIGdldCBob3N0Um9sZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnZ3JvdXAnO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICkge1xuICAgIHRoaXMuaG9zdCA9IHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYWRkQ2xhc3NlcygpO1xuICB9XG5cbiAgYWRkQ2xhc3NlcygpIHtcbiAgICB0aGlzLnNldENsYXNzZXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmNsYXNzZXMpKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QsIGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0Q2xhc3NlcygpIHtcbiAgICB0aGlzLmNsYXNzZXNbJ2J0bi1ncm91cC12ZXJ0aWNhbCddID0gQm9vbGVhbih0aGlzLnZlcnRpY2FsKSB8fCB0aGlzLnZlcnRpY2FsICE9IG51bGw7XG4gICAgdGhpcy5jbGFzc2VzWydidG4tZ3JvdXAnXSA9ICF0aGlzLmNsYXNzZXNbJ2J0bi1ncm91cC12ZXJ0aWNhbCddO1xuICAgIHRoaXMuY2xhc3Nlc1tgYnRuLWdyb3VwLSR7dGhpcy5zaXplfWBdID0gQm9vbGVhbih0aGlzLnNpemUpO1xuICB9XG59XG4iXX0=