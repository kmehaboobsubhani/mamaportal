import { Component, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ButtonToolbarComponent {
    constructor() {
        this.justify = '';
        this.class = '';
        this.classes = Object.create(null);
        this.aria = 'Button toolbar';
    }
    get hostRole() {
        return 'toolbar';
    }
    get hostClasses() {
        return this.getClasses();
    }
    ngOnInit() {
    }
    getClasses() {
        this.classes['btn-toolbar'] = true;
        this.classes[`justify-content-start`] = this.justify === 'start';
        this.classes[`justify-content-end`] = this.justify === 'end';
        this.classes[`justify-content-center}`] = this.justify === 'center';
        this.classes[`justify-content-between`] = this.justify === 'between';
        return classNames(this.classes, this.class, this.ngClass);
    }
}
ButtonToolbarComponent.ɵfac = function ButtonToolbarComponent_Factory(t) { return new (t || ButtonToolbarComponent)(); };
ButtonToolbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ButtonToolbarComponent, selectors: [["c-button-toolbar"]], hostVars: 4, hostBindings: function ButtonToolbarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-label", ctx.aria)("role", ctx.hostRole);
        ɵngcc0.ɵɵclassMap(ctx.hostClasses);
    } }, inputs: { justify: "justify", class: "class", ngClass: "ngClass" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ButtonToolbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{display:flex}"] });
ButtonToolbarComponent.ctorParameters = () => [];
ButtonToolbarComponent.propDecorators = {
    justify: [{ type: Input }],
    class: [{ type: Input }],
    ngClass: [{ type: Input }],
    aria: [{ type: HostBinding, args: ['attr.aria-label',] }],
    hostRole: [{ type: HostBinding, args: ['attr.role',] }],
    hostClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonToolbarComponent, [{
        type: Component,
        args: [{
                selector: 'c-button-toolbar',
                template: '<ng-content></ng-content>',
                styles: [":host{display:flex}"]
            }]
    }], function () { return []; }, { justify: [{
            type: Input
        }], class: [{
            type: Input
        }], aria: [{
            type: HostBinding,
            args: ['attr.aria-label']
        }], hostRole: [{
            type: HostBinding,
            args: ['attr.role']
        }], hostClasses: [{
            type: HostBinding,
            args: ['class']
        }], ngClass: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLXRvb2xiYXIuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2J1dHRvbi9idXR0b24tdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQzs7OztBQU9wQyxNQUFNLE9BQU8sc0JBQXNCO0FBQUksSUFxQnJDO0FBQWlCLFFBbkJSLFlBQU8sR0FBZ0QsRUFBRSxDQUFDO0FBRXJFLFFBQVcsVUFBSyxHQUFHLEVBQUUsQ0FBQztBQUNyQixRQUVTLFlBQU8sR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTdDLFFBQWtDLFNBQUksR0FBRyxnQkFBZ0IsQ0FBQztBQUUxRCxJQVVrQixDQUFDO0FBRW5CLElBWkUsSUFDSSxRQUFRO0FBQU0sUUFDaEIsT0FBTyxTQUFTLENBQUM7QUFDcEIsSUFBQyxDQUFDO0FBRUgsSUFBRSxJQUNJLFdBQVc7QUFBTSxRQUNuQixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUM1QixJQUFDLENBQUM7QUFFSCxJQUVFLFFBQVE7QUFDVCxJQUFDLENBQUM7QUFFSCxJQUFFLFVBQVU7QUFFWixRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ3RDLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEtBQUssT0FBTyxDQUFDO0FBQ3BFLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDO0FBQ2hFLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDO0FBQ3ZFLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUyxDQUFDO0FBQ3hFLFFBQUcsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3RCxJQUFDLENBQUM7QUFFSDtvREF6Q0MsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSxrQkFBa0I7Y0FDNUIsUUFBUSxFQUFFLDJCQUEyQixpRUFFdEM7Ozs7Ozt1REFDSztBQUFFO0FBRU47QUFBMkMsc0JBQTFDLEtBQUs7QUFBTSxvQkFFWCxLQUFLO0FBQU0sc0JBQ1gsS0FBSztBQUFNLG1CQUlYLFdBQVcsU0FBQyxpQkFBaUI7QUFBUSx1QkFFckMsV0FBVyxTQUFDLFdBQVc7QUFDcEIsMEJBSUgsV0FBVyxTQUFDLE9BQU87QUFDakI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQXFCQSxBQW5CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVlBLEFBQUEsQUFWQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXZDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFHQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtYnV0dG9uLXRvb2xiYXInLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBzdHlsZVVybHM6IFsnLi9idXR0b24tdG9vbGJhci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEJ1dHRvblRvb2xiYXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIGp1c3RpZnk6ICdiZXR3ZWVuJyB8ICdjZW50ZXInIHwgJ2VuZCcgfCAnc3RhcnQnIHwgJycgPSAnJztcblxuICBASW5wdXQoKSBjbGFzcyA9ICcnO1xuICBASW5wdXQoKSBuZ0NsYXNzOiBhbnk7XG5cbiAgcHJpdmF0ZSBjbGFzc2VzOiBhbnkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWxhYmVsJykgYXJpYSA9ICdCdXR0b24gdG9vbGJhcic7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICBnZXQgaG9zdFJvbGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ3Rvb2xiYXInO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGdldCBob3N0Q2xhc3NlcygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldENsYXNzZXMoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBnZXRDbGFzc2VzKCkge1xuXG4gICAgdGhpcy5jbGFzc2VzWydidG4tdG9vbGJhciddID0gdHJ1ZTtcbiAgICB0aGlzLmNsYXNzZXNbYGp1c3RpZnktY29udGVudC1zdGFydGBdID0gdGhpcy5qdXN0aWZ5ID09PSAnc3RhcnQnO1xuICAgIHRoaXMuY2xhc3Nlc1tganVzdGlmeS1jb250ZW50LWVuZGBdID0gdGhpcy5qdXN0aWZ5ID09PSAnZW5kJztcbiAgICB0aGlzLmNsYXNzZXNbYGp1c3RpZnktY29udGVudC1jZW50ZXJ9YF0gPSB0aGlzLmp1c3RpZnkgPT09ICdjZW50ZXInO1xuICAgIHRoaXMuY2xhc3Nlc1tganVzdGlmeS1jb250ZW50LWJldHdlZW5gXSA9IHRoaXMuanVzdGlmeSA9PT0gJ2JldHdlZW4nO1xuICAgIHJldHVybiBjbGFzc05hbWVzKHRoaXMuY2xhc3NlcywgdGhpcy5jbGFzcywgdGhpcy5uZ0NsYXNzKTtcbiAgfVxuXG59XG4iXX0=