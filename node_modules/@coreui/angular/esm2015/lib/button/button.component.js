import { Component, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ButtonComponent {
    constructor() {
        this.block = null;
        this.size = '';
        this.type = 'button';
        this.tabindex = null;
        this.disabled = null;
        this.pressed = null;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const outlineSuffix = this.variant === 'outline' ? 'outline-' : '';
        const classes = classNames({
            btn: true,
            [`btn-${outlineSuffix}${this.color}`]: this.color,
            [`btn-${this.size}`]: this.size,
            [`btn-ghost-${this.color}`]: this.variant === 'ghost',
            'btn-block': this.block != null,
            'btn-pill': this.shape === 'pill',
            'btn-square': this.shape === 'square',
            disabled: !!this.disabled,
            focus: !this.variant && this.pressed != null,
            active: this.variant && this.pressed != null
        });
        return classes;
    }
    get isDisabled() {
        return (this.disabled !== 'false' && this.disabled !== false && this.disabled !== null) ? this.disabled : null;
    }
    get getTabindex() {
        return this.disabled ? null : this.tabindex != null ? this.tabindex : '0';
    }
    get hostType() {
        return this.type;
    }
    get hostRole() {
        return 'button';
    }
    ngOnInit() {
    }
}
ButtonComponent.ɵfac = function ButtonComponent_Factory(t) { return new (t || ButtonComponent)(); };
ButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ButtonComponent, selectors: [["c-button"], ["", "c-button", ""]], hostVars: 7, hostBindings: function ButtonComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-pressed", ctx.pressed)("disabled", ctx.isDisabled)("tabindex", ctx.getTabindex)("type", ctx.hostType)("role", ctx.hostRole);
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { block: "block", size: "size", type: "type", tabindex: "tabindex", disabled: "disabled", pressed: "pressed", shape: "shape", variant: "variant", color: "color" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [".disabled[_nghost-%COMP%], [_nghost-%COMP%]:disabled{cursor:default}"] });
ButtonComponent.ctorParameters = () => [];
ButtonComponent.propDecorators = {
    block: [{ type: Input }],
    shape: [{ type: Input }],
    variant: [{ type: Input }],
    size: [{ type: Input }],
    color: [{ type: Input }],
    type: [{ type: Input }],
    tabindex: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }],
    disabled: [{ type: Input }],
    isDisabled: [{ type: HostBinding, args: ['attr.disabled',] }],
    pressed: [{ type: HostBinding, args: ['attr.aria-pressed',] }, { type: Input }],
    getTabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    hostType: [{ type: HostBinding, args: ['attr.type',] }],
    hostRole: [{ type: HostBinding, args: ['attr.role',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonComponent, [{
        type: Component,
        args: [{
                selector: 'c-button, [c-button]',
                template: '<ng-content></ng-content>',
                styles: [":host.disabled,:host:disabled{cursor:default}"]
            }]
    }], function () { return []; }, { block: [{
            type: Input
        }], size: [{
            type: Input
        }], type: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], disabled: [{
            type: Input
        }], pressed: [{
            type: HostBinding,
            args: ['attr.aria-pressed']
        }, {
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], isDisabled: [{
            type: HostBinding,
            args: ['attr.disabled']
        }], getTabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], hostType: [{
            type: HostBinding,
            args: ['attr.type']
        }], hostRole: [{
            type: HostBinding,
            args: ['attr.role']
        }], shape: [{
            type: Input
        }], variant: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,