import { Component, HostBinding, Input, } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class NavComponent {
    constructor() {
        this.variant = '';
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const verticalSuffix = this.vertical === true ? '' : `-${this.vertical}`;
        const classes = classNames({
            nav: true,
            [`nav-${this.variant}`]: this.variant,
            [`flex${verticalSuffix}-column`]: this.vertical,
            'nav-fill': this.fill,
            'nav-justified': this.justified,
            [`card-header-${this.variant}`]: this.inCard && this.variant
        });
        return classes;
    }
    ngOnInit() { }
}
NavComponent.ɵfac = function NavComponent_Factory(t) { return new (t || NavComponent)(); };
NavComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NavComponent, selectors: [["c-nav"]], hostVars: 2, hostBindings: function NavComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { variant: "variant", fill: "fill", justified: "justified", vertical: "vertical", inCard: "inCard" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function NavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] > .nav-link[_ngcontent-%COMP%]:focus{outline:0}"] });
NavComponent.ctorParameters = () => [];
NavComponent.propDecorators = {
    variant: [{ type: Input }],
    fill: [{ type: Input }],
    justified: [{ type: Input }],
    vertical: [{ type: Input }],
    inCard: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavComponent, [{
        type: Component,
        args: [{
                selector: 'c-nav',
                template: "<ng-content></ng-content>\n",
                styles: [":host>.nav-link:focus{outline:0}"]
            }]
    }], function () { return []; }, { variant: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], fill: [{
            type: Input
        }], justified: [{
            type: Input
        }], vertical: [{
            type: Input
        }], inCard: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9uYXYvbmF2LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDOzs7O0FBT3BDLE1BQU0sT0FBTyxZQUFZO0FBQUksSUE0QjNCO0FBQWlCLFFBMUJSLFlBQU8sR0FBMEIsRUFBRSxDQUFDO0FBQy9DLElBeUJrQixDQUFDO0FBQ25CLElBckJFLElBQ0ksVUFBVTtBQUNoQixRQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksV0FBVztBQUNqQixRQUFJLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzdFLFFBQUksTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QjtBQUNOLFlBQVEsR0FBRyxFQUFFLElBQUk7QUFDakIsWUFBUSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU87QUFDN0MsWUFBUSxDQUFDLE9BQU8sY0FBYyxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUTtBQUN2RCxZQUFRLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSTtBQUM3QixZQUFRLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUztBQUN2QyxZQUFRLENBQUMsZUFBZSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPO0FBQ3BFLFNBQU8sQ0FDRixDQUFDO0FBQ04sUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixJQUFFLENBQUM7QUFDSCxJQUdFLFFBQVEsS0FBVSxDQUFDO0FBQ3JCOzBDQXBDQyxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFO0lBQU8sbUJBQ2pCLHVDQUFtQyw4RUFFcEM7Ozs7O3lGQUNJO0FBQUU7QUFDTjtBQUMrQixzQkFBN0IsS0FBSztBQUFNLG1CQUNYLEtBQUs7QUFBTSx3QkFDWCxLQUFLO0FBQU0sdUJBQ1gsS0FBSztBQUFNLHFCQUNYLEtBQUs7QUFBTSx5QkFFWCxXQUFXLFNBQUMsT0FBTztBQUNsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXRCQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQTRCQSxBQTFCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBMEJBLEFBQUEsQUFwQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFuQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgSW5wdXQsXHJcbiAgT25Jbml0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYy1uYXYnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXYuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL25hdi5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOYXZDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBASW5wdXQoKSB2YXJpYW50OiAnJyB8ICd0YWJzJyB8ICdwaWxscycgPSAnJztcclxuICBASW5wdXQoKSBmaWxsOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGp1c3RpZmllZDogYm9vbGVhbjtcclxuICBASW5wdXQoKSB2ZXJ0aWNhbDogYm9vbGVhbiB8IHN0cmluZztcclxuICBASW5wdXQoKSBpbkNhcmQ6IGJvb2xlYW47XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxyXG4gIGdldCBnZXRDbGFzc2VzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaG9zdENsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgaG9zdENsYXNzZXMoKSB7XHJcbiAgICBjb25zdCB2ZXJ0aWNhbFN1ZmZpeCA9IHRoaXMudmVydGljYWwgPT09IHRydWUgPyAnJyA6IGAtJHt0aGlzLnZlcnRpY2FsfWA7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyhcclxuICAgICAge1xyXG4gICAgICAgIG5hdjogdHJ1ZSxcclxuICAgICAgICBbYG5hdi0ke3RoaXMudmFyaWFudH1gXTogdGhpcy52YXJpYW50LFxyXG4gICAgICAgIFtgZmxleCR7dmVydGljYWxTdWZmaXh9LWNvbHVtbmBdOiB0aGlzLnZlcnRpY2FsLFxyXG4gICAgICAgICduYXYtZmlsbCc6IHRoaXMuZmlsbCxcclxuICAgICAgICAnbmF2LWp1c3RpZmllZCc6IHRoaXMuanVzdGlmaWVkLFxyXG4gICAgICAgIFtgY2FyZC1oZWFkZXItJHt0aGlzLnZhcmlhbnR9YF06IHRoaXMuaW5DYXJkICYmIHRoaXMudmFyaWFudFxyXG4gICAgICB9LFxyXG4gICAgKTtcclxuICAgIHJldHVybiBjbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7fVxyXG5cclxufVxyXG4iXX0=