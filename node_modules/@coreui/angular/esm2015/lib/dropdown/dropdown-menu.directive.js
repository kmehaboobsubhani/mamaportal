import { Directive, ElementRef, HostBinding, Renderer2 } from '@angular/core';
import { DropdownState } from './dropdown.state';
import { DropdownService } from './dropdown.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dropdown.state';
import * as ɵngcc2 from './dropdown.service';
export class DropdownMenuDirective {
    constructor(renderer, hostElement, dropdownState, dropdownService) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.dropdownState = dropdownState;
        this.dropdownService = dropdownService;
        this.role = 'menu';
        this.dropdownMenu = true;
        this.host = this.hostElement.nativeElement;
    }
    ngOnInit() {
        this.stateToggleSubscribe();
    }
    ngOnDestroy() {
        this.stateToggleSubscribe(false);
    }
    show(show) {
        const className = 'show';
        show ?
            this.renderer.addClass(this.host, className) :
            this.renderer.removeClass(this.host, className);
    }
    align(align) {
        if (align) {
            const className = `dropdown-menu-${align}`;
            this.renderer.addClass(this.host, className);
        }
    }
    stateToggleSubscribe(subscribe = true) {
        if (subscribe) {
            this.stateToggleSubscription = this.dropdownService.dropdownState$.subscribe((state) => {
                if ('show' in state) {
                    this.show(state.show);
                }
                if ('align' in state) {
                    this.align(state.align);
                }
            });
        }
        else {
            this.stateToggleSubscription.unsubscribe();
        }
    }
}
DropdownMenuDirective.ɵfac = function DropdownMenuDirective_Factory(t) { return new (t || DropdownMenuDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DropdownState), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DropdownService)); };
DropdownMenuDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DropdownMenuDirective, selectors: [["", "cDropdownMenu", ""], ["c-dropdown-menu"]], hostVars: 3, hostBindings: function DropdownMenuDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵclassProp("dropdown-menu", ctx.dropdownMenu);
    } }, exportAs: ["cDropdownMenu"] });
DropdownMenuDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DropdownState },
    { type: DropdownService }
];
DropdownMenuDirective.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }],
    dropdownMenu: [{ type: HostBinding, args: ['class.dropdown-menu',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownMenuDirective, [{
        type: Directive,
        args: [{
                selector: '[cDropdownMenu], c-dropdown-menu',
                exportAs: 'cDropdownMenu'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.DropdownState }, { type: ɵngcc2.DropdownService }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], dropdownMenu: [{
            type: HostBinding,
            args: ['class.dropdown-menu']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvZHJvcGRvd24vZHJvcGRvd24tbWVudS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFxQixTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFL0YsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7OztBQU1uRCxNQUFNLE9BQU8scUJBQXFCO0FBQUksSUFTcEMsWUFDVSxRQUFtQixFQUNuQixXQUF1QixFQUN2QixhQUE0QixFQUM1QixlQUFnQztBQUN6QyxRQUpTLGFBQVEsR0FBUixRQUFRLENBQVc7QUFDL0IsUUFBWSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtBQUNuQyxRQUFZLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQ3hDLFFBQVksb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQzVDLFFBWjRCLFNBQUksR0FBRyxNQUFNLENBQUM7QUFFMUMsUUFBc0MsaUJBQVksR0FBRyxJQUFJLENBQUM7QUFFMUQsUUFTSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0FBQzlDLElBQUMsQ0FBQztBQUVILElBQUUsUUFBUTtBQUNULFFBQ0csSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7QUFDL0IsSUFBQyxDQUFDO0FBRUgsSUFBRSxXQUFXO0FBQU0sUUFDZixJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsSUFBQyxDQUFDO0FBRUgsSUFBRSxJQUFJLENBQUMsSUFBSTtBQUNWLFFBQUcsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDO0FBQzVCLFFBQ0csSUFB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QUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBZUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQXpFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFSQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0Ryb3Bkb3duU3RhdGV9IGZyb20gJy4vZHJvcGRvd24uc3RhdGUnO1xuaW1wb3J0IHtEcm9wZG93blNlcnZpY2V9IGZyb20gJy4vZHJvcGRvd24uc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjRHJvcGRvd25NZW51XSwgYy1kcm9wZG93bi1tZW51JyxcbiAgZXhwb3J0QXM6ICdjRHJvcGRvd25NZW51J1xufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bk1lbnVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKSByb2xlID0gJ21lbnUnO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZHJvcGRvd24tbWVudScpIGRyb3Bkb3duTWVudSA9IHRydWU7XG5cbiAgcHJpdmF0ZSBzdGF0ZVRvZ2dsZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHJlYWRvbmx5IGhvc3Q7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBkcm9wZG93blN0YXRlOiBEcm9wZG93blN0YXRlLFxuICAgIHByaXZhdGUgZHJvcGRvd25TZXJ2aWNlOiBEcm9wZG93blNlcnZpY2UsXG4gICkge1xuICAgIHRoaXMuaG9zdCA9IHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIC8vIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0LCAncHktMCcpO1xuICAgIHRoaXMuc3RhdGVUb2dnbGVTdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3RhdGVUb2dnbGVTdWJzY3JpYmUoZmFsc2UpO1xuICB9XG5cbiAgc2hvdyhzaG93KSB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gJ3Nob3cnO1xuICAgIC8vIGNvbnNvbGUubG9nKCdjRHJvcGRvd25NZW51IHNob3cnLCBzaG93KTtcbiAgICBzaG93ID9cbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0LCBjbGFzc05hbWUpIDpcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0LCBjbGFzc05hbWUpO1xuICB9XG5cbiAgYWxpZ24oYWxpZ24pIHtcbiAgICBpZiAoYWxpZ24pIHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGBkcm9wZG93bi1tZW51LSR7YWxpZ259YDtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0LCBjbGFzc05hbWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGFsaWduKGFsaWduKSB7XG4gIC8vICAgY29uc3QgYWxpZ25zID0gT2JqZWN0LmtleXMoYWxpZ24pO1xuICAvLyAgIGNvbnNvbGUubG9nKCdhbGlnbnMnLCBhbGlnbiwgYWxpZ25zKVxuICAvLyAgIGFsaWducy5mb3JFYWNoKGtleSA9PiB7XG4gIC8vICAgICBjb25zb2xlLmxvZygna2V5cycsIGtleSlcbiAgLy8gICAgIGNvbnN0IGJyZWFrcG9pbnQgPSBjaGVja0JyZWFrcG9pbnQoYWxpZ25ba2V5XSwgdmFsaWRCcmVha3BvaW50cykgPyBgLSR7YWxpZ25ba2V5XX1gIDogJyc7XG4gIC8vICAgICBjb25zdCBjbGFzc05hbWUgPSBgZHJvcGRvd24tbWVudSR7YnJlYWtwb2ludH0tJHtrZXl9YDtcbiAgLy8gICAgIGFsaWduW2tleV0gP1xuICAvLyAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdCwgY2xhc3NOYW1lKSA6XG4gIC8vICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0LCBjbGFzc05hbWUpO1xuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgcHJpdmF0ZSBzdGF0ZVRvZ2dsZVN1YnNjcmliZShzdWJzY3JpYmU6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgdGhpcy5zdGF0ZVRvZ2dsZVN1YnNjcmlwdGlvbiA9IHRoaXMuZHJvcGRvd25TZXJ2aWNlLmRyb3Bkb3duU3RhdGUkLnN1YnNjcmliZSgoc3RhdGUpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3N1YnNjcmliZWQnLCBzdGF0ZSk7XG4gICAgICAgIGlmICgnc2hvdycgaW4gc3RhdGUpIHtcbiAgICAgICAgICB0aGlzLnNob3coc3RhdGUuc2hvdyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdhbGlnbicgaW4gc3RhdGUpIHtcbiAgICAgICAgICB0aGlzLmFsaWduKHN0YXRlLmFsaWduKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGVUb2dnbGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==