import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DropdownDirective } from './dropdown.directive';
import { DropdownService } from './dropdown.service';
import { DropdownState } from './dropdown.state';
import { DropdownMenuDirective } from './dropdown-menu.directive';
import { DropdownToggleDirective } from './dropdown-toggle.directive';
import { DropdownHeaderDirective } from './dropdown-header.directive';
import { DropdownDividerDirective } from './dropdown-divider.directive';
import { DropdownItemDirective } from './dropdown-item.directive';
import { DropdownDividerComponent } from './dropdown-divider.component';
import * as ɵngcc0 from '@angular/core';
export class DropdownModule {
    static forRoot(config) {
        return {
            ngModule: DropdownModule,
            providers: []
        };
    }
}
DropdownModule.ɵfac = function DropdownModule_Factory(t) { return new (t || DropdownModule)(); };
DropdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropdownModule });
DropdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [
        DropdownService,
        DropdownState
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropdownModule, { declarations: function () { return [DropdownDirective,
        DropdownToggleDirective,
        DropdownMenuDirective,
        DropdownHeaderDirective,
        DropdownDividerDirective,
        DropdownItemDirective,
        DropdownDividerComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [DropdownDirective,
        DropdownToggleDirective,
        DropdownMenuDirective,
        DropdownItemDirective,
        DropdownDividerDirective,
        DropdownHeaderDirective,
        DropdownDividerComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DropdownDirective,
                    DropdownToggleDirective,
                    DropdownMenuDirective,
                    DropdownHeaderDirective,
                    DropdownDividerDirective,
                    DropdownItemDirective,
                    DropdownDividerComponent
                ],
                exports: [
                    DropdownDirective,
                    DropdownToggleDirective,
                    DropdownMenuDirective,
                    DropdownItemDirective,
                    DropdownDividerDirective,
                    DropdownHeaderDirective,
                    DropdownDividerComponent
                ],
                imports: [
                    CommonModule
                ],
                providers: [
                    DropdownService,
                    DropdownState
                ]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24ubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2Ryb3Bkb3duL2Ryb3Bkb3duLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXNCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUE2QnhFLE1BQU0sT0FBTyxjQUFjO0FBQzNCLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFZO0FBQUssUUFDOUIsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGNBQWM7QUFDOUIsWUFBTSxTQUFTLEVBQUUsRUFFVjtBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzRDQXBDQyxRQUFRLFNBQUMsbUJBQ1IsWUFBWSxFQUFFO21CQUNaLGlCQUFpQix1QkFDakI7U0FBdUIsdUJBQ3ZCLHFCQUFxQjtlQUNyQjthQUF1QjtjQUN2QjttQkFBd0I7O0VBQ3hCLHFCQUFxQix1QkFDckIsd0JBQXdCLG1CQUN6QixtQkFDRCxPQUFPLEVBQUUsdUJBQ1AsaUJBQWlCO2VBQ2pCO0tBQXVCLHVCQUN2QjtrQkFBcUI7UUFDckIscUJBQXFCO2tCQUNyQjtXQUF3Qix1QkFDeEIsdUJBQXVCLHVCQUN2Qix3QkFBd0IsbUJBQ3pCO0tBQ0QsT0FBTyxFQUFFO0lBQ1AsWUFBWTtJQUNiLG1CQUNEO0NBQVMsRUFBRSx1QkFDVDtPQUFlLHVCQUNmO1VBQWEsbUJBQ2QsZUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXZDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQTZCQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFuQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBEcm9wZG93bkRpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcGRvd24uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRHJvcGRvd25TZXJ2aWNlIH0gZnJvbSAnLi9kcm9wZG93bi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRHJvcGRvd25TdGF0ZSB9IGZyb20gJy4vZHJvcGRvd24uc3RhdGUnO1xyXG5pbXBvcnQgeyBEcm9wZG93bk1lbnVEaXJlY3RpdmUgfSBmcm9tICcuL2Ryb3Bkb3duLW1lbnUuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRHJvcGRvd25Ub2dnbGVEaXJlY3RpdmUgfSBmcm9tICcuL2Ryb3Bkb3duLXRvZ2dsZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBEcm9wZG93bkhlYWRlckRpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcGRvd24taGVhZGVyLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IERyb3Bkb3duRGl2aWRlckRpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcGRvd24tZGl2aWRlci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBEcm9wZG93bkl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL2Ryb3Bkb3duLWl0ZW0uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRHJvcGRvd25EaXZpZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9kcm9wZG93bi1kaXZpZGVyLmNvbXBvbmVudCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgRHJvcGRvd25EaXJlY3RpdmUsXHJcbiAgICBEcm9wZG93blRvZ2dsZURpcmVjdGl2ZSxcclxuICAgIERyb3Bkb3duTWVudURpcmVjdGl2ZSxcclxuICAgIERyb3Bkb3duSGVhZGVyRGlyZWN0aXZlLFxyXG4gICAgRHJvcGRvd25EaXZpZGVyRGlyZWN0aXZlLFxyXG4gICAgRHJvcGRvd25JdGVtRGlyZWN0aXZlLFxyXG4gICAgRHJvcGRvd25EaXZpZGVyQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBEcm9wZG93bkRpcmVjdGl2ZSxcclxuICAgIERyb3Bkb3duVG9nZ2xlRGlyZWN0aXZlLFxyXG4gICAgRHJvcGRvd25NZW51RGlyZWN0aXZlLFxyXG4gICAgRHJvcGRvd25JdGVtRGlyZWN0aXZlLFxyXG4gICAgRHJvcGRvd25EaXZpZGVyRGlyZWN0aXZlLFxyXG4gICAgRHJvcGRvd25IZWFkZXJEaXJlY3RpdmUsXHJcbiAgICBEcm9wZG93bkRpdmlkZXJDb21wb25lbnRcclxuICBdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZVxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBEcm9wZG93blNlcnZpY2UsXHJcbiAgICBEcm9wZG93blN0YXRlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHJvcGRvd25Nb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZz86IGFueSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8RHJvcGRvd25Nb2R1bGU+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBEcm9wZG93bk1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgLy8gRHJvcGRvd25TdGF0ZSxcclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19