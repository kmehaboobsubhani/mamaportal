import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { DropdownState } from './dropdown.state';
import { DropdownService } from './dropdown.service';
import { DropdownDirective } from './dropdown.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dropdown.directive';
import * as ɵngcc2 from './dropdown.service';
import * as ɵngcc3 from './dropdown.state';
export class DropdownToggleDirective {
    constructor(renderer, hostElement, dropdown, dropdownService, dropdownState) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.dropdown = dropdown;
        this.dropdownService = dropdownService;
        this.dropdownState = dropdownState;
        this.cDropdownCaret = 'caret';
        this.host = this.hostElement.nativeElement;
    }
    ngOnInit() {
        this.state = this.dropdownState.setState({ caret: this.cDropdownCaret });
        const toggleClass = 'dropdown-toggle';
        if (this.state.caret === 'none') {
            this.renderer.removeClass(this.host, toggleClass);
        }
        else {
            this.renderer.addClass(this.host, toggleClass);
            if (this.state.caret === 'split') {
                this.renderer.addClass(this.host, `${toggleClass}-split`);
            }
        }
    }
    toggleShow($event) {
        $event.preventDefault();
        this.state = this.dropdownState.getState();
        this.dropdownService.toggle({ show: !this.state.show });
    }
}
DropdownToggleDirective.ɵfac = function DropdownToggleDirective_Factory(t) { return new (t || DropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DropdownDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DropdownService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DropdownState)); };
DropdownToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DropdownToggleDirective, selectors: [["", "cDropdownToggle", ""], ["c-dropdown-toggle"]], hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DropdownToggleDirective_click_HostBindingHandler($event) { return ctx.toggleShow($event); });
    } }, inputs: { cDropdownCaret: "cDropdownCaret" }, exportAs: ["cDropdownToggle"] });
DropdownToggleDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DropdownDirective },
    { type: DropdownService },
    { type: DropdownState }
];
DropdownToggleDirective.propDecorators = {
    cDropdownCaret: [{ type: Input }],
    toggleShow: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[cDropdownToggle], c-dropdown-toggle',
                exportAs: 'cDropdownToggle'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.DropdownDirective }, { type: ɵngcc2.DropdownService }, { type: ɵngcc3.DropdownState }]; }, { cDropdownCaret: [{
            type: Input
        }], toggleShow: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9kcm9wZG93bi9kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBQyxhQUFhLEVBQXlCLE1BQU0sa0JBQWtCLENBQUM7QUFDdkUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDOzs7OztBQU12RCxNQUFNLE9BQU8sdUJBQXVCO0FBQUksSUFPdEMsWUFDVSxRQUFtQixFQUNuQixXQUF1QixFQUN2QixRQUEyQixFQUMzQixlQUFnQyxFQUNoQyxhQUE0QjtBQUNwQyxRQUxRLGFBQVEsR0FBUixRQUFRLENBQVc7QUFDL0IsUUFBWSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtBQUNuQyxRQUFZLGFBQVEsR0FBUixRQUFRLENBQW1CO0FBQ3ZDLFFBQVksb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQzVDLFFBQVksa0JBQWEsR0FBYixhQUFhLENBQWU7QUFDdkMsUUFYVSxtQkFBYyxHQUErQixPQUFPLENBQUM7QUFFaEUsUUFVSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0FBQzlDLElBQUMsQ0FBQztBQUVILElBQUUsUUFBUTtBQUFNLFFBQ1osSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQztBQUMxRSxRQUFHLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDO0FBQ3pDLFFBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxNQUFNLEVBQUU7QUFDcEMsWUFBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZELFNBQUk7QUFBRSxhQUFJO0FBQ1YsWUFBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3BELFlBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxPQUFPLEVBQUU7QUFDdkMsZ0JBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFDakUsYUFBTTtBQUNOLFNBQUk7QUFDSixJQUFDLENBQUM7QUFFSCxJQUNFLFVBQVUsQ0FBQyxNQUFXO0FBQ3ZCLFFBQ0csTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzNCLFFBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzlDLFFBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7QUFDekQsSUFBQyxDQUFDO0FBQ0Y7cURBekNBLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUUsc0NBQXNDLG1CQUNoRCxRQUFRLEVBQUUsaUJBQWlCLGdCQUM1Qjs7O3dGQUNLO0FBQUU7QUFFUixZQVg0RCxTQUFTO0FBQUssWUFBdkQsVUFBVTtBQUFLLFlBRzFCLGlCQUFpQjtBQUFLLFlBRHRCLGVBQWU7QUFBSyxZQURwQixhQUFhO0FBQUk7QUFBSTtBQUM1Qiw2QkFTRSxLQUFLO0FBQU0seUJBNEJYLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDOUI7Ozs7Ozs7Ozs7Ozs7QUF4Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXhDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFSQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFEQSxBQUFBLEFBREEsQUFBQSxBQVVBLEFBQUEsQUE0QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Ryb3Bkb3duU3RhdGUsIERyb3Bkb3duU3RhdGVJbnRlcmZhY2V9IGZyb20gJy4vZHJvcGRvd24uc3RhdGUnO1xuaW1wb3J0IHtEcm9wZG93blNlcnZpY2V9IGZyb20gJy4vZHJvcGRvd24uc2VydmljZSc7XG5pbXBvcnQge0Ryb3Bkb3duRGlyZWN0aXZlfSBmcm9tICcuL2Ryb3Bkb3duLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjRHJvcGRvd25Ub2dnbGVdLCBjLWRyb3Bkb3duLXRvZ2dsZScsXG4gIGV4cG9ydEFzOiAnY0Ryb3Bkb3duVG9nZ2xlJyxcbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25Ub2dnbGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIGNEcm9wZG93bkNhcmV0OiAnY2FyZXQnIHwgJ3NwbGl0JyB8ICdub25lJyA9ICdjYXJldCc7XG5cbiAgcHJpdmF0ZSBzdGF0ZTogRHJvcGRvd25TdGF0ZUludGVyZmFjZTtcbiAgcHJpdmF0ZSByZWFkb25seSBob3N0O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgZHJvcGRvd246IERyb3Bkb3duRGlyZWN0aXZlLFxuICAgIHByaXZhdGUgZHJvcGRvd25TZXJ2aWNlOiBEcm9wZG93blNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkcm9wZG93blN0YXRlOiBEcm9wZG93blN0YXRlXG4gICkge1xuICAgIHRoaXMuaG9zdCA9IHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmRyb3Bkb3duU3RhdGUuc2V0U3RhdGUoe2NhcmV0OiB0aGlzLmNEcm9wZG93bkNhcmV0fSk7XG4gICAgY29uc3QgdG9nZ2xlQ2xhc3MgPSAnZHJvcGRvd24tdG9nZ2xlJztcbiAgICBpZiAodGhpcy5zdGF0ZS5jYXJldCA9PT0gJ25vbmUnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdCwgdG9nZ2xlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdCwgdG9nZ2xlQ2xhc3MpO1xuICAgICAgaWYgKHRoaXMuc3RhdGUuY2FyZXQgPT09ICdzcGxpdCcpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QsIGAke3RvZ2dsZUNsYXNzfS1zcGxpdGApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgdG9nZ2xlU2hvdygkZXZlbnQ6IGFueSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdjRHJvcGRvd25Ub2dnbGUnLCAkZXZlbnQpO1xuICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmRyb3Bkb3duU3RhdGUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLmRyb3Bkb3duU2VydmljZS50b2dnbGUoe3Nob3c6ICF0aGlzLnN0YXRlLnNob3d9KTtcbiAgfVxufVxuIl19