import { Directive, ElementRef, HostBinding, Renderer2 } from '@angular/core';
import { DropdownState } from './dropdown.state';
import { DropdownService } from './dropdown.service';
export class DropdownMenuDirective {
    constructor(renderer, hostElement, dropdownState, dropdownService) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.dropdownState = dropdownState;
        this.dropdownService = dropdownService;
        this.role = 'menu';
        this.dropdownMenu = true;
        this.host = this.hostElement.nativeElement;
    }
    ngOnInit() {
        this.stateToggleSubscribe();
    }
    ngOnDestroy() {
        this.stateToggleSubscribe(false);
    }
    show(show) {
        const className = 'show';
        show ?
            this.renderer.addClass(this.host, className) :
            this.renderer.removeClass(this.host, className);
    }
    align(align) {
        if (align) {
            const className = `dropdown-menu-${align}`;
            this.renderer.addClass(this.host, className);
        }
    }
    stateToggleSubscribe(subscribe = true) {
        if (subscribe) {
            this.stateToggleSubscription = this.dropdownService.dropdownState$.subscribe((state) => {
                if ('show' in state) {
                    this.show(state.show);
                }
                if ('align' in state) {
                    this.align(state.align);
                }
            });
        }
        else {
            this.stateToggleSubscription.unsubscribe();
        }
    }
}
DropdownMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cDropdownMenu], c-dropdown-menu',
                exportAs: 'cDropdownMenu'
            },] }
];
DropdownMenuDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DropdownState },
    { type: DropdownService }
];
DropdownMenuDirective.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }],
    dropdownMenu: [{ type: HostBinding, args: ['class.dropdown-menu',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2Ryb3Bkb3duL2Ryb3Bkb3duLW1lbnUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBcUIsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRS9GLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFNbkQsTUFBTSxPQUFPLHFCQUFxQjtJQVNoQyxZQUNVLFFBQW1CLEVBQ25CLFdBQXVCLEVBQ3ZCLGFBQTRCLEVBQzVCLGVBQWdDO1FBSGhDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdkIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBWGhCLFNBQUksR0FBRyxNQUFNLENBQUM7UUFFSixpQkFBWSxHQUFHLElBQUksQ0FBQztRQVd0RCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBQzdDLENBQUM7SUFFRCxRQUFRO1FBRU4sSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFJO1FBQ1AsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBRXpCLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxLQUFLLEVBQUU7WUFDVCxNQUFNLFNBQVMsR0FBRyxpQkFBaUIsS0FBSyxFQUFFLENBQUM7WUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM5QztJQUNILENBQUM7SUFlTyxvQkFBb0IsQ0FBQyxZQUFxQixJQUFJO1FBQ3BELElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUVyRixJQUFJLE1BQU0sSUFBSSxLQUFLLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN2QjtnQkFDRCxJQUFJLE9BQU8sSUFBSSxLQUFLLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN6QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUM1QztJQUNILENBQUM7OztZQXpFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtDQUFrQztnQkFDNUMsUUFBUSxFQUFFLGVBQWU7YUFDMUI7OztZQVI4RCxTQUFTO1lBQXJELFVBQVU7WUFFckIsYUFBYTtZQUNiLGVBQWU7OzttQkFRcEIsV0FBVyxTQUFDLFdBQVc7MkJBRXZCLFdBQVcsU0FBQyxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtEcm9wZG93blN0YXRlfSBmcm9tICcuL2Ryb3Bkb3duLnN0YXRlJztcbmltcG9ydCB7RHJvcGRvd25TZXJ2aWNlfSBmcm9tICcuL2Ryb3Bkb3duLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY0Ryb3Bkb3duTWVudV0sIGMtZHJvcGRvd24tbWVudScsXG4gIGV4cG9ydEFzOiAnY0Ryb3Bkb3duTWVudSdcbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25NZW51RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJykgcm9sZSA9ICdtZW51JztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRyb3Bkb3duLW1lbnUnKSBkcm9wZG93bk1lbnUgPSB0cnVlO1xuXG4gIHByaXZhdGUgc3RhdGVUb2dnbGVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSByZWFkb25seSBob3N0O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgZHJvcGRvd25TdGF0ZTogRHJvcGRvd25TdGF0ZSxcbiAgICBwcml2YXRlIGRyb3Bkb3duU2VydmljZTogRHJvcGRvd25TZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLmhvc3QgPSB0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICAvLyB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdCwgJ3B5LTAnKTtcbiAgICB0aGlzLnN0YXRlVG9nZ2xlU3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlVG9nZ2xlU3Vic2NyaWJlKGZhbHNlKTtcbiAgfVxuXG4gIHNob3coc2hvdykge1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9ICdzaG93JztcbiAgICAvLyBjb25zb2xlLmxvZygnY0Ryb3Bkb3duTWVudSBzaG93Jywgc2hvdyk7XG4gICAgc2hvdyA/XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdCwgY2xhc3NOYW1lKSA6XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdCwgY2xhc3NOYW1lKTtcbiAgfVxuXG4gIGFsaWduKGFsaWduKSB7XG4gICAgaWYgKGFsaWduKSB7XG4gICAgICBjb25zdCBjbGFzc05hbWUgPSBgZHJvcGRvd24tbWVudS0ke2FsaWdufWA7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdCwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICAvLyBhbGlnbihhbGlnbikge1xuICAvLyAgIGNvbnN0IGFsaWducyA9IE9iamVjdC5rZXlzKGFsaWduKTtcbiAgLy8gICBjb25zb2xlLmxvZygnYWxpZ25zJywgYWxpZ24sIGFsaWducylcbiAgLy8gICBhbGlnbnMuZm9yRWFjaChrZXkgPT4ge1xuICAvLyAgICAgY29uc29sZS5sb2coJ2tleXMnLCBrZXkpXG4gIC8vICAgICBjb25zdCBicmVha3BvaW50ID0gY2hlY2tCcmVha3BvaW50KGFsaWduW2tleV0sIHZhbGlkQnJlYWtwb2ludHMpID8gYC0ke2FsaWduW2tleV19YCA6ICcnO1xuICAvLyAgICAgY29uc3QgY2xhc3NOYW1lID0gYGRyb3Bkb3duLW1lbnUke2JyZWFrcG9pbnR9LSR7a2V5fWA7XG4gIC8vICAgICBhbGlnbltrZXldID9cbiAgLy8gICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QsIGNsYXNzTmFtZSkgOlxuICAvLyAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdCwgY2xhc3NOYW1lKTtcbiAgLy8gICB9KTtcbiAgLy8gfVxuXG4gIHByaXZhdGUgc3RhdGVUb2dnbGVTdWJzY3JpYmUoc3Vic2NyaWJlOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMuc3RhdGVUb2dnbGVTdWJzY3JpcHRpb24gPSB0aGlzLmRyb3Bkb3duU2VydmljZS5kcm9wZG93blN0YXRlJC5zdWJzY3JpYmUoKHN0YXRlKSA9PiB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzdWJzY3JpYmVkJywgc3RhdGUpO1xuICAgICAgICBpZiAoJ3Nob3cnIGluIHN0YXRlKSB7XG4gICAgICAgICAgdGhpcy5zaG93KHN0YXRlLnNob3cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnYWxpZ24nIGluIHN0YXRlKSB7XG4gICAgICAgICAgdGhpcy5hbGlnbihzdGF0ZS5hbGlnbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlVG9nZ2xlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=