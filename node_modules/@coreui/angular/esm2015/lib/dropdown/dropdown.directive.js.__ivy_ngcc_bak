import { Directive, ElementRef, HostBinding, Input, Renderer2, } from '@angular/core';
import { OutClickService } from '../shared';
import { DropdownService } from './dropdown.service';
import { DropdownState } from './dropdown.state';
export class DropdownDirective {
    constructor(renderer, hostElement, outClickService, dropdownService, dropdownState) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.outClickService = outClickService;
        this.dropdownService = dropdownService;
        this.dropdownState = dropdownState;
        this.direction = 'down';
        this.cDropdownAlign = '';
    }
    ngOnInit() {
        const state = { show: this.cDropdownShow, align: this.cDropdownAlign, direction: this.direction };
        this.state = this.dropdownState.setState(state);
        const dropdownClass = `drop${this.direction || 'down'}`;
        this.renderer.addClass(this.hostElement.nativeElement, dropdownClass);
        this.stateToggleSubscribe();
        this.outClickSubscribe();
    }
    ngOnDestroy() {
        this.stateToggleSubscribe(false);
        this.outClickSubscribe(false);
    }
    ngOnChanges(changes) {
        if (changes.direction) {
            this.renderer.removeClass(this.hostElement.nativeElement, `drop${changes.direction.previousValue || 'down'}`);
            this.renderer.addClass(this.hostElement.nativeElement, `drop${changes.direction.currentValue || 'down'}`);
        }
        if (changes.cDropdownShow) {
            const state = { show: changes.cDropdownShow.currentValue };
            this.state = this.dropdownState.setState(state);
            this.dropdownService.toggle(this.state);
        }
    }
    ngAfterViewInit() {
        this.cDropdownShow = this.state.show;
        this.dropdownService.toggle(this.state);
    }
    stateToggleSubscribe(subscribe = true) {
        if (subscribe) {
            this.stateToggleSubscription = this.dropdownService.dropdownState$.subscribe((state) => {
                if ('show' in state) {
                    this.show(state.show);
                }
            });
        }
        else {
            this.stateToggleSubscription.unsubscribe();
        }
    }
    show(show) {
        this.cDropdownShow = show;
        this.state = this.dropdownState.setState({ show });
        show ?
            this.renderer.addClass(this.hostElement.nativeElement, 'show') :
            this.renderer.removeClass(this.hostElement.nativeElement, 'show');
    }
    toggle() {
        this.show(!this.state.show);
    }
    outClickSubscribe(subscribe = true) {
        if (subscribe) {
            this.outClickSubscription = this.outClickService.outClick$.subscribe(message => {
                if (message.event) {
                    this.autoClose(message.event);
                }
            });
        }
        else {
            this.outClickSubscription.unsubscribe();
        }
    }
    autoClose(e) {
        const state = this.dropdownState.getState();
        if (state.show) {
            if (!this.hostElement.nativeElement.contains(e.target.closest('[cDropdownToggle]'))) {
                this.cDropdownShow = false;
                this.dropdownService.toggle({ show: false });
            }
        }
    }
}
DropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cDropdown], c-dropdown',
                exportAs: 'cDropdown',
                providers: [DropdownService, DropdownState],
            },] }
];
DropdownDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: OutClickService },
    { type: DropdownService },
    { type: DropdownState }
];
DropdownDirective.propDecorators = {
    direction: [{ type: Input, args: ['cDropdown',] }],
    cDropdownAlign: [{ type: Input }],
    cDropdownShow: [{ type: Input }, { type: HostBinding, args: ['attr.aria-expanded',] }]
};
//# sourceMappingURL=data:application/json;base64,