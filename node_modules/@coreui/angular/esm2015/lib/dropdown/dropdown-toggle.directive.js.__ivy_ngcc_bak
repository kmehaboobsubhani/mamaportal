import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { DropdownState } from './dropdown.state';
import { DropdownService } from './dropdown.service';
import { DropdownDirective } from './dropdown.directive';
export class DropdownToggleDirective {
    constructor(renderer, hostElement, dropdown, dropdownService, dropdownState) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.dropdown = dropdown;
        this.dropdownService = dropdownService;
        this.dropdownState = dropdownState;
        this.cDropdownCaret = 'caret';
        this.host = this.hostElement.nativeElement;
    }
    ngOnInit() {
        this.state = this.dropdownState.setState({ caret: this.cDropdownCaret });
        const toggleClass = 'dropdown-toggle';
        if (this.state.caret === 'none') {
            this.renderer.removeClass(this.host, toggleClass);
        }
        else {
            this.renderer.addClass(this.host, toggleClass);
            if (this.state.caret === 'split') {
                this.renderer.addClass(this.host, `${toggleClass}-split`);
            }
        }
    }
    toggleShow($event) {
        $event.preventDefault();
        this.state = this.dropdownState.getState();
        this.dropdownService.toggle({ show: !this.state.show });
    }
}
DropdownToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cDropdownToggle], c-dropdown-toggle',
                exportAs: 'cDropdownToggle',
            },] }
];
DropdownToggleDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DropdownDirective },
    { type: DropdownService },
    { type: DropdownState }
];
DropdownToggleDirective.propDecorators = {
    cDropdownCaret: [{ type: Input }],
    toggleShow: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvZHJvcGRvd24vZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUMsYUFBYSxFQUF5QixNQUFNLGtCQUFrQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQU12RCxNQUFNLE9BQU8sdUJBQXVCO0lBT2xDLFlBQ1UsUUFBbUIsRUFDbkIsV0FBdUIsRUFDdkIsUUFBMkIsRUFDM0IsZUFBZ0MsRUFDaEMsYUFBNEI7UUFKNUIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN2QixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUMzQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFWN0IsbUJBQWMsR0FBK0IsT0FBTyxDQUFDO1FBWTVELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDO1FBQ3RDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTSxFQUFFO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDbkQ7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDL0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxPQUFPLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxXQUFXLFFBQVEsQ0FBQyxDQUFDO2FBQzNEO1NBQ0Y7SUFDSCxDQUFDO0lBR0QsVUFBVSxDQUFDLE1BQVc7UUFFcEIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7WUF4Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQ0FBc0M7Z0JBQ2hELFFBQVEsRUFBRSxpQkFBaUI7YUFDNUI7OztZQVIyRCxTQUFTO1lBQWxELFVBQVU7WUFHckIsaUJBQWlCO1lBRGpCLGVBQWU7WUFEZixhQUFhOzs7NkJBVWxCLEtBQUs7eUJBNEJMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEcm9wZG93blN0YXRlLCBEcm9wZG93blN0YXRlSW50ZXJmYWNlfSBmcm9tICcuL2Ryb3Bkb3duLnN0YXRlJztcbmltcG9ydCB7RHJvcGRvd25TZXJ2aWNlfSBmcm9tICcuL2Ryb3Bkb3duLnNlcnZpY2UnO1xuaW1wb3J0IHtEcm9wZG93bkRpcmVjdGl2ZX0gZnJvbSAnLi9kcm9wZG93bi5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY0Ryb3Bkb3duVG9nZ2xlXSwgYy1kcm9wZG93bi10b2dnbGUnLFxuICBleHBvcnRBczogJ2NEcm9wZG93blRvZ2dsZScsXG59KVxuZXhwb3J0IGNsYXNzIERyb3Bkb3duVG9nZ2xlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBjRHJvcGRvd25DYXJldDogJ2NhcmV0JyB8ICdzcGxpdCcgfCAnbm9uZScgPSAnY2FyZXQnO1xuXG4gIHByaXZhdGUgc3RhdGU6IERyb3Bkb3duU3RhdGVJbnRlcmZhY2U7XG4gIHByaXZhdGUgcmVhZG9ubHkgaG9zdDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBob3N0RWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGRyb3Bkb3duOiBEcm9wZG93bkRpcmVjdGl2ZSxcbiAgICBwcml2YXRlIGRyb3Bkb3duU2VydmljZTogRHJvcGRvd25TZXJ2aWNlLFxuICAgIHByaXZhdGUgZHJvcGRvd25TdGF0ZTogRHJvcGRvd25TdGF0ZVxuICApIHtcbiAgICB0aGlzLmhvc3QgPSB0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5kcm9wZG93blN0YXRlLnNldFN0YXRlKHtjYXJldDogdGhpcy5jRHJvcGRvd25DYXJldH0pO1xuICAgIGNvbnN0IHRvZ2dsZUNsYXNzID0gJ2Ryb3Bkb3duLXRvZ2dsZSc7XG4gICAgaWYgKHRoaXMuc3RhdGUuY2FyZXQgPT09ICdub25lJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmhvc3QsIHRvZ2dsZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3QsIHRvZ2dsZUNsYXNzKTtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmNhcmV0ID09PSAnc3BsaXQnKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0LCBgJHt0b2dnbGVDbGFzc30tc3BsaXRgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIHRvZ2dsZVNob3coJGV2ZW50OiBhbnkpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnY0Ryb3Bkb3duVG9nZ2xlJywgJGV2ZW50KTtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5kcm9wZG93blN0YXRlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5kcm9wZG93blNlcnZpY2UudG9nZ2xlKHtzaG93OiAhdGhpcy5zdGF0ZS5zaG93fSk7XG4gIH1cbn1cbiJdfQ==