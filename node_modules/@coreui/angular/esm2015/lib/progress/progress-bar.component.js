import { Component, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ProgressBarComponent {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.state = {
            percent: 0,
            min: 0,
            max: 100
        };
        this.animated = false;
        this.striped = false;
        this.precision = 0;
        this.value = 0;
        this.role = 'progressbar';
        this.host = this.hostElement.nativeElement;
    }
    set min(value) {
        this.state.min = isNaN(value) ? 0 : value;
    }
    get min() {
        return this.state.min;
    }
    set max(value) {
        this.state.max = isNaN(value) || value <= 0 || value === this.min ? 100 : value;
    }
    get max() {
        return this.state.max;
    }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames({
            'progress-bar': true,
            'progress-bar-animated': this.animated,
            'progress-bar-striped': this.striped || this.animated,
            [`bg-${this.color}`]: !!this.color
        });
        return classes;
    }
    ngOnInit() {
        this.setValues();
    }
    setPercent() {
        this.state.percent = +((this.value / (this.max - this.min)) * 100).toFixed(this.precision);
    }
    setValues() {
        this.setPercent();
        this.renderer.setStyle(this.host, 'width', `${this.state.percent}%`);
        this.renderer.setAttribute(this.host, 'aria-valuenow', String(this.value));
        this.renderer.setAttribute(this.host, 'aria-valuemin', String(this.min));
        this.renderer.setAttribute(this.host, 'aria-valuemax', String(this.max));
    }
    ngOnChanges(changes) {
        if (changes.color) {
            this.renderer.removeClass(this.host, `bg-${changes.color.previousValue}`);
        }
        this.setValues();
    }
}
ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressBarComponent, selectors: [["c-progress-bar"]], hostVars: 3, hostBindings: function ProgressBarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { animated: "animated", striped: "striped", precision: "precision", value: "value", role: "role", min: "min", max: "max", color: "color" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
ProgressBarComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ProgressBarComponent.propDecorators = {
    color: [{ type: Input }],
    animated: [{ type: Input }],
    striped: [{ type: Input }],
    precision: [{ type: Input }],
    value: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    role: [{ type: Input }, { type: HostBinding, args: ['attr.role',] }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProgressBarComponent, [{
        type: Component,
        args: [{
                selector: 'c-progress-bar',
                template: "<ng-content></ng-content>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { animated: [{
            type: Input
        }], striped: [{
            type: Input
        }], precision: [{
            type: Input
        }], value: [{
            type: Input
        }], role: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['attr.role']
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], getClasses: [{
            type: HostBinding,
            args: ['class']
        }], color: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,