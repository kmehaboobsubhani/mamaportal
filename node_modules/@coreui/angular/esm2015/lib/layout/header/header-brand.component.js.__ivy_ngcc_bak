import { Component, Input } from '@angular/core';
import { SidebarService } from '../../sidebar/sidebar.service';
export class HeaderBrandComponent {
    constructor(sidebarService) {
        this.sidebarService = sidebarService;
        this.routerLink = '';
        this.minimized = false;
    }
    ngOnInit() {
        this.stateToggleSubscribe();
    }
    ngOnDestroy() {
        this.stateToggleSubscribe(false);
    }
    minimize(force) {
        this.minimized = (force === 'toggle') ? !this.minimized : force;
    }
    stateToggleSubscribe(subscribe = true) {
        if (subscribe) {
            this.stateToggleSubscription = this.sidebarService.sidebarState$.subscribe((state) => {
                if (!state.id) {
                    if ('minimize' in state) {
                        this.minimize(state.minimize);
                    }
                }
            });
        }
        else {
            this.stateToggleSubscription.unsubscribe();
        }
    }
}
HeaderBrandComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-header-brand',
                template: "<a class=\"c-header-brand\" [routerLink]=\"routerLink\" role=\"button\">\r\n  <ng-template [ngIf]=\"minimized\">\r\n    <ng-content></ng-content>\r\n  </ng-template>\r\n  <ng-template [ngIf]=\"!minimized\">\r\n    <ng-content></ng-content>\r\n  </ng-template>\r\n</a>\r\n\r\n"
            },] }
];
HeaderBrandComponent.ctorParameters = () => [
    { type: SidebarService }
];
HeaderBrandComponent.propDecorators = {
    routerLink: [{ type: Input }],
    minimized: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLWJyYW5kLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvbGF5b3V0L2hlYWRlci9oZWFkZXItYnJhbmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQWUsS0FBSyxFQUFvQixNQUFNLGVBQWUsQ0FBQztBQUcvRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFNN0QsTUFBTSxPQUFPLG9CQUFvQjtJQVEvQixZQUNVLGNBQThCO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQVAvQixlQUFVLEdBQW1CLEVBQUUsQ0FBQztRQUNoQyxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBT3ZCLENBQUM7SUFFTCxRQUFRO1FBQ04sSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUEwQjtRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNsRSxDQUFDO0lBRU8sb0JBQW9CLENBQUMsWUFBcUIsSUFBSTtRQUVwRCxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDbkYsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUU7b0JBQ2IsSUFBSSxVQUFVLElBQUksS0FBSyxFQUFFO3dCQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDL0I7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxJQUFJLENBQUMsdUJBQXVCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDNUM7SUFDSCxDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLCtSQUE0QzthQUM3Qzs7O1lBTE8sY0FBYzs7O3lCQVFuQixLQUFLO3dCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtTaWRlYmFyU2VydmljZX0gZnJvbSAnLi4vLi4vc2lkZWJhci9zaWRlYmFyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLWhlYWRlci1icmFuZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9oZWFkZXItYnJhbmQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEhlYWRlckJyYW5kQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHJvdXRlckxpbms6IGFueVtdIHwgc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIG1pbmltaXplZCA9IGZhbHNlO1xuXG4gIGhlYWRlckJyYW5kSW1nOiBib29sZWFuO1xuICBwcml2YXRlIHN0YXRlVG9nZ2xlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzaWRlYmFyU2VydmljZTogU2lkZWJhclNlcnZpY2UsXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZVRvZ2dsZVN1YnNjcmliZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZVRvZ2dsZVN1YnNjcmliZShmYWxzZSk7XG4gIH1cblxuICBtaW5pbWl6ZShmb3JjZT86IGJvb2xlYW4gfCAndG9nZ2xlJyk6IHZvaWQge1xuICAgIHRoaXMubWluaW1pemVkID0gKGZvcmNlID09PSAndG9nZ2xlJykgPyAhdGhpcy5taW5pbWl6ZWQgOiBmb3JjZTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGVUb2dnbGVTdWJzY3JpYmUoc3Vic2NyaWJlOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdzdGF0ZVRvZ2dsZVN1YnNjcmliZScsIHN1YnNjcmliZSk7XG4gICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgdGhpcy5zdGF0ZVRvZ2dsZVN1YnNjcmlwdGlvbiA9IHRoaXMuc2lkZWJhclNlcnZpY2Uuc2lkZWJhclN0YXRlJC5zdWJzY3JpYmUoKHN0YXRlKSA9PiB7XG4gICAgICAgIGlmICghc3RhdGUuaWQpIHtcbiAgICAgICAgICBpZiAoJ21pbmltaXplJyBpbiBzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5taW5pbWl6ZShzdGF0ZS5taW5pbWl6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZVRvZ2dsZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19