import { Component, HostBinding, Input } from '@angular/core';
import classNames from 'classnames';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class SubheaderComponent {
    constructor() { }
    get getClasses() {
        return this.hostClasses;
    }
    get hostClasses() {
        const classes = classNames(this.ngClass, this.class, {
            'c-subheader': true,
        });
        return classes;
    }
    ngOnInit() {
    }
}
SubheaderComponent.ɵfac = function SubheaderComponent_Factory(t) { return new (t || SubheaderComponent)(); };
SubheaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SubheaderComponent, selectors: [["c-subheader"], ["", "c-subheader", ""]], hostVars: 2, hostBindings: function SubheaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.getClasses);
    } }, inputs: { class: "class", ngClass: "ngClass" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function SubheaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
SubheaderComponent.ctorParameters = () => [];
SubheaderComponent.propDecorators = {
    class: [{ type: Input }],
    ngClass: [{ type: Input }],
    getClasses: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SubheaderComponent, [{
        type: Component,
        args: [{
                selector: 'c-subheader, [c-subheader]',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return []; }, { getClasses: [{
            type: HostBinding,
            args: ['class']
        }], class: [{
            type: Input
        }], ngClass: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi9sYXlvdXQvc3ViaGVhZGVyL3N1YmhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQzs7OztBQU1wQyxNQUFNLE9BQU8sa0JBQWtCO0FBQUksSUFzQmpDLGdCQUFnQixDQUFDO0FBRW5CLElBbkJFLElBQ0ksVUFBVTtBQUNmLFFBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzNCLElBQUMsQ0FBQztBQUVILElBQUUsSUFBSSxXQUFXO0FBRWpCLFFBQUksTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxLQUFLLEVBQ1Y7QUFDTCxZQUFPLGFBQWEsRUFBRSxJQUFJO0FBQzFCLFNBQU0sQ0FDRixDQUFDO0FBQ0wsUUFBRyxPQUFPLE9BQU8sQ0FBQztBQUNsQixJQUFDLENBQUM7QUFFSCxJQUVFLFFBQVE7QUFBTSxJQUNkLENBQUM7QUFFSDtnREEvQkMsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRTthQUE0QixtQkFDdEMsUUFBUSxFQUFFLDJCQUEyQixlQUN0Qzs7Ozs7NkJBQ0s7QUFBRTtBQUVOO0FBQ2Esb0JBRFosS0FBSztBQUFNLHNCQUNYLEtBQUs7QUFBTSx5QkFFWCxXQUFXLFNBQUMsT0FBTztBQUNqQjs7Ozs7Ozs7Ozs7Ozs7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFzQkEsQUFBQSxBQUFBLEFBakJBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQ0EsQUFBQSxBQTdCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLXN1YmhlYWRlciwgW2Mtc3ViaGVhZGVyXScsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG59KVxuZXhwb3J0IGNsYXNzIFN1YmhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgY2xhc3M6IHN0cmluZztcbiAgQElucHV0KCkgbmdDbGFzczogc3RyaW5nIHwgc3RyaW5nW10gfCBTZXQ8c3RyaW5nPiB8IHsgW2tsYXNzOiBzdHJpbmddOiBhbnk7IH07XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIGdldCBnZXRDbGFzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLmhvc3RDbGFzc2VzO1xuICB9XG5cbiAgZ2V0IGhvc3RDbGFzc2VzKCkge1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoXG4gICAgICB0aGlzLm5nQ2xhc3MsXG4gICAgICB0aGlzLmNsYXNzLFxuICAgICAge1xuICAgICAgICAnYy1zdWJoZWFkZXInOiB0cnVlLFxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG59XG4iXX0=