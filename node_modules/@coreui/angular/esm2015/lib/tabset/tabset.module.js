import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TabsetComponent } from './tabset.component';
import { TabListComponent } from './tab-list/tab-list.component';
import { TabComponent } from './tab/tab.component';
import { TabContentComponent } from './tab-content/tab-content.component';
import { TabPaneComponent } from './tab-pane/tab-pane.component';
import { TabsetService } from './tabset.service';
import * as ɵngcc0 from '@angular/core';
export class TabsetModule {
}
TabsetModule.ɵfac = function TabsetModule_Factory(t) { return new (t || TabsetModule)(); };
TabsetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TabsetModule });
TabsetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [
        TabsetService
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TabsetModule, { declarations: function () { return [TabsetComponent, TabListComponent, TabComponent, TabContentComponent, TabPaneComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TabsetComponent,
        TabListComponent,
        TabComponent,
        TabContentComponent,
        TabPaneComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsetModule, [{
        type: NgModule,
        args: [{
                declarations: [TabsetComponent, TabListComponent, TabComponent, TabContentComponent, TabPaneComponent],
                exports: [
                    TabsetComponent,
                    TabListComponent,
                    TabComponent,
                    TabContentComponent,
                    TabPaneComponent,
                ],
                imports: [
                    CommonModule
                ],
                providers: [
                    TabsetService
                ]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFic2V0Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi90YWJzZXQvdGFic2V0Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDakUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFrQmpELE1BQU0sT0FBTyxZQUFZO0FBQUk7MENBaEI1QixRQUFRLFNBQUMsbUJBQ1IsWUFBWTtBQUFFLENBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRTtBQUFtQixFQUFFLGdCQUFnQixDQUFDLG1CQUN0RyxPQUFPLEVBQUU7V0FDUDtJQUFlO1FBQ2YsZ0JBQWdCOztPQUNoQixZQUFZLHVCQUNaLG1CQUFtQix1QkFDbkIsZ0JBQWdCLG9CQUNqQixtQkFDRCxPQUFPLEVBQUUsdUJBQ1AsWUFBWSxtQkFDYixtQkFDRCxTQUFTLEVBQUUsdUJBQ1QsYUFBYSxtQkFDZCxlQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF4QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFrQkEsQUFBQSxBQUFBLEFBQUEsQUFoQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgVGFic2V0Q29tcG9uZW50IH0gZnJvbSAnLi90YWJzZXQuY29tcG9uZW50JztcbmltcG9ydCB7IFRhYkxpc3RDb21wb25lbnQgfSBmcm9tICcuL3RhYi1saXN0L3RhYi1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUYWJDb21wb25lbnQgfSBmcm9tICcuL3RhYi90YWIuY29tcG9uZW50JztcbmltcG9ydCB7IFRhYkNvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL3RhYi1jb250ZW50L3RhYi1jb250ZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUYWJQYW5lQ29tcG9uZW50IH0gZnJvbSAnLi90YWItcGFuZS90YWItcGFuZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGFic2V0U2VydmljZSB9IGZyb20gJy4vdGFic2V0LnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtUYWJzZXRDb21wb25lbnQsIFRhYkxpc3RDb21wb25lbnQsIFRhYkNvbXBvbmVudCwgVGFiQ29udGVudENvbXBvbmVudCwgVGFiUGFuZUNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtcbiAgICBUYWJzZXRDb21wb25lbnQsXG4gICAgVGFiTGlzdENvbXBvbmVudCxcbiAgICBUYWJDb21wb25lbnQsXG4gICAgVGFiQ29udGVudENvbXBvbmVudCxcbiAgICBUYWJQYW5lQ29tcG9uZW50LFxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIFRhYnNldFNlcnZpY2VcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYWJzZXRNb2R1bGUgeyB9XG4iXX0=