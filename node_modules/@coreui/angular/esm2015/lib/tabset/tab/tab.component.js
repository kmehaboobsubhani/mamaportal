import { Component, HostBinding, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { TabsetService } from '../tabset.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../tabset.service';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["link"];
const _c1 = ["*"];
export class TabComponent {
    constructor(renderer, tabsetService) {
        this.renderer = renderer;
        this.tabsetService = tabsetService;
        this.classMap = {};
        this._navItemClass = true;
    }
    set active(active) {
        this.classMap.active = active;
    }
    get active() {
        return this.classMap.active;
    }
    set disabled(disabled) {
        this.classMap.disabled = disabled;
    }
    get disabled() {
        return this.classMap.disabled;
    }
    onClick(e) {
        e.preventDefault();
        if (!this.disabled) {
            this.active = true;
            this.tabsetService.setActiveTab(this);
        }
    }
    ngOnInit() {
        this.classMap = {
            'nav-link': true,
            active: this.active,
            disabled: this.disabled
        };
    }
    ngOnDestroy() {
        this.activeTabUnsubscribe();
    }
    ngAfterViewInit() {
        this.activeTabSubscribe();
    }
    ngOnChanges(changes) {
        this.classMap = {
            active: changes.active ? changes.active.currentValue : this.active,
            disabled: changes.disabled ? changes.disabled.currentValue : this.disabled
        };
        this.classMap = Object.assign(Object.create(null), this.classMap);
    }
    activeTabSubscribe() {
        this.activeTabSubscription = this.tabsetService.activeTab$.subscribe((activeTab) => {
            this.active = this.indexKey === activeTab.indexKey;
            this.classMap.active = this.indexKey === activeTab.indexKey;
        });
    }
    activeTabUnsubscribe() {
        this.activeTabSubscription.unsubscribe();
    }
}
TabComponent.ɵfac = function TabComponent_Factory(t) { return new (t || TabComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TabsetService)); };
TabComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TabComponent, selectors: [["c-tab"]], viewQuery: function TabComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 3);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._link = _t.first);
    } }, hostVars: 2, hostBindings: function TabComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function TabComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("nav-item", ctx._navItemClass);
    } }, inputs: { active: "active", disabled: "disabled" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 3, vars: 2, consts: [["href", "", 3, "ngClass", "tabindex"], ["link", ""]], template: function TabComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "a", 0, 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("tabindex", ctx.disabled ? -1 : 0);
        ɵngcc0.ɵɵproperty("ngClass", ctx.classMap);
    } }, directives: [ɵngcc2.NgClass], styles: ["[_nghost-%COMP%]   .nav-link[_ngcontent-%COMP%]:focus{outline:none!important}"] });
TabComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: TabsetService }
];
TabComponent.propDecorators = {
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    _navItemClass: [{ type: HostBinding, args: ['class.nav-item',] }],
    _link: [{ type: ViewChild, args: ['link', { static: true },] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabComponent, [{
        type: Component,
        args: [{
                selector: 'c-tab',
                template: "<!--<a #link href=\"javascript:void(0);\" [ngClass]=\"classMap\" (click)=\"onClick($event)\" tabindex=\"{{disabled ? -1 : 0}}\">-->\n<a #link href [ngClass]=\"classMap\" tabindex=\"{{disabled ? -1 : 0}}\">\n  <ng-content></ng-content>\n</a>\n",
                styles: [":host .nav-link:focus{outline:none!important}"]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc1.TabsetService }]; }, { _navItemClass: [{
            type: HostBinding,
            args: ['class.nav-item']
        }], active: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], _link: [{
            type: ViewChild,
            args: ['link', { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,