import { Component, HostBinding, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { TabsetService } from '../tabset.service';
export class TabComponent {
    constructor(renderer, tabsetService) {
        this.renderer = renderer;
        this.tabsetService = tabsetService;
        this.classMap = {};
        this._navItemClass = true;
    }
    set active(active) {
        this.classMap.active = active;
    }
    get active() {
        return this.classMap.active;
    }
    set disabled(disabled) {
        this.classMap.disabled = disabled;
    }
    get disabled() {
        return this.classMap.disabled;
    }
    onClick(e) {
        e.preventDefault();
        if (!this.disabled) {
            this.active = true;
            this.tabsetService.setActiveTab(this);
        }
    }
    ngOnInit() {
        this.classMap = {
            'nav-link': true,
            active: this.active,
            disabled: this.disabled
        };
    }
    ngOnDestroy() {
        this.activeTabUnsubscribe();
    }
    ngAfterViewInit() {
        this.activeTabSubscribe();
    }
    ngOnChanges(changes) {
        this.classMap = {
            active: changes.active ? changes.active.currentValue : this.active,
            disabled: changes.disabled ? changes.disabled.currentValue : this.disabled
        };
        this.classMap = Object.assign(Object.create(null), this.classMap);
    }
    activeTabSubscribe() {
        this.activeTabSubscription = this.tabsetService.activeTab$.subscribe((activeTab) => {
            this.active = this.indexKey === activeTab.indexKey;
            this.classMap.active = this.indexKey === activeTab.indexKey;
        });
    }
    activeTabUnsubscribe() {
        this.activeTabSubscription.unsubscribe();
    }
}
TabComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-tab',
                template: "<!--<a #link href=\"javascript:void(0);\" [ngClass]=\"classMap\" (click)=\"onClick($event)\" tabindex=\"{{disabled ? -1 : 0}}\">-->\n<a #link href [ngClass]=\"classMap\" tabindex=\"{{disabled ? -1 : 0}}\">\n  <ng-content></ng-content>\n</a>\n",
                styles: [":host .nav-link:focus{outline:none!important}"]
            },] }
];
TabComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: TabsetService }
];
TabComponent.propDecorators = {
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    _navItemClass: [{ type: HostBinding, args: ['class.nav-item',] }],
    _link: [{ type: ViewChild, args: ['link', { static: true },] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvdGFic2V0L3RhYi90YWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsV0FBVyxFQUFFLFlBQVksRUFDekIsS0FBSyxFQUlMLFNBQVMsRUFFVCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBUWhELE1BQU0sT0FBTyxZQUFZO0lBd0N2QixZQUNVLFFBQW1CLEVBQ25CLGFBQTRCO1FBRDVCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFoQnRDLGFBQVEsR0FBK0IsRUFBRSxDQUFDO1FBRVgsa0JBQWEsR0FBRyxJQUFJLENBQUM7SUFlakQsQ0FBQztJQXpDSixJQUNJLE1BQU0sQ0FBQyxNQUFlO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUtoQyxDQUFDO0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBQ0QsSUFDSSxRQUFRLENBQUMsUUFBaUI7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBRXBDLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFZRCxPQUFPLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFPRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRztZQUNkLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDeEIsQ0FBQztJQUNKLENBQUM7SUFDRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELGVBQWU7UUFFYixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBRWhDLElBQUksQ0FBQyxRQUFRLEdBQUc7WUFDZCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQ2xFLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVE7U0FDM0UsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU8sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNqRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUNuRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ08sb0JBQW9CO1FBQzFCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQyxDQUFDOzs7WUFuRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxPQUFPO2dCQUNqQiw4UEFBbUM7O2FBRXBDOzs7WUFaQyxTQUFTO1lBS0gsYUFBYTs7O3FCQVVsQixLQUFLO3VCQVdMLEtBQUs7NEJBZUwsV0FBVyxTQUFDLGdCQUFnQjtvQkFDNUIsU0FBUyxTQUFDLE1BQU0sRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUM7c0JBRWhDLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtUYWJzZXRTZXJ2aWNlfSBmcm9tICcuLi90YWJzZXQuc2VydmljZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtdGFiJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhYi5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRhYkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQge1xuXG4gIEBJbnB1dCgpXG4gIHNldCBhY3RpdmUoYWN0aXZlOiBib29sZWFuKSB7XG4gICAgdGhpcy5jbGFzc01hcC5hY3RpdmUgPSBhY3RpdmU7XG4gICAgLy8gdGhpcy5jbGFzc01hcCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY2xhc3NNYXApO1xuICAgIC8vIGlmIChhY3RpdmUpIHtcbiAgICAvLyAgdGhpcy50YWJzZXRTZXJ2aWNlLnNldEFjdGl2ZVRhYih0aGlzKTtcbiAgICAvLyB9XG4gIH1cbiAgZ2V0IGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jbGFzc01hcC5hY3RpdmU7XG4gIH1cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5jbGFzc01hcC5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIC8vIHRoaXMuY2xhc3NNYXAgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNsYXNzTWFwKTtcbiAgfVxuICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xhc3NNYXAuZGlzYWJsZWQ7XG4gIH1cblxuICBwdWJsaWMgaW5kZXhLZXk6IG51bWJlcjtcblxuICBhY3RpdmVUYWJTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjbGFzc01hcDogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm5hdi1pdGVtJykgX25hdkl0ZW1DbGFzcyA9IHRydWU7XG4gIEBWaWV3Q2hpbGQoJ2xpbmsnLCB7c3RhdGljOiB0cnVlfSkgX2xpbms7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkNsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICB0aGlzLnRhYnNldFNlcnZpY2Uuc2V0QWN0aXZlVGFiKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHRhYnNldFNlcnZpY2U6IFRhYnNldFNlcnZpY2UsXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNsYXNzTWFwID0ge1xuICAgICAgJ25hdi1saW5rJzogdHJ1ZSxcbiAgICAgIGFjdGl2ZTogdGhpcy5hY3RpdmUsXG4gICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZFxuICAgIH07XG4gIH1cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5hY3RpdmVUYWJVbnN1YnNjcmliZSgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIC8vIGNvbnNvbGUubG9nKCdfbGluaycsIHRoaXMuX2xpbmspO1xuICAgIHRoaXMuYWN0aXZlVGFiU3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgLy8gY29uc29sZS5sb2coJ25nT25DaGFuZ2VzIHRhYicsIHRoaXMpO1xuICAgIHRoaXMuY2xhc3NNYXAgPSB7XG4gICAgICBhY3RpdmU6IGNoYW5nZXMuYWN0aXZlID8gY2hhbmdlcy5hY3RpdmUuY3VycmVudFZhbHVlIDogdGhpcy5hY3RpdmUsXG4gICAgICBkaXNhYmxlZDogY2hhbmdlcy5kaXNhYmxlZCA/IGNoYW5nZXMuZGlzYWJsZWQuY3VycmVudFZhbHVlIDogdGhpcy5kaXNhYmxlZFxuICAgIH07XG4gICAgdGhpcy5jbGFzc01hcCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgdGhpcy5jbGFzc01hcCk7XG4gIH1cblxuICBwcml2YXRlIGFjdGl2ZVRhYlN1YnNjcmliZSgpIHtcbiAgICB0aGlzLmFjdGl2ZVRhYlN1YnNjcmlwdGlvbiA9IHRoaXMudGFic2V0U2VydmljZS5hY3RpdmVUYWIkLnN1YnNjcmliZSgoYWN0aXZlVGFiKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRoaXMuaW5kZXhLZXkgPT09IGFjdGl2ZVRhYi5pbmRleEtleTtcbiAgICAgIHRoaXMuY2xhc3NNYXAuYWN0aXZlID0gdGhpcy5pbmRleEtleSA9PT0gYWN0aXZlVGFiLmluZGV4S2V5O1xuICAgIH0pO1xuICB9XG4gIHByaXZhdGUgYWN0aXZlVGFiVW5zdWJzY3JpYmUoKSB7XG4gICAgdGhpcy5hY3RpdmVUYWJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19