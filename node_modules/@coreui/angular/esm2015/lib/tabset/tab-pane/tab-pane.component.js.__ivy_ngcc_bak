import { Component, HostBinding, Input } from '@angular/core';
import { TabsetService } from '../tabset.service';
export class TabPaneComponent {
    constructor(tabsetService) {
        this.tabsetService = tabsetService;
        this.fade = true;
        this._tabPane = true;
        this._tabActive = true;
        this._tabShow = false;
        this._tabFade = this.fade;
    }
    set active(active) {
        this._tabActive = active;
        this._tabShow = active;
    }
    get active() {
        return this._tabActive;
    }
    ngOnInit() {
        this.activeTabSubscribe();
    }
    ngOnDestroy() {
        this.activeTabUnsubscribe();
    }
    activeTabSubscribe() {
        this.activeTabSubscription = this.tabsetService.activeTab$.subscribe((activeTab) => {
            setTimeout(() => {
                this.active = activeTab.indexKey === this.indexKey;
            });
        });
    }
    activeTabUnsubscribe() {
        this.activeTabSubscription.unsubscribe();
    }
}
TabPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'c-tab-pane',
                template: "<ng-content *ngIf=\"active\"></ng-content>\n\n",
                styles: [""]
            },] }
];
TabPaneComponent.ctorParameters = () => [
    { type: TabsetService }
];
TabPaneComponent.propDecorators = {
    active: [{ type: Input }],
    _tabPane: [{ type: HostBinding, args: ['class.tab-pane',] }],
    _tabActive: [{ type: HostBinding, args: ['class.active',] }],
    _tabShow: [{ type: HostBinding, args: ['class.show',] }],
    _tabFade: [{ type: HostBinding, args: ['class.fade',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLXBhbmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZXVpLWFuZ3VsYXIvc3JjL2xpYi90YWJzZXQvdGFiLXBhbmUvdGFiLXBhbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBc0IsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBRXBHLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQU9oRCxNQUFNLE9BQU8sZ0JBQWdCO0lBb0IzQixZQUNVLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBVC9CLFNBQUksR0FBRyxJQUFJLENBQUM7UUFHWSxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDcEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixhQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUk1QyxDQUFDO0lBcEJMLElBQ0ksTUFBTSxDQUFDLE1BQWU7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUNELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBZUQsUUFBUTtRQUNOLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDakYsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNyRCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLG9CQUFvQjtRQUMxQixJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0MsQ0FBQzs7O1lBL0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsMERBQXdDOzthQUV6Qzs7O1lBTk8sYUFBYTs7O3FCQVNsQixLQUFLO3VCQWFMLFdBQVcsU0FBQyxnQkFBZ0I7eUJBQzVCLFdBQVcsU0FBQyxjQUFjO3VCQUMxQixXQUFXLFNBQUMsWUFBWTt1QkFDeEIsV0FBVyxTQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyQ29udGVudENoZWNrZWQsIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1RhYnNldFNlcnZpY2V9IGZyb20gJy4uL3RhYnNldC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYy10YWItcGFuZScsXG4gIHRlbXBsYXRlVXJsOiAnLi90YWItcGFuZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhYi1wYW5lLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFiUGFuZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcblxuICBASW5wdXQoKVxuICBzZXQgYWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3RhYkFjdGl2ZSA9IGFjdGl2ZTtcbiAgICB0aGlzLl90YWJTaG93ID0gYWN0aXZlO1xuICB9XG4gIGdldCBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhYkFjdGl2ZTtcbiAgfVxuXG4gIHB1YmxpYyBpbmRleEtleTogbnVtYmVyO1xuICBwdWJsaWMgZmFkZSA9IHRydWU7XG4gIHByaXZhdGUgYWN0aXZlVGFiU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy50YWItcGFuZScpIF90YWJQYW5lID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3RpdmUnKSBfdGFiQWN0aXZlID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zaG93JykgX3RhYlNob3cgPSBmYWxzZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mYWRlJykgX3RhYkZhZGUgPSB0aGlzLmZhZGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0YWJzZXRTZXJ2aWNlOiBUYWJzZXRTZXJ2aWNlXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5hY3RpdmVUYWJTdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuYWN0aXZlVGFiVW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZlVGFiU3Vic2NyaWJlKCkge1xuICAgIHRoaXMuYWN0aXZlVGFiU3Vic2NyaXB0aW9uID0gdGhpcy50YWJzZXRTZXJ2aWNlLmFjdGl2ZVRhYiQuc3Vic2NyaWJlKChhY3RpdmVUYWIpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZVRhYi5pbmRleEtleSA9PT0gdGhpcy5pbmRleEtleTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhY3RpdmVUYWJVbnN1YnNjcmliZSgpIHtcbiAgICB0aGlzLmFjdGl2ZVRhYlN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=