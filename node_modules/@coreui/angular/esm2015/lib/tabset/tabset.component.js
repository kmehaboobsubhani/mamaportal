import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, } from '@angular/core';
import { TabsetService } from './tabset.service';
import { TabComponent } from './tab/tab.component';
import { TabPaneComponent } from './tab-pane/tab-pane.component';
import { TabListComponent } from './tab-list/tab-list.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tabset.service';

const _c0 = ["*"];
export class TabsetComponent {
    constructor(hostElement, renderer, tabsetService) {
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.tabsetService = tabsetService;
        this._activeTab = 0;
        this._tabsArray = [];
        this.variant = 'tabs';
        this.fade = true;
        this.boxed = false;
        this.activeTabChange = new EventEmitter();
        this.host = this.hostElement.nativeElement;
    }
    set activeTab(index) {
        this._activeTab = index >= 0 ? index : this._activeTab;
    }
    get activeTab() {
        return this._activeTab;
    }
    ngOnInit() {
        if (typeof this.boxed === 'string') {
            this.renderer.addClass(this.host, `nav-tabs-boxed-${this.boxed}`);
        }
        this.activeTabSubscribe();
    }
    ngOnDestroy() {
        this.activeTabUnsubscribe();
    }
    ngAfterContentInit() {
        this.tabList.variant = this.variant;
        this.tabList.vertical = this.vertical;
        this.tabList.fill = this.fill;
        this.tabList.justified = this.justified;
        this._tabsArray = this.tabs.toArray();
        if (this.tabs.length) {
            this._selectedTab = this.tabs.length - 1 < this.activeTab ? this.tabs.first : this._tabsArray[this.activeTab];
        }
        this.tabs.forEach((item, index) => {
            item.indexKey = index;
        });
        this.panes.forEach((item, index) => {
            item.indexKey = index;
        });
        this.tabsetService.setActiveTab(this._selectedTab);
        this.setActiveTab(this._selectedTab);
    }
    ngAfterContentChecked() {
    }
    ngOnChanges(changes) {
    }
    setActiveTab(tab = this._selectedTab) {
        this.activeTab = tab.indexKey;
        if (!tab.disabled) {
            tab.active = true;
            this.tabsetService.setActiveTab(tab);
            this.activeTabChange.emit(this.activeTab);
        }
    }
    activeTabSubscribe() {
        this.activeTabSubscription = this.tabsetService.activeTab$.subscribe((activeTab) => {
        });
    }
    activeTabUnsubscribe() {
        this.activeTabSubscription.unsubscribe();
    }
}
TabsetComponent.ɵfac = function TabsetComponent_Factory(t) { return new (t || TabsetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TabsetService)); };
TabsetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TabsetComponent, selectors: [["c-tabset"]], contentQueries: function TabsetComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TabListComponent, 3);
        ɵngcc0.ɵɵcontentQuery(dirIndex, TabComponent, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, TabPaneComponent, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabs = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panes = _t);
    } }, hostVars: 2, hostBindings: function TabsetComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("nav-tabs-boxed", ctx.boxed);
    } }, inputs: { variant: "variant", fade: "fade", boxed: "boxed", activeTab: "activeTab", fill: "fill", justified: "justified", vertical: "vertical" }, outputs: { activeTabChange: "activeTabChange" }, features: [ɵngcc0.ɵɵProvidersFeature([TabsetService]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TabsetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
TabsetComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TabsetService }
];
TabsetComponent.propDecorators = {
    fill: [{ type: Input }],
    justified: [{ type: Input }],
    variant: [{ type: Input }],
    fade: [{ type: Input }],
    vertical: [{ type: Input }],
    activeTab: [{ type: Input }],
    boxed: [{ type: HostBinding, args: ['class.nav-tabs-boxed',] }, { type: Input }],
    activeTabChange: [{ type: Output }],
    tabList: [{ type: ContentChild, args: [TabListComponent, { static: true },] }],
    tabs: [{ type: ContentChildren, args: [TabComponent, { descendants: true },] }],
    panes: [{ type: ContentChildren, args: [TabPaneComponent, { descendants: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsetComponent, [{
        type: Component,
        args: [{
                selector: 'c-tabset',
                template: "<ng-content></ng-content>\n",
                providers: [TabsetService],
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.TabsetService }]; }, { variant: [{
            type: Input
        }], fade: [{
            type: Input
        }], boxed: [{
            type: HostBinding,
            args: ['class.nav-tabs-boxed']
        }, {
            type: Input
        }], activeTabChange: [{
            type: Output
        }], activeTab: [{
            type: Input
        }], fill: [{
            type: Input
        }], justified: [{
            type: Input
        }], vertical: [{
            type: Input
        }], tabList: [{
            type: ContentChild,
            args: [TabListComponent, { static: true }]
        }], tabs: [{
            type: ContentChildren,
            args: [TabComponent, { descendants: true }]
        }], panes: [{
            type: ContentChildren,
            args: [TabPaneComponent, { descendants: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,