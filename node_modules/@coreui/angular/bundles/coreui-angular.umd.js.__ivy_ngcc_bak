(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('classnames'), require('@angular/animations'), require('@angular/platform-browser'), require('@angular/router'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('ng2-charts'), require('@angular/cdk/layout'), require('@angular/cdk/platform'), require('text-mask-core/dist/textMaskCore')) :
    typeof define === 'function' && define.amd ? define('@coreui/angular', ['exports', '@angular/core', '@angular/common', 'classnames', '@angular/animations', '@angular/platform-browser', '@angular/router', 'rxjs', 'rxjs/operators', '@angular/forms', 'ng2-charts', '@angular/cdk/layout', '@angular/cdk/platform', 'text-mask-core/dist/textMaskCore'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.coreui = global.coreui || {}, global.coreui.angular = {}), global.ng.core, global.ng.common, global.classNames, global.ng.animations, global.ng.platformBrowser, global.ng.router, global.rxjs, global.rxjs.operators, global.ng.forms, global.ng2Charts, global.ng.cdk.layout, global.ng.cdk.platform, global.textMaskCore));
}(this, (function (exports, i0, i1, classNames, animations, platformBrowser, i1$1, rxjs, operators, forms, ng2Charts, layout, platform, textMaskCore) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

    var AccordionComponent = /** @class */ (function () {
        function AccordionComponent() {
            this.accordionClass = true;
            this.groups = [];
        }
        AccordionComponent.prototype.closeOtherGroups = function (openGroup) {
            this.groups.forEach(function (group) {
                if (group !== openGroup) {
                    group.isOpen = false;
                }
            });
        };
        AccordionComponent.prototype.addGroup = function (group) {
            this.groups.push(group);
        };
        AccordionComponent.prototype.removeGroup = function (group) {
            var index = this.groups.indexOf(group);
            if (index !== -1) {
                this.groups.splice(index, 1);
            }
        };
        return AccordionComponent;
    }());
    AccordionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-accordion',
                    template: '<ng-content></ng-content>',
                    styles: [":host{display:block}"]
                },] }
    ];
    AccordionComponent.propDecorators = {
        accordionClass: [{ type: i0.HostBinding, args: ['class.accordion',] }]
    };

    var AccordionGroupComponent = /** @class */ (function () {
        function AccordionGroupComponent(accordion) {
            this.isOpen = false;
            this.groupClass = '';
            this.cardClass = true;
            this.accordion = accordion;
        }
        AccordionGroupComponent.prototype.ngOnInit = function () {
            this.accordion.addGroup(this);
        };
        AccordionGroupComponent.prototype.ngOnDestroy = function () {
            this.accordion.removeGroup(this);
        };
        AccordionGroupComponent.prototype.toggleGroup = function () {
            this.isOpen = !this.isOpen;
            this.accordion.closeOtherGroups(this);
        };
        return AccordionGroupComponent;
    }());
    AccordionGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-accordion-group',
                    template: "<c-card-header (click)=\"toggleGroup()\">\n  <ng-content select=\"[c-accordion-header]\"></ng-content>\n</c-card-header>\n<c-card-body cCollapse [show]=\"!isOpen\">\n  <ng-content></ng-content>\n</c-card-body>\n",
                    styles: [":host{margin-bottom:0}"]
                },] }
    ];
    AccordionGroupComponent.ctorParameters = function () { return [
        { type: AccordionComponent, decorators: [{ type: i0.Inject, args: [AccordionComponent,] }] }
    ]; };
    AccordionGroupComponent.propDecorators = {
        isOpen: [{ type: i0.Input }],
        groupClass: [{ type: i0.Input }],
        cardClass: [{ type: i0.HostBinding, args: ['class.card',] }]
    };

    var CardComponent = /** @class */ (function () {
        function CardComponent() {
        }
        Object.defineProperty(CardComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        card: true
                    },
                    _a["card-accent-" + this.accentColor] = this.accentColor,
                    _a["text-" + this.align] = this.align,
                    _a["bg-" + this.color] = this.color,
                    _a["border-" + this.borderColor] = this.borderColor,
                    _a["text-" + this.textColor] = this.textColor,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return CardComponent;
    }());
    CardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-card, [c-card]',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    CardComponent.propDecorators = {
        accentColor: [{ type: i0.Input }],
        align: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        borderColor: [{ type: i0.Input }],
        textColor: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CardBodyComponent = /** @class */ (function () {
        function CardBodyComponent() {
        }
        Object.defineProperty(CardBodyComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardBodyComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'card-body': true
                    },
                    _a["bg-" + this.color] = this.color,
                    _a["border-" + this.borderColor] = this.borderColor,
                    _a["text-" + this.textColor] = this.textColor,
                    _a["text-" + this.align] = this.align,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return CardBodyComponent;
    }());
    CardBodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-card-body, [c-card-body]',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    CardBodyComponent.propDecorators = {
        align: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        borderColor: [{ type: i0.Input }],
        textColor: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CardFooterComponent = /** @class */ (function () {
        function CardFooterComponent() {
        }
        Object.defineProperty(CardFooterComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardFooterComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'card-footer': true
                    },
                    _a["bg-" + this.color] = this.color,
                    _a["border-" + this.borderColor] = this.borderColor,
                    _a["text-" + this.textColor] = this.textColor,
                    _a["text-" + this.align] = this.align,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return CardFooterComponent;
    }());
    CardFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-card-footer, [c-card-footer]',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    CardFooterComponent.propDecorators = {
        align: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        borderColor: [{ type: i0.Input }],
        textColor: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CardGroupComponent = /** @class */ (function () {
        function CardGroupComponent() {
            this.deck = false;
            this.columns = false;
        }
        Object.defineProperty(CardGroupComponent.prototype, "hostClasses", {
            get: function () {
                return this.getClasses();
            },
            enumerable: false,
            configurable: true
        });
        CardGroupComponent.prototype.getClasses = function () {
            return "card-" + (this.columns ? 'columns' : this.deck ? 'deck' : 'group');
        };
        return CardGroupComponent;
    }());
    CardGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-card-group, [c-card-group]',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    CardGroupComponent.propDecorators = {
        deck: [{ type: i0.Input }],
        columns: [{ type: i0.Input }],
        hostClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CardHeaderComponent = /** @class */ (function () {
        function CardHeaderComponent() {
        }
        Object.defineProperty(CardHeaderComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardHeaderComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'card-header': true
                    },
                    _a["bg-" + this.color] = this.color,
                    _a["border-" + this.borderColor] = this.borderColor,
                    _a["text-" + this.textColor] = this.textColor,
                    _a["text-" + this.align] = this.align,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return CardHeaderComponent;
    }());
    CardHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-card-header, [c-card-header]',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    CardHeaderComponent.propDecorators = {
        align: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        borderColor: [{ type: i0.Input }],
        textColor: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CardHeaderActionsComponent = /** @class */ (function () {
        function CardHeaderActionsComponent() {
            this.cardHeaderActions = true;
        }
        return CardHeaderActionsComponent;
    }());
    CardHeaderActionsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-card-header-actions, [c-card-header-actions]',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    CardHeaderActionsComponent.propDecorators = {
        cardHeaderActions: [{ type: i0.HostBinding, args: ['class.card-header-actions',] }]
    };

    var CardModule = /** @class */ (function () {
        function CardModule() {
        }
        return CardModule;
    }());
    CardModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        CardComponent,
                        CardBodyComponent,
                        CardFooterComponent,
                        CardGroupComponent,
                        CardHeaderComponent,
                        CardHeaderActionsComponent
                    ],
                    imports: [
                        i1.CommonModule,
                    ],
                    exports: [
                        CardComponent,
                        CardBodyComponent,
                        CardFooterComponent,
                        CardGroupComponent,
                        CardHeaderComponent,
                        CardHeaderActionsComponent
                    ]
                },] }
    ];

    var expandAnimation = animations.animation([
        animations.style({ height: 0, visibility: 'hidden', overflow: 'hidden', paddingTop: 0, paddingBottom: 0 }),
        animations.animate('{{ time }} {{ easing }}', animations.style({ height: '*', visibility: 'visible', paddingTop: '*', paddingBottom: '*', minHeight: '*' })),
        animations.animate('{{ time }}', animations.style({ opacity: '*', overflow: '*' })),
    ]);
    var collapseAnimation = animations.animation([
        animations.style({ height: '*', visibility: 'visible', overflow: 'hidden', paddingTop: '*', paddingBottom: '*', minHeight: '*' }),
        animations.animate('{{ time }} {{ easing }}', animations.style({ height: 0, visibility: 'hidden', opacity: 0, overflow: 'hidden', paddingTop: 0, paddingBottom: 0, minHeight: 0 }))
    ]);

    var CollapseDirective = /** @class */ (function () {
        function CollapseDirective(hostElement, animationBuilder) {
            this.hostElement = hostElement;
            this.animationBuilder = animationBuilder;
            this.duration = '400ms';
            this.transition = 'ease-in-out';
            this.animate = true;
            this.collapseChange = new i0.EventEmitter();
            this._show = false;
            this._animate = this.animate;
            this.host = this.hostElement.nativeElement;
        }
        Object.defineProperty(CollapseDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CollapseDirective.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    'navbar-collapse': !!this.navbar,
                    show: !!this.show,
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        CollapseDirective.prototype.ngOnInit = function () {
            this._show = this.show;
        };
        CollapseDirective.prototype.ngOnDestroy = function () {
            this.destroyPlayer();
        };
        CollapseDirective.prototype.ngOnChanges = function (changes) {
            if (changes.show) {
                (!changes.show.firstChange || !changes.show.currentValue) && this.toggle(changes.show.currentValue);
            }
        };
        CollapseDirective.prototype.ngDoCheck = function () {
            if (this._show !== this.show) {
                this.toggle();
            }
        };
        CollapseDirective.prototype.toggle = function (show) {
            if (show === void 0) { show = this.show; }
            this._show = show;
            this.createPlayer(show);
            this.player.play();
        };
        CollapseDirective.prototype.destroyPlayer = function () {
            if (this.player) {
                this.player.destroy();
            }
        };
        CollapseDirective.prototype.createPlayer = function (show) {
            var _this = this;
            if (show === void 0) { show = this.show; }
            if (this.player) {
                this.destroyPlayer();
            }
            var animationFactory;
            var duration = this._animate ? this.duration : '0ms';
            animationFactory = this.animationBuilder.build(animations.useAnimation(show ? expandAnimation : collapseAnimation, { params: { time: duration, easing: this.transition } }));
            this.player = animationFactory.create(this.host);
            this.player.onStart(function () { _this.collapseChange.emit(show ? 'opening' : 'collapsing'); });
            this.player.onDone(function () { _this.collapseChange.emit(show ? 'open' : 'collapsed'); });
        };
        return CollapseDirective;
    }());
    CollapseDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cCollapse]',
                    exportAs: 'cCollapse',
                },] }
    ];
    CollapseDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: animations.AnimationBuilder }
    ]; };
    CollapseDirective.propDecorators = {
        navbar: [{ type: i0.Input }],
        duration: [{ type: i0.Input }],
        transition: [{ type: i0.Input }],
        show: [{ type: i0.Input }],
        animate: [{ type: i0.Input }],
        collapseChange: [{ type: i0.Output }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CollapseModule = /** @class */ (function () {
        function CollapseModule() {
        }
        CollapseModule.forRoot = function () {
            return { ngModule: CollapseModule, providers: [] };
        };
        return CollapseModule;
    }());
    CollapseModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [CollapseDirective],
                    exports: [CollapseDirective],
                    imports: [
                        i1.CommonModule
                    ]
                },] }
    ];

    var AccordionModule = /** @class */ (function () {
        function AccordionModule() {
        }
        return AccordionModule;
    }());
    AccordionModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [AccordionComponent, AccordionGroupComponent],
                    exports: [
                        AccordionComponent,
                        AccordionGroupComponent
                    ],
                    imports: [
                        i1.CommonModule,
                        CardModule,
                        CollapseModule
                    ]
                },] }
    ];

    var AlertComponent = /** @class */ (function () {
        function AlertComponent(sanitizer, hostElement, renderer) {
            this.sanitizer = sanitizer;
            this.hostElement = hostElement;
            this.renderer = renderer;
            this.color = 'info';
            this.closeButton = false;
            this.show = true;
            this.fade = false;
            this.iconHtml = '<span>&times;</span>';
            this.timeout = 0;
            this.dismissed = new i0.EventEmitter();
            this.timer = new i0.EventEmitter();
        }
        Object.defineProperty(AlertComponent.prototype, "clock", {
            get: function () {
                var time = this._clock;
                this.timer.emit(time);
                return time;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AlertComponent.prototype, "animationDisabled", {
            get: function () {
                return !this.fade;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AlertComponent.prototype, "animateType", {
            get: function () {
                return this.show ? 'show' : 'hide';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AlertComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AlertComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        alert: true,
                        'alert-dismissible': !!this.closeButton
                    },
                    _a["alert-" + this.color] = !!this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        AlertComponent.prototype.ngOnInit = function () {
            this.safeIcon = this.sanitizer.sanitize(i0.SecurityContext.HTML, this.iconHtml);
            if (this.show && this.timeout) {
                this.setTimer();
            }
        };
        AlertComponent.prototype.ngOnDestroy = function () {
            this.clearTimer();
            this.clearClock();
        };
        AlertComponent.prototype.ngOnChanges = function (changes) {
            if (changes.color) {
                this.renderer.removeClass(this.hostElement.nativeElement, "alert-" + changes.color.previousValue);
            }
            if (changes.timeout) {
                this.setTimer();
            }
        };
        AlertComponent.prototype.setTimer = function () {
            var _this = this;
            this.clearTimer();
            this.timerId = this.timeout > 0 ? setTimeout(function () { return _this.onClose(); }, this.timeout) : null;
            this.setClock();
        };
        AlertComponent.prototype.clearTimer = function () {
            clearTimeout(this.timerId);
            this.timerId = null;
        };
        AlertComponent.prototype.onClose = function () {
            this.clearTimer();
            if (this.show) {
                this.show = false;
                this.hide = true;
                this.dismissed.emit(this);
            }
        };
        AlertComponent.prototype.setClock = function () {
            var _this = this;
            this.clearClock();
            this._clock = 0;
            this.clockId = setInterval(function () {
                _this._clock += 1;
            }, 1000);
            setTimeout(function () {
                _this.clearClock();
            }, this.timeout);
        };
        AlertComponent.prototype.clearClock = function () {
            clearInterval(this.clockId);
            this.clockId = null;
        };
        AlertComponent.prototype.onAnimationEvent = function (event) {
            console.warn(event);
            if (event.phaseName === 'done' && event.toState === 'hide') {
            }
            if (event.phaseName === 'start' && event.toState === 'show') {
            }
        };
        return AlertComponent;
    }());
    AlertComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-alert',
                    template: "<!--<div [@fadeInOut]=\"show ? 'show' : 'hide'\" [class]=\"alertClasses\">-->\n<ng-container>\n  <ng-template [ngIf]=\"closeButton\">\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose()\">\n      <span aria-hidden=\"true\" [innerHTML]=\"safeIcon\"></span>\n      <span class=\"sr-only\">Close</span>\n    </button>\n  </ng-template>\n  <ng-content></ng-content>\n</ng-container>\n",
                    animations: [
                        animations.trigger('fadeInOut', [
                            animations.state('show', animations.style({ opacity: 1 })),
                            animations.state('hide', animations.style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                            animations.transition('show => hide', [
                                animations.animate('.3s ease-out', animations.style({ opacity: 0 })),
                                animations.animate('.3s ease-out', animations.style({ height: 0, padding: 0, border: 0, margin: 0 }))
                            ]),
                            animations.transition('hide => show', [
                                animations.animate('.3s ease-in', animations.style({ height: '*', padding: '*', border: '*', margin: '*' })),
                                animations.animate('.3s ease-in', animations.style({ opacity: '*' }))
                            ])
                        ])
                    ],
                    styles: [":host{display:block}"]
                },] }
    ];
    AlertComponent.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    AlertComponent.propDecorators = {
        color: [{ type: i0.Input }],
        closeButton: [{ type: i0.Input }],
        show: [{ type: i0.Input }],
        fade: [{ type: i0.Input }],
        iconHtml: [{ type: i0.Input }],
        timeout: [{ type: i0.Input }],
        dismissed: [{ type: i0.Output }],
        timer: [{ type: i0.Output }],
        animationDisabled: [{ type: i0.HostBinding, args: ['@.disabled',] }],
        animateType: [{ type: i0.HostBinding, args: ['@fadeInOut',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var AlertModule = /** @class */ (function () {
        function AlertModule() {
        }
        return AlertModule;
    }());
    AlertModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule
                    ],
                    exports: [
                        AlertComponent
                    ],
                    declarations: [
                        AlertComponent
                    ]
                },] }
    ];

    var BadgeComponent = /** @class */ (function () {
        function BadgeComponent(hostElement, renderer) {
            this.hostElement = hostElement;
            this.renderer = renderer;
        }
        Object.defineProperty(BadgeComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BadgeComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        badge: true
                    },
                    _a["badge-" + this.color] = !!this.color,
                    _a["badge-" + this.shape] = !!this.shape,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        BadgeComponent.prototype.ngOnChanges = function (changes) {
            if (changes.color) {
                var classOff = "badge-" + changes.color.previousValue;
                this.renderer.removeClass(this.hostElement.nativeElement, classOff);
            }
            if (changes.shape) {
                var classOff = "badge-" + changes.shape.previousValue;
                this.renderer.removeClass(this.hostElement.nativeElement, classOff);
            }
        };
        return BadgeComponent;
    }());
    BadgeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-badge',
                    template: '<ng-content></ng-content>',
                    styles: [""]
                },] }
    ];
    BadgeComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    BadgeComponent.propDecorators = {
        shape: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var BadgeModule = /** @class */ (function () {
        function BadgeModule() {
        }
        return BadgeModule;
    }());
    BadgeModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule
                    ],
                    exports: [
                        BadgeComponent
                    ],
                    declarations: [
                        BadgeComponent
                    ]
                },] }
    ];

    var BreadcrumbService = /** @class */ (function () {
        function BreadcrumbService(router, route) {
            var _this = this;
            this.router = router;
            this.route = route;
            this.outlet = 'primary';
            this.breadcrumbsBehaviorSubject = new rxjs.BehaviorSubject(new Array());
            this.breadcrumbs$ = this.breadcrumbsBehaviorSubject.asObservable();
            this.router.events.pipe(operators.filter(function (event) { return event instanceof i1$1.NavigationEnd; })).subscribe(function (event) {
                var breadcrumbs = [];
                var currentRoute = _this.route.root;
                var url = '';
                do {
                    var childrenRoutes = currentRoute.children;
                    currentRoute = null;
                    childrenRoutes.forEach(function (route) {
                        if (route.outlet === _this.outlet) {
                            var routeSnapshot = route.snapshot;
                            url += '/' + routeSnapshot.url.map(function (segment) { return segment.path; }).join('/');
                            breadcrumbs.push({
                                label: route.snapshot.data.title || '',
                                url: url,
                                queryParams: routeSnapshot.queryParams
                            });
                            currentRoute = route;
                        }
                    });
                } while (currentRoute);
                _this.breadcrumbsBehaviorSubject.next(Object.assign([], breadcrumbs));
                return breadcrumbs;
            });
        }
        return BreadcrumbService;
    }());
    BreadcrumbService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(i1$1.ActivatedRoute)); }, token: BreadcrumbService, providedIn: "root" });
    BreadcrumbService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    BreadcrumbService.ctorParameters = function () { return [
        { type: i1$1.Router },
        { type: i1$1.ActivatedRoute }
    ]; };

    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent() {
            this.divider = false;
            this.breadcrumbClass = true;
        }
        BreadcrumbComponent.prototype.ngOnInit = function () {
        };
        BreadcrumbComponent.prototype.ngOnChanges = function (changes) {
            if (changes.items) {
                this.setup();
            }
        };
        BreadcrumbComponent.prototype.setup = function () {
            var _this = this;
            if (this.items && this.items.length > 0) {
                this.breadcrumbs = new rxjs.Observable(function (observer) {
                    if (_this.items) {
                        observer.next(_this.items);
                    }
                });
            }
        };
        BreadcrumbComponent.prototype.ngOnDestroy = function () {
            this.breadcrumbs = null;
        };
        return BreadcrumbComponent;
    }());
    BreadcrumbComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-breadcrumb',
                    template: "<ng-container>\n  <ng-template ngFor let-breadcrumb [ngForOf]=\"breadcrumbs | async\" let-last = last>\n    <ng-container *ngIf=\"breadcrumb.label && (breadcrumb.url.slice(-1) == '/' || last)\">\n      <div *ngIf=\"!last\" class=\"breadcrumb-item\">\n        <a [routerLink]=\"breadcrumb.url\"\n           [cHtmlAttr]=\"breadcrumb.attributes\"\n           [target]=\"breadcrumb.attributes?.target\"\n           [queryParams]=\"breadcrumb.linkProps?.queryParams\"\n           [fragment]=\"breadcrumb.linkProps?.fragment\"\n           [queryParamsHandling]=\"breadcrumb.linkProps?.queryParamsHandling\"\n           [preserveFragment]=\"breadcrumb.linkProps?.preserveFragment\"\n           [skipLocationChange]=\"breadcrumb.linkProps?.skipLocationChange\"\n           [replaceUrl]=\"breadcrumb.linkProps?.replaceUrl\"\n           [state]=\"breadcrumb.linkProps?.state\"\n           i18n>{{breadcrumb.label}}\n        </a>\n      </div>\n      <span *ngIf=\"!last && divider\" ngPreserveWhitespaces=\"true\"> {{divider}} </span>\n      <span class=\"breadcrumb-item active\" *ngIf=\"last\" [cHtmlAttr]=\"breadcrumb.attributes\" i18n>{{breadcrumb.label}}</span>\n    </ng-container>\n  </ng-template>\n  <ng-content></ng-content>\n</ng-container>\n",
                    styles: [""]
                },] }
    ];
    BreadcrumbComponent.ctorParameters = function () { return []; };
    BreadcrumbComponent.propDecorators = {
        items: [{ type: i0.Input }],
        divider: [{ type: i0.Input }],
        breadcrumbClass: [{ type: i0.HostBinding, args: ['class.breadcrumb',] }]
    };

    var BreadcrumbDirective = /** @class */ (function () {
        function BreadcrumbDirective(breadcrumbComponent, service) {
            this.breadcrumbComponent = breadcrumbComponent;
            this.service = service;
        }
        BreadcrumbDirective.prototype.ngOnInit = function () {
            this.breadcrumbComponent.breadcrumbs = this.service.breadcrumbs$;
        };
        return BreadcrumbDirective;
    }());
    BreadcrumbDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cBreadcrumbRouter]',
                    exportAs: 'cBreadcrumbRouter'
                },] }
    ];
    BreadcrumbDirective.ctorParameters = function () { return [
        { type: BreadcrumbComponent, decorators: [{ type: i0.Host }] },
        { type: BreadcrumbService }
    ]; };

    var OutClickService = /** @class */ (function () {
        function OutClickService() {
            this.outClick = new rxjs.BehaviorSubject({ event: undefined });
            this.outClick$ = this.outClick.asObservable();
        }
        OutClickService.prototype.onClick = function (message) {
            this.outClick.next(message);
        };
        return OutClickService;
    }());
    OutClickService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OutClickService_Factory() { return new OutClickService(); }, token: OutClickService, providedIn: "root" });
    OutClickService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    OutClickService.ctorParameters = function () { return []; };

    var OutClickDirective = /** @class */ (function () {
        function OutClickDirective(elementRef, outClickService) {
            this.elementRef = elementRef;
            this.outClickService = outClickService;
        }
        OutClickDirective.prototype.onDocumentClick = function ($event) {
            var targetElement = $event.target;
            if (targetElement && !this.elementRef.nativeElement.contains(targetElement)) {
                this.outClickService.onClick({ event: $event });
            }
        };
        OutClickDirective.prototype.ngOnInit = function () {
            this.outClickSubscription = this.outClickService.outClick$.subscribe(function (message) {
            });
        };
        OutClickDirective.prototype.ngOnDestroy = function () {
            this.outClickSubscription.unsubscribe();
        };
        return OutClickDirective;
    }());
    OutClickDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cOutClick]',
                    exportAs: 'cOutClick',
                },] }
    ];
    OutClickDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: OutClickService }
    ]; };
    OutClickDirective.propDecorators = {
        onDocumentClick: [{ type: i0.HostListener, args: ['document:click', ['$event'],] }]
    };

    var HtmlAttributesDirective = /** @class */ (function () {
        function HtmlAttributesDirective(renderer, el) {
            this.renderer = renderer;
            this.el = el;
        }
        HtmlAttributesDirective.prototype.ngOnInit = function () {
            var attribs = this.cHtmlAttr;
            for (var attr in attribs) {
                if (attr === 'style' && typeof (attribs[attr]) === 'object') {
                    this.setStyle(attribs[attr]);
                }
                else if (attr === 'class') {
                    this.addClass(attribs[attr]);
                }
                else {
                    this.setAttrib(attr, attribs[attr]);
                }
            }
        };
        HtmlAttributesDirective.prototype.setStyle = function (styles) {
            for (var style in styles) {
                if (style) {
                    this.renderer.setStyle(this.el.nativeElement, style, styles[style]);
                }
            }
        };
        HtmlAttributesDirective.prototype.addClass = function (classes) {
            var _this = this;
            var classArray = (Array.isArray(classes) ? classes : classes.split(' '));
            classArray.filter(function (element) { return element.length > 0; }).forEach(function (element) {
                _this.renderer.addClass(_this.el.nativeElement, element);
            });
        };
        HtmlAttributesDirective.prototype.setAttrib = function (key, value) {
            value !== null ?
                this.renderer.setAttribute(this.el.nativeElement, key, value) :
                this.renderer.removeAttribute(this.el.nativeElement, key);
        };
        return HtmlAttributesDirective;
    }());
    HtmlAttributesDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cHtmlAttr]',
                    exportAs: 'cHtmlAttr'
                },] }
    ];
    HtmlAttributesDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    HtmlAttributesDirective.propDecorators = {
        cHtmlAttr: [{ type: i0.Input }]
    };

    var SharedModule = /** @class */ (function () {
        function SharedModule() {
        }
        SharedModule.forRoot = function () {
            return {
                ngModule: SharedModule,
                providers: [
                    { provide: OutClickService }
                ]
            };
        };
        return SharedModule;
    }());
    SharedModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule
                    ],
                    declarations: [
                        OutClickDirective,
                        HtmlAttributesDirective
                    ],
                    exports: [
                        OutClickDirective,
                        HtmlAttributesDirective
                    ],
                    providers: []
                },] }
    ];

    var sidebarCssClasses = [
        'c-sidebar-show',
        'c-sidebar-sm-show',
        'c-sidebar-md-show',
        'c-sidebar-lg-show',
        'c-sidebar-xl-show'
    ];
    var validBreakpoints = ['sm', 'md', 'lg', 'xl'];
    function checkBreakpoint(breakpoint, list) {
        return list.indexOf(breakpoint) > -1;
    }

    var BreadcrumbModule = /** @class */ (function () {
        function BreadcrumbModule() {
        }
        return BreadcrumbModule;
    }());
    BreadcrumbModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule, i1$1.RouterModule, SharedModule],
                    exports: [BreadcrumbComponent, BreadcrumbDirective],
                    declarations: [BreadcrumbComponent, BreadcrumbDirective],
                    providers: [BreadcrumbService]
                },] }
    ];

    var ButtonComponent = /** @class */ (function () {
        function ButtonComponent() {
            this.block = null;
            this.size = '';
            this.type = 'button';
            this.tabindex = null;
            this.disabled = null;
            this.pressed = null;
        }
        Object.defineProperty(ButtonComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var outlineSuffix = this.variant === 'outline' ? 'outline-' : '';
                var classes = classNames__default['default']((_a = {
                        btn: true
                    },
                    _a["btn-" + outlineSuffix + this.color] = this.color,
                    _a["btn-" + this.size] = this.size,
                    _a["btn-ghost-" + this.color] = this.variant === 'ghost',
                    _a['btn-block'] = this.block != null,
                    _a['btn-pill'] = this.shape === 'pill',
                    _a['btn-square'] = this.shape === 'square',
                    _a.disabled = !!this.disabled,
                    _a.focus = !this.variant && this.pressed != null,
                    _a.active = this.variant && this.pressed != null,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonComponent.prototype, "isDisabled", {
            get: function () {
                return (this.disabled !== 'false' && this.disabled !== false && this.disabled !== null) ? this.disabled : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonComponent.prototype, "getTabindex", {
            get: function () {
                return this.disabled ? null : this.tabindex != null ? this.tabindex : '0';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonComponent.prototype, "hostType", {
            get: function () {
                return this.type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonComponent.prototype, "hostRole", {
            get: function () {
                return 'button';
            },
            enumerable: false,
            configurable: true
        });
        ButtonComponent.prototype.ngOnInit = function () {
        };
        return ButtonComponent;
    }());
    ButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-button, [c-button]',
                    template: '<ng-content></ng-content>',
                    styles: [":host.disabled,:host:disabled{cursor:default}"]
                },] }
    ];
    ButtonComponent.ctorParameters = function () { return []; };
    ButtonComponent.propDecorators = {
        block: [{ type: i0.Input }],
        shape: [{ type: i0.Input }],
        variant: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }],
        disabled: [{ type: i0.Input }],
        isDisabled: [{ type: i0.HostBinding, args: ['attr.disabled',] }],
        pressed: [{ type: i0.HostBinding, args: ['attr.aria-pressed',] }, { type: i0.Input }],
        getTabindex: [{ type: i0.HostBinding, args: ['attr.tabindex',] }],
        hostType: [{ type: i0.HostBinding, args: ['attr.type',] }],
        hostRole: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    var ButtonDirective = /** @class */ (function () {
        function ButtonDirective() {
            this.block = null;
            this.size = '';
            this.type = 'button';
            this.tabindex = null;
            this.disabled = null;
            this.pressed = null;
        }
        Object.defineProperty(ButtonDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var outlineSuffix = this.variant === 'outline' ? 'outline-' : '';
                var classes = classNames__default['default']((_a = {
                        btn: true
                    },
                    _a["btn-" + outlineSuffix + this.color] = this.color,
                    _a["btn-" + this.size] = this.size,
                    _a["btn-ghost-" + this.color] = this.variant === 'ghost',
                    _a['btn-block'] = this.block != null,
                    _a['btn-pill'] = this.shape === 'pill',
                    _a['btn-square'] = this.shape === 'square',
                    _a.disabled = !!this.disabled,
                    _a.focus = !this.variant && this.pressed != null,
                    _a.active = this.variant && this.pressed != null,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonDirective.prototype, "isDisabled", {
            get: function () {
                return (this.disabled !== 'false' && this.disabled !== false && this.disabled !== null) ? this.disabled : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonDirective.prototype, "getTabindex", {
            get: function () {
                return this.disabled ? null : this.tabindex != null ? this.tabindex : '0';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonDirective.prototype, "hostType", {
            get: function () {
                return this.type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonDirective.prototype, "hostRole", {
            get: function () {
                return 'button';
            },
            enumerable: false,
            configurable: true
        });
        ButtonDirective.prototype.ngOnInit = function () {
        };
        return ButtonDirective;
    }());
    ButtonDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cButton]',
                    exportAs: 'cButton',
                },] }
    ];
    ButtonDirective.ctorParameters = function () { return []; };
    ButtonDirective.propDecorators = {
        block: [{ type: i0.Input }],
        shape: [{ type: i0.Input }],
        variant: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }],
        disabled: [{ type: i0.Input }],
        isDisabled: [{ type: i0.HostBinding, args: ['attr.disabled',] }],
        pressed: [{ type: i0.HostBinding, args: ['attr.aria-pressed',] }, { type: i0.Input }],
        getTabindex: [{ type: i0.HostBinding, args: ['attr.tabindex',] }],
        hostType: [{ type: i0.HostBinding, args: ['attr.type',] }],
        hostRole: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ButtonGroupComponent = /** @class */ (function () {
        function ButtonGroupComponent(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.size = '';
            this.vertical = null;
            this.classes = Object.create(null);
            this.aria = 'Button group';
            this.host = this.hostElement.nativeElement;
        }
        Object.defineProperty(ButtonGroupComponent.prototype, "hostRole", {
            get: function () {
                return 'group';
            },
            enumerable: false,
            configurable: true
        });
        ButtonGroupComponent.prototype.ngOnInit = function () {
            this.addClasses();
        };
        ButtonGroupComponent.prototype.addClasses = function () {
            var e_1, _a;
            this.setClasses();
            try {
                for (var _b = __values(Object.entries(this.classes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                    if (value) {
                        this.renderer.addClass(this.host, key);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        ButtonGroupComponent.prototype.setClasses = function () {
            this.classes['btn-group-vertical'] = Boolean(this.vertical) || this.vertical != null;
            this.classes['btn-group'] = !this.classes['btn-group-vertical'];
            this.classes["btn-group-" + this.size] = Boolean(this.size);
        };
        return ButtonGroupComponent;
    }());
    ButtonGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-button-group',
                    template: '<ng-content></ng-content>',
                    styles: [""]
                },] }
    ];
    ButtonGroupComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    ButtonGroupComponent.propDecorators = {
        size: [{ type: i0.Input }],
        vertical: [{ type: i0.Input }],
        aria: [{ type: i0.HostBinding, args: ['attr.aria-label',] }],
        hostRole: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    var ButtonToolbarComponent = /** @class */ (function () {
        function ButtonToolbarComponent() {
            this.justify = '';
            this.class = '';
            this.classes = Object.create(null);
            this.aria = 'Button toolbar';
        }
        Object.defineProperty(ButtonToolbarComponent.prototype, "hostRole", {
            get: function () {
                return 'toolbar';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonToolbarComponent.prototype, "hostClasses", {
            get: function () {
                return this.getClasses();
            },
            enumerable: false,
            configurable: true
        });
        ButtonToolbarComponent.prototype.ngOnInit = function () {
        };
        ButtonToolbarComponent.prototype.getClasses = function () {
            this.classes['btn-toolbar'] = true;
            this.classes["justify-content-start"] = this.justify === 'start';
            this.classes["justify-content-end"] = this.justify === 'end';
            this.classes["justify-content-center}"] = this.justify === 'center';
            this.classes["justify-content-between"] = this.justify === 'between';
            return classNames__default['default'](this.classes, this.class, this.ngClass);
        };
        return ButtonToolbarComponent;
    }());
    ButtonToolbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-button-toolbar',
                    template: '<ng-content></ng-content>',
                    styles: [":host{display:flex}"]
                },] }
    ];
    ButtonToolbarComponent.ctorParameters = function () { return []; };
    ButtonToolbarComponent.propDecorators = {
        justify: [{ type: i0.Input }],
        class: [{ type: i0.Input }],
        ngClass: [{ type: i0.Input }],
        aria: [{ type: i0.HostBinding, args: ['attr.aria-label',] }],
        hostRole: [{ type: i0.HostBinding, args: ['attr.role',] }],
        hostClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var RADIO_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return ButtonRadioGroupDirective; }),
        multi: true
    };
    var ButtonRadioGroupDirective = /** @class */ (function () {
        function ButtonRadioGroupDirective(cdr) {
            this.cdr = cdr;
            this.onChange = Function.prototype;
            this.onTouched = Function.prototype;
        }
        Object.defineProperty(ButtonRadioGroupDirective.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        ButtonRadioGroupDirective.prototype.writeValue = function (value) {
            this._value = value;
            this.cdr.markForCheck();
        };
        ButtonRadioGroupDirective.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        ButtonRadioGroupDirective.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        return ButtonRadioGroupDirective;
    }());
    ButtonRadioGroupDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cButtonRadioGroup]',
                    providers: [RADIO_CONTROL_VALUE_ACCESSOR]
                },] }
    ];
    ButtonRadioGroupDirective.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };

    var RADIO_CONTROL_VALUE_ACCESSOR$1 = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return ButtonRadioDirective; }),
        multi: true
    };
    var ButtonRadioDirective = /** @class */ (function () {
        function ButtonRadioDirective(el, cdr, group, renderer) {
            this.el = el;
            this.cdr = cdr;
            this.group = group;
            this.renderer = renderer;
            this.onChange = Function.prototype;
            this.onTouched = Function.prototype;
        }
        Object.defineProperty(ButtonRadioDirective.prototype, "value", {
            get: function () {
                return this.group ? this.group.value : this._value;
            },
            set: function (value) {
                if (this.group) {
                    this.group.value = value;
                    return;
                }
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonRadioDirective.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (disabled) {
                this._disabled = disabled;
                this.setDisabledState(disabled);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonRadioDirective.prototype, "isActive", {
            get: function () {
                return this.btnRadio === this.value;
            },
            enumerable: false,
            configurable: true
        });
        ButtonRadioDirective.prototype.onClick = function () {
            if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {
                return;
            }
            this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;
            this._onChange(this.value);
        };
        ButtonRadioDirective.prototype.ngOnInit = function () {
            this.uncheckable = typeof this.uncheckable !== 'undefined';
        };
        ButtonRadioDirective.prototype.onBlur = function () {
            this.onTouched();
        };
        ButtonRadioDirective.prototype._onChange = function (value) {
            if (this.group) {
                this.group.onTouched();
                this.group.onChange(value);
                return;
            }
            this.onTouched();
            this.onChange(value);
        };
        ButtonRadioDirective.prototype.writeValue = function (value) {
            this.value = value;
            this.cdr.markForCheck();
        };
        ButtonRadioDirective.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        ButtonRadioDirective.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        ButtonRadioDirective.prototype.setDisabledState = function (disabled) {
            if (disabled) {
                this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');
                return;
            }
            this.renderer.removeAttribute(this.el.nativeElement, 'disabled');
        };
        return ButtonRadioDirective;
    }());
    ButtonRadioDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cBtnRadio]',
                    exportAs: 'cBtnRadio',
                    providers: [RADIO_CONTROL_VALUE_ACCESSOR$1]
                },] }
    ];
    ButtonRadioDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: ButtonRadioGroupDirective, decorators: [{ type: i0.Optional }] },
        { type: i0.Renderer2 }
    ]; };
    ButtonRadioDirective.propDecorators = {
        btnRadio: [{ type: i0.Input }],
        uncheckable: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        isActive: [{ type: i0.HostBinding, args: ['class.active',] }, { type: i0.HostBinding, args: ['attr.aria-pressed',] }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    var ButtonModule = /** @class */ (function () {
        function ButtonModule() {
        }
        return ButtonModule;
    }());
    ButtonModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ButtonComponent,
                        ButtonDirective,
                        ButtonGroupComponent,
                        ButtonToolbarComponent,
                        ButtonRadioDirective,
                        ButtonRadioGroupDirective
                    ],
                    imports: [
                        i1.CommonModule,
                    ],
                    exports: [
                        ButtonComponent,
                        ButtonDirective,
                        ButtonGroupComponent,
                        ButtonToolbarComponent,
                        ButtonRadioDirective,
                        ButtonRadioGroupDirective
                    ]
                },] }
    ];

    var CalloutComponent = /** @class */ (function () {
        function CalloutComponent() {
        }
        Object.defineProperty(CalloutComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CalloutComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'c-callout': true
                    },
                    _a["c-callout-" + this.color] = !!this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return CalloutComponent;
    }());
    CalloutComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-callout, [c-callout]',
                    template: "<ng-content></ng-content>",
                    styles: [":host{display:block}"]
                },] }
    ];
    CalloutComponent.ctorParameters = function () { return []; };
    CalloutComponent.propDecorators = {
        color: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CalloutModule = /** @class */ (function () {
        function CalloutModule() {
        }
        return CalloutModule;
    }());
    CalloutModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [CalloutComponent],
                    exports: [CalloutComponent],
                    imports: [
                        i1.CommonModule
                    ]
                },] }
    ];

    var NoZoneBaseChartDirective = /** @class */ (function (_super) {
        __extends(NoZoneBaseChartDirective, _super);
        function NoZoneBaseChartDirective(element, themeService, zone) {
            var _this = _super.call(this, element, themeService) || this;
            _this.zone = zone;
            var refresh = _this.refresh;
            _this.refresh = function () {
                _this.zone.runOutsideAngular(refresh.bind(_this));
            };
            return _this;
        }
        return NoZoneBaseChartDirective;
    }(ng2Charts.BaseChartDirective));
    NoZoneBaseChartDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'canvas[cNoZoneBaseChart]',
                    exportAs: 'base-chart'
                },] }
    ];
    NoZoneBaseChartDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ng2Charts.ThemeService },
        { type: i0.NgZone }
    ]; };

    var ChartModule = /** @class */ (function () {
        function ChartModule() {
        }
        return ChartModule;
    }());
    ChartModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        NoZoneBaseChartDirective
                    ],
                    imports: [
                        i1.CommonModule
                    ],
                    exports: [
                        NoZoneBaseChartDirective
                    ]
                },] }
    ];

    var CarouselService = /** @class */ (function () {
        function CarouselService() {
            this.carouselIndex = new rxjs.BehaviorSubject({});
            this.carouselIndex$ = this.carouselIndex.asObservable();
        }
        CarouselService.prototype.setIndex = function (index) {
            this.carouselIndex.next(index);
        };
        return CarouselService;
    }());
    CarouselService.decorators = [
        { type: i0.Injectable }
    ];
    CarouselService.ctorParameters = function () { return []; };

    var CarouselState = /** @class */ (function () {
        function CarouselState(carouselService) {
            this.carouselService = carouselService;
            this._state = {
                activeItemIndex: -1,
                animate: true,
                items: [],
                direction: 'next',
            };
        }
        Object.defineProperty(CarouselState.prototype, "state", {
            get: function () {
                return this._state;
            },
            set: function (state) {
                var prevState = Object.assign({}, this._state);
                var nextState = Object.assign(Object.assign({}, this._state), state);
                this._state = nextState;
                if (prevState.activeItemIndex !== nextState.activeItemIndex) {
                    this.carouselService.setIndex({ active: nextState.activeItemIndex });
                }
            },
            enumerable: false,
            configurable: true
        });
        CarouselState.prototype.setItems = function (newItems) {
            if (newItems.length) {
                var itemsArray = newItems.toArray();
                itemsArray.forEach(function (item, i) {
                    item.index = i;
                });
                this.state = {
                    items: itemsArray,
                };
            }
            else {
                this.reset();
            }
        };
        CarouselState.prototype.setNextIndex = function (nextIndex) {
            this.carouselService.setIndex(nextIndex);
        };
        CarouselState.prototype.direction = function (direction) {
            if (direction === void 0) { direction = 'next'; }
            this.state = { direction: direction };
            var _a = this.state, activeItemIndex = _a.activeItemIndex, items = _a.items;
            var itemsCount = items.length;
            return direction === 'next' ?
                (activeItemIndex === itemsCount - 1 ? 0 : activeItemIndex + 1) :
                (activeItemIndex === 0 ? itemsCount - 1 : activeItemIndex - 1);
        };
        CarouselState.prototype.reset = function () {
            this.state = {
                activeItemIndex: -1,
                animate: true,
                items: [],
                direction: 'next',
            };
        };
        return CarouselState;
    }());
    CarouselState.decorators = [
        { type: i0.Injectable }
    ];
    CarouselState.ctorParameters = function () { return [
        { type: CarouselService }
    ]; };

    var CarouselConfig = /** @class */ (function () {
        function CarouselConfig() {
            this.activeIndex = 0;
            this.animate = true;
            this.direction = 'next';
            this.interval = 3000;
        }
        return CarouselConfig;
    }());
    CarouselConfig.decorators = [
        { type: i0.Injectable }
    ];

    var CarouselComponent = /** @class */ (function () {
        function CarouselComponent(config, carouselService, carouselState) {
            this.config = config;
            this.carouselService = carouselService;
            this.carouselState = carouselState;
            this.activeIndex = 0;
            this.animate = true;
            this.direction = 'next';
            this.interval = 0;
            this.itemChange = new i0.EventEmitter();
            this.carouselClass = true;
            this.carouselSlideClass = true;
            Object.assign(this, config);
        }
        CarouselComponent.prototype.onMouseenter = function ($event) {
            this.resetTimer();
        };
        CarouselComponent.prototype.onMouseleave = function ($event) {
            this.setTimer();
        };
        CarouselComponent.prototype.ngOnInit = function () {
            this.carouselStateSubscribe();
        };
        CarouselComponent.prototype.ngOnDestroy = function () {
            this.carouselStateSubscribe(false);
        };
        CarouselComponent.prototype.ngAfterContentInit = function () {
            this.carouselState.state = { activeItemIndex: this.activeIndex, animate: this.animate };
            this.setTimer();
        };
        CarouselComponent.prototype.setTimer = function () {
            var _this = this;
            this.resetTimer();
            if (this.interval > 0) {
                this.timerId = setTimeout(function () {
                    var nextIndex = _this.carouselState.direction(_this.direction);
                    _this.carouselState.state = { activeItemIndex: nextIndex };
                }, this.interval);
            }
        };
        CarouselComponent.prototype.resetTimer = function () {
            clearTimeout(this.timerId);
        };
        CarouselComponent.prototype.carouselStateSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.carouselIndexSubscription = this.carouselService.carouselIndex$.subscribe(function (nextIndex) {
                    if ('active' in nextIndex) {
                        _this.setTimer();
                    }
                });
            }
            else {
                this.carouselIndexSubscription.unsubscribe();
            }
        };
        return CarouselComponent;
    }());
    CarouselComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-carousel',
                    template: "<ng-content></ng-content>\n",
                    providers: [CarouselService, CarouselState, CarouselConfig],
                    styles: [":host{display:block}"]
                },] }
    ];
    CarouselComponent.ctorParameters = function () { return [
        { type: CarouselConfig, decorators: [{ type: i0.Inject, args: [CarouselConfig,] }] },
        { type: CarouselService },
        { type: CarouselState }
    ]; };
    CarouselComponent.propDecorators = {
        activeIndex: [{ type: i0.Input }],
        animate: [{ type: i0.Input }],
        direction: [{ type: i0.Input }],
        interval: [{ type: i0.Input }],
        itemChange: [{ type: i0.Output }],
        carouselClass: [{ type: i0.HostBinding, args: ['class.carousel',] }],
        carouselSlideClass: [{ type: i0.HostBinding, args: ['class.slide',] }],
        onMouseenter: [{ type: i0.HostListener, args: ['mouseenter', ['$event'],] }, { type: i0.HostListener, args: ['mousedown', ['$event'],] }],
        onMouseleave: [{ type: i0.HostListener, args: ['mouseleave', ['$event'],] }, { type: i0.HostListener, args: ['mouseup', ['$event'],] }]
    };

    var CarouselCaptionComponent = /** @class */ (function () {
        function CarouselCaptionComponent() {
            this.carouselCaptionClass = true;
        }
        CarouselCaptionComponent.prototype.ngOnInit = function () {
        };
        return CarouselCaptionComponent;
    }());
    CarouselCaptionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-carousel-caption',
                    template: "<ng-content></ng-content>\n\n",
                    styles: [""]
                },] }
    ];
    CarouselCaptionComponent.ctorParameters = function () { return []; };
    CarouselCaptionComponent.propDecorators = {
        carouselCaptionClass: [{ type: i0.HostBinding, args: ['class.carousel-caption',] }]
    };

    var CarouselControlComponent = /** @class */ (function () {
        function CarouselControlComponent(changeDetector, carouselState) {
            this.changeDetector = changeDetector;
            this.carouselState = carouselState;
            this.direction = 'next';
            this.hasContent = true;
        }
        Object.defineProperty(CarouselControlComponent.prototype, "hostRole", {
            get: function () {
                return 'button';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CarouselControlComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CarouselControlComponent.prototype, "carouselControlClass", {
            get: function () {
                return "carousel-control-" + this.direction;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CarouselControlComponent.prototype, "carouselControlIconClass", {
            get: function () {
                return "carousel-control-" + this.direction + "-icon";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CarouselControlComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default'](this.carouselControlClass);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        CarouselControlComponent.prototype.onKeyUp = function ($event) {
            if ($event.key === 'Enter') {
                this.play();
            }
            if ($event.key === 'ArrowLeft') {
                this.play('prev');
            }
            if ($event.key === 'ArrowRight') {
                this.play('next');
            }
        };
        CarouselControlComponent.prototype.onClick = function ($event) {
            this.play();
        };
        CarouselControlComponent.prototype.ngOnInit = function () { };
        CarouselControlComponent.prototype.ngAfterViewInit = function () {
            this.hasContent = this.content.nativeElement.childNodes.length;
            this.changeDetector.detectChanges();
        };
        CarouselControlComponent.prototype.play = function (direction) {
            if (direction === void 0) { direction = this.direction; }
            var nextIndex = this.carouselState.direction(direction);
            this.carouselState.state = { activeItemIndex: nextIndex };
        };
        return CarouselControlComponent;
    }());
    CarouselControlComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-carousel-control',
                    template: "<div #content *ngIf = \"hasContent; else default\"><ng-content></ng-content></div>\n<ng-template #default>\n  <span [class]=\"carouselControlIconClass\" [attr.aria-label]=\"direction\"></span>\n</ng-template>\n",
                    styles: [""]
                },] }
    ];
    CarouselControlComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: CarouselState }
    ]; };
    CarouselControlComponent.propDecorators = {
        direction: [{ type: i0.Input }],
        content: [{ type: i0.ViewChild, args: ['content',] }],
        hostRole: [{ type: i0.HostBinding, args: ['attr.role',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }],
        onKeyUp: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var CarouselIndicatorsComponent = /** @class */ (function () {
        function CarouselIndicatorsComponent(carouselService, carouselState) {
            this.carouselService = carouselService;
            this.carouselState = carouselState;
            this.items = [];
            this.active = 0;
        }
        CarouselIndicatorsComponent.prototype.ngOnInit = function () {
            this.carouselStateSubscribe();
        };
        CarouselIndicatorsComponent.prototype.ngOnDestroy = function () {
            this.carouselStateSubscribe(false);
        };
        CarouselIndicatorsComponent.prototype.onClick = function (index) {
            if (index !== this.active) {
                var direction = index < this.active ? 'prev' : 'next';
                this.carouselState.state = { direction: direction, activeItemIndex: index };
            }
        };
        CarouselIndicatorsComponent.prototype.carouselStateSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.carouselIndexSubscription = this.carouselService.carouselIndex$.subscribe(function (nextIndex) {
                    var _a, _b, _c;
                    _this.items = (_c = (_b = (_a = _this.carouselState) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.items) === null || _c === void 0 ? void 0 : _c.map(function (item) { return item.index; });
                    if ('active' in nextIndex) {
                        _this.active = nextIndex.active;
                    }
                });
            }
            else {
                this.carouselIndexSubscription.unsubscribe();
            }
        };
        return CarouselIndicatorsComponent;
    }());
    CarouselIndicatorsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-carousel-indicators',
                    template: "<ol class=\"carousel-indicators\">\n  <ng-container *ngFor=\"let item of items; let i=index\">\n    <li (click)=\"onClick(i)\" [class]=\"{active: active === i}\"></li>\n  </ng-container>\n</ol>\n",
                    styles: [""]
                },] }
    ];
    CarouselIndicatorsComponent.ctorParameters = function () { return [
        { type: CarouselService },
        { type: CarouselState }
    ]; };

    function toLeft(fromState, toState) {
        return toState.left === true;
    }
    function toRight(fromState, toState) {
        return toState.left === false;
    }
    var slideAnimation = animations.trigger('slideAnimation', [
        animations.state('*', animations.style({ transform: 'translateX(0)', display: 'block', opacity: 1 })),
        animations.transition(toLeft, animations.group([
            animations.query(':leave', [
                animations.animate('0.6s ease-in-out', animations.style({
                    transform: 'translateX(-100%)',
                })),
            ], { optional: true }),
            animations.query(':enter', [
                animations.style({
                    transform: 'translateX(100%)',
                }),
                animations.animate('0.6s ease-in-out', animations.style('*')),
            ], { optional: true }),
        ])),
        animations.transition(toRight, animations.group([
            animations.query(':enter', [
                animations.style({
                    transform: 'translateX(-100%)',
                }),
                animations.animate('0.6s ease-in-out', animations.style('*')),
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('0.6s ease-in-out', animations.style({
                    transform: 'translateX(100%)',
                })),
            ], { optional: true }),
        ])),
    ]);

    var CarouselItemComponent = /** @class */ (function () {
        function CarouselItemComponent(carouselService) {
            this.carouselService = carouselService;
        }
        Object.defineProperty(CarouselItemComponent.prototype, "active", {
            get: function () {
                return this._active;
            },
            set: function (active) {
                this._active = active;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CarouselItemComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CarouselItemComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    'carousel-item': true,
                    active: this.active,
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        CarouselItemComponent.prototype.ngOnInit = function () { };
        CarouselItemComponent.prototype.ngOnDestroy = function () {
            this.carouselStateSubscribe(false);
        };
        CarouselItemComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.carouselStateSubscribe();
            });
        };
        CarouselItemComponent.prototype.carouselStateSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.carouselIndexSubscription = this.carouselService.carouselIndex$.subscribe(function (nextIndex) {
                    if ('active' in nextIndex) {
                        _this.active = nextIndex.active === _this.index;
                    }
                });
            }
            else {
                this.carouselIndexSubscription.unsubscribe();
            }
        };
        return CarouselItemComponent;
    }());
    CarouselItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-carousel-item',
                    template: "<ng-content *ngIf=\"active\"></ng-content>\n",
                    styles: [":host{display:block}"]
                },] }
    ];
    CarouselItemComponent.ctorParameters = function () { return [
        { type: CarouselService }
    ]; };
    CarouselItemComponent.propDecorators = {
        active: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var CarouselInnerComponent = /** @class */ (function () {
        function CarouselInnerComponent(carouselState) {
            this.carouselState = carouselState;
            this.carouselInnerClass = true;
            this.slide = { left: true };
        }
        CarouselInnerComponent.prototype.ngOnInit = function () { };
        CarouselInnerComponent.prototype.ngAfterContentInit = function () {
            this.setItems();
        };
        CarouselInnerComponent.prototype.ngAfterContentChecked = function () {
            var _a;
            this.setItems();
            var state = (_a = this.carouselState) === null || _a === void 0 ? void 0 : _a.state;
            var nextIndex = state === null || state === void 0 ? void 0 : state.activeItemIndex;
            var nextDirection = state === null || state === void 0 ? void 0 : state.direction;
            if (this.activeIndex !== nextIndex) {
                this.animate = state === null || state === void 0 ? void 0 : state.animate;
                this.slide = { left: nextDirection === 'next' };
                this.activeIndex = state === null || state === void 0 ? void 0 : state.activeItemIndex;
            }
        };
        CarouselInnerComponent.prototype.setItems = function () {
            if (this.prevContentItems !== this.contentItems) {
                this.prevContentItems = this.contentItems;
                this.carouselState.setItems(this.contentItems);
            }
        };
        return CarouselInnerComponent;
    }());
    CarouselInnerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-carousel-inner',
                    template: "<div [@slideAnimation]=\"slide\" [@.disabled]=\"!animate\">\n  <ng-content></ng-content>\n</div>\n",
                    animations: [slideAnimation],
                    styles: [":host{display:block}"]
                },] }
    ];
    CarouselInnerComponent.ctorParameters = function () { return [
        { type: CarouselState }
    ]; };
    CarouselInnerComponent.propDecorators = {
        carouselInnerClass: [{ type: i0.HostBinding, args: ['class.carousel-inner',] }],
        contentItems: [{ type: i0.ContentChildren, args: [CarouselItemComponent,] }]
    };

    var CarouselModule = /** @class */ (function () {
        function CarouselModule() {
        }
        CarouselModule.forRoot = function () {
            return { ngModule: CarouselModule, providers: [] };
        };
        return CarouselModule;
    }());
    CarouselModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        CarouselComponent,
                        CarouselCaptionComponent,
                        CarouselControlComponent,
                        CarouselIndicatorsComponent,
                        CarouselInnerComponent,
                        CarouselItemComponent,
                    ],
                    imports: [i1.CommonModule],
                    providers: [CarouselService, CarouselState, CarouselConfig],
                    exports: [
                        CarouselComponent,
                        CarouselCaptionComponent,
                        CarouselControlComponent,
                        CarouselIndicatorsComponent,
                        CarouselInnerComponent,
                        CarouselItemComponent,
                    ],
                },] }
    ];

    var DropdownService = /** @class */ (function () {
        function DropdownService() {
            this.dropdownState = new rxjs.BehaviorSubject({});
            this.dropdownState$ = this.dropdownState.asObservable();
        }
        DropdownService.prototype.toggle = function (state) {
            this.dropdownState.next(state);
        };
        return DropdownService;
    }());
    DropdownService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DropdownService_Factory() { return new DropdownService(); }, token: DropdownService, providedIn: "root" });
    DropdownService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    DropdownService.ctorParameters = function () { return []; };

    var DropdownState = /** @class */ (function () {
        function DropdownState() {
            this.state = {
                align: '',
                caret: 'caret',
                direction: 'down',
                show: false,
            };
        }
        DropdownState.prototype.getState = function () {
            return Object.assign(Object.create(null), this.state);
        };
        DropdownState.prototype.setState = function (state) {
            this.state = Object.assign(this.state, state);
            return this.getState();
        };
        return DropdownState;
    }());
    DropdownState.decorators = [
        { type: i0.Injectable }
    ];
    DropdownState.ctorParameters = function () { return []; };

    var DropdownDirective = /** @class */ (function () {
        function DropdownDirective(renderer, hostElement, outClickService, dropdownService, dropdownState) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.outClickService = outClickService;
            this.dropdownService = dropdownService;
            this.dropdownState = dropdownState;
            this.direction = 'down';
            this.cDropdownAlign = '';
        }
        DropdownDirective.prototype.ngOnInit = function () {
            var state = { show: this.cDropdownShow, align: this.cDropdownAlign, direction: this.direction };
            this.state = this.dropdownState.setState(state);
            var dropdownClass = "drop" + (this.direction || 'down');
            this.renderer.addClass(this.hostElement.nativeElement, dropdownClass);
            this.stateToggleSubscribe();
            this.outClickSubscribe();
        };
        DropdownDirective.prototype.ngOnDestroy = function () {
            this.stateToggleSubscribe(false);
            this.outClickSubscribe(false);
        };
        DropdownDirective.prototype.ngOnChanges = function (changes) {
            if (changes.direction) {
                this.renderer.removeClass(this.hostElement.nativeElement, "drop" + (changes.direction.previousValue || 'down'));
                this.renderer.addClass(this.hostElement.nativeElement, "drop" + (changes.direction.currentValue || 'down'));
            }
            if (changes.cDropdownShow) {
                var state = { show: changes.cDropdownShow.currentValue };
                this.state = this.dropdownState.setState(state);
                this.dropdownService.toggle(this.state);
            }
        };
        DropdownDirective.prototype.ngAfterViewInit = function () {
            this.cDropdownShow = this.state.show;
            this.dropdownService.toggle(this.state);
        };
        DropdownDirective.prototype.stateToggleSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.stateToggleSubscription = this.dropdownService.dropdownState$.subscribe(function (state) {
                    if ('show' in state) {
                        _this.show(state.show);
                    }
                });
            }
            else {
                this.stateToggleSubscription.unsubscribe();
            }
        };
        DropdownDirective.prototype.show = function (show) {
            this.cDropdownShow = show;
            this.state = this.dropdownState.setState({ show: show });
            show ?
                this.renderer.addClass(this.hostElement.nativeElement, 'show') :
                this.renderer.removeClass(this.hostElement.nativeElement, 'show');
        };
        DropdownDirective.prototype.toggle = function () {
            this.show(!this.state.show);
        };
        DropdownDirective.prototype.outClickSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.outClickSubscription = this.outClickService.outClick$.subscribe(function (message) {
                    if (message.event) {
                        _this.autoClose(message.event);
                    }
                });
            }
            else {
                this.outClickSubscription.unsubscribe();
            }
        };
        DropdownDirective.prototype.autoClose = function (e) {
            var state = this.dropdownState.getState();
            if (state.show) {
                if (!this.hostElement.nativeElement.contains(e.target.closest('[cDropdownToggle]'))) {
                    this.cDropdownShow = false;
                    this.dropdownService.toggle({ show: false });
                }
            }
        };
        return DropdownDirective;
    }());
    DropdownDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cDropdown], c-dropdown',
                    exportAs: 'cDropdown',
                    providers: [DropdownService, DropdownState],
                },] }
    ];
    DropdownDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: OutClickService },
        { type: DropdownService },
        { type: DropdownState }
    ]; };
    DropdownDirective.propDecorators = {
        direction: [{ type: i0.Input, args: ['cDropdown',] }],
        cDropdownAlign: [{ type: i0.Input }],
        cDropdownShow: [{ type: i0.Input }, { type: i0.HostBinding, args: ['attr.aria-expanded',] }]
    };

    var DropdownMenuDirective = /** @class */ (function () {
        function DropdownMenuDirective(renderer, hostElement, dropdownState, dropdownService) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.dropdownState = dropdownState;
            this.dropdownService = dropdownService;
            this.role = 'menu';
            this.dropdownMenu = true;
            this.host = this.hostElement.nativeElement;
        }
        DropdownMenuDirective.prototype.ngOnInit = function () {
            this.stateToggleSubscribe();
        };
        DropdownMenuDirective.prototype.ngOnDestroy = function () {
            this.stateToggleSubscribe(false);
        };
        DropdownMenuDirective.prototype.show = function (show) {
            var className = 'show';
            show ?
                this.renderer.addClass(this.host, className) :
                this.renderer.removeClass(this.host, className);
        };
        DropdownMenuDirective.prototype.align = function (align) {
            if (align) {
                var className = "dropdown-menu-" + align;
                this.renderer.addClass(this.host, className);
            }
        };
        DropdownMenuDirective.prototype.stateToggleSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.stateToggleSubscription = this.dropdownService.dropdownState$.subscribe(function (state) {
                    if ('show' in state) {
                        _this.show(state.show);
                    }
                    if ('align' in state) {
                        _this.align(state.align);
                    }
                });
            }
            else {
                this.stateToggleSubscription.unsubscribe();
            }
        };
        return DropdownMenuDirective;
    }());
    DropdownMenuDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cDropdownMenu], c-dropdown-menu',
                    exportAs: 'cDropdownMenu'
                },] }
    ];
    DropdownMenuDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: DropdownState },
        { type: DropdownService }
    ]; };
    DropdownMenuDirective.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        dropdownMenu: [{ type: i0.HostBinding, args: ['class.dropdown-menu',] }]
    };

    var DropdownToggleDirective = /** @class */ (function () {
        function DropdownToggleDirective(renderer, hostElement, dropdown, dropdownService, dropdownState) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.dropdown = dropdown;
            this.dropdownService = dropdownService;
            this.dropdownState = dropdownState;
            this.cDropdownCaret = 'caret';
            this.host = this.hostElement.nativeElement;
        }
        DropdownToggleDirective.prototype.ngOnInit = function () {
            this.state = this.dropdownState.setState({ caret: this.cDropdownCaret });
            var toggleClass = 'dropdown-toggle';
            if (this.state.caret === 'none') {
                this.renderer.removeClass(this.host, toggleClass);
            }
            else {
                this.renderer.addClass(this.host, toggleClass);
                if (this.state.caret === 'split') {
                    this.renderer.addClass(this.host, toggleClass + "-split");
                }
            }
        };
        DropdownToggleDirective.prototype.toggleShow = function ($event) {
            $event.preventDefault();
            this.state = this.dropdownState.getState();
            this.dropdownService.toggle({ show: !this.state.show });
        };
        return DropdownToggleDirective;
    }());
    DropdownToggleDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cDropdownToggle], c-dropdown-toggle',
                    exportAs: 'cDropdownToggle',
                },] }
    ];
    DropdownToggleDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: DropdownDirective },
        { type: DropdownService },
        { type: DropdownState }
    ]; };
    DropdownToggleDirective.propDecorators = {
        cDropdownCaret: [{ type: i0.Input }],
        toggleShow: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var DropdownHeaderDirective = /** @class */ (function () {
        function DropdownHeaderDirective() {
            this.dropdownHeader = true;
        }
        return DropdownHeaderDirective;
    }());
    DropdownHeaderDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cDropdownHeader], c-dropdown-header',
                    exportAs: 'cDropdownHeader'
                },] }
    ];
    DropdownHeaderDirective.propDecorators = {
        dropdownHeader: [{ type: i0.HostBinding, args: ['class.dropdown-header',] }]
    };

    var DropdownDividerDirective = /** @class */ (function () {
        function DropdownDividerDirective() {
            this.dropdownDivider = true;
        }
        return DropdownDividerDirective;
    }());
    DropdownDividerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cDropdownDivider], c-dropdown-divider',
                    exportAs: 'cDropdownDivider'
                },] }
    ];
    DropdownDividerDirective.propDecorators = {
        dropdownDivider: [{ type: i0.HostBinding, args: ['class.dropdown-divider',] }]
    };

    var DropdownItemDirective = /** @class */ (function () {
        function DropdownItemDirective() {
            this.dropdownItem = true;
        }
        return DropdownItemDirective;
    }());
    DropdownItemDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cDropdownItem], c-dropdown-item',
                    exportAs: 'cDropdownItem',
                },] }
    ];
    DropdownItemDirective.propDecorators = {
        dropdownItem: [{ type: i0.HostBinding, args: ['class.dropdown-item',] }]
    };

    var DropdownDividerComponent = /** @class */ (function () {
        function DropdownDividerComponent() {
        }
        return DropdownDividerComponent;
    }());
    DropdownDividerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-dropdown-divider',
                    template: '<div class="dropdown-divider"></div>',
                    styles: [""]
                },] }
    ];

    var DropdownModule = /** @class */ (function () {
        function DropdownModule() {
        }
        DropdownModule.forRoot = function (config) {
            return {
                ngModule: DropdownModule,
                providers: []
            };
        };
        return DropdownModule;
    }());
    DropdownModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        DropdownDirective,
                        DropdownToggleDirective,
                        DropdownMenuDirective,
                        DropdownHeaderDirective,
                        DropdownDividerDirective,
                        DropdownItemDirective,
                        DropdownDividerComponent
                    ],
                    exports: [
                        DropdownDirective,
                        DropdownToggleDirective,
                        DropdownMenuDirective,
                        DropdownItemDirective,
                        DropdownDividerDirective,
                        DropdownHeaderDirective,
                        DropdownDividerComponent
                    ],
                    imports: [
                        i1.CommonModule
                    ],
                    providers: [
                        DropdownService,
                        DropdownState
                    ]
                },] }
    ];

    var EmbedItemDirective = /** @class */ (function () {
        function EmbedItemDirective() {
            this.embedItemClass = true;
        }
        return EmbedItemDirective;
    }());
    EmbedItemDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cEmbedItem]'
                },] }
    ];
    EmbedItemDirective.ctorParameters = function () { return []; };
    EmbedItemDirective.propDecorators = {
        embedItemClass: [{ type: i0.HostBinding, args: ['class.embed-responsive-item',] }]
    };

    var EmbedComponent = /** @class */ (function () {
        function EmbedComponent() {
            this.ratio = '16by9';
        }
        Object.defineProperty(EmbedComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EmbedComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'embed-responsive': true
                    },
                    _a["embed-responsive-" + this.ratio] = !!this.ratio,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        EmbedComponent.prototype.ngOnInit = function () { };
        EmbedComponent.prototype.ngAfterContentInit = function () {
        };
        return EmbedComponent;
    }());
    EmbedComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-embed',
                    template: "<ng-content select=\"iframe\"></ng-content>\n",
                    styles: [""]
                },] }
    ];
    EmbedComponent.ctorParameters = function () { return []; };
    EmbedComponent.propDecorators = {
        ratio: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }],
        embedItem: [{ type: i0.ContentChild, args: [EmbedItemDirective,] }]
    };

    var EmbedModule = /** @class */ (function () {
        function EmbedModule() {
        }
        return EmbedModule;
    }());
    EmbedModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [EmbedComponent, EmbedItemDirective],
                    imports: [i1.CommonModule],
                    exports: [EmbedComponent, EmbedItemDirective],
                },] }
    ];

    function chkBoolProp(prop) {
        return Boolean(prop != null && prop !== false);
    }

    var FormDirective = /** @class */ (function () {
        function FormDirective() {
        }
        Object.defineProperty(FormDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormDirective.prototype, "hostClasses", {
            get: function () {
                var classes = {
                    'form-inline': chkBoolProp(this.inline),
                    'was-validated': chkBoolProp(this.wasValidated),
                };
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return FormDirective;
    }());
    FormDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cForm]'
                },] }
    ];
    FormDirective.ctorParameters = function () { return []; };
    FormDirective.propDecorators = {
        inline: [{ type: i0.Input }],
        wasValidated: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var FormGroupComponent = /** @class */ (function () {
        function FormGroupComponent() {
        }
        Object.defineProperty(FormGroupComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormGroupComponent.prototype, "hostClasses", {
            get: function () {
                var classes = {
                    'form-group': true,
                    disabled: chkBoolProp(this.disabled)
                };
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        FormGroupComponent.prototype.ngOnInit = function () {
        };
        return FormGroupComponent;
    }());
    FormGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-form-group',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host:not(.row):not(.form-check-inline):not(.custom-control-inline){display:block}"]
                },] }
    ];
    FormGroupComponent.ctorParameters = function () { return []; };
    FormGroupComponent.propDecorators = {
        inline: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var FormFeedbackComponent = /** @class */ (function () {
        function FormFeedbackComponent() {
        }
        Object.defineProperty(FormFeedbackComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormFeedbackComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var validMode = this.tooltip ? 'tooltip' : 'feedback';
                var classes = (_a = {},
                    _a["valid-" + validMode] = this.valid === true,
                    _a["invalid-" + validMode] = this.valid !== true,
                    _a);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return FormFeedbackComponent;
    }());
    FormFeedbackComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-form-feedback',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    FormFeedbackComponent.ctorParameters = function () { return []; };
    FormFeedbackComponent.propDecorators = {
        valid: [{ type: i0.Input }],
        tooltip: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var FormTextComponent = /** @class */ (function () {
        function FormTextComponent() {
            this.tag = 'small';
            this.color = 'muted';
        }
        Object.defineProperty(FormTextComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormTextComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = (_a = {
                        'form-text': true
                    },
                    _a["" + this.tag] = true,
                    _a["text-" + this.color] = !!this.color,
                    _a);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return FormTextComponent;
    }());
    FormTextComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-form-text',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    FormTextComponent.ctorParameters = function () { return []; };
    FormTextComponent.propDecorators = {
        tag: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var InputDirective = /** @class */ (function () {
        function InputDirective(hostElement) {
            this.hostElement = hostElement;
            this.sizing = '';
            this.type = 'text';
            this.host = this.hostElement.nativeElement;
        }
        Object.defineProperty(InputDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var isPlainText = this.isPlainText;
                var isCustom = chkBoolProp(this.custom);
                var classes = classNames__default['default']((_a = {
                        'form-control': !isPlainText && this.isFormControl,
                        'form-control-plaintext': isPlainText,
                        'form-control-range': this.type === 'range',
                        'form-control-file': this.type === 'file' && !isCustom,
                        'custom-file-input': this.type === 'file' && isCustom,
                        'form-check-input': this.isFormCheck && !isCustom,
                        'custom-control-input': this.isFormCheck && isCustom
                    },
                    _a["form-control-" + this.sizing] = !!this.sizing,
                    _a['is-valid'] = this.valid === true,
                    _a['is-invalid'] = this.valid === false,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputDirective.prototype, "isPlainText", {
            get: function () {
                return chkBoolProp(this.plaintext);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputDirective.prototype, "isFormControl", {
            get: function () {
                var nonTextControls = ['range', 'checkbox', 'radio', 'file'];
                return !nonTextControls.includes(this.type);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputDirective.prototype, "isFormCheck", {
            get: function () {
                var formCheck = ['checkbox', 'radio'];
                return formCheck.includes(this.type);
            },
            enumerable: false,
            configurable: true
        });
        InputDirective.prototype.ngOnInit = function () { };
        Object.defineProperty(InputDirective.prototype, "attributes", {
            get: function () {
                return this.host.getAttributeNames();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputDirective.prototype, "isReadonly", {
            get: function () {
                return this.host.getAttribute('readonly') != null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputDirective.prototype, "isDisabled", {
            get: function () {
                return this.host.getAttribute('disabled') != null;
            },
            enumerable: false,
            configurable: true
        });
        return InputDirective;
    }());
    InputDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cInput]',
                },] }
    ];
    InputDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    InputDirective.propDecorators = {
        valid: [{ type: i0.Input }],
        plaintext: [{ type: i0.Input }],
        sizing: [{ type: i0.Input }],
        custom: [{ type: i0.Input }],
        type: [{ type: i0.HostBinding, args: ['type',] }, { type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var InputGroupComponent = /** @class */ (function () {
        function InputGroupComponent() {
            this.size = '';
        }
        Object.defineProperty(InputGroupComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputGroupComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = (_a = {
                        'input-group': true
                    },
                    _a["input-group-" + this.size] = !!this.size,
                    _a);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        InputGroupComponent.prototype.ngOnInit = function () { };
        return InputGroupComponent;
    }());
    InputGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-input-group',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    InputGroupComponent.ctorParameters = function () { return []; };
    InputGroupComponent.propDecorators = {
        size: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var InputGroupTextComponent = /** @class */ (function () {
        function InputGroupTextComponent() {
        }
        Object.defineProperty(InputGroupTextComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputGroupTextComponent.prototype, "hostClasses", {
            get: function () {
                var classes = {
                    'input-group-text': true,
                };
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        InputGroupTextComponent.prototype.ngOnInit = function () { };
        return InputGroupTextComponent;
    }());
    InputGroupTextComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-input-group-text',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    InputGroupTextComponent.ctorParameters = function () { return []; };
    InputGroupTextComponent.propDecorators = {
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var InputGroupAddonComponent = /** @class */ (function () {
        function InputGroupAddonComponent() {
        }
        Object.defineProperty(InputGroupAddonComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputGroupAddonComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var addon = chkBoolProp(this.prepend) ? 'prepend' : 'append';
                var classes = (_a = {},
                    _a["input-group-" + addon] = true,
                    _a);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        InputGroupAddonComponent.prototype.ngOnInit = function () { };
        return InputGroupAddonComponent;
    }());
    InputGroupAddonComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "<ng-content></ng-content>\n",
                    styles: [":host ::ng-deep .btn:not(:hover):not(:focus){box-shadow:none!important}"]
                },] }
    ];
    InputGroupAddonComponent.ctorParameters = function () { return []; };
    InputGroupAddonComponent.propDecorators = {
        prepend: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };
    var InputGroupPrependComponent = /** @class */ (function (_super) {
        __extends(InputGroupPrependComponent, _super);
        function InputGroupPrependComponent() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.prepend = true;
            return _this;
        }
        return InputGroupPrependComponent;
    }(InputGroupAddonComponent));
    InputGroupPrependComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-input-group-prepend',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host ::ng-deep .btn:not(:hover):not(:focus){box-shadow:none!important}"]
                },] }
    ];
    var InputGroupAppendComponent = /** @class */ (function (_super) {
        __extends(InputGroupAppendComponent, _super);
        function InputGroupAppendComponent() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.prepend = false;
            return _this;
        }
        return InputGroupAppendComponent;
    }(InputGroupAddonComponent));
    InputGroupAppendComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-input-group-append',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host ::ng-deep .btn:not(:hover):not(:focus){box-shadow:none!important}"]
                },] }
    ];

    var TextareaDirective = /** @class */ (function () {
        function TextareaDirective() {
            this.sizing = '';
        }
        Object.defineProperty(TextareaDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TextareaDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var isPlainText = this.isPlainText;
                var classes = classNames__default['default']((_a = {
                        'form-control': !isPlainText,
                        'form-control-plaintext': isPlainText
                    },
                    _a["form-control-" + this.sizing] = !!this.sizing,
                    _a['is-valid'] = this.valid === true,
                    _a['is-invalid'] = this.valid === false,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TextareaDirective.prototype, "isPlainText", {
            get: function () {
                return chkBoolProp(this.plaintext);
            },
            enumerable: false,
            configurable: true
        });
        return TextareaDirective;
    }());
    TextareaDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cTextarea]'
                },] }
    ];
    TextareaDirective.propDecorators = {
        valid: [{ type: i0.Input }],
        plaintext: [{ type: i0.Input }],
        sizing: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var SelectDirective = /** @class */ (function () {
        function SelectDirective() {
            this.sizing = '';
        }
        Object.defineProperty(SelectDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SelectDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var isCustom = chkBoolProp(this.custom);
                var classes = classNames__default['default']((_a = {
                        'form-control': !isCustom
                    },
                    _a["form-control-" + this.sizing] = !!this.sizing && !isCustom,
                    _a['custom-select'] = isCustom,
                    _a["custom-select-" + this.sizing] = !!this.sizing && isCustom,
                    _a['is-valid'] = this.valid === true,
                    _a['is-invalid'] = this.valid === false,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return SelectDirective;
    }());
    SelectDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cSelect]'
                },] }
    ];
    SelectDirective.ctorParameters = function () { return []; };
    SelectDirective.propDecorators = {
        valid: [{ type: i0.Input }],
        custom: [{ type: i0.Input }],
        sizing: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var LabelDirective = /** @class */ (function () {
        function LabelDirective() {
            this.col = '';
            this.sizing = '';
        }
        Object.defineProperty(LabelDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LabelDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var isCustom = chkBoolProp(this.custom);
                var classes = classNames__default['default']((_a = {
                        'custom-control-label': isCustom,
                        'custom-file-label': isCustom && this.variant === 'file',
                        'form-check-label': !isCustom && ['checkbox', 'radio', 'switch'].includes(this.variant),
                        'sr-only': chkBoolProp(this.hidden),
                        'visually-hidden': chkBoolProp(this.hidden),
                        'col-form-label': this.col === 'col'
                    },
                    _a["col-form-label-" + this.sizing] = !!this.sizing && this.col === 'col',
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return LabelDirective;
    }());
    LabelDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cLabel]'
                },] }
    ];
    LabelDirective.ctorParameters = function () { return []; };
    LabelDirective.propDecorators = {
        col: [{ type: i0.Input, args: ['cLabel',] }],
        hidden: [{ type: i0.Input }],
        variant: [{ type: i0.Input }],
        sizing: [{ type: i0.Input }],
        custom: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var FormCheckComponent = /** @class */ (function () {
        function FormCheckComponent() {
        }
        Object.defineProperty(FormCheckComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FormCheckComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                if (this.variant === 'switch') {
                    this.custom = true;
                }
                var variantClass = this.custom ? 'custom-control' : 'form-check';
                var isCustom = chkBoolProp(this.custom);
                var classes = (_a = {
                        'form-check': !isCustom,
                        'custom-control': isCustom
                    },
                    _a["custom-" + this.variant] = !!this.variant,
                    _a[variantClass + "-inline"] = chkBoolProp(this.inline),
                    _a.disabled = chkBoolProp(this.disabled),
                    _a);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        FormCheckComponent.prototype.ngOnInit = function () {
        };
        return FormCheckComponent;
    }());
    FormCheckComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-form-check',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    FormCheckComponent.ctorParameters = function () { return []; };
    FormCheckComponent.propDecorators = {
        custom: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        inline: [{ type: i0.Input }],
        variant: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var FormModule = /** @class */ (function () {
        function FormModule() {
        }
        return FormModule;
    }());
    FormModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        FormDirective,
                        FormCheckComponent,
                        FormFeedbackComponent,
                        FormGroupComponent,
                        FormTextComponent,
                        InputDirective,
                        InputGroupComponent,
                        InputGroupTextComponent,
                        InputGroupAddonComponent,
                        InputGroupPrependComponent,
                        InputGroupAppendComponent,
                        TextareaDirective,
                        SelectDirective,
                        LabelDirective
                    ],
                    imports: [
                        i1.CommonModule
                    ],
                    exports: [
                        FormDirective,
                        FormCheckComponent,
                        FormFeedbackComponent,
                        FormGroupComponent,
                        FormTextComponent,
                        InputDirective,
                        InputGroupComponent,
                        InputGroupTextComponent,
                        InputGroupPrependComponent,
                        InputGroupAppendComponent,
                        TextareaDirective,
                        SelectDirective,
                        LabelDirective
                    ]
                },] }
    ];

    var ContainerComponent = /** @class */ (function () {
        function ContainerComponent() {
            this.fluid = false;
        }
        Object.defineProperty(ContainerComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContainerComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    container: !this.fluid,
                    'container-fluid': !!this.fluid
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return ContainerComponent;
    }());
    ContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-container, [cContainer]',
                    template: '<ng-content></ng-content>',
                    styles: [":host{display:block}"]
                },] }
    ];
    ContainerComponent.propDecorators = {
        fluid: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var RowDirective = /** @class */ (function () {
        function RowDirective() {
            this.noGutters = false;
        }
        Object.defineProperty(RowDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RowDirective.prototype, "hostClasses", {
            get: function () {
                var alignV = "align-items-" + this.alignV;
                var alignH = "justify-content-" + this.alignH;
                var classes = { row: true };
                classes['no-gutters'] = !!this.noGutters;
                classes[alignV] = !!this.alignV;
                classes[alignH] = !!this.alignH;
                return classNames__default['default'](classes);
            },
            enumerable: false,
            configurable: true
        });
        return RowDirective;
    }());
    RowDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cRow]'
                },] }
    ];
    RowDirective.propDecorators = {
        noGutters: [{ type: i0.Input }],
        alignV: [{ type: i0.Input }],
        alignH: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var RowComponent = /** @class */ (function (_super) {
        __extends(RowComponent, _super);
        function RowComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RowComponent;
    }(RowDirective));
    RowComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-row',
                    template: '<ng-content></ng-content>',
                    styles: [""]
                },] }
    ];

    var ColDirective = /** @class */ (function () {
        function ColDirective() {
            this.suffix = {
                xs: '-xs',
                sm: '-sm',
                md: '-md',
                lg: '-lg',
                xl: '-xl',
                xxl: '-xxl',
                col: ''
            };
        }
        Object.defineProperty(ColDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ColDirective.prototype, "hostClasses", {
            get: function () {
                var _this = this;
                var classes = Object.create(null);
                var suffix = this.suffix;
                var addColClass = false;
                Object.keys(suffix).forEach(function (key) {
                    var prop = _this[key];
                    var breakpoint = suffix[key];
                    classes["col" + breakpoint] = prop === true;
                    classes["col" + breakpoint + "-" + prop] = (typeof prop === 'number') || (typeof prop === 'string');
                    if (typeof prop === 'object') {
                        classes["col" + breakpoint + "-" + prop.size] = !!prop.size;
                        classes["offset" + breakpoint + "-" + prop.offset] = !!prop.offset;
                        classes["order" + breakpoint + "-" + prop.order] = !!prop.order;
                        addColClass = addColClass || !!prop.offset || !!prop.order;
                    }
                });
                classes = classNames__default['default'](addColClass ? 'col' : '', classes);
                return classes || 'col';
            },
            enumerable: false,
            configurable: true
        });
        return ColDirective;
    }());
    ColDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cCol]'
                },] }
    ];
    ColDirective.propDecorators = {
        xs: [{ type: i0.Input }],
        sm: [{ type: i0.Input }],
        md: [{ type: i0.Input }],
        lg: [{ type: i0.Input }],
        xl: [{ type: i0.Input }],
        xxl: [{ type: i0.Input }],
        col: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ColComponent = /** @class */ (function (_super) {
        __extends(ColComponent, _super);
        function ColComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ColComponent;
    }(ColDirective));
    ColComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-col',
                    template: '<ng-content></ng-content>',
                    styles: [":host{display:block}"]
                },] }
    ];

    var GridModule = /** @class */ (function () {
        function GridModule() {
        }
        return GridModule;
    }());
    GridModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    exports: [
                        ContainerComponent,
                        RowComponent,
                        ColComponent,
                        RowDirective,
                        ColDirective,
                    ],
                    declarations: [
                        ContainerComponent,
                        RowComponent,
                        ColComponent,
                        RowDirective,
                        ColDirective,
                    ],
                    providers: [],
                },] }
    ];

    var ImgDirective = /** @class */ (function () {
        function ImgDirective() {
            this.align = '';
            this.placeholderColor = 'transparent';
        }
        Object.defineProperty(ImgDirective.prototype, "getStyles", {
            get: function () {
                return { backgroundColor: this.placeholderColor };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImgDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImgDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default'](this.alignClass, (_a = {
                        'img-thumbnail': this.thumbnail,
                        'img-fluid': this.fluid || this.fluidGrow,
                        'w-100': this.fluidGrow,
                        'd-block': this.block
                    },
                    _a["" + this.shape] = this.shape,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImgDirective.prototype, "alignClass", {
            get: function () {
                return this.align === 'center' ? 'mx-auto' :
                    this.align === 'right' ? 'float-right' :
                        this.align === 'left' ? 'float-left' : '';
            },
            enumerable: false,
            configurable: true
        });
        ImgDirective.prototype.ngOnInit = function () { };
        return ImgDirective;
    }());
    ImgDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cImg]'
                },] }
    ];
    ImgDirective.ctorParameters = function () { return []; };
    ImgDirective.propDecorators = {
        block: [{ type: i0.Input }],
        fluid: [{ type: i0.Input }],
        fluidGrow: [{ type: i0.Input }],
        shape: [{ type: i0.Input }],
        thumbnail: [{ type: i0.Input }],
        align: [{ type: i0.Input }],
        placeholderColor: [{ type: i0.Input }],
        getStyles: [{ type: i0.HostBinding, args: ['style',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ImgModule = /** @class */ (function () {
        function ImgModule() {
        }
        return ImgModule;
    }());
    ImgModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule
                    ],
                    exports: [
                        ImgDirective
                    ],
                    declarations: [
                        ImgDirective
                    ],
                },] }
    ];

    var BodyComponent = /** @class */ (function () {
        function BodyComponent() {
            this.bodyClass = true;
        }
        return BodyComponent;
    }());
    BodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-body, [c-body]',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{display:flex;flex-direction:column}"]
                },] }
    ];
    BodyComponent.propDecorators = {
        bodyClass: [{ type: i0.HostBinding, args: ['class.c-body',] }]
    };

    var FooterComponent = /** @class */ (function () {
        function FooterComponent(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.fixedClass = 'c-footer-fixed';
            renderer.addClass(hostElement.nativeElement, 'c-footer');
        }
        FooterComponent.prototype.ngOnInit = function () {
            this.isFixed(this.fixed);
        };
        FooterComponent.prototype.ngOnDestroy = function () {
            this.renderer.removeClass(this.hostElement.nativeElement, this.fixedClass);
        };
        FooterComponent.prototype.isFixed = function (fixed) {
            if (fixed === void 0) { fixed = this.fixed; }
            if (fixed) {
                this.renderer.addClass(this.hostElement.nativeElement, this.fixedClass);
            }
        };
        return FooterComponent;
    }());
    FooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-footer, [c-footer]',
                    template: "<ng-content></ng-content>",
                    styles: [""]
                },] }
    ];
    FooterComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    FooterComponent.propDecorators = {
        fixed: [{ type: i0.Input }]
    };

    var HeaderComponent = /** @class */ (function () {
        function HeaderComponent() {
            this.colorScheme = 'light';
            this.fixed = true;
            this.role = 'header';
        }
        Object.defineProperty(HeaderComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HeaderComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default'](this.ngClass, this.class, {
                    'c-header': true,
                    'c-header-fixed': this.fixed,
                }, "c-header-" + this.colorScheme);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return HeaderComponent;
    }());
    HeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-header, [c-header]',
                    template: "<ng-content></ng-content>",
                    styles: [""]
                },] }
    ];
    HeaderComponent.ctorParameters = function () { return []; };
    HeaderComponent.propDecorators = {
        colorScheme: [{ type: i0.Input }],
        fixed: [{ type: i0.Input }],
        class: [{ type: i0.Input }],
        ngClass: [{ type: i0.Input }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var SidebarService = /** @class */ (function () {
        function SidebarService() {
            this.sidebarState = new rxjs.BehaviorSubject({});
            this.sidebarState$ = this.sidebarState.asObservable();
        }
        SidebarService.prototype.toggle = function (action) {
            this.sidebarState.next(action);
        };
        return SidebarService;
    }());
    SidebarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SidebarService_Factory() { return new SidebarService(); }, token: SidebarService, providedIn: "root" });
    SidebarService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    SidebarService.ctorParameters = function () { return []; };

    var HeaderBrandComponent = /** @class */ (function () {
        function HeaderBrandComponent(sidebarService) {
            this.sidebarService = sidebarService;
            this.routerLink = '';
            this.minimized = false;
        }
        HeaderBrandComponent.prototype.ngOnInit = function () {
            this.stateToggleSubscribe();
        };
        HeaderBrandComponent.prototype.ngOnDestroy = function () {
            this.stateToggleSubscribe(false);
        };
        HeaderBrandComponent.prototype.minimize = function (force) {
            this.minimized = (force === 'toggle') ? !this.minimized : force;
        };
        HeaderBrandComponent.prototype.stateToggleSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.stateToggleSubscription = this.sidebarService.sidebarState$.subscribe(function (state) {
                    if (!state.id) {
                        if ('minimize' in state) {
                            _this.minimize(state.minimize);
                        }
                    }
                });
            }
            else {
                this.stateToggleSubscription.unsubscribe();
            }
        };
        return HeaderBrandComponent;
    }());
    HeaderBrandComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-header-brand',
                    template: "<a class=\"c-header-brand\" [routerLink]=\"routerLink\" role=\"button\">\r\n  <ng-template [ngIf]=\"minimized\">\r\n    <ng-content></ng-content>\r\n  </ng-template>\r\n  <ng-template [ngIf]=\"!minimized\">\r\n    <ng-content></ng-content>\r\n  </ng-template>\r\n</a>\r\n\r\n"
                },] }
    ];
    HeaderBrandComponent.ctorParameters = function () { return [
        { type: SidebarService }
    ]; };
    HeaderBrandComponent.propDecorators = {
        routerLink: [{ type: i0.Input }],
        minimized: [{ type: i0.Input }]
    };

    var SubheaderComponent = /** @class */ (function () {
        function SubheaderComponent() {
        }
        Object.defineProperty(SubheaderComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SubheaderComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default'](this.ngClass, this.class, {
                    'c-subheader': true,
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        SubheaderComponent.prototype.ngOnInit = function () {
        };
        return SubheaderComponent;
    }());
    SubheaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-subheader, [c-subheader]',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    SubheaderComponent.ctorParameters = function () { return []; };
    SubheaderComponent.propDecorators = {
        class: [{ type: i0.Input }],
        ngClass: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var WrapperComponent = /** @class */ (function () {
        function WrapperComponent() {
            this.fluid = false;
        }
        Object.defineProperty(WrapperComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WrapperComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    'c-wrapper': true,
                    'c-wrapper-fluid': !!this.fluid
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return WrapperComponent;
    }());
    WrapperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-wrapper, [c-wrapper]',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    WrapperComponent.propDecorators = {
        fluid: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var LayoutModule = /** @class */ (function () {
        function LayoutModule() {
        }
        return LayoutModule;
    }());
    LayoutModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        i1$1.RouterModule,
                    ],
                    exports: [
                        BodyComponent,
                        FooterComponent,
                        HeaderComponent,
                        HeaderBrandComponent,
                        SubheaderComponent,
                        WrapperComponent
                    ],
                    declarations: [
                        FooterComponent,
                        HeaderComponent,
                        HeaderBrandComponent,
                        SubheaderComponent,
                        WrapperComponent,
                        BodyComponent,
                    ],
                    providers: []
                },] }
    ];

    var ListGroupDirective = /** @class */ (function () {
        function ListGroupDirective() {
        }
        Object.defineProperty(ListGroupDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListGroupDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'list-group': true,
                        'list-group-horizontal': this.horizontal === true || this.horizontal === ''
                    },
                    _a["list-group-horizontal-" + this.horizontal] = this.horizontal && this.horizontal !== true,
                    _a['list-group-flush'] = !!this.flush,
                    _a['list-group-accent'] = !!this.accent,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return ListGroupDirective;
    }());
    ListGroupDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cListGroup], c-list-group'
                },] }
    ];
    ListGroupDirective.ctorParameters = function () { return []; };
    ListGroupDirective.propDecorators = {
        horizontal: [{ type: i0.Input }],
        accent: [{ type: i0.Input }],
        flush: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ListGroupItemDirective = /** @class */ (function () {
        function ListGroupItemDirective(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.host = this.hostElement.nativeElement;
        }
        Object.defineProperty(ListGroupItemDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListGroupItemDirective.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'list-group-item': true,
                        'list-group-item-action': this.action,
                        'list-group-item-divider': this.divider,
                        active: this.active,
                        disabled: this.disabled
                    },
                    _a["list-group-item-" + this.color] = !!this.color,
                    _a["list-group-item-accent-" + this.accent] = !!this.accent,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        ListGroupItemDirective.prototype.ngOnInit = function () { };
        ListGroupItemDirective.prototype.ngOnChanges = function (changes) {
            if (changes.color) {
                this.renderer.addClass(this.host, "list-group-item-" + changes.color.currentValue);
                this.renderer.removeClass(this.host, "list-group-item-" + changes.color.previousValue);
            }
            if (changes.accent) {
                this.renderer.addClass(this.host, "list-group-item-accent-" + changes.accent.currentValue);
                this.renderer.removeClass(this.host, "list-group-item-accent-" + changes.accent.previousValue);
            }
        };
        return ListGroupItemDirective;
    }());
    ListGroupItemDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cListGroupItem], c-list-group-item',
                    exportAs: 'cListGroupItem'
                },] }
    ];
    ListGroupItemDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    ListGroupItemDirective.propDecorators = {
        accent: [{ type: i0.Input }],
        action: [{ type: i0.Input }],
        active: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        divider: [{ type: i0.Input }],
        disabled: [{ type: i0.HostBinding, args: ['attr.disabled',] }, { type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ListGroupModule = /** @class */ (function () {
        function ListGroupModule() {
        }
        return ListGroupModule;
    }());
    ListGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ListGroupDirective, ListGroupItemDirective],
                    exports: [
                        ListGroupDirective,
                        ListGroupItemDirective
                    ],
                    imports: [
                        i1.CommonModule
                    ]
                },] }
    ];

    var MediaDirective = /** @class */ (function () {
        function MediaDirective() {
            this.madiaClass = true;
        }
        return MediaDirective;
    }());
    MediaDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cMedia]',
                },] }
    ];
    MediaDirective.propDecorators = {
        madiaClass: [{ type: i0.HostBinding, args: ['class.media',] }]
    };

    var MediaComponent = /** @class */ (function (_super) {
        __extends(MediaComponent, _super);
        function MediaComponent() {
            return _super.call(this) || this;
        }
        return MediaComponent;
    }(MediaDirective));
    MediaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-media',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    MediaComponent.ctorParameters = function () { return []; };

    var MediaBodyComponent = /** @class */ (function () {
        function MediaBodyComponent() {
            this.mediaBodyClass = true;
        }
        return MediaBodyComponent;
    }());
    MediaBodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-media-body',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    MediaBodyComponent.propDecorators = {
        mediaBodyClass: [{ type: i0.HostBinding, args: ['class.media-body',] }]
    };

    var MediaModule = /** @class */ (function () {
        function MediaModule() {
        }
        return MediaModule;
    }());
    MediaModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [MediaComponent, MediaBodyComponent, MediaDirective],
                    imports: [i1.CommonModule],
                    exports: [MediaDirective, MediaComponent, MediaBodyComponent],
                },] }
    ];

    var ModalComponent = /** @class */ (function () {
        function ModalComponent(document, renderer, elementRef, changeDetectorRef) {
            this.document = document;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.changeDetectorRef = changeDetectorRef;
            this.closeOnBackdrop = true;
            this.size = '';
            this.color = '';
            this.modalClasses = {
                modal: true,
                fade: true
            };
            this.dialogClasses = {
                'modal-dialog': true
            };
            this.backdropClasses = {
                'modal-backdrop': true,
                fade: true,
                show: true
            };
            this.visible = false;
            this.visibleAnimate = false;
        }
        ModalComponent.prototype.ngOnInit = function () {
            this.setClasses();
        };
        ModalComponent.prototype.ngOnDestroy = function () {
            this.hide();
        };
        ModalComponent.prototype.setClasses = function () {
            this.dialogClasses["modal-" + this.size] = !!this.size;
            this.dialogClasses["modal-" + this.color] = !!this.color;
        };
        ModalComponent.prototype.show = function () {
            var _this = this;
            this.renderer.addClass(this.document.body, 'modal-open');
            this.visible = true;
            this.modalClasses["d-block"] = true;
            setTimeout(function () {
                _this.visibleAnimate = true;
            });
        };
        ModalComponent.prototype.hide = function () {
            var _this = this;
            this.renderer.removeClass(this.document.body, 'modal-open');
            this.visibleAnimate = false;
            setTimeout(function () {
                _this.visible = false;
                _this.modalClasses["d-block"] = false;
                _this.changeDetectorRef.markForCheck();
            }, 200);
        };
        ModalComponent.prototype.onContainerClicked = function (event) {
            if (event.target.classList.contains('modal') && this.isTopmost() && this.closeOnBackdrop) {
                this.hide();
            }
        };
        ModalComponent.prototype.onKeyDownHandler = function (event) {
            if (event.key === 'Escape' && this.isTopmost()) {
                this.hide();
            }
        };
        ModalComponent.prototype.isTopmost = function () {
            var isTopmost = !this.elementRef.nativeElement.querySelector(':scope c-modal > .modal');
            return isTopmost;
        };
        return ModalComponent;
    }());
    ModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-modal',
                    template: "<div\n  role=\"dialog\"\n  tabindex=\"-1\"\n  [class.show]=\"visibleAnimate\"\n  [ngClass]=\"modalClasses\"\n  *ngIf=\"visible\">\n  <div [ngClass]=\"dialogClasses\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <ng-container *ngTemplateOutlet=\"header\" class=\"modal-title\"></ng-container>\n        <button class=\"close\" data-dismiss=\"modal\" type=\"button\" aria-label=\"Close\" (click)=\"hide()\">\u00D7</button>\n      </div>\n      <div class=\"modal-body\">\n        <ng-container *ngTemplateOutlet=\"body\"></ng-container>\n      </div>\n      <div class=\"modal-footer\">\n        <ng-container *ngTemplateOutlet=\"footer\"></ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n<div\n  *ngIf=\"visibleAnimate\"\n  [ngClass]=\"backdropClasses\">\n</div>\n",
                    styles: [""]
                },] }
    ];
    ModalComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    ModalComponent.propDecorators = {
        header: [{ type: i0.ContentChild, args: ['modalHeader', { static: true },] }],
        body: [{ type: i0.ContentChild, args: ['modalBody', { static: true },] }],
        footer: [{ type: i0.ContentChild, args: ['modalFooter', { static: true },] }],
        closeOnBackdrop: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        onContainerClicked: [{ type: i0.HostListener, args: ['click', ['$event'],] }],
        onKeyDownHandler: [{ type: i0.HostListener, args: ['document:keydown', ['$event'],] }]
    };

    var ModalModule = /** @class */ (function () {
        function ModalModule() {
        }
        return ModalModule;
    }());
    ModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ModalComponent],
                    exports: [ModalComponent],
                    imports: [
                        i1.CommonModule
                    ]
                },] }
    ];

    var NavComponent = /** @class */ (function () {
        function NavComponent() {
            this.variant = '';
        }
        Object.defineProperty(NavComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var verticalSuffix = this.vertical === true ? '' : "-" + this.vertical;
                var classes = classNames__default['default']((_a = {
                        nav: true
                    },
                    _a["nav-" + this.variant] = this.variant,
                    _a["flex" + verticalSuffix + "-column"] = this.vertical,
                    _a['nav-fill'] = this.fill,
                    _a['nav-justified'] = this.justified,
                    _a["card-header-" + this.variant] = this.inCard && this.variant,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        NavComponent.prototype.ngOnInit = function () { };
        return NavComponent;
    }());
    NavComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-nav',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host>.nav-link:focus{outline:0}"]
                },] }
    ];
    NavComponent.ctorParameters = function () { return []; };
    NavComponent.propDecorators = {
        variant: [{ type: i0.Input }],
        fill: [{ type: i0.Input }],
        justified: [{ type: i0.Input }],
        vertical: [{ type: i0.Input }],
        inCard: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var NavItemComponent = /** @class */ (function () {
        function NavItemComponent() {
        }
        Object.defineProperty(NavItemComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavItemComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    'nav-item': true,
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        NavItemComponent.prototype.ngOnInit = function () {
        };
        return NavItemComponent;
    }());
    NavItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-nav-item',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{display:list-item;text-align:match-parent}"]
                },] }
    ];
    NavItemComponent.ctorParameters = function () { return []; };
    NavItemComponent.propDecorators = {
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var NavLinkDirective = /** @class */ (function () {
        function NavLinkDirective() {
            this.disabled = null;
            this.tabindex = null;
        }
        Object.defineProperty(NavLinkDirective.prototype, "isDisabled", {
            get: function () {
                return (this.disabled !== 'false' && this.disabled !== false && this.disabled !== null) ? this.disabled : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavLinkDirective.prototype, "getTabindex", {
            get: function () {
                return this.disabled ? null : this.tabindex != null ? this.tabindex : '0';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavLinkDirective.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavLinkDirective.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    'nav-link': true,
                    disabled: this.disabled,
                    active: this.active
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return NavLinkDirective;
    }());
    NavLinkDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cNavLink]',
                },] }
    ];
    NavLinkDirective.ctorParameters = function () { return []; };
    NavLinkDirective.propDecorators = {
        disabled: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        active: [{ type: i0.Input }],
        isDisabled: [{ type: i0.HostBinding, args: ['attr.aria-disabled',] }],
        getTabindex: [{ type: i0.HostBinding, args: ['attr.tabindex',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var NavModule = /** @class */ (function () {
        function NavModule() {
        }
        return NavModule;
    }());
    NavModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [NavComponent, NavItemComponent, NavLinkDirective],
                    imports: [
                        i1.CommonModule
                    ],
                    exports: [NavComponent, NavItemComponent, NavLinkDirective]
                },] }
    ];

    var NavbarComponent = /** @class */ (function () {
        function NavbarComponent(hostElement, breakpointObserver) {
            this.hostElement = hostElement;
            this.breakpointObserver = breakpointObserver;
        }
        Object.defineProperty(NavbarComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavbarComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var expandClassSuffix = this.expandable === true ? '' : "-" + this.expandable;
                var classes = classNames__default['default']((_a = {
                        navbar: true,
                        'navbar-light': this.light,
                        'navbar-dark': !this.light
                    },
                    _a["navbar-expand" + expandClassSuffix] = !!this.expandable,
                    _a["bg-" + this.color] = !!this.color,
                    _a["fixed-" + this.fixed] = !!this.fixed,
                    _a['sticky-top'] = this.sticky,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavbarComponent.prototype, "breakpoint", {
            get: function () {
                if (typeof this.expandable === 'string') {
                    return getComputedStyle(this.hostElement.nativeElement).getPropertyValue("--breakpoint-" + this.expandable);
                }
            },
            enumerable: false,
            configurable: true
        });
        NavbarComponent.prototype.ngOnInit = function () { };
        NavbarComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.breakpoint) {
                var onBreakpoint = "(min-width: " + this.breakpoint + ")";
                this.breakpointObserver.observe([onBreakpoint]).subscribe(function (result) {
                    var animate = Object.assign({}, _this.collapse).animate;
                    _this.collapse._animate = false;
                    _this.collapse.show = false;
                    setTimeout(function () {
                        _this.collapse.show = result.matches;
                    }, 0);
                    setTimeout(function () {
                        _this.collapse._animate = animate;
                    });
                });
            }
        };
        return NavbarComponent;
    }());
    NavbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-navbar',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    NavbarComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: layout.BreakpointObserver }
    ]; };
    NavbarComponent.propDecorators = {
        light: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        fixed: [{ type: i0.Input }],
        sticky: [{ type: i0.Input }],
        expandable: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }],
        collapse: [{ type: i0.ContentChild, args: [CollapseDirective,] }]
    };

    var NavbarBrandComponent = /** @class */ (function () {
        function NavbarBrandComponent() {
            this.navbarBrand = true;
            this.role = 'button';
        }
        NavbarBrandComponent.prototype.ngOnInit = function () { };
        return NavbarBrandComponent;
    }());
    NavbarBrandComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-navbar-brand',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{outline:inherit}"]
                },] }
    ];
    NavbarBrandComponent.ctorParameters = function () { return []; };
    NavbarBrandComponent.propDecorators = {
        navbarBrand: [{ type: i0.HostBinding, args: ['class.navbar-brand',] }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    var NavbarNavComponent = /** @class */ (function () {
        function NavbarNavComponent() {
            this.navbarNav = true;
        }
        NavbarNavComponent.prototype.ngOnInit = function () { };
        return NavbarNavComponent;
    }());
    NavbarNavComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-navbar-nav',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    NavbarNavComponent.ctorParameters = function () { return []; };
    NavbarNavComponent.propDecorators = {
        navbarNav: [{ type: i0.HostBinding, args: ['class.navbar-nav',] }]
    };

    var NavbarTextComponent = /** @class */ (function () {
        function NavbarTextComponent() {
            this.navbarTextClass = true;
        }
        NavbarTextComponent.prototype.ngOnInit = function () { };
        return NavbarTextComponent;
    }());
    NavbarTextComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-navbar-text',
                    template: "<ng-content></ng-content>\n"
                },] }
    ];
    NavbarTextComponent.ctorParameters = function () { return []; };
    NavbarTextComponent.propDecorators = {
        navbarTextClass: [{ type: i0.HostBinding, args: ['class.navbar-text',] }]
    };

    var NavbarModule = /** @class */ (function () {
        function NavbarModule() {
        }
        return NavbarModule;
    }());
    NavbarModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        NavbarComponent,
                        NavbarBrandComponent,
                        NavbarNavComponent,
                        NavbarTextComponent
                    ],
                    exports: [
                        NavbarComponent,
                        NavbarBrandComponent,
                        NavbarNavComponent,
                        NavbarTextComponent
                    ],
                    imports: [
                        i1.CommonModule,
                        i1$1.RouterModule
                    ]
                },] }
    ];

    var ProgressComponent = /** @class */ (function () {
        function ProgressComponent() {
        }
        Object.defineProperty(ProgressComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProgressComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        progress: true
                    },
                    _a["progress-" + this.size] = !!this.size,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return ProgressComponent;
    }());
    ProgressComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-progress',
                    template: "<ng-content></ng-content>\n<!--<ng-template [ngIf]=\"stacked.length>0\">-->\n<!--  <c-progress-bar *ngFor=\"let item of stacked\"-->\n<!--                    [value]=\"item.value\"-->\n<!--                    [variant]=\"item.variant\"-->\n<!--                    [animate]=\"item.animate\"-->\n<!--                    [striped]=\"item.striped\"-->\n<!--                    [min]=\"item.min || min || 0\"-->\n<!--                    [max]=\"item.max || max || 100\">-->\n<!--    {{item.label || (item.value/100 | percent)}}-->\n<!--  </c-progress-bar>-->\n<!--</ng-template>-->\n",
                    styles: [":host{width:100%;display:flex}"]
                },] }
    ];
    ProgressComponent.propDecorators = {
        size: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ProgressBarComponent = /** @class */ (function () {
        function ProgressBarComponent(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.state = {
                percent: 0,
                min: 0,
                max: 100
            };
            this.animated = false;
            this.striped = false;
            this.precision = 0;
            this.value = 0;
            this.role = 'progressbar';
            this.host = this.hostElement.nativeElement;
        }
        Object.defineProperty(ProgressBarComponent.prototype, "min", {
            get: function () {
                return this.state.min;
            },
            set: function (value) {
                this.state.min = isNaN(value) ? 0 : value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProgressBarComponent.prototype, "max", {
            get: function () {
                return this.state.max;
            },
            set: function (value) {
                this.state.max = isNaN(value) || value <= 0 || value === this.min ? 100 : value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProgressBarComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProgressBarComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'progress-bar': true,
                        'progress-bar-animated': this.animated,
                        'progress-bar-striped': this.striped || this.animated
                    },
                    _a["bg-" + this.color] = !!this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        ProgressBarComponent.prototype.ngOnInit = function () {
            this.setValues();
        };
        ProgressBarComponent.prototype.setPercent = function () {
            this.state.percent = +((this.value / (this.max - this.min)) * 100).toFixed(this.precision);
        };
        ProgressBarComponent.prototype.setValues = function () {
            this.setPercent();
            this.renderer.setStyle(this.host, 'width', this.state.percent + "%");
            this.renderer.setAttribute(this.host, 'aria-valuenow', String(this.value));
            this.renderer.setAttribute(this.host, 'aria-valuemin', String(this.min));
            this.renderer.setAttribute(this.host, 'aria-valuemax', String(this.max));
        };
        ProgressBarComponent.prototype.ngOnChanges = function (changes) {
            if (changes.color) {
                this.renderer.removeClass(this.host, "bg-" + changes.color.previousValue);
            }
            this.setValues();
        };
        return ProgressBarComponent;
    }());
    ProgressBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-progress-bar',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    ProgressBarComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    ProgressBarComponent.propDecorators = {
        color: [{ type: i0.Input }],
        animated: [{ type: i0.Input }],
        striped: [{ type: i0.Input }],
        precision: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        min: [{ type: i0.Input }],
        max: [{ type: i0.Input }],
        role: [{ type: i0.Input }, { type: i0.HostBinding, args: ['attr.role',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ProgressModule = /** @class */ (function () {
        function ProgressModule() {
        }
        return ProgressModule;
    }());
    ProgressModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ProgressComponent, ProgressBarComponent],
                    exports: [
                        ProgressComponent,
                        ProgressBarComponent
                    ],
                    imports: [
                        i1.CommonModule
                    ]
                },] }
    ];

    var ClassToggleService = /** @class */ (function () {
        function ClassToggleService(document, rendererFactory) {
            this.document = document;
            this.rendererFactory = rendererFactory;
            this.renderer = rendererFactory.createRenderer(null, null);
        }
        ClassToggleService.prototype.toggle = function (selector, className) {
            var element = document.querySelector(selector);
            if (element) {
                element.classList.contains(className) ?
                    this.renderer.removeClass(element, className) :
                    this.renderer.addClass(element, className);
            }
        };
        return ClassToggleService;
    }());
    ClassToggleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClassToggleService_Factory() { return new ClassToggleService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.RendererFactory2)); }, token: ClassToggleService, providedIn: "root" });
    ClassToggleService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ClassToggleService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: i0.RendererFactory2 }
    ]; };

    var SidebarBackdropComponent = /** @class */ (function () {
        function SidebarBackdropComponent(elementRef, sidebarService) {
            this.elementRef = elementRef;
            this.sidebarService = sidebarService;
            this._sidebarBackdrop = true;
        }
        SidebarBackdropComponent.prototype.onClick = function ($event) {
            var targetElement = $event.target;
            if (targetElement && !this.elementRef.nativeElement.contains(targetElement)) {
                this.sidebarService.toggle({ open: false });
            }
        };
        SidebarBackdropComponent.prototype.ngOnInit = function () {
        };
        return SidebarBackdropComponent;
    }());
    SidebarBackdropComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-backdrop',
                    template: "",
                    styles: [""]
                },] }
    ];
    SidebarBackdropComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: SidebarService }
    ]; };
    SidebarBackdropComponent.propDecorators = {
        _sidebarBackdrop: [{ type: i0.HostBinding, args: ['class.c-sidebar-backdrop',] }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var SidebarBrandComponent = /** @class */ (function () {
        function SidebarBrandComponent() {
            this.brandText = { icon: '🅲', text: '🅲 CoreUI' };
            this.routerLink = '';
            this._sidebarBrand = true;
        }
        SidebarBrandComponent.prototype.ngOnInit = function () {
            this.brandImg = Boolean(this.brand || this.brandFull || this.brandMinimized);
        };
        return SidebarBrandComponent;
    }());
    SidebarBrandComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-brand',
                    template: "<a [routerLink]=\"routerLink\">\r\n  <ng-template [ngIf]=\"brandImg\">\r\n<!--    <img *ngIf=\"brand\"-->\r\n<!--         [cHtmlAttr]=\"brand\"-->\r\n<!--         [ngClass]=\"'c-sidebar-brand'\">-->\r\n    <img *ngIf=\"brandFull\"\r\n         [cHtmlAttr]=\"brandFull\"\r\n         [ngClass]=\"'c-sidebar-brand-full'\">\r\n    <img *ngIf=\"brandMinimized\"\r\n         [cHtmlAttr]=\"brandMinimized\"\r\n         [ngClass]=\"'c-sidebar-brand-minimized'\">\r\n  </ng-template>\r\n  <ng-template [ngIf]=\"!brandImg\">\r\n    <div class=\"c-sidebar-brand-full\" [innerHTML]=\"brandText.text\"></div>\r\n    <div class=\"c-sidebar-brand-minimized\" [innerHTML]=\"brandText.icon\"></div>\r\n  </ng-template>\r\n</a>\r\n"
                },] }
    ];
    SidebarBrandComponent.ctorParameters = function () { return []; };
    SidebarBrandComponent.propDecorators = {
        brand: [{ type: i0.Input }],
        brandFull: [{ type: i0.Input }],
        brandMinimized: [{ type: i0.Input }],
        brandText: [{ type: i0.Input }],
        routerLink: [{ type: i0.Input }],
        _sidebarBrand: [{ type: i0.HostBinding, args: ['class.c-sidebar-brand',] }]
    };

    var SidebarFooterComponent = /** @class */ (function () {
        function SidebarFooterComponent(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            renderer.addClass(hostElement.nativeElement, 'c-sidebar-footer');
        }
        SidebarFooterComponent.prototype.ngOnInit = function () { };
        return SidebarFooterComponent;
    }());
    SidebarFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-footer',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    SidebarFooterComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var SidebarFormComponent = /** @class */ (function () {
        function SidebarFormComponent(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            renderer.addClass(hostElement.nativeElement, 'c-sidebar-form');
        }
        SidebarFormComponent.prototype.ngOnInit = function () { };
        return SidebarFormComponent;
    }());
    SidebarFormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-form',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    SidebarFormComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var SidebarHeaderComponent = /** @class */ (function () {
        function SidebarHeaderComponent(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            renderer.addClass(hostElement.nativeElement, 'c-sidebar-header');
        }
        SidebarHeaderComponent.prototype.ngOnInit = function () { };
        return SidebarHeaderComponent;
    }());
    SidebarHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-header',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    SidebarHeaderComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var SidebarMinimizerComponent = /** @class */ (function () {
        function SidebarMinimizerComponent() {
            this.role = 'button';
            this._sidebarMinimizerClass = true;
        }
        return SidebarMinimizerComponent;
    }());
    SidebarMinimizerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-minimizer',
                    template: ""
                },] }
    ];
    SidebarMinimizerComponent.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        _sidebarMinimizerClass: [{ type: i0.HostBinding, args: ['class.c-sidebar-minimizer',] }]
    };

    var SidebarMinimizeDirective = /** @class */ (function () {
        function SidebarMinimizeDirective(sidebarService) {
            this.sidebarService = sidebarService;
        }
        SidebarMinimizeDirective.prototype.toggleMinimize = function ($event) {
            $event.preventDefault();
            this.sidebarService.toggle({ minimize: 'toggle', id: this.id });
        };
        return SidebarMinimizeDirective;
    }());
    SidebarMinimizeDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cSidebarMinimize]',
                    exportAs: 'cSidebarMinimize'
                },] }
    ];
    SidebarMinimizeDirective.ctorParameters = function () { return [
        { type: SidebarService }
    ]; };
    SidebarMinimizeDirective.propDecorators = {
        id: [{ type: i0.Input, args: ['cSidebarMinimize',] }],
        toggleMinimize: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var SidebarToggleDirective = /** @class */ (function () {
        function SidebarToggleDirective(sidebarService) {
            this.sidebarService = sidebarService;
        }
        SidebarToggleDirective.prototype.toggleOpen = function ($event) {
            $event.preventDefault();
            this.sidebarService.toggle({ open: 'toggle', id: this.id });
        };
        return SidebarToggleDirective;
    }());
    SidebarToggleDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cSidebarToggle]',
                    exportAs: 'cSidebarToggle',
                },] }
    ];
    SidebarToggleDirective.ctorParameters = function () { return [
        { type: SidebarService }
    ]; };
    SidebarToggleDirective.propDecorators = {
        id: [{ type: i0.Input, args: ['cSidebarToggle',] }],
        toggleOpen: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var SidebarComponent = /** @class */ (function () {
        function SidebarComponent(document, renderer, hostElement, breakpointObserver, sidebarService) {
            this.document = document;
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.breakpointObserver = breakpointObserver;
            this.sidebarService = sidebarService;
            this.fixed = true;
            this.unfoldable = false;
            this.overlaid = false;
            this.minimize = false;
            this.breakpoint = 'lg';
            this.mobile = 'lg';
            this.size = '';
            this.hideOnMobileClick = true;
            this.colorScheme = 'dark';
            this.minimized = this.minimize;
        }
        Object.defineProperty(SidebarComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "getDesktopBreakpoint", {
            get: function () {
                return getComputedStyle(this.hostElement.nativeElement).getPropertyValue("--breakpoint-" + this.breakpoint);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "hasBreakpoint", {
            get: function () {
                return !!this.breakpoint;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "getMobileBreakpoint", {
            get: function () {
                return getComputedStyle(this.hostElement.nativeElement).getPropertyValue("--breakpoint-" + this.mobile);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "isOnMobile", {
            get: function () {
                var isMobile = Boolean(this._isOnMobile);
                return isMobile;
            },
            set: function (value) {
                this._isOnMobile = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "isOnDesktop", {
            get: function () {
                return this._isOnDesktop;
            },
            set: function (value) {
                this._isOnDesktop = this.hasBreakpoint ? value : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "isOpen", {
            get: function () {
                var opened;
                if (this.isOnDesktop) {
                    opened = this.openDesktop;
                }
                else {
                    opened = (this.openMobile === true);
                }
                return opened;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'c-sidebar': true,
                        'c-sidebar-fixed': this.fixed && !this.overlaid,
                        'c-sidebar-right': this.aside,
                        'c-sidebar-minimized': this.minimize && !this.unfoldable,
                        'c-sidebar-unfoldable': this.minimize && this.unfoldable,
                        'c-sidebar-overlaid': this.overlaid,
                        'c-sidebar-show': this.openMobile === true
                    },
                    _a["c-sidebar-" + this.breakpoint + "-show"] = (!!this.breakpoint) && this.openDesktop,
                    _a["c-sidebar-" + this.colorScheme] = !!this.colorScheme,
                    _a["c-sidebar-" + this.size] = !!this.size,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        SidebarComponent.prototype.ngOnInit = function () {
            this.stateToggleSubscribe();
            this.layoutChangeSubscribe();
            this.setInitialState();
        };
        SidebarComponent.prototype.layoutChangeSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            var onDesktop = "(min-width: " + this.getDesktopBreakpoint + ")";
            var onMobile = this.breakpoint === false ? "(max-width: " + this.getMobileBreakpoint + ")" : "(max-width: " + this.getDesktopBreakpoint + ")";
            if (subscribe) {
                var layoutChanges = this.breakpointObserver.observe([
                    onDesktop,
                    onMobile,
                ]);
                this.layoutChangesSubscription = layoutChanges.subscribe(function (result) {
                    _this.isOnMobile = result.breakpoints[onMobile];
                    _this.isOnDesktop = result.breakpoints[onDesktop];
                    var openMobile = _this.isOnMobile ? false : _this.isOpen ? _this.isOpen : _this.show;
                    _this.sidebarService.toggle({ open: openMobile, sidebar: _this });
                });
            }
            else {
                this.layoutChangesSubscription.unsubscribe();
            }
        };
        SidebarComponent.prototype.ngOnDestroy = function () {
            this.stateToggleSubscribe(false);
            this.layoutChangeSubscribe(false);
        };
        SidebarComponent.prototype.setInitialState = function () {
            this.openMobile = this.isOnDesktop ? false : this.isOnMobile ? false : this.show;
            this.openDesktop = this.hasBreakpoint;
            this.sidebarService.toggle({ minimize: this.minimize, open: this.isOpen, sidebar: this });
        };
        SidebarComponent.prototype.getState = function () {
            return { opened: this.isOpen, minimized: this.minimized, id: this.id };
        };
        SidebarComponent.prototype.open = function (state) {
            var toggle = (state.open === 'toggle');
            if (this.isOnDesktop) {
                this.openDesktop = toggle ? !this.openDesktop : state.open;
                this.openMobile = false;
            }
            else {
                this.openMobile = toggle ? !this.openMobile : state.open;
                if (this.openMobile && this.isOnMobile) {
                    this.setBackdrop();
                }
                else {
                    this.clearBackdrop();
                }
            }
        };
        SidebarComponent.prototype.stateToggleSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.stateToggleSubscription = this.sidebarService.sidebarState$.subscribe(function (state) {
                    if (_this === state.sidebar || _this.id === state.id) {
                        if ('minimize' in state) {
                            _this.minimizeSidebar(state);
                        }
                        if ('open' in state) {
                            _this.open(state);
                        }
                    }
                });
            }
            else {
                this.stateToggleSubscription.unsubscribe();
            }
        };
        SidebarComponent.prototype.hideMobile = function (e) {
            if (this.isOpen) {
                if (!e.target.closest('[cSidebarNavDropdownToggle]')) {
                    this.sidebarService.toggle({ open: false, sidebar: this });
                }
            }
        };
        SidebarComponent.prototype.setBackdrop = function () {
            var _this = this;
            var backdrop = this.document.getElementsByClassName('c-sidebar-backdrop');
            if (backdrop.length === 0) {
                this.backdrop = this.renderer.createElement('div');
                this.renderer.addClass(this.backdrop, 'c-sidebar-backdrop');
                this.renderer.appendChild(this.document.body, this.backdrop);
                this.renderer.listen(this.backdrop, 'click', function (e) {
                    _this.hideMobile(e);
                });
            }
            if (this.backdrop && this.isOnMobile && this.isOpen) {
                this.renderer.addClass(this.backdrop, 'c-show');
                this.renderer.removeClass(this.backdrop, 'd-none');
            }
            else {
                this.renderer.addClass(this.backdrop, 'd-none');
                this.renderer.removeClass(this.backdrop, 'c-show');
            }
        };
        SidebarComponent.prototype.clearBackdrop = function () {
            if (this.backdrop) {
                this.renderer.listen(this.backdrop, 'click', function (e) { });
                this.renderer.removeChild(this.document.body, this.backdrop);
            }
        };
        SidebarComponent.prototype.minimizeSidebar = function (state) {
            var toggle = (state.minimize === 'toggle');
            this.minimize = toggle ? !this.minimize : !!state.minimize;
        };
        SidebarComponent.prototype.ngOnChanges = function (changes) {
            if (changes.breakpoint) {
                var _a = Object.assign({}, changes.breakpoint), previousValue = _a.previousValue, currentValue = _a.currentValue;
                if (typeof currentValue === 'string') {
                    this.renderer.addClass(this.hostElement.nativeElement, "c-sidebar-" + currentValue + "-show");
                }
                this.renderer.removeClass(this.hostElement.nativeElement, "c-sidebar-" + previousValue + "-show");
            }
            if (changes.size) {
                var _b = Object.assign({}, changes.size), previousValue = _b.previousValue, currentValue = _b.currentValue;
                if (typeof currentValue === 'string') {
                    this.renderer.addClass(this.hostElement.nativeElement, "c-sidebar-" + currentValue);
                }
                this.renderer.removeClass(this.hostElement.nativeElement, "c-sidebar-" + previousValue);
            }
            if (changes.colorScheme) {
                var _c = Object.assign({}, changes.colorScheme), previousValue = _c.previousValue, currentValue = _c.currentValue;
                if (typeof currentValue === 'string') {
                    this.renderer.addClass(this.hostElement.nativeElement, "c-sidebar-" + currentValue);
                }
                this.renderer.removeClass(this.hostElement.nativeElement, "c-sidebar-" + previousValue);
            }
        };
        return SidebarComponent;
    }());
    SidebarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar',
                    exportAs: 'cSidebar',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    SidebarComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: layout.BreakpointObserver },
        { type: SidebarService }
    ]; };
    SidebarComponent.propDecorators = {
        fixed: [{ type: i0.Input }],
        unfoldable: [{ type: i0.Input }],
        overlaid: [{ type: i0.Input }],
        minimize: [{ type: i0.Input }],
        breakpoint: [{ type: i0.Input }],
        mobile: [{ type: i0.Input }],
        show: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        aside: [{ type: i0.Input }],
        hideOnMobileClick: [{ type: i0.Input }],
        colorScheme: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var SidebarNavService = /** @class */ (function () {
        function SidebarNavService() {
        }
        return SidebarNavService;
    }());
    SidebarNavService.decorators = [
        { type: i0.Injectable }
    ];
    var SidebarNavHelper = /** @class */ (function () {
        function SidebarNavHelper() {
            this.hasBadge = function (item) { return Boolean(item.badge); };
            this.hasIcon = function (item) { return Boolean(item.icon) || item.icon === ''; };
        }
        SidebarNavHelper.prototype.itemType = function (item) {
            if (item.divider) {
                return 'divider';
            }
            else if (item.title) {
                return 'title';
            }
            else if (item.children && item.children.length > 0) {
                return 'dropdown';
            }
            else if (item.label) {
                return 'label';
            }
            else if (!Object.keys(item).length) {
                return 'empty';
            }
            else {
                return 'link';
            }
        };
        SidebarNavHelper.prototype.isActive = function (router, item) {
            return router.isActive(item.url, false);
        };
        SidebarNavHelper.prototype.getIconClass = function (item) {
            var classes = {
                'c-sidebar-nav-icon': true
            };
            var icon = item.icon;
            classes[icon] = this.hasIcon(item);
            return classes;
        };
        return SidebarNavHelper;
    }());
    SidebarNavHelper.decorators = [
        { type: i0.Injectable }
    ];

    var SidebarNavComponent = /** @class */ (function () {
        function SidebarNavComponent(sidebar, helper, router, renderer, hostElement, sidebarService) {
            this.sidebar = sidebar;
            this.helper = helper;
            this.router = router;
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.sidebarService = sidebarService;
            this.navItems = [];
            this.dropdownMode = 'closeInactive';
            this.role = 'nav';
            this.navItemsArray = [];
        }
        Object.defineProperty(SidebarNavComponent.prototype, "sidebarNavClass", {
            get: function () {
                return !this.dropdownItems;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SidebarNavComponent.prototype, "sidebarNavDropdownItemsClass", {
            get: function () {
                return this.dropdownItems;
            },
            enumerable: false,
            configurable: true
        });
        SidebarNavComponent.prototype.ngOnChanges = function (changes) {
            this.navItemsArray = Array.isArray(this.navItems) ? this.navItems.slice() : [];
        };
        SidebarNavComponent.prototype.hideMobile = function () {
            if (this.sidebar && this.sidebar.hideOnMobileClick && this.sidebar.isOnMobile) {
                this.sidebarService.toggle({ open: false, sidebar: this.sidebar });
            }
        };
        return SidebarNavComponent;
    }());
    SidebarNavComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav',
                    template: "<!--<c-sidebar-nav-items-->\r\n<!--  class=\"c-sidebar-nav\"-->\r\n<!--  [items]=\"navItemsArray\">-->\r\n<!--</c-sidebar-nav-items>-->\r\n<ng-container *ngFor=\"let item of navItemsArray\">\r\n  <ng-container [ngSwitch]=\"helper.itemType(item)\">\r\n    <c-sidebar-nav-dropdown\r\n      *ngSwitchCase=\"'dropdown'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\">\r\n    </c-sidebar-nav-dropdown>\r\n<!--\r\n    <c-sidebar-nav-dropdown\r\n      *ngSwitchCase=\"'dropdown'\"\r\n      [item]=\"item\"\r\n      [class.c-show]=\"helper.isActive(router, item)\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      cSidebarNavDropdown\r\n      [dropdownMode]=\"dropdownMode\"\r\n      [routerLinkActive]=\"'c-show'\">\r\n    </c-sidebar-nav-dropdown>\r\n-->\r\n    <c-sidebar-nav-divider\r\n      *ngSwitchCase=\"'divider'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      [cHtmlAttr]=\"item.attributes\">\r\n    </c-sidebar-nav-divider>\r\n    <c-sidebar-nav-title\r\n      *ngSwitchCase=\"'title'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      [cHtmlAttr]=\"item.attributes\">\r\n    </c-sidebar-nav-title>\r\n    <c-sidebar-nav-label\r\n      *ngSwitchCase=\"'label'\"\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\">\r\n    </c-sidebar-nav-label>\r\n    <ng-container\r\n      *ngSwitchCase=\"'empty'\">\r\n    </ng-container>\r\n    <c-sidebar-nav-link\r\n      *ngSwitchDefault\r\n      [item]=\"item\"\r\n      [ngClass]=\"item | cSidebarNavItemClass\"\r\n      (linkClick)=\"hideMobile()\"\r\n    >\r\n    </c-sidebar-nav-link>\r\n  </ng-container>\r\n</ng-container>\r\n",
                    styles: [':host {flex: 1;}',
                        '.c-sidebar-minimized :host {overflow: visible !important;}']
                },] }
    ];
    SidebarNavComponent.ctorParameters = function () { return [
        { type: SidebarComponent, decorators: [{ type: i0.Optional }] },
        { type: SidebarNavHelper },
        { type: i1$1.Router },
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: SidebarService }
    ]; };
    SidebarNavComponent.propDecorators = {
        navItems: [{ type: i0.Input }],
        dropdownMode: [{ type: i0.Input }],
        dropdownItems: [{ type: i0.Input }],
        sidebarNavClass: [{ type: i0.HostBinding, args: ['class.c-sidebar-nav',] }],
        sidebarNavDropdownItemsClass: [{ type: i0.HostBinding, args: ['class.c-sidebar-nav-dropdown-items',] }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    var SidebarNavDividerComponent = /** @class */ (function () {
        function SidebarNavDividerComponent() {
        }
        SidebarNavDividerComponent.prototype.ngOnInit = function () { };
        return SidebarNavDividerComponent;
    }());
    SidebarNavDividerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav-divider',
                    template: ""
                },] }
    ];
    SidebarNavDividerComponent.ctorParameters = function () { return []; };
    SidebarNavDividerComponent.propDecorators = {
        item: [{ type: i0.Input }]
    };

    var SidebarNavDropdownComponent = /** @class */ (function () {
        function SidebarNavDropdownComponent(router, helper) {
            this.router = router;
            this.helper = helper;
            this.dropdownMode = 'closeInactive';
            this.navItems = [];
            this.navigationEndObservable = router.events.pipe(operators.filter(function (event) { return event instanceof i1$1.NavigationEnd; }));
        }
        Object.defineProperty(SidebarNavDropdownComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        SidebarNavDropdownComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.navItems = __spread(this.item.children);
            this.navSubscription = this.navigationEndObservable.subscribe(function (event) {
                var itemArray = _this.item.url.split('/');
                var urlArray = event.url.split('/');
                var samePath = itemArray.every(function (value, index) { return value === urlArray[index]; });
                _this.openDropdown(samePath);
            });
        };
        SidebarNavDropdownComponent.prototype.openDropdown = function (open) {
            this.open = open;
        };
        SidebarNavDropdownComponent.prototype.toggleDropdown = function () {
            this.open = !this.open;
        };
        SidebarNavDropdownComponent.prototype.ngOnDestroy = function () {
            this.navSubscription.unsubscribe();
        };
        Object.defineProperty(SidebarNavDropdownComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default'](this.ngClass, this.class, {
                    'c-sidebar-nav-dropdown': true,
                    'c-show': this.open,
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return SidebarNavDropdownComponent;
    }());
    SidebarNavDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav-dropdown',
                    template: "\n    <a class=\"c-sidebar-nav-dropdown-toggle\"\n       cSidebarNavDropdownToggle\n       [cHtmlAttr]=\"item.attributes\">\n      <i *ngIf=\"helper.hasIcon(item)\" [ngClass]=\"item | cSidebarNavIcon\"></i>\n      <ng-container>{{ item.name }}</ng-container>\n      <span *ngIf=\"helper.hasBadge(item)\" [ngClass]=\"item | cSidebarNavBadge\">{{ item.badge.text }}</span>\n    </a>\n    <c-sidebar-nav\n      [dropdownItems]=\"true\"\n      [navItems]=\"navItems\">\n    </c-sidebar-nav>\n  ",
                    providers: [SidebarNavHelper],
                    styles: [".c-sidebar-nav-dropdown-toggle{cursor:pointer}.c-sidebar-nav-dropdown-items{display:block}"]
                },] }
    ];
    SidebarNavDropdownComponent.ctorParameters = function () { return [
        { type: i1$1.Router },
        { type: SidebarNavHelper }
    ]; };
    SidebarNavDropdownComponent.propDecorators = {
        item: [{ type: i0.Input }],
        dropdownMode: [{ type: i0.Input }],
        show: [{ type: i0.Input }],
        class: [{ type: i0.Input }],
        ngClass: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var SidebarNavItemsComponent = /** @class */ (function () {
        function SidebarNavItemsComponent(router, helper) {
            this.router = router;
            this.helper = helper;
        }
        Object.defineProperty(SidebarNavItemsComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            set: function (items) {
                this._items = __spread(items);
            },
            enumerable: false,
            configurable: true
        });
        return SidebarNavItemsComponent;
    }());
    SidebarNavItemsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav-items',
                    template: "\n    <ng-container *ngFor=\"let item of items\">\n      <ng-container [ngSwitch]=\"helper.itemType(item)\">\n        <c-sidebar-nav-dropdown\n          *ngSwitchCase=\"'dropdown'\"\n          [item]=\"item\"\n          [class.c-show]=\"helper.isActive(router, item)\"\n          [ngClass]=\"item | cSidebarNavItemClass\"\n          cSidebarNavDropdown\n          routerLinkActive=\"c-show\">\n        </c-sidebar-nav-dropdown>\n        <c-sidebar-nav-divider\n          *ngSwitchCase=\"'divider'\"\n          [item]=\"item\"\n          [ngClass]=\"item | cSidebarNavItemClass\"\n          [cHtmlAttr]=\"item.attributes\">\n        </c-sidebar-nav-divider>\n        <c-sidebar-nav-title\n          *ngSwitchCase=\"'title'\"\n          [item]=\"item\"\n          [ngClass]=\"item | cSidebarNavItemClass\"\n          [cHtmlAttr]=\"item.attributes\">\n        </c-sidebar-nav-title>\n        <c-sidebar-nav-label\n          *ngSwitchCase=\"'label'\"\n          [item]=\"item\"\n          [ngClass]=\"item | cSidebarNavItemClass\">\n        </c-sidebar-nav-label>\n        <ng-container\n          *ngSwitchCase=\"'empty'\">\n        </ng-container>\n        <c-sidebar-nav-link\n          *ngSwitchDefault\n          [item]=\"item\"\n          [ngClass]=\"item | cSidebarNavItemClass\"\n        >\n        </c-sidebar-nav-link>\n      </ng-container>\n    </ng-container>\n  "
                },] }
    ];
    SidebarNavItemsComponent.ctorParameters = function () { return [
        { type: i1$1.Router },
        { type: SidebarNavHelper }
    ]; };
    SidebarNavItemsComponent.propDecorators = {
        items: [{ type: i0.Input }]
    };

    var SidebarNavLinkContentComponent = /** @class */ (function () {
        function SidebarNavLinkContentComponent(helper) {
            this.helper = helper;
        }
        return SidebarNavLinkContentComponent;
    }());
    SidebarNavLinkContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav-link-content',
                    template: "\n    <ng-container *ngIf=\"true\">\n      <ng-container>{{item.name}}</ng-container>\n    </ng-container>\n  ",
                    providers: [SidebarNavHelper]
                },] }
    ];
    SidebarNavLinkContentComponent.ctorParameters = function () { return [
        { type: SidebarNavHelper }
    ]; };
    SidebarNavLinkContentComponent.propDecorators = {
        item: [{ type: i0.Input }]
    };
    var SidebarNavLinkComponent = /** @class */ (function () {
        function SidebarNavLinkComponent(router, renderer, hostElement, sidebarService) {
            this.router = router;
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.sidebarService = sidebarService;
            this.linkClick = new i0.EventEmitter();
            this.navigationEndObservable = router.events.pipe(operators.filter(function (event) {
                return event instanceof i1$1.NavigationEnd;
            }));
        }
        Object.defineProperty(SidebarNavLinkComponent.prototype, "item", {
            get: function () {
                return this._item;
            },
            set: function (item) {
                this._item = JSON.parse(JSON.stringify(item));
            },
            enumerable: false,
            configurable: true
        });
        SidebarNavLinkComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.url = typeof this.item.url === 'string' ? this.item.url : this.router.serializeUrl(this.router.createUrlTree(this.item.url));
            this.linkType = this.getLinkType();
            this.href = this.isDisabled() ? '' : (this.item.href || this.url);
            this.linkActive = this.router.url.split(/[?#(;]/)[0] === this.href.split(/[?#(;]/)[0];
            this.navSubscription = this.navigationEndObservable.subscribe(function (event) {
                var itemUrlArray = _this.href.split(/[?#(;]/)[0].split('/');
                var urlArray = event.urlAfterRedirects.split(/[?#(;]/)[0].split('/');
                _this.linkActive = itemUrlArray.every(function (value, index) { return value === urlArray[index]; });
            });
        };
        SidebarNavLinkComponent.prototype.ngOnDestroy = function () {
            this.navSubscription.unsubscribe();
        };
        SidebarNavLinkComponent.prototype.getLinkType = function () {
            return this.isDisabled() ? 'disabled' : this.isExternalLink() ? 'external' : 'link';
        };
        SidebarNavLinkComponent.prototype.isDisabled = function () {
            return (this.item.attributes && this.item.attributes.disabled) ? true : null;
        };
        SidebarNavLinkComponent.prototype.isExternalLink = function () {
            var linkPath = Array.isArray(this.item.url) ? this.item.url[0] : this.item.url;
            return !!this.item.href || linkPath.substring(0, 4) === 'http';
        };
        SidebarNavLinkComponent.prototype.linkClicked = function () {
            this.linkClick.emit();
        };
        return SidebarNavLinkComponent;
    }());
    SidebarNavLinkComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav-link',
                    template: "<ng-container [ngSwitch]=\"linkType\">\r\n  <a *ngSwitchCase=\"'disabled'\"\r\n     [ngClass]=\"item | cSidebarNavLink\"\r\n     [cHtmlAttr]=\"item.attributes\"\r\n  >\r\n    <i *ngIf=\"item?.icon\" [ngClass]=\"item | cSidebarNavIcon\"></i>\r\n    <span *ngIf=\"!item?.icon\" [ngClass]=\"item | cSidebarNavIcon\"></span>\r\n    <c-sidebar-nav-link-content [item]=\"item\"></c-sidebar-nav-link-content>\r\n    <span *ngIf=\"item.badge\" [ngClass]=\"item | cSidebarNavBadge\">{{ item.badge?.text }}</span>\r\n  </a>\r\n  <a *ngSwitchCase=\"'external'\"\r\n     [ngClass]=\"item | cSidebarNavLink\"\r\n     [href]=\"href\"\r\n     [cHtmlAttr]=\"item.attributes\"\r\n     (click)=\"linkClicked()\"\r\n  >\r\n    <i *ngIf=\"item?.icon\" [ngClass]=\"item | cSidebarNavIcon\"></i>\r\n    <span *ngIf=\"!item?.icon\" [ngClass]=\"item | cSidebarNavIcon\"></span>\r\n    <c-sidebar-nav-link-content [item]=\"item\"></c-sidebar-nav-link-content>\r\n    <span *ngIf=\"item.badge\" [ngClass]=\"item | cSidebarNavBadge\">{{ item.badge?.text }}</span>\r\n  </a>\r\n  <a *ngSwitchDefault\r\n     [ngClass]=\"item | cSidebarNavLink\"\r\n     [cHtmlAttr]=\"item.attributes\"\r\n     [target]=\"item.attributes?.target\"\r\n     [queryParams]=\"item.linkProps?.queryParams\"\r\n     [fragment]=\"item.linkProps?.fragment\"\r\n     [queryParamsHandling]=\"item.linkProps?.queryParamsHandling\"\r\n     [preserveFragment]=\"item.linkProps?.preserveFragment\"\r\n     [skipLocationChange]=\"item.linkProps?.skipLocationChange\"\r\n     [replaceUrl]=\"item.linkProps?.replaceUrl\"\r\n     [state]=\"item.linkProps?.state\"\r\n     [routerLink]=\"item.url\"\r\n     [class.c-active]=\"linkActive\"\r\n     (click)=\"linkClicked()\"\r\n  >\r\n    <i *ngIf=\"item?.icon\" [ngClass]=\"item | cSidebarNavIcon\"></i>\r\n    <span *ngIf=\"!item?.icon\" [ngClass]=\"item | cSidebarNavIcon\"></span>\r\n    <c-sidebar-nav-link-content [item]=\"item\"></c-sidebar-nav-link-content>\r\n    <span *ngIf=\"item.badge\" [ngClass]=\"item | cSidebarNavBadge\">{{ item.badge?.text }}</span>\r\n  </a>\r\n</ng-container>\r\n",
                    providers: [SidebarNavHelper]
                },] }
    ];
    SidebarNavLinkComponent.ctorParameters = function () { return [
        { type: i1$1.Router },
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: SidebarService }
    ]; };
    SidebarNavLinkComponent.propDecorators = {
        item: [{ type: i0.Input }],
        linkClick: [{ type: i0.Output }]
    };

    var SidebarNavTitleComponent = /** @class */ (function () {
        function SidebarNavTitleComponent(el, renderer) {
            this.el = el;
            this.renderer = renderer;
        }
        SidebarNavTitleComponent.prototype.ngOnInit = function () {
            var nativeElement = this.el.nativeElement;
            var name = this.renderer.createText(this.item.name);
            if (this.item.class) {
                var classes = this.item.class;
                this.renderer.addClass(nativeElement, classes);
            }
            if (this.item.wrapper) {
                var wrapper = this.renderer.createElement(this.item.wrapper.element);
                this.addAttribs(this.item.wrapper.attributes, wrapper);
                this.renderer.appendChild(wrapper, name);
                this.renderer.appendChild(nativeElement, wrapper);
            }
            else {
                this.renderer.appendChild(nativeElement, name);
            }
        };
        SidebarNavTitleComponent.prototype.addAttribs = function (attribs, element) {
            if (attribs) {
                for (var attr in attribs) {
                    if (attr === 'style' && typeof (attribs[attr]) === 'object') {
                        this.setStyle(attribs[attr], element);
                    }
                    else if (attr === 'class') {
                        this.addClass(attribs[attr], element);
                    }
                    else {
                        this.setAttrib(attr, attribs[attr], element);
                    }
                }
            }
        };
        SidebarNavTitleComponent.prototype.setStyle = function (styles, el) {
            for (var style in styles) {
                if (style) {
                    this.renderer.setStyle(el, style, styles[style]);
                }
            }
        };
        SidebarNavTitleComponent.prototype.addClass = function (classes, el) {
            var _this = this;
            var classArray = (Array.isArray(classes) ? classes : classes.split(' '));
            classArray.filter(function (element) { return element.length > 0; }).forEach(function (element) {
                _this.renderer.addClass(el, element);
            });
        };
        SidebarNavTitleComponent.prototype.setAttrib = function (key, value, el) {
            this.renderer.setAttribute(el, key, value);
        };
        return SidebarNavTitleComponent;
    }());
    SidebarNavTitleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav-title',
                    template: ''
                },] }
    ];
    SidebarNavTitleComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    SidebarNavTitleComponent.propDecorators = {
        item: [{ type: i0.Input }]
    };

    var SidebarNavLabelComponent = /** @class */ (function () {
        function SidebarNavLabelComponent(helper) {
            this.helper = helper;
            this.classes = {
                'c-nav-label': true,
                'c-active': true
            };
            this.iconClasses = {};
        }
        SidebarNavLabelComponent.prototype.ngOnInit = function () {
            this.iconClasses = this.helper.getIconClass(this.item);
        };
        SidebarNavLabelComponent.prototype.getItemClass = function () {
            var itemClass = this.item.class;
            this.classes[itemClass] = !!itemClass;
            return this.classes;
        };
        SidebarNavLabelComponent.prototype.getLabelIconClass = function () {
            var variant = "text-" + this.item.label.variant;
            this.iconClasses[variant] = !!this.item.label.variant;
            var labelClass = this.item.label.class;
            this.iconClasses[labelClass] = !!labelClass;
            return this.iconClasses;
        };
        return SidebarNavLabelComponent;
    }());
    SidebarNavLabelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-sidebar-nav-label',
                    template: "<a [ngClass]=\"getItemClass()\"\r\n   href=\"{{item.url}}\"\r\n   [cHtmlAttr]=\"item.attributes\">\r\n  <i *ngIf=\"helper.hasIcon(item)\" [ngClass]=\"getLabelIconClass()\"></i>\r\n  <ng-container>{{ item.name }}</ng-container>\r\n  <span *ngIf=\"helper.hasBadge(item)\" [ngClass]=\"item | cSidebarNavBadge\">{{ item.badge.text }}</span>\r\n</a>\r\n"
                },] }
    ];
    SidebarNavLabelComponent.ctorParameters = function () { return [
        { type: SidebarNavHelper }
    ]; };
    SidebarNavLabelComponent.propDecorators = {
        item: [{ type: i0.Input }]
    };

    var SidebarNavIconPipe = /** @class */ (function () {
        function SidebarNavIconPipe() {
        }
        SidebarNavIconPipe.prototype.transform = function (item, args) {
            var classes = {
                'c-sidebar-nav-icon': true
            };
            var icon = item.icon;
            classes[icon] = !!item.icon;
            return classes;
        };
        return SidebarNavIconPipe;
    }());
    SidebarNavIconPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'cSidebarNavIcon'
                },] }
    ];

    var SidebarNavBadgePipe = /** @class */ (function () {
        function SidebarNavBadgePipe() {
        }
        SidebarNavBadgePipe.prototype.transform = function (item, args) {
            var classes = {
                badge: true
            };
            var variant = "badge-" + item.badge.variant;
            classes[variant] = !!item.badge.variant;
            classes[item.badge.class] = !!item.badge.class;
            return classes;
        };
        return SidebarNavBadgePipe;
    }());
    SidebarNavBadgePipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'cSidebarNavBadge'
                },] }
    ];

    var SidebarNavItemClassPipe = /** @class */ (function () {
        function SidebarNavItemClassPipe(helper) {
            this.helper = helper;
        }
        SidebarNavItemClassPipe.prototype.transform = function (item, args) {
            var itemType = this.helper.itemType(item);
            var itemClass;
            if (['divider', 'title'].includes(itemType)) {
                itemClass = "c-sidebar-nav-" + itemType;
            }
            else if (itemType === 'dropdown') {
                itemClass = '';
            }
            else {
                itemClass = 'c-sidebar-nav-item';
            }
            return item.class ? itemClass + " " + item.class : itemClass;
        };
        return SidebarNavItemClassPipe;
    }());
    SidebarNavItemClassPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'cSidebarNavItemClass'
                },] }
    ];
    SidebarNavItemClassPipe.ctorParameters = function () { return [
        { type: SidebarNavHelper }
    ]; };

    var SidebarNavLinkPipe = /** @class */ (function () {
        function SidebarNavLinkPipe() {
        }
        SidebarNavLinkPipe.prototype.transform = function (item) {
            var _a;
            var disabled = (_a = item === null || item === void 0 ? void 0 : item.attributes) === null || _a === void 0 ? void 0 : _a.disabled;
            var classes = {
                'c-sidebar-nav-link': true,
                disabled: disabled,
                'btn-link': disabled,
            };
            classes["c-sidebar-nav-link-" + item.variant] = !!item.variant;
            return classes;
        };
        return SidebarNavLinkPipe;
    }());
    SidebarNavLinkPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'cSidebarNavLink'
                },] }
    ];

    var SidebarNavDropdownToggleDirective = /** @class */ (function () {
        function SidebarNavDropdownToggleDirective(sidebarNavDropdown) {
            this.sidebarNavDropdown = sidebarNavDropdown;
        }
        SidebarNavDropdownToggleDirective.prototype.toggleOpen = function ($event) {
            $event.preventDefault();
            this.sidebarNavDropdown.toggleDropdown();
        };
        return SidebarNavDropdownToggleDirective;
    }());
    SidebarNavDropdownToggleDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cSidebarNavDropdownToggle]',
                    exportAs: 'cSidebarNavDropdownToggle',
                },] }
    ];
    SidebarNavDropdownToggleDirective.ctorParameters = function () { return [
        { type: SidebarNavDropdownComponent }
    ]; };
    SidebarNavDropdownToggleDirective.propDecorators = {
        toggleOpen: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var SidebarModule = /** @class */ (function () {
        function SidebarModule() {
        }
        return SidebarModule;
    }());
    SidebarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        i1$1.RouterModule,
                        SharedModule
                    ],
                    exports: [
                        SidebarBrandComponent,
                        SidebarFooterComponent,
                        SidebarFormComponent,
                        SidebarHeaderComponent,
                        SidebarMinimizerComponent,
                        SidebarComponent,
                        SidebarNavItemsComponent,
                        SidebarNavComponent,
                        SidebarNavDividerComponent,
                        SidebarNavDropdownComponent,
                        SidebarNavLinkComponent,
                        SidebarNavLinkContentComponent,
                        SidebarNavTitleComponent,
                        SidebarToggleDirective,
                        SidebarMinimizeDirective,
                        SharedModule
                    ],
                    declarations: [
                        SidebarBrandComponent,
                        SidebarFooterComponent,
                        SidebarFormComponent,
                        SidebarHeaderComponent,
                        SidebarMinimizerComponent,
                        SidebarComponent,
                        SidebarNavItemsComponent,
                        SidebarNavComponent,
                        SidebarNavDividerComponent,
                        SidebarNavDropdownComponent,
                        SidebarNavLinkComponent,
                        SidebarNavLinkContentComponent,
                        SidebarNavTitleComponent,
                        SidebarNavDropdownToggleDirective,
                        SidebarNavLabelComponent,
                        SidebarNavIconPipe,
                        SidebarNavBadgePipe,
                        SidebarNavItemClassPipe,
                        SidebarNavLinkPipe,
                        SidebarBackdropComponent,
                        SidebarToggleDirective,
                        SidebarMinimizeDirective
                    ],
                    providers: [
                        OutClickService,
                        SidebarService,
                        SidebarNavHelper,
                    ]
                },] }
    ];

    var SpinkitComponent = /** @class */ (function () {
        function SpinkitComponent() {
            this.center = true;
            this.name = 'plane';
        }
        Object.defineProperty(SpinkitComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpinkitComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {},
                    _a["sk-" + this.name] = true,
                    _a['sk-center'] = this.center,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        SpinkitComponent.prototype.ngOnInit = function () { };
        return SpinkitComponent;
    }());
    SpinkitComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-spinkit',
                    template: "<ng-container [ngSwitch]=\"name\">\n  <ng-container *ngSwitchCase=\"'plane'\"></ng-container>\n  <ng-container *ngSwitchCase=\"'chase'\">\n    <div class=\"sk-chase-dot\"></div>\n    <div class=\"sk-chase-dot\"></div>\n    <div class=\"sk-chase-dot\"></div>\n    <div class=\"sk-chase-dot\"></div>\n    <div class=\"sk-chase-dot\"></div>\n    <div class=\"sk-chase-dot\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'bounce'\">\n    <div class=\"sk-bounce-dot\"></div>\n    <div class=\"sk-bounce-dot\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'wave'\">\n    <div class=\"sk-wave-rect\"></div>\n    <div class=\"sk-wave-rect\"></div>\n    <div class=\"sk-wave-rect\"></div>\n    <div class=\"sk-wave-rect\"></div>\n    <div class=\"sk-wave-rect\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'pulse'\"></ng-container>\n  <ng-container *ngSwitchCase=\"'flow'\">\n    <div class=\"sk-flow-dot\"></div>\n    <div class=\"sk-flow-dot\"></div>\n    <div class=\"sk-flow-dot\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'swing'\">\n    <div class=\"sk-swing-dot\"></div>\n    <div class=\"sk-swing-dot\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'circle'\">\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n    <div class=\"sk-circle-dot\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'circle-fade'\">\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n    <div class=\"sk-circle-fade-dot\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'grid'\">\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n    <div class=\"sk-grid-cube\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'fold'\">\n    <div class=\"sk-fold-cube\"></div>\n    <div class=\"sk-fold-cube\"></div>\n    <div class=\"sk-fold-cube\"></div>\n    <div class=\"sk-fold-cube\"></div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'wander'\">\n    <div class=\"sk-wander-cube\"></div>\n    <div class=\"sk-wander-cube\"></div>\n    <div class=\"sk-wander-cube\"></div>\n    <div class=\"sk-wander-cube\"></div>\n  </ng-container>\n  <ng-container *ngSwitchDefault></ng-container>\n</ng-container>\n",
                    styles: [":host{display:block}:host.sk-wave{display:flex}:host.sk-flow{display:flex;align-items:center}"]
                },] }
    ];
    SpinkitComponent.ctorParameters = function () { return []; };
    SpinkitComponent.propDecorators = {
        center: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var SpinkitModule = /** @class */ (function () {
        function SpinkitModule() {
        }
        return SpinkitModule;
    }());
    SpinkitModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [SpinkitComponent],
                    exports: [
                        SpinkitComponent
                    ],
                    imports: [
                        i1.CommonModule
                    ]
                },] }
    ];

    var SpinnerComponent = /** @class */ (function () {
        function SpinnerComponent() {
            this.color = '';
            this.grow = false;
            this.size = '';
            this.role = 'status';
        }
        Object.defineProperty(SpinnerComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpinnerComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var shape = this.grow ? 'grow' : 'border';
                var classes = classNames__default['default']((_a = {},
                    _a["spinner-" + shape] = true,
                    _a["text-" + this.color] = !!this.color,
                    _a["spinner-" + shape + "-" + this.size] = !!this.size,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return SpinnerComponent;
    }());
    SpinnerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-spinner',
                    template: "<!--<div [ngClass]=\"classes\" [attr.role]=\"role\" [ngStyle]=\"styles\">-->\n  <span class=\"sr-only\">Loading...</span>\n<!--</div>-->\n",
                    styles: [""]
                },] }
    ];
    SpinnerComponent.propDecorators = {
        color: [{ type: i0.Input }],
        grow: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        role: [{ type: i0.Input }, { type: i0.HostBinding, args: ['attr.role',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var SpinnerModule = /** @class */ (function () {
        function SpinnerModule() {
        }
        return SpinnerModule;
    }());
    SpinnerModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        SpinnerComponent
                    ],
                    exports: [
                        SpinnerComponent
                    ],
                    imports: [
                        i1.CommonModule,
                        SharedModule
                    ]
                },] }
    ];

    var SwitchComponent = /** @class */ (function () {
        function SwitchComponent(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            this.variant = '';
            this.labelOn = '';
            this.labelOff = '';
            this.size = '';
            this.shape = '';
            this.tabindex = '0';
            this.type = 'checkbox';
            this.value = 'on';
            this.data = {};
            this._props = {
                autofocus: false,
                checked: false,
                disabled: false,
                required: false,
            };
            this.hostTabIndex = -1;
            this.toggle = new i0.EventEmitter();
            this.classes = {};
            this.host = this.hostElement.nativeElement;
        }
        Object.defineProperty(SwitchComponent.prototype, "label", {
            get: function () {
                return !!this.labelOn || !!this.labelOff;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SwitchComponent.prototype, "autofocus", {
            get: function () {
                return this._props.autofocus;
            },
            set: function (value) {
                this._props.autofocus = typeof value === 'string' || !!value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SwitchComponent.prototype, "checked", {
            get: function () {
                return this._props.checked;
            },
            set: function (value) {
                this._props.checked = typeof value === 'string' || !!value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SwitchComponent.prototype, "disabled", {
            get: function () {
                return this._props.disabled;
            },
            set: function (value) {
                this._props.disabled = typeof value === 'string' || !!value;
                this.tabindex = this._props.disabled ? -1 : this.tabindex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SwitchComponent.prototype, "required", {
            get: function () {
                return this._props.required;
            },
            set: function (value) {
                this._props.required = typeof value === 'string' || !!value;
            },
            enumerable: false,
            configurable: true
        });
        SwitchComponent.prototype.ngOnInit = function () {
            this.data = {
                'data-checked': this.labelOn,
                'data-unchecked': this.labelOff
            };
            this.setClasses();
        };
        SwitchComponent.prototype.setClasses = function () {
            var variant = this.variant ? "-" + this.variant : '';
            this.classes['c-switch'] = true;
            this.classes['form-check-label'] = true;
            this.classes["c-switch-" + this.size] = !!this.size;
            this.classes["c-switch-" + this.shape] = !!this.shape;
            this.classes["c-switch" + variant + "-" + this.color] = !!this.color;
            this.classes['c-switch-label'] = !!this.label || typeof this.label === 'string';
        };
        SwitchComponent.prototype.ngOnChanges = function (changes) {
            if (changes.color) {
                this.classes["c-switch-" + changes.color.previousValue] = false;
            }
            if (changes.size) {
                this.classes["c-switch-" + changes.size.previousValue] = false;
            }
            if (changes.variant) {
                this.classes["c-switch-variant-" + changes.variant.previousValue + "-alt"] = false;
                this.classes["c-switch-variant-" + changes.variant.previousValue] = false;
            }
            if (changes.shape) {
                this.classes["c-switch-" + changes.shape.previousValue] = false;
            }
            this.setClasses();
        };
        SwitchComponent.prototype.onKeyDown = function (e) {
            if (e.code === 'Space' && e.target === this.host.firstChild) {
                e.stopImmediatePropagation();
                e.stopPropagation();
                e.preventDefault();
            }
        };
        SwitchComponent.prototype.onKeyUp = function (e) {
            if (e.key === 'Enter') {
                this.toggleSwitch();
            }
        };
        SwitchComponent.prototype.onClick = function (e) {
            if (e.target.tagName === 'INPUT') {
                if (e instanceof MouseEvent) {
                    this.toggleSwitch();
                }
            }
        };
        SwitchComponent.prototype.toggleSwitch = function () {
            if (this.disabled) {
                return false;
            }
            this.checked = !this.checked;
            this.toggle.emit(this);
        };
        return SwitchComponent;
    }());
    SwitchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-switch',
                    template: "<label [ngClass]=\"classes\" [tabindex]=\"-1\">\n  <input\n    class=\"c-switch-input form-check-input\"\n    [tabindex]=\"tabindex\"\n    [type]=\"type\"\n    [autofocus]=\"autofocus\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [name]=\"name ? name : ''\"\n    [value]=\"value\">\n  <span class=\"c-switch-slider\" attr.data-checked=\"{{labelOn}}\" attr.data-unchecked=\"{{labelOff}}\"></span>\n</label>\n",
                    styles: [":host{outline:0}:host,:host .c-switch,:host .c-switch-input,:host .c-switch-slider{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host .c-switch-label:focus{outline:0}.c-switch:focus{outline-style:auto;outline-offset:1px}.c-switch-slider:focus,.c-switch:hover{outline:none}"]
                },] }
    ];
    SwitchComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    SwitchComponent.propDecorators = {
        color: [{ type: i0.Input }],
        variant: [{ type: i0.Input }],
        labelOn: [{ type: i0.Input }],
        labelOff: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        shape: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        autofocus: [{ type: i0.Input }],
        checked: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        required: [{ type: i0.Input }],
        hostTabIndex: [{ type: i0.HostBinding, args: ['attr.tabindex',] }],
        toggle: [{ type: i0.Output, args: ['checked',] }],
        onKeyDown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }],
        onKeyUp: [{ type: i0.HostListener, args: ['keyup', ['$event'],] }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var SwitchModule = /** @class */ (function () {
        function SwitchModule() {
        }
        return SwitchModule;
    }());
    SwitchModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        SwitchComponent
                    ],
                    exports: [
                        SwitchComponent
                    ],
                    imports: [
                        i1.CommonModule,
                    ]
                },] }
    ];

    var TabsetService = /** @class */ (function () {
        function TabsetService() {
            this.activeTab = new rxjs.Subject();
            this.activeTab$ = this.activeTab.asObservable();
        }
        TabsetService.prototype.setActiveTab = function (tab) {
            this.activeTab.next(tab);
        };
        return TabsetService;
    }());
    TabsetService.decorators = [
        { type: i0.Injectable }
    ];
    TabsetService.ctorParameters = function () { return []; };

    var TabComponent = /** @class */ (function () {
        function TabComponent(renderer, tabsetService) {
            this.renderer = renderer;
            this.tabsetService = tabsetService;
            this.classMap = {};
            this._navItemClass = true;
        }
        Object.defineProperty(TabComponent.prototype, "active", {
            get: function () {
                return this.classMap.active;
            },
            set: function (active) {
                this.classMap.active = active;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabComponent.prototype, "disabled", {
            get: function () {
                return this.classMap.disabled;
            },
            set: function (disabled) {
                this.classMap.disabled = disabled;
            },
            enumerable: false,
            configurable: true
        });
        TabComponent.prototype.onClick = function (e) {
            e.preventDefault();
            if (!this.disabled) {
                this.active = true;
                this.tabsetService.setActiveTab(this);
            }
        };
        TabComponent.prototype.ngOnInit = function () {
            this.classMap = {
                'nav-link': true,
                active: this.active,
                disabled: this.disabled
            };
        };
        TabComponent.prototype.ngOnDestroy = function () {
            this.activeTabUnsubscribe();
        };
        TabComponent.prototype.ngAfterViewInit = function () {
            this.activeTabSubscribe();
        };
        TabComponent.prototype.ngOnChanges = function (changes) {
            this.classMap = {
                active: changes.active ? changes.active.currentValue : this.active,
                disabled: changes.disabled ? changes.disabled.currentValue : this.disabled
            };
            this.classMap = Object.assign(Object.create(null), this.classMap);
        };
        TabComponent.prototype.activeTabSubscribe = function () {
            var _this = this;
            this.activeTabSubscription = this.tabsetService.activeTab$.subscribe(function (activeTab) {
                _this.active = _this.indexKey === activeTab.indexKey;
                _this.classMap.active = _this.indexKey === activeTab.indexKey;
            });
        };
        TabComponent.prototype.activeTabUnsubscribe = function () {
            this.activeTabSubscription.unsubscribe();
        };
        return TabComponent;
    }());
    TabComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-tab',
                    template: "<!--<a #link href=\"javascript:void(0);\" [ngClass]=\"classMap\" (click)=\"onClick($event)\" tabindex=\"{{disabled ? -1 : 0}}\">-->\n<a #link href [ngClass]=\"classMap\" tabindex=\"{{disabled ? -1 : 0}}\">\n  <ng-content></ng-content>\n</a>\n",
                    styles: [":host .nav-link:focus{outline:none!important}"]
                },] }
    ];
    TabComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: TabsetService }
    ]; };
    TabComponent.propDecorators = {
        active: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        _navItemClass: [{ type: i0.HostBinding, args: ['class.nav-item',] }],
        _link: [{ type: i0.ViewChild, args: ['link', { static: true },] }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var TabPaneComponent = /** @class */ (function () {
        function TabPaneComponent(tabsetService) {
            this.tabsetService = tabsetService;
            this.fade = true;
            this._tabPane = true;
            this._tabActive = true;
            this._tabShow = false;
            this._tabFade = this.fade;
        }
        Object.defineProperty(TabPaneComponent.prototype, "active", {
            get: function () {
                return this._tabActive;
            },
            set: function (active) {
                this._tabActive = active;
                this._tabShow = active;
            },
            enumerable: false,
            configurable: true
        });
        TabPaneComponent.prototype.ngOnInit = function () {
            this.activeTabSubscribe();
        };
        TabPaneComponent.prototype.ngOnDestroy = function () {
            this.activeTabUnsubscribe();
        };
        TabPaneComponent.prototype.activeTabSubscribe = function () {
            var _this = this;
            this.activeTabSubscription = this.tabsetService.activeTab$.subscribe(function (activeTab) {
                setTimeout(function () {
                    _this.active = activeTab.indexKey === _this.indexKey;
                });
            });
        };
        TabPaneComponent.prototype.activeTabUnsubscribe = function () {
            this.activeTabSubscription.unsubscribe();
        };
        return TabPaneComponent;
    }());
    TabPaneComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-tab-pane',
                    template: "<ng-content *ngIf=\"active\"></ng-content>\n\n",
                    styles: [""]
                },] }
    ];
    TabPaneComponent.ctorParameters = function () { return [
        { type: TabsetService }
    ]; };
    TabPaneComponent.propDecorators = {
        active: [{ type: i0.Input }],
        _tabPane: [{ type: i0.HostBinding, args: ['class.tab-pane',] }],
        _tabActive: [{ type: i0.HostBinding, args: ['class.active',] }],
        _tabShow: [{ type: i0.HostBinding, args: ['class.show',] }],
        _tabFade: [{ type: i0.HostBinding, args: ['class.fade',] }]
    };

    var TabListComponent = /** @class */ (function () {
        function TabListComponent() {
            this._navClass = true;
        }
        Object.defineProperty(TabListComponent.prototype, "variant", {
            set: function (variant) {
                this._navTabsClass = variant !== 'pills';
                this._navPillsClass = variant === 'pills';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabListComponent.prototype, "vertical", {
            set: function (vertical) {
                this._navFlexColumn = !!vertical;
                this._navH100 = !!vertical;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabListComponent.prototype, "fill", {
            set: function (fill) {
                this._navFill = !!fill;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabListComponent.prototype, "justified", {
            set: function (justified) {
                this._navJustified = !!justified;
            },
            enumerable: false,
            configurable: true
        });
        return TabListComponent;
    }());
    TabListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-tablist',
                    template: "<ng-content></ng-content>\n",
                    styles: [""]
                },] }
    ];
    TabListComponent.ctorParameters = function () { return []; };
    TabListComponent.propDecorators = {
        variant: [{ type: i0.Input }],
        vertical: [{ type: i0.Input }],
        fill: [{ type: i0.Input }],
        justified: [{ type: i0.Input }],
        _navClass: [{ type: i0.HostBinding, args: ['class.nav',] }],
        _navTabsClass: [{ type: i0.HostBinding, args: ['class.nav-tabs',] }],
        _navPillsClass: [{ type: i0.HostBinding, args: ['class.nav-pills',] }],
        _navFill: [{ type: i0.HostBinding, args: ['class.nav-fill',] }],
        _navJustified: [{ type: i0.HostBinding, args: ['class.nav-justified',] }],
        _navFlexColumn: [{ type: i0.HostBinding, args: ['class.flex-column',] }],
        _navH100: [{ type: i0.HostBinding, args: ['class.h-100',] }]
    };

    var TabsetComponent = /** @class */ (function () {
        function TabsetComponent(hostElement, renderer, tabsetService) {
            this.hostElement = hostElement;
            this.renderer = renderer;
            this.tabsetService = tabsetService;
            this._activeTab = 0;
            this._tabsArray = [];
            this.variant = 'tabs';
            this.fade = true;
            this.boxed = false;
            this.activeTabChange = new i0.EventEmitter();
            this.host = this.hostElement.nativeElement;
        }
        Object.defineProperty(TabsetComponent.prototype, "activeTab", {
            get: function () {
                return this._activeTab;
            },
            set: function (index) {
                this._activeTab = index >= 0 ? index : this._activeTab;
            },
            enumerable: false,
            configurable: true
        });
        TabsetComponent.prototype.ngOnInit = function () {
            if (typeof this.boxed === 'string') {
                this.renderer.addClass(this.host, "nav-tabs-boxed-" + this.boxed);
            }
            this.activeTabSubscribe();
        };
        TabsetComponent.prototype.ngOnDestroy = function () {
            this.activeTabUnsubscribe();
        };
        TabsetComponent.prototype.ngAfterContentInit = function () {
            this.tabList.variant = this.variant;
            this.tabList.vertical = this.vertical;
            this.tabList.fill = this.fill;
            this.tabList.justified = this.justified;
            this._tabsArray = this.tabs.toArray();
            if (this.tabs.length) {
                this._selectedTab = this.tabs.length - 1 < this.activeTab ? this.tabs.first : this._tabsArray[this.activeTab];
            }
            this.tabs.forEach(function (item, index) {
                item.indexKey = index;
            });
            this.panes.forEach(function (item, index) {
                item.indexKey = index;
            });
            this.tabsetService.setActiveTab(this._selectedTab);
            this.setActiveTab(this._selectedTab);
        };
        TabsetComponent.prototype.ngAfterContentChecked = function () {
        };
        TabsetComponent.prototype.ngOnChanges = function (changes) {
        };
        TabsetComponent.prototype.setActiveTab = function (tab) {
            if (tab === void 0) { tab = this._selectedTab; }
            this.activeTab = tab.indexKey;
            if (!tab.disabled) {
                tab.active = true;
                this.tabsetService.setActiveTab(tab);
                this.activeTabChange.emit(this.activeTab);
            }
        };
        TabsetComponent.prototype.activeTabSubscribe = function () {
            this.activeTabSubscription = this.tabsetService.activeTab$.subscribe(function (activeTab) {
            });
        };
        TabsetComponent.prototype.activeTabUnsubscribe = function () {
            this.activeTabSubscription.unsubscribe();
        };
        return TabsetComponent;
    }());
    TabsetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-tabset',
                    template: "<ng-content></ng-content>\n",
                    providers: [TabsetService],
                    styles: [""]
                },] }
    ];
    TabsetComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: TabsetService }
    ]; };
    TabsetComponent.propDecorators = {
        fill: [{ type: i0.Input }],
        justified: [{ type: i0.Input }],
        variant: [{ type: i0.Input }],
        fade: [{ type: i0.Input }],
        vertical: [{ type: i0.Input }],
        activeTab: [{ type: i0.Input }],
        boxed: [{ type: i0.HostBinding, args: ['class.nav-tabs-boxed',] }, { type: i0.Input }],
        activeTabChange: [{ type: i0.Output }],
        tabList: [{ type: i0.ContentChild, args: [TabListComponent, { static: true },] }],
        tabs: [{ type: i0.ContentChildren, args: [TabComponent, { descendants: true },] }],
        panes: [{ type: i0.ContentChildren, args: [TabPaneComponent, { descendants: true },] }]
    };

    var TabContentComponent = /** @class */ (function () {
        function TabContentComponent() {
            this._hasPanes = false;
            this._tabContent = true;
        }
        Object.defineProperty(TabContentComponent.prototype, "hasPanes", {
            get: function () {
                return this._hasPanes ? null : true;
            },
            set: function (hasPanes) {
                this._hasPanes = hasPanes;
            },
            enumerable: false,
            configurable: true
        });
        TabContentComponent.prototype.ngOnInit = function () {
        };
        TabContentComponent.prototype.ngAfterContentChecked = function () {
            this.hasPanes = this.panes.length > 0;
        };
        return TabContentComponent;
    }());
    TabContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-tab-content',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{display:block}"]
                },] }
    ];
    TabContentComponent.ctorParameters = function () { return []; };
    TabContentComponent.propDecorators = {
        _tabContent: [{ type: i0.HostBinding, args: ['class.tab-content',] }],
        hasPanes: [{ type: i0.HostBinding, args: ['attr.hidden',] }],
        panes: [{ type: i0.ContentChildren, args: [TabPaneComponent,] }]
    };

    var TabsetModule = /** @class */ (function () {
        function TabsetModule() {
        }
        return TabsetModule;
    }());
    TabsetModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [TabsetComponent, TabListComponent, TabComponent, TabContentComponent, TabPaneComponent],
                    exports: [
                        TabsetComponent,
                        TabListComponent,
                        TabComponent,
                        TabContentComponent,
                        TabPaneComponent,
                    ],
                    imports: [
                        i1.CommonModule
                    ],
                    providers: [
                        TabsetService
                    ]
                },] }
    ];

    var MASKEDINPUT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return TextMaskDirective; }),
        multi: true
    };
    var TextMaskDirective = /** @class */ (function () {
        function TextMaskDirective(platform, _renderer, _elementRef, _compositionMode) {
            this.platform = platform;
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.textMaskConfig = {
                mask: [],
                guide: true,
                placeholderChar: '_',
                pipe: undefined,
                keepCharPositions: false,
            };
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this._composing = false;
            if (this._compositionMode == null) {
                this._compositionMode = !platform.ANDROID;
            }
        }
        TextMaskDirective.prototype.ngOnChanges = function (changes) {
            this._setupMask(true);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(this.inputElement.value);
            }
        };
        TextMaskDirective.prototype.writeValue = function (value) {
            this._setupMask();
            var normalizedValue = value == null ? '' : value;
            this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
            }
        };
        TextMaskDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        TextMaskDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        TextMaskDirective.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        TextMaskDirective.prototype._handleInput = function (value) {
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this._setupMask();
                if (this.textMaskInputElement !== undefined) {
                    this.textMaskInputElement.update(value);
                    value = this.inputElement.value;
                    this.onChange(value);
                }
            }
        };
        TextMaskDirective.prototype._setupMask = function (create) {
            if (create === void 0) { create = false; }
            if (!this.inputElement) {
                if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                    this.inputElement = this._elementRef.nativeElement;
                }
                else {
                    this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
                }
            }
            if (this.inputElement && create) {
                this.textMaskInputElement = textMaskCore.createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
            }
        };
        TextMaskDirective.prototype._compositionStart = function () { this._composing = true; };
        TextMaskDirective.prototype._compositionEnd = function (value) {
            this._composing = false;
            this._compositionMode && this._handleInput(value);
        };
        return TextMaskDirective;
    }());
    TextMaskDirective.decorators = [
        { type: i0.Directive, args: [{
                    host: {
                        '(input)': '_handleInput($event.target.value)',
                        '(blur)': 'onTouched()',
                        '(compositionstart)': '_compositionStart()',
                        '(compositionend)': '_compositionEnd($event.target.value)'
                    },
                    selector: '[textMask]',
                    exportAs: 'textMask',
                    providers: [MASKEDINPUT_VALUE_ACCESSOR]
                },] }
    ];
    TextMaskDirective.ctorParameters = function () { return [
        { type: platform.Platform },
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: Boolean, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [forms.COMPOSITION_BUFFER_MODE,] }] }
    ]; };
    TextMaskDirective.propDecorators = {
        textMaskConfig: [{ type: i0.Input, args: ['textMask',] }]
    };

    var TextMaskConfig = /** @class */ (function () {
        function TextMaskConfig() {
        }
        return TextMaskConfig;
    }());

    var TextMaskModule = /** @class */ (function () {
        function TextMaskModule() {
        }
        TextMaskModule.forRoot = function () {
            return {
                ngModule: TextMaskModule
            };
        };
        return TextMaskModule;
    }());
    TextMaskModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule
                    ],
                    declarations: [
                        TextMaskDirective
                    ],
                    exports: [
                        TextMaskDirective
                    ]
                },] }
    ];

    var ToasterService = /** @class */ (function () {
        function ToasterService() {
            this.toasterState = new rxjs.BehaviorSubject({});
            this.toasterState$ = this.toasterState.asObservable();
        }
        ToasterService.prototype.setState = function (state) {
            this.toasterState.next(state);
        };
        return ToasterService;
    }());
    ToasterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ToasterService_Factory() { return new ToasterService(); }, token: ToasterService, providedIn: "root" });
    ToasterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ToasterService.ctorParameters = function () { return []; };

    var ToastComponent = /** @class */ (function () {
        function ToastComponent(hostElement, renderer, ref, toasterService) {
            this.hostElement = hostElement;
            this.renderer = renderer;
            this.ref = ref;
            this.toasterService = toasterService;
            this.autohide = true;
            this.delay = 5000;
            this.fade = true;
            this.shown = new i0.EventEmitter();
            this.hidden = new i0.EventEmitter();
            this.timer = new i0.EventEmitter();
        }
        Object.defineProperty(ToastComponent.prototype, "clock", {
            get: function () {
                return this._clock;
            },
            set: function (value) {
                this._clock = value;
                this.timer.emit(this._clock);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToastComponent.prototype, "animationDisabled", {
            get: function () {
                return !this.fade;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToastComponent.prototype, "animateType", {
            get: function () {
                return this.show ? 'show' : 'hide';
            },
            enumerable: false,
            configurable: true
        });
        ToastComponent.prototype.onMouseOver = function () {
            this.clearTimer();
            this.clearClock();
        };
        ToastComponent.prototype.onMouseOut = function () {
            this.setTimer();
        };
        Object.defineProperty(ToastComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToastComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        toast: true
                    },
                    _a["toast-" + this.color] = !!this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        ToastComponent.prototype.ngOnInit = function () {
            if (this.show) {
                this.toasterService.setState({ toast: this, show: this.show, position: this.position });
                this.setTimer();
            }
            this.stateToasterSubscribe(true);
        };
        ToastComponent.prototype.ngOnDestroy = function () {
            this.clearTimer();
            this.clearClock();
            this.stateToasterSubscribe(false);
        };
        ToastComponent.prototype.ngOnChanges = function (changes) {
            if (changes.color) {
                this.renderer.removeClass(this.hostElement.nativeElement, "toast-" + changes.color.previousValue);
            }
            if (changes.show) {
                this.toasterService.setState({ toast: this, show: this.show, position: this.position });
            }
        };
        ToastComponent.prototype.setTimer = function () {
            var _this = this;
            this.clearTimer();
            if (this.autohide) {
                this.timerId = this.delay > 0 ? setTimeout(function () { return _this.onClose(); }, this.delay) : null;
                this.setClock();
            }
        };
        ToastComponent.prototype.clearTimer = function () {
            clearTimeout(this.timerId);
            this.timerId = null;
        };
        ToastComponent.prototype.onClose = function () {
            this.clearTimer();
            this.show = false;
            this.hidden.emit();
            this.toasterService.setState({ toast: this, show: this.show, position: this.position });
        };
        ToastComponent.prototype.setClock = function () {
            var _this = this;
            this.clearClock();
            this.clock = 0;
            this.clockId = setInterval(function () {
                _this.clock += 1;
            }, 1000);
            this.clockTimerId = setTimeout(function () {
                _this.clearClock();
            }, this.delay);
        };
        ToastComponent.prototype.clearClock = function () {
            clearTimeout(this.clockTimerId);
            clearInterval(this.clockId);
            this.clockId = null;
        };
        ToastComponent.prototype.stateToasterSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                var filtered = this.toasterService.toasterState$.pipe(operators.filter(function (state) { return state.toast === _this; }));
                this.stateToasterSubscription = filtered.subscribe(function (state) {
                    _this.state = state.toast;
                });
            }
            else {
                this.stateToasterSubscription.unsubscribe();
            }
        };
        return ToastComponent;
    }());
    ToastComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-toast',
                    template: "<ng-content></ng-content>\n",
                    animations: [
                        animations.trigger('fadeInOut', [
                            animations.state('show', animations.style({ opacity: 1 })),
                            animations.state('void', animations.style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                            animations.state('hide', animations.style({ opacity: 0, height: 0, padding: 0, border: 0, margin: 0 })),
                            animations.transition('show => *', [
                                animations.animate('{{ time }} {{ easing }}', animations.style({ opacity: 0 })),
                                animations.animate('{{ time }} {{ easing }}', animations.style({ height: 0, padding: 0, border: 0, margin: 0 })),
                            ], {
                                params: { time: '300ms', easing: 'ease-out' }
                            }),
                            animations.transition('* => show', [
                                animations.animate('{{ time }} {{ easing }}', animations.style({ opacity: 1, height: '*', padding: '*', border: '*', margin: '*' })),
                            ], {
                                params: { time: '300ms', easing: 'ease-in' }
                            })
                        ])
                    ],
                    styles: [""]
                },] }
    ];
    ToastComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef },
        { type: ToasterService }
    ]; };
    ToastComponent.propDecorators = {
        autohide: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        delay: [{ type: i0.Input }],
        fade: [{ type: i0.Input }],
        show: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        shown: [{ type: i0.Output }],
        hidden: [{ type: i0.Output }],
        timer: [{ type: i0.Output }],
        animationDisabled: [{ type: i0.HostBinding, args: ['@.disabled',] }],
        animateType: [{ type: i0.HostBinding, args: ['@fadeInOut',] }],
        onMouseOver: [{ type: i0.HostListener, args: ['mouseover',] }],
        onMouseOut: [{ type: i0.HostListener, args: ['mouseout',] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ToastHeaderComponent = /** @class */ (function () {
        function ToastHeaderComponent(toast) {
            this.toast = toast;
            this.closeButton = true;
            this.toastHeaderClass = true;
        }
        return ToastHeaderComponent;
    }());
    ToastHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-toast-header',
                    template: "<ng-container>\r\n  <ng-content></ng-content>\r\n  <button *ngIf=\"closeButton\" class=\"close mfs-auto\" aria-label=\"close\" [style]=\"{outline: 0}\" [cToastClose]=\"toast\">\u00D7</button>\r\n</ng-container>\r\n",
                    styles: [""]
                },] }
    ];
    ToastHeaderComponent.ctorParameters = function () { return [
        { type: ToastComponent, decorators: [{ type: i0.Optional }] }
    ]; };
    ToastHeaderComponent.propDecorators = {
        closeButton: [{ type: i0.Input }],
        toastHeaderClass: [{ type: i0.HostBinding, args: ['class.toast-header',] }]
    };

    var ToastBodyComponent = /** @class */ (function () {
        function ToastBodyComponent(toast) {
            this.toast = toast;
            this.toastBodyClass = true;
        }
        ToastBodyComponent.prototype.ngOnInit = function () {
        };
        return ToastBodyComponent;
    }());
    ToastBodyComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-toast-body',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{display:block}"]
                },] }
    ];
    ToastBodyComponent.ctorParameters = function () { return [
        { type: ToastComponent, decorators: [{ type: i0.Optional }] }
    ]; };
    ToastBodyComponent.propDecorators = {
        toastBodyClass: [{ type: i0.HostBinding, args: ['class.toast-body',] }]
    };

    var ToasterHostDirective = /** @class */ (function () {
        function ToasterHostDirective(viewContainerRef) {
            this.viewContainerRef = viewContainerRef;
        }
        return ToasterHostDirective;
    }());
    ToasterHostDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cToasterHost]',
                    exportAs: 'cToasterHost',
                },] }
    ];
    ToasterHostDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };

    (function (ToasterPosition) {
        ToasterPosition["Static"] = "static";
        ToasterPosition["TopCenter"] = "top-center";
        ToasterPosition["TopFull"] = "top-full";
        ToasterPosition["TopLeft"] = "top-left";
        ToasterPosition["TopRight"] = "top-right";
        ToasterPosition["BottomCenter"] = "bottom-center";
        ToasterPosition["BottomFull"] = "bottom-full";
        ToasterPosition["BottomLeft"] = "bottom-left";
        ToasterPosition["BottomRight"] = "bottom-right";
    })(exports.ToasterPosition || (exports.ToasterPosition = {}));
    var ToasterComponent = /** @class */ (function () {
        function ToasterComponent(componentFactoryResolver, hostElement, renderer, toasterService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.hostElement = hostElement;
            this.renderer = renderer;
            this.toasterService = toasterService;
            this.positions = Object.values(exports.ToasterPosition);
            this.toastsDynamic = [];
            this.position = exports.ToasterPosition.TopRight;
        }
        Object.defineProperty(ToasterComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToasterComponent.prototype, "hostClasses", {
            get: function () {
                var _c;
                var classes = classNames__default['default']((_c = {
                        toaster: true
                    },
                    _c["toaster-" + this.position] = this.position !== 'static' && !!this.position,
                    _c));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        ToasterComponent.prototype.ngOnInit = function () {
            this.stateToasterSubscribe(true);
        };
        ToasterComponent.prototype.ngOnDestroy = function () {
            this.stateToasterSubscribe(false);
        };
        ToasterComponent.prototype.ngAfterContentChecked = function () {
            this.toasts = this.contentToasts;
        };
        ToasterComponent.prototype.stateToasterSubscribe = function (subscribe) {
            var _this = this;
            if (subscribe === void 0) { subscribe = true; }
            if (subscribe) {
                this.stateToasterSubscription = this.toasterService.toasterState$.subscribe(function (state) {
                    var _a;
                    if (state.show === false) {
                        _this.removeToast(state);
                    }
                    if (state.show === true && ((_a = state.toast) === null || _a === void 0 ? void 0 : _a.dynamic) === undefined) { }
                });
            }
            else {
                this.stateToasterSubscription.unsubscribe();
            }
        };
        ToasterComponent.prototype.addToast = function (toast, options) {
            var e_1, _c;
            var factory = this.componentFactoryResolver.resolveComponentFactory(toast);
            var componentRef = this.toasterHost.viewContainerRef.createComponent(factory);
            this.toastsDynamic.push(componentRef);
            var index = this.toastsDynamic.indexOf(componentRef);
            try {
                for (var _d = __values(Object.entries(options)), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var _f = __read(_e.value, 2), key = _f[0], value = _f[1];
                    componentRef.instance[key] = value;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            componentRef.instance['position'] = this.position;
            componentRef.instance['dynamic'] = true;
            componentRef.instance['index'] = index;
            componentRef.instance['show'] = true;
            componentRef.changeDetectorRef.detectChanges();
            return componentRef;
        };
        ToasterComponent.prototype.removeToast = function (state) {
            var _a, _b;
            (_a = this.toastsDynamic) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {
                if (state.toast.dynamic && (item.instance === state.toast)) {
                    item.destroy();
                }
            });
            (_b = this.toasts) === null || _b === void 0 ? void 0 : _b.forEach(function (item) {
                if (item.element.nativeElement === state.toast.hostElement.nativeElement) {
                    state.toast.show = false;
                    setTimeout(function () {
                        item.element.nativeElement.remove();
                    }, 300);
                }
            });
        };
        return ToasterComponent;
    }());
    ToasterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-toaster',
                    template: "<ng-template cToasterHost></ng-template>\n<ng-content cToasterHost></ng-content>\n",
                    styles: [""]
                },] }
    ];
    ToasterComponent.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: ToasterService }
    ]; };
    ToasterComponent.propDecorators = {
        position: [{ type: i0.Input }],
        toasterHost: [{ type: i0.ViewChild, args: [ToasterHostDirective, { static: true },] }],
        contentToasts: [{ type: i0.ContentChildren, args: [ToastComponent, { read: i0.ViewContainerRef },] }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var ToastCloseDirective = /** @class */ (function () {
        function ToastCloseDirective(toasterService) {
            this.toasterService = toasterService;
        }
        ToastCloseDirective.prototype.toggleOpen = function ($event) {
            $event.preventDefault();
            this.toasterService.setState({ show: false, toast: this.toast });
        };
        return ToastCloseDirective;
    }());
    ToastCloseDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cToastClose]',
                    exportAs: 'cToastClose',
                },] }
    ];
    ToastCloseDirective.ctorParameters = function () { return [
        { type: ToasterService }
    ]; };
    ToastCloseDirective.propDecorators = {
        toast: [{ type: i0.Input, args: ['cToastClose',] }],
        toggleOpen: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var ToastModule = /** @class */ (function () {
        function ToastModule() {
        }
        return ToastModule;
    }());
    ToastModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [ToastComponent, ToastHeaderComponent, ToastBodyComponent, ToasterComponent, ToasterHostDirective, ToastCloseDirective],
                    imports: [
                        i1.CommonModule
                    ],
                    providers: [ToasterService],
                    exports: [ToastComponent, ToastHeaderComponent, ToastBodyComponent, ToasterComponent, ToasterHostDirective, ToastCloseDirective]
                },] }
    ];

    var TogglerComponent = /** @class */ (function () {
        function TogglerComponent(changeDetector) {
            this.changeDetector = changeDetector;
            this.displayFlex = true;
            this.hasContent = true;
        }
        Object.defineProperty(TogglerComponent.prototype, "buttonClass", {
            get: function () {
                if (this.inHeader) {
                    return 'c-header-toggler';
                }
                else if (this.inNavbar) {
                    return 'navbar-toggler';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TogglerComponent.prototype, "iconClass", {
            get: function () {
                if (this.inHeader) {
                    return 'c-header-toggler-icon';
                }
                else if (this.inNavbar) {
                    return 'navbar-toggler-icon';
                }
            },
            enumerable: false,
            configurable: true
        });
        TogglerComponent.prototype.ngAfterViewInit = function () {
            this.hasContent = this.content.nativeElement.childNodes.length;
            this.changeDetector.detectChanges();
        };
        return TogglerComponent;
    }());
    TogglerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-toggler',
                    template: "<div #content *ngIf = \"hasContent; else default\" class=\"d-flex\"><ng-content></ng-content></div>\n<ng-template #default>\n  <button [class]=\"buttonClass\" type=\"button\">\n    <span [class]=\"iconClass\"></span>\n  </button>\n</ng-template>\n",
                    styles: [""]
                },] }
    ];
    TogglerComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    TogglerComponent.propDecorators = {
        inHeader: [{ type: i0.Input }],
        inNavbar: [{ type: i0.Input }],
        displayFlex: [{ type: i0.HostBinding, args: ['class.d-flex',] }],
        content: [{ type: i0.ViewChild, args: ['content',] }]
    };

    var TogglerModule = /** @class */ (function () {
        function TogglerModule() {
        }
        return TogglerModule;
    }());
    TogglerModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [TogglerComponent],
                    exports: [
                        TogglerComponent
                    ],
                    imports: [
                        i1.CommonModule
                    ]
                },] }
    ];

    var WidgetSimpleComponent = /** @class */ (function () {
        function WidgetSimpleComponent() {
        }
        WidgetSimpleComponent.prototype.ngOnInit = function () { };
        return WidgetSimpleComponent;
    }());
    WidgetSimpleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-widget-simple',
                    template: "<div class=\"card\">\n  <div class=\"card-body text-center\">\n    <div *ngIf=\"!!header\" class=\"text-muted small text-uppercase font-weight-bold\">\n      {{header}}\n    </div>\n    <div *ngIf=\"!!text\" class=\"h2 py-3\">\n      {{text}}\n    </div>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    styles: [""]
                },] }
    ];
    WidgetSimpleComponent.ctorParameters = function () { return []; };
    WidgetSimpleComponent.propDecorators = {
        header: [{ type: i0.Input }],
        text: [{ type: i0.Input }]
    };

    var WidgetBrandComponent = /** @class */ (function () {
        function WidgetBrandComponent() {
        }
        Object.defineProperty(WidgetBrandComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetBrandComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    card: true,
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        WidgetBrandComponent.prototype.ngOnInit = function () {
        };
        Object.defineProperty(WidgetBrandComponent.prototype, "headerClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'card-header': true,
                        'content-center': true,
                        'text-white': true,
                        'p-0': true
                    },
                    _a["bg-" + this.color] = !!this.color,
                    _a), this.addHeaderClasses);
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return WidgetBrandComponent;
    }());
    WidgetBrandComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-widget-brand',
                    template: "<ng-container>\n  <div [class]=\"headerClasses\">\n    <ng-content></ng-content>\n  </div>\n  <!--todo: <ng-content select=\"[slot=body]\"></ng-content>-->\n  <div class=\"card-body row text-center\">\n    <div class=\"col\">\n      <div *ngIf=\"!!rightHeader\" class=\"text-value-lg\">{{rightHeader}}</div>\n      <div *ngIf=\"!!rightFooter\" class=\"text-uppercase text-muted small\">{{rightFooter}}</div>\n    </div>\n    <div class=\"c-vr\"></div>\n    <div class=\"col\">\n      <div *ngIf=\"!!leftHeader\" class=\"text-value-lg\">{{leftHeader}}</div>\n      <div *ngIf=\"!!leftFooter\" class=\"text-uppercase text-muted small\">{{leftFooter}}</div>\n    </div>\n  </div>\n</ng-container>\n",
                    styles: [""]
                },] }
    ];
    WidgetBrandComponent.ctorParameters = function () { return []; };
    WidgetBrandComponent.propDecorators = {
        color: [{ type: i0.Input }],
        rightHeader: [{ type: i0.Input }],
        leftHeader: [{ type: i0.Input }],
        rightFooter: [{ type: i0.Input }],
        leftFooter: [{ type: i0.Input }],
        addHeaderClasses: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var WidgetIconComponent = /** @class */ (function () {
        function WidgetIconComponent() {
            this.iconPadding = true;
        }
        Object.defineProperty(WidgetIconComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetIconComponent.prototype, "hostClasses", {
            get: function () {
                var classes = classNames__default['default']({
                    card: true,
                });
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        WidgetIconComponent.prototype.ngOnInit = function () {
        };
        Object.defineProperty(WidgetIconComponent.prototype, "cardBodyClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'card-body': true,
                        'd-flex': true,
                        'align-items-center': true
                    },
                    _a["p-" + (this.iconPadding ? '3' : '0')] = true,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetIconComponent.prototype, "bodySlotClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'mfe-3': true,
                        'text-white': true
                    },
                    _a["bg-" + this.color] = this.color,
                    _a["p-" + (this.iconPadding ? '3' : '4')] = true,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetIconComponent.prototype, "headerClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        'text-value': true
                    },
                    _a["text-" + this.color] = this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        return WidgetIconComponent;
    }());
    WidgetIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-widget-icon',
                    template: "<ng-container>\n  <div [class]=\"cardBodyClasses\">\n    <div [class]=\"bodySlotClasses\">\n      <ng-content></ng-content>\n    </div>\n    <div>\n      <div *ngIf=\"!!header\" [class]=\"headerClasses\">\n        {{header}}\n      </div>\n      <div *ngIf=\"!!text\" class=\"text-muted text-uppercase font-weight-bold small\">\n        {{text}}\n      </div>\n    </div>\n  </div>\n  <ng-content select=\"[slot=footer]\"></ng-content>\n</ng-container>\n",
                    styles: [""]
                },] }
    ];
    WidgetIconComponent.ctorParameters = function () { return []; };
    WidgetIconComponent.propDecorators = {
        color: [{ type: i0.Input }],
        header: [{ type: i0.Input }],
        text: [{ type: i0.Input }],
        iconPadding: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var WidgetDropdownComponent = /** @class */ (function () {
        function WidgetDropdownComponent() {
        }
        Object.defineProperty(WidgetDropdownComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetDropdownComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        card: true,
                        'text-white': true
                    },
                    _a["bg-" + this.color] = !!this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        WidgetDropdownComponent.prototype.ngOnInit = function () { };
        return WidgetDropdownComponent;
    }());
    WidgetDropdownComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-widget-dropdown',
                    template: "<ng-container>\n  <div class=\"card-body pb-0 d-flex justify-content-between align-items-start\">\n    <div>\n      <div v-if=\"header\" class=\"text-value-lg\">{{header}}</div>\n      <div v-if=\"text\">{{text}}</div>\n    </div>\n    <ng-content></ng-content>\n<!--    <ng-content select=\"[dropdown]\" ></ng-content>-->\n  </div>\n  <ng-content select=\"[slot=footer]\"></ng-content>\n</ng-container>\n",
                    styles: [""]
                },] }
    ];
    WidgetDropdownComponent.ctorParameters = function () { return []; };
    WidgetDropdownComponent.propDecorators = {
        color: [{ type: i0.Input }],
        header: [{ type: i0.Input }],
        text: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var WidgetProgressComponent = /** @class */ (function () {
        function WidgetProgressComponent() {
            this.value = 25;
        }
        Object.defineProperty(WidgetProgressComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetProgressComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        card: true,
                        'text-white': this.inverse
                    },
                    _a["bg-" + this.color] = this.inverse && !!this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        WidgetProgressComponent.prototype.ngOnInit = function () {
        };
        return WidgetProgressComponent;
    }());
    WidgetProgressComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-widget-progress',
                    template: "<div class=\"card-body\">\n  <div v-if=\"header\" class=\"h4 m-0\">{{header}}</div>\n  <div v-if=\"text\">{{text}}</div>\n  <c-progress size=\"xs\" [class]=\"{'my-3': true, 'mb-0': true, 'progress-white': inverse }\">\n    <c-progress-bar\n      [color]=\"!inverse ? color : ''\"\n      [value]=\"value\"\n    ></c-progress-bar>\n  </c-progress>\n  <small *ngIf=\"!!footer\" class=\"text-muted\">\n    {{footer}}\n  </small>\n</div>\n",
                    styles: [""]
                },] }
    ];
    WidgetProgressComponent.ctorParameters = function () { return []; };
    WidgetProgressComponent.propDecorators = {
        color: [{ type: i0.Input }],
        footer: [{ type: i0.Input }],
        header: [{ type: i0.Input }],
        text: [{ type: i0.Input }],
        inverse: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var WidgetProgressIconComponent = /** @class */ (function () {
        function WidgetProgressIconComponent() {
            this.value = 25;
        }
        Object.defineProperty(WidgetProgressIconComponent.prototype, "getClasses", {
            get: function () {
                return this.hostClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetProgressIconComponent.prototype, "hostClasses", {
            get: function () {
                var _a;
                var classes = classNames__default['default']((_a = {
                        card: true,
                        'text-white': this.inverse
                    },
                    _a["bg-" + this.color] = this.inverse && !!this.color,
                    _a));
                return classes;
            },
            enumerable: false,
            configurable: true
        });
        WidgetProgressIconComponent.prototype.ngOnInit = function () {
        };
        return WidgetProgressIconComponent;
    }());
    WidgetProgressIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'c-widget-progress-icon',
                    template: "<div class=\"card-body\">\n  <div class=\"h1 text-muted text-right mb-4\">\n    <ng-content></ng-content>\n  </div>\n  <div *ngIf=\"!!header\" class=\"h4 mb-0\">{{header}}</div>\n  <small *ngIf=\"!!text\" class=\"text-muted text-uppercase font-weight-bold\">\n    {{text}}\n  </small>\n<!-- todo  <ng-content slot=\"progress\"></ng-content>-->\n    <c-progress size=\"xs\" [class]=\"{'my-3': true, 'mb-0': true, 'progress-white': inverse }\">\n      <c-progress-bar\n        [color]=\"!inverse ? color : ''\"\n        [value]=\"value\"\n        >\n      </c-progress-bar>\n    </c-progress>\n</div>\n",
                    styles: [""]
                },] }
    ];
    WidgetProgressIconComponent.ctorParameters = function () { return []; };
    WidgetProgressIconComponent.propDecorators = {
        color: [{ type: i0.Input }],
        header: [{ type: i0.Input }],
        text: [{ type: i0.Input }],
        inverse: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        getClasses: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var WidgetModule = /** @class */ (function () {
        function WidgetModule() {
        }
        return WidgetModule;
    }());
    WidgetModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        WidgetSimpleComponent,
                        WidgetBrandComponent,
                        WidgetIconComponent,
                        WidgetDropdownComponent,
                        WidgetProgressComponent,
                        WidgetProgressIconComponent
                    ],
                    exports: [
                        WidgetSimpleComponent,
                        WidgetBrandComponent,
                        WidgetIconComponent,
                        WidgetDropdownComponent,
                        WidgetProgressComponent,
                        WidgetProgressIconComponent,
                        ProgressModule
                    ],
                    imports: [
                        i1.CommonModule,
                        ProgressModule
                    ]
                },] }
    ];

    exports.AccordionModule = AccordionModule;
    exports.AlertModule = AlertModule;
    exports.BadgeModule = BadgeModule;
    exports.BodyComponent = BodyComponent;
    exports.BreadcrumbModule = BreadcrumbModule;
    exports.ButtonModule = ButtonModule;
    exports.CalloutModule = CalloutModule;
    exports.CardModule = CardModule;
    exports.CarouselModule = CarouselModule;
    exports.ChartModule = ChartModule;
    exports.ClassToggleService = ClassToggleService;
    exports.CollapseDirective = CollapseDirective;
    exports.CollapseModule = CollapseModule;
    exports.DropdownModule = DropdownModule;
    exports.EmbedModule = EmbedModule;
    exports.FooterComponent = FooterComponent;
    exports.FormModule = FormModule;
    exports.GridModule = GridModule;
    exports.HeaderBrandComponent = HeaderBrandComponent;
    exports.HeaderComponent = HeaderComponent;
    exports.ImgModule = ImgModule;
    exports.LayoutModule = LayoutModule;
    exports.ListGroupModule = ListGroupModule;
    exports.MediaModule = MediaModule;
    exports.ModalModule = ModalModule;
    exports.NavModule = NavModule;
    exports.NavbarModule = NavbarModule;
    exports.ProgressModule = ProgressModule;
    exports.SharedModule = SharedModule;
    exports.SidebarBackdropComponent = SidebarBackdropComponent;
    exports.SidebarBrandComponent = SidebarBrandComponent;
    exports.SidebarComponent = SidebarComponent;
    exports.SidebarFooterComponent = SidebarFooterComponent;
    exports.SidebarFormComponent = SidebarFormComponent;
    exports.SidebarHeaderComponent = SidebarHeaderComponent;
    exports.SidebarMinimizeDirective = SidebarMinimizeDirective;
    exports.SidebarMinimizerComponent = SidebarMinimizerComponent;
    exports.SidebarModule = SidebarModule;
    exports.SidebarNavBadgePipe = SidebarNavBadgePipe;
    exports.SidebarNavComponent = SidebarNavComponent;
    exports.SidebarNavDividerComponent = SidebarNavDividerComponent;
    exports.SidebarNavDropdownComponent = SidebarNavDropdownComponent;
    exports.SidebarNavDropdownToggleDirective = SidebarNavDropdownToggleDirective;
    exports.SidebarNavIconPipe = SidebarNavIconPipe;
    exports.SidebarNavItemClassPipe = SidebarNavItemClassPipe;
    exports.SidebarNavItemsComponent = SidebarNavItemsComponent;
    exports.SidebarNavLabelComponent = SidebarNavLabelComponent;
    exports.SidebarNavLinkComponent = SidebarNavLinkComponent;
    exports.SidebarNavLinkContentComponent = SidebarNavLinkContentComponent;
    exports.SidebarNavLinkPipe = SidebarNavLinkPipe;
    exports.SidebarNavService = SidebarNavService;
    exports.SidebarNavTitleComponent = SidebarNavTitleComponent;
    exports.SidebarService = SidebarService;
    exports.SidebarToggleDirective = SidebarToggleDirective;
    exports.SpinkitModule = SpinkitModule;
    exports.SpinnerModule = SpinnerModule;
    exports.SubheaderComponent = SubheaderComponent;
    exports.SwitchModule = SwitchModule;
    exports.TabsetModule = TabsetModule;
    exports.TextMaskConfig = TextMaskConfig;
    exports.TextMaskDirective = TextMaskDirective;
    exports.TextMaskModule = TextMaskModule;
    exports.ToastBodyComponent = ToastBodyComponent;
    exports.ToastCloseDirective = ToastCloseDirective;
    exports.ToastComponent = ToastComponent;
    exports.ToastHeaderComponent = ToastHeaderComponent;
    exports.ToastModule = ToastModule;
    exports.ToasterComponent = ToasterComponent;
    exports.ToasterHostDirective = ToasterHostDirective;
    exports.ToasterService = ToasterService;
    exports.TogglerModule = TogglerModule;
    exports.WidgetModule = WidgetModule;
    exports.WrapperComponent = WrapperComponent;
    exports.ɵa = AccordionComponent;
    exports.ɵb = AccordionGroupComponent;
    exports.ɵba = CarouselComponent;
    exports.ɵbb = CarouselService;
    exports.ɵbc = CarouselState;
    exports.ɵbd = CarouselConfig;
    exports.ɵbe = CarouselCaptionComponent;
    exports.ɵbf = CarouselControlComponent;
    exports.ɵbg = CarouselIndicatorsComponent;
    exports.ɵbh = CarouselInnerComponent;
    exports.ɵbi = toLeft;
    exports.ɵbj = toRight;
    exports.ɵbk = slideAnimation;
    exports.ɵbl = CarouselItemComponent;
    exports.ɵbm = DropdownDirective;
    exports.ɵbn = DropdownService;
    exports.ɵbo = DropdownState;
    exports.ɵbp = OutClickService;
    exports.ɵbq = DropdownToggleDirective;
    exports.ɵbr = DropdownMenuDirective;
    exports.ɵbs = DropdownHeaderDirective;
    exports.ɵbt = DropdownDividerDirective;
    exports.ɵbu = DropdownItemDirective;
    exports.ɵbv = DropdownDividerComponent;
    exports.ɵbw = EmbedComponent;
    exports.ɵbx = EmbedItemDirective;
    exports.ɵby = FormDirective;
    exports.ɵbz = FormCheckComponent;
    exports.ɵc = CardModule;
    exports.ɵca = FormFeedbackComponent;
    exports.ɵcb = FormGroupComponent;
    exports.ɵcc = FormTextComponent;
    exports.ɵcd = InputDirective;
    exports.ɵce = InputGroupComponent;
    exports.ɵcf = InputGroupTextComponent;
    exports.ɵcg = InputGroupAddonComponent;
    exports.ɵch = InputGroupPrependComponent;
    exports.ɵci = InputGroupAppendComponent;
    exports.ɵcj = TextareaDirective;
    exports.ɵck = SelectDirective;
    exports.ɵcl = LabelDirective;
    exports.ɵcm = ContainerComponent;
    exports.ɵcn = RowComponent;
    exports.ɵco = RowDirective;
    exports.ɵcp = ColComponent;
    exports.ɵcq = ColDirective;
    exports.ɵcr = ImgDirective;
    exports.ɵcs = ListGroupDirective;
    exports.ɵct = ListGroupItemDirective;
    exports.ɵcu = MediaComponent;
    exports.ɵcv = MediaDirective;
    exports.ɵcw = MediaBodyComponent;
    exports.ɵcx = ModalComponent;
    exports.ɵcy = NavComponent;
    exports.ɵcz = NavItemComponent;
    exports.ɵd = CollapseDirective;
    exports.ɵda = NavLinkDirective;
    exports.ɵdb = NavbarComponent;
    exports.ɵdc = NavbarBrandComponent;
    exports.ɵdd = NavbarNavComponent;
    exports.ɵde = NavbarTextComponent;
    exports.ɵdf = ProgressComponent;
    exports.ɵdg = ProgressBarComponent;
    exports.ɵdh = OutClickDirective;
    exports.ɵdi = OutClickService;
    exports.ɵdj = HtmlAttributesDirective;
    exports.ɵdk = SpinkitComponent;
    exports.ɵdl = SpinnerComponent;
    exports.ɵdm = SwitchComponent;
    exports.ɵdn = TabsetComponent;
    exports.ɵdo = TabsetService;
    exports.ɵdp = TabListComponent;
    exports.ɵdq = TabComponent;
    exports.ɵdr = TabPaneComponent;
    exports.ɵds = TabContentComponent;
    exports.ɵdt = ToastComponent;
    exports.ɵdu = ToasterService;
    exports.ɵdv = ToastHeaderComponent;
    exports.ɵdw = ToastBodyComponent;
    exports.ɵdx = ToasterComponent;
    exports.ɵdy = ToasterHostDirective;
    exports.ɵdz = ToastCloseDirective;
    exports.ɵe = AlertComponent;
    exports.ɵea = TogglerComponent;
    exports.ɵeb = WidgetSimpleComponent;
    exports.ɵec = WidgetBrandComponent;
    exports.ɵed = WidgetIconComponent;
    exports.ɵee = WidgetDropdownComponent;
    exports.ɵef = WidgetProgressComponent;
    exports.ɵeg = WidgetProgressIconComponent;
    exports.ɵf = BadgeComponent;
    exports.ɵg = SharedModule;
    exports.ɵh = BreadcrumbComponent;
    exports.ɵi = BreadcrumbDirective;
    exports.ɵj = BreadcrumbService;
    exports.ɵk = ButtonComponent;
    exports.ɵl = ButtonDirective;
    exports.ɵm = ButtonGroupComponent;
    exports.ɵn = ButtonToolbarComponent;
    exports.ɵo = RADIO_CONTROL_VALUE_ACCESSOR$1;
    exports.ɵp = ButtonRadioDirective;
    exports.ɵq = RADIO_CONTROL_VALUE_ACCESSOR;
    exports.ɵr = ButtonRadioGroupDirective;
    exports.ɵs = CalloutComponent;
    exports.ɵt = CardComponent;
    exports.ɵu = CardBodyComponent;
    exports.ɵv = CardFooterComponent;
    exports.ɵw = CardGroupComponent;
    exports.ɵx = CardHeaderComponent;
    exports.ɵy = CardHeaderActionsComponent;
    exports.ɵz = NoZoneBaseChartDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=coreui-angular.umd.js.map
