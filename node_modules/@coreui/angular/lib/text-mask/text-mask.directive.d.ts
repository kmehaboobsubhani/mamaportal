import { ElementRef, OnChanges, Provider, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Platform } from '@angular/cdk/platform';
import { TextMaskConfig } from './text-mask-config';
import * as ɵngcc0 from '@angular/core';
export declare const MASKEDINPUT_VALUE_ACCESSOR: Provider;
export declare class TextMaskDirective implements ControlValueAccessor, OnChanges {
    platform: Platform;
    private _renderer;
    private _elementRef;
    private readonly _compositionMode;
    constructor(platform: Platform, _renderer: Renderer2, _elementRef: ElementRef, _compositionMode: boolean);
    textMaskConfig: TextMaskConfig;
    onChange: (_: any) => void;
    onTouched: () => void;
    private textMaskInputElement;
    private inputElement;
    private _composing;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    _handleInput(value: any): void;
    _setupMask(create?: boolean): void;
    _compositionStart(): void;
    _compositionEnd(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TextMaskDirective, [null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TextMaskDirective, "[textMask]", ["textMask"], { "textMaskConfig": "textMask"; }, {}, never>;
}
export { conformToMask } from 'text-mask-core/dist/textMaskCore';

//# sourceMappingURL=text-mask.directive.d.ts.map