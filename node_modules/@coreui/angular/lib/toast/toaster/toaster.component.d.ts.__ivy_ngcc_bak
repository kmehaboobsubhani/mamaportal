import { AfterContentChecked, ComponentFactoryResolver, ComponentRef, ElementRef, OnDestroy, OnInit, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { Subscription } from 'rxjs';
import { ToasterService } from './toaster.service';
import { ToasterHostDirective } from './toaster-host.directive';
export declare enum ToasterPosition {
    Static = "static",
    TopCenter = "top-center",
    TopFull = "top-full",
    TopLeft = "top-left",
    TopRight = "top-right",
    BottomCenter = "bottom-center",
    BottomFull = "bottom-full",
    BottomLeft = "bottom-left",
    BottomRight = "bottom-right"
}
export declare type TToasterPosition = ToasterPosition.Static | ToasterPosition.TopCenter | ToasterPosition.TopFull | ToasterPosition.TopLeft | ToasterPosition.TopRight | ToasterPosition.BottomCenter | ToasterPosition.BottomFull | ToasterPosition.BottomLeft | ToasterPosition.BottomRight;
export declare class ToasterComponent implements OnDestroy, OnInit, AfterContentChecked {
    private componentFactoryResolver;
    private hostElement;
    private renderer;
    private toasterService;
    stateToasterSubscription: Subscription;
    positions: ToasterPosition[];
    toasts: QueryList<ViewContainerRef>;
    toastsDynamic: any[];
    position: TToasterPosition;
    toasterHost: ToasterHostDirective;
    contentToasts: QueryList<ViewContainerRef>;
    get getClasses(): any;
    get hostClasses(): any;
    constructor(componentFactoryResolver: ComponentFactoryResolver, hostElement: ElementRef, renderer: Renderer2, toasterService: ToasterService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    private stateToasterSubscribe;
    addToast(toast: any, options: any): ComponentRef<unknown>;
    removeToast(state: any): void;
}
