{"version":3,"file":"angular2-ladda.umd.js","sources":["../../../projects/ladda/src/lib/ladda-config.ts","../../../projects/ladda/src/lib/ladda.directive.ts","../../../projects/ladda/src/lib/ladda.module.ts","../../../../projects/ladda/src/public-api.ts","../../../../projects/ladda/src/angular2-ladda.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\n\r\nexport type laddaStyle =\r\n    \"expand-left\" | \"expand-right\" | \"expand-up\" | \"expand-down\" |\r\n    \"contract\" | \"contract-overlay\" | \"zoom-in\" | \"zoom-out\" |\r\n    \"slide-left\" | \"slide-right\" | \"slide-up\" | \"slide-down\";\r\n\r\nexport abstract class LaddaConfigArgs {\r\n    style?: laddaStyle;\r\n    spinnerSize?: number;\r\n    spinnerColor?: string;\r\n    spinnerLines?: number;\r\n}\r\n\r\nexport let configAttributes: {[key: string]: keyof LaddaConfigArgs} = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\n\r\n@Injectable()\r\nexport class LaddaConfig implements LaddaConfigArgs {\r\n    constructor(config: LaddaConfigArgs = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n","import {isPlatformBrowser} from '@angular/common';\r\nimport {Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID} from '@angular/core';\r\nimport {LaddaConfig, LaddaConfigArgs, configAttributes} from './ladda-config';\r\nimport {create as createLadda, LaddaButton} from 'ladda';\r\n\r\nexport type laddaValue = boolean | number | undefined | null;\r\n\r\n@Directive({\r\n    selector: '[ladda]'\r\n})\r\nexport class LaddaDirective implements OnInit, OnDestroy, OnChanges {\r\n    private el: HTMLButtonElement;\r\n    private ladda: LaddaButton | undefined = undefined;\r\n\r\n    @Input('ladda') loading: laddaValue;\r\n    @Input() disabled: boolean = false;\r\n\r\n    constructor(\r\n        el: ElementRef,\r\n        @Inject(LaddaConfig) @Optional() config: LaddaConfigArgs,\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n    ) {\r\n        this.el = el.nativeElement;\r\n\r\n        if (!config) {\r\n            return;\r\n        }\r\n\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return;\r\n        }\r\n\r\n        this.ladda = createLadda(this.el);\r\n\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n\r\n    private updateLadda(previousValue: laddaValue): void {\r\n        if (!this.ladda) {\r\n            return;\r\n        }\r\n\r\n        let loading: boolean = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading: boolean = typeof previousValue === 'number' || !!previousValue;\r\n\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n\r\n            return this.updateDisabled();\r\n        }\r\n\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n\r\n    private updateDisabled(): void {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n}\r\n","import {NgModule, ModuleWithProviders} from '@angular/core';\r\nimport {LaddaDirective} from './ladda.directive';\r\nimport {LaddaConfigArgs, LaddaConfig} from './ladda-config';\r\n\r\n@NgModule({\r\n    declarations: [ LaddaDirective ],\r\n    exports:      [ LaddaDirective ],\r\n})\r\nexport class LaddaModule {\r\n    public static forRoot(config: LaddaConfigArgs): ModuleWithProviders<LaddaModule> {\r\n        return {\r\n            ngModule: LaddaModule,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ladda\r\n */\r\n\r\nexport * from './lib/ladda-config';\r\nexport * from './lib/ladda.directive';\r\nexport * from './lib/ladda.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Injectable","isPlatformBrowser","createLadda","Directive","ElementRef","Inject","Optional","PLATFORM_ID","Input","NgModule"],"mappings":"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"}