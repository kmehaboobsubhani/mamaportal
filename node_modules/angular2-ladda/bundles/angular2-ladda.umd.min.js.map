{"version":3,"sources":["../../../projects/ladda/src/lib/ladda-config.ts","../../../projects/ladda/src/lib/ladda.directive.ts","../../../projects/ladda/src/lib/ladda.module.ts"],"names":["configAttributes","data-style","data-spinner-size","data-spinner-color","data-spinner-lines","config","Object","assign","this","Injectable","LaddaConfigArgs","LaddaDirective","el","platformId","ladda","undefined","disabled","nativeElement","attribute","configValue","getAttribute","value","toString","setAttribute","prototype","ngOnChanges","changes","loading","updateLadda","previousValue","updateDisabled","ngOnInit","_this","isPlatformBrowser","createLadda","setTimeout","ngOnDestroy","remove","wasLoading","stop","start","setProgress","Directive","args","selector","ElementRef","decorators","type","Inject","LaddaConfig","Optional","PLATFORM_ID","Input","LaddaModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"maAOA,aAOWA,EAA2D,CAClEC,aAAc,QACdC,oBAAqB,cACrBC,qBAAsB,eACtBC,qBAAsB,kBAKtB,SAAYC,QAAA,IAAAA,IAAAA,EAAA,IACRC,OAAOC,OAAOC,KAAMH,wBAH3BI,EAAAA,sDAEuBC,sBCNpB,SAAAC,EACIC,EACiCP,EACJQ,GAI7B,GAJ6BL,KAAAK,WAAAA,EARzBL,KAAAM,WAAiCC,EAGhCP,KAAAQ,UAAoB,EAOzBR,KAAKI,GAAKA,EAAGK,cAERZ,EAKL,IAAK,IAAIa,KAAalB,EAAkB,CACpC,IAAImB,EAAcd,EAAOL,EAAiBkB,IAE1C,GAAKC,IAIAX,KAAKI,GAAGQ,aAAaF,GAAY,CAElC,IAAIG,EAAgC,iBAAhBF,EAA4BA,EAAYG,WAAaH,EACzEX,KAAKI,GAAGW,aAAaL,EAAWG,YAK5CV,EAAAa,UAAAC,YAAA,SAAYC,GACHlB,KAAKM,QAINY,EAAQC,SACRnB,KAAKoB,YAAYF,EAAQC,QAAQE,eAGjCH,EAAQV,UACRR,KAAKsB,mBAIbnB,EAAAa,UAAAO,SAAA,WAAA,IAAAC,EAAAxB,KACSyB,EAAAA,kBAAkBzB,KAAKK,cAI5BL,KAAKM,MAAQoB,EAAAA,OAAY1B,KAAKI,IAI9BuB,YAAW,WAAQH,EAAKJ,aAAY,KAAW,KAGnDjB,EAAAa,UAAAY,YAAA,WACQ5B,KAAKM,OACLN,KAAKM,MAAMuB,UAIX1B,EAAAa,UAAAI,YAAA,SAAYC,GAChB,GAAKrB,KAAKM,MAAV,CAIA,IACIwB,EAA+C,iBAAlBT,KAAgCA,EAEjE,KAH+C,iBAAjBrB,KAAKmB,WAA0BnB,KAAKmB,SAQ9D,OAJIW,GACA9B,KAAKM,MAAMyB,OAGR/B,KAAKsB,iBAGXQ,GACD9B,KAAKM,MAAM0B,QAGa,iBAAjBhC,KAAKmB,SACZnB,KAAKM,MAAM2B,YAAYjC,KAAKmB,WAI5BhB,EAAAa,UAAAM,eAAA,WACJtB,KAAKI,GAAGI,SAAWR,KAAKQ,mCA/F/B0B,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uDAPKC,EAAAA,kBACEnC,EAAeoC,WAAA,CAAA,CAAAC,KAiB3BC,EAAAA,OAAML,KAAA,CAACM,IAAW,CAAAF,KAAGG,EAAAA,kBACmB5C,OAAMwC,WAAA,CAAA,CAAAC,KAA9CC,EAAAA,OAAML,KAAA,CAACQ,EAAAA,mDANXC,EAAAA,MAAKT,KAAA,CAAC,2BACNS,EAAAA,0BCPL,SAAAC,YACkBA,EAAAC,QAAP,SAAejD,GAClB,MAAO,CACHkD,SAAUF,EACVG,UAAW,CACP,CAAEC,QAASR,EAAaS,SAAUrD,+BATjDsD,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAEjD,GAChBkD,QAAc,CAAElD","sourcesContent":["import {Injectable} from \"@angular/core\";\r\n\r\nexport type laddaStyle =\r\n    \"expand-left\" | \"expand-right\" | \"expand-up\" | \"expand-down\" |\r\n    \"contract\" | \"contract-overlay\" | \"zoom-in\" | \"zoom-out\" |\r\n    \"slide-left\" | \"slide-right\" | \"slide-up\" | \"slide-down\";\r\n\r\nexport abstract class LaddaConfigArgs {\r\n    style?: laddaStyle;\r\n    spinnerSize?: number;\r\n    spinnerColor?: string;\r\n    spinnerLines?: number;\r\n}\r\n\r\nexport let configAttributes: {[key: string]: keyof LaddaConfigArgs} = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\n\r\n@Injectable()\r\nexport class LaddaConfig implements LaddaConfigArgs {\r\n    constructor(config: LaddaConfigArgs = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n","import {isPlatformBrowser} from '@angular/common';\r\nimport {Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID} from '@angular/core';\r\nimport {LaddaConfig, LaddaConfigArgs, configAttributes} from './ladda-config';\r\nimport {create as createLadda, LaddaButton} from 'ladda';\r\n\r\nexport type laddaValue = boolean | number | undefined | null;\r\n\r\n@Directive({\r\n    selector: '[ladda]'\r\n})\r\nexport class LaddaDirective implements OnInit, OnDestroy, OnChanges {\r\n    private el: HTMLButtonElement;\r\n    private ladda: LaddaButton | undefined = undefined;\r\n\r\n    @Input('ladda') loading: laddaValue;\r\n    @Input() disabled: boolean = false;\r\n\r\n    constructor(\r\n        el: ElementRef,\r\n        @Inject(LaddaConfig) @Optional() config: LaddaConfigArgs,\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n    ) {\r\n        this.el = el.nativeElement;\r\n\r\n        if (!config) {\r\n            return;\r\n        }\r\n\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return;\r\n        }\r\n\r\n        this.ladda = createLadda(this.el);\r\n\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n\r\n    private updateLadda(previousValue: laddaValue): void {\r\n        if (!this.ladda) {\r\n            return;\r\n        }\r\n\r\n        let loading: boolean = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading: boolean = typeof previousValue === 'number' || !!previousValue;\r\n\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n\r\n            return this.updateDisabled();\r\n        }\r\n\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n\r\n    private updateDisabled(): void {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n}\r\n","import {NgModule, ModuleWithProviders} from '@angular/core';\r\nimport {LaddaDirective} from './ladda.directive';\r\nimport {LaddaConfigArgs, LaddaConfig} from './ladda-config';\r\n\r\n@NgModule({\r\n    declarations: [ LaddaDirective ],\r\n    exports:      [ LaddaDirective ],\r\n})\r\nexport class LaddaModule {\r\n    public static forRoot(config: LaddaConfigArgs): ModuleWithProviders<LaddaModule> {\r\n        return {\r\n            ngModule: LaddaModule,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}