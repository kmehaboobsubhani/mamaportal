import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, Input, Optional, Inject, PLATFORM_ID } from '@angular/core';
import { LaddaConfig, LaddaConfigArgs, configAttributes } from './ladda-config';
import { create as createLadda } from 'ladda';
export class LaddaDirective {
    constructor(el, config, platformId) {
        this.platformId = platformId;
        this.ladda = undefined;
        this.disabled = false;
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (let attribute in configAttributes) {
            let configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                let value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    ngOnChanges(changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.ladda = createLadda(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout(() => { this.updateLadda(false); }, 0);
    }
    ngOnDestroy() {
        if (this.ladda) {
            this.ladda.remove();
        }
    }
    updateLadda(previousValue) {
        if (!this.ladda) {
            return;
        }
        let loading = typeof this.loading === 'number' || !!this.loading;
        let wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    }
    updateDisabled() {
        this.el.disabled = this.disabled;
    }
}
LaddaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ladda]'
            },] }
];
LaddaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
LaddaDirective.propDecorators = {
    loading: [{ type: Input, args: ['ladda',] }],
    disabled: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFkZGEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL2xhZGRhL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9sYWRkYS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUErQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2SSxPQUFPLEVBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzlFLE9BQU8sRUFBQyxNQUFNLElBQUksV0FBVyxFQUFjLE1BQU0sT0FBTyxDQUFDO0FBT3pELE1BQU0sT0FBTyxjQUFjO0lBT3ZCLFlBQ0ksRUFBYyxFQUNtQixNQUF1QixFQUMzQixVQUFrQjtRQUFsQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBUjNDLFVBQUssR0FBNEIsU0FBUyxDQUFDO1FBRzFDLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFPL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBRTNCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPO1NBQ1Y7UUFFRCxrRUFBa0U7UUFDbEUsS0FBSyxJQUFJLFNBQVMsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQyxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUV0RCxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNkLFNBQVMsQ0FBQyx5Q0FBeUM7YUFDdEQ7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ2xDLHVEQUF1RDtnQkFDdkQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxPQUFPLFdBQVcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7Z0JBQ3JGLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUMxQztTQUNKO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU8sQ0FBQyxxREFBcUQ7U0FDaEU7UUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN6QjtJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEMsOERBQThEO1FBQzlELDhEQUE4RDtRQUM5RCxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRU8sV0FBVyxDQUFDLGFBQXlCO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2IsT0FBTztTQUNWO1FBRUQsSUFBSSxPQUFPLEdBQVksT0FBTyxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUMxRSxJQUFJLFVBQVUsR0FBWSxPQUFPLGFBQWEsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUUvRSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsSUFBSSxVQUFVLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNyQjtZQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdEI7UUFFRCxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVPLGNBQWM7UUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNyQyxDQUFDOzs7WUFoR0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxTQUFTO2FBQ3RCOzs7WUFSa0IsVUFBVTtZQUNSLGVBQWUsdUJBaUIzQixNQUFNLFNBQUMsV0FBVyxjQUFHLFFBQVE7WUFDVyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVzs7O3NCQU50QixLQUFLLFNBQUMsT0FBTzt1QkFDYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCwgSW5qZWN0LCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TGFkZGFDb25maWcsIExhZGRhQ29uZmlnQXJncywgY29uZmlnQXR0cmlidXRlc30gZnJvbSAnLi9sYWRkYS1jb25maWcnO1xyXG5pbXBvcnQge2NyZWF0ZSBhcyBjcmVhdGVMYWRkYSwgTGFkZGFCdXR0b259IGZyb20gJ2xhZGRhJztcclxuXHJcbmV4cG9ydCB0eXBlIGxhZGRhVmFsdWUgPSBib29sZWFuIHwgbnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbDtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbbGFkZGFdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGFkZGFEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgZWw6IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBsYWRkYTogTGFkZGFCdXR0b24gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgQElucHV0KCdsYWRkYScpIGxvYWRpbmc6IGxhZGRhVmFsdWU7XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIEBJbmplY3QoTGFkZGFDb25maWcpIEBPcHRpb25hbCgpIGNvbmZpZzogTGFkZGFDb25maWdBcmdzLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5lbCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGlmICghY29uZmlnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFwcGx5IGRlZmF1bHQgc3R5bGVzIGlmIHRoZXkgYXJlbid0IG92ZXJ3cml0dGVuIGJ5IGFuIGF0dHJpYnV0ZVxyXG4gICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBpbiBjb25maWdBdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGxldCBjb25maWdWYWx1ZSA9IGNvbmZpZ1tjb25maWdBdHRyaWJ1dGVzW2F0dHJpYnV0ZV1dO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb25maWdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7IC8vIGRvbid0IHdhc3RlIHRpbWUgcmVhZGluZyB0aGUgYXR0cmlidXRlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lbC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIGlzbid0IHNldCAtIGFwcGx5IHRoZSBkZWZhdWx0IGNvbmZpZyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gKHR5cGVvZiBjb25maWdWYWx1ZSA9PT0gXCJudW1iZXJcIikgPyBjb25maWdWYWx1ZS50b1N0cmluZygpIDogY29uZmlnVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmxhZGRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjsgLy8gbmVlZGVkIHNpbmNlIG5nT25DaGFuZ2VzIGlzIGNhbGxlZCBiZWZvcmUgbmdPbkluaXRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmxvYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVMYWRkYShjaGFuZ2VzLmxvYWRpbmcucHJldmlvdXNWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURpc2FibGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxhZGRhID0gY3JlYXRlTGFkZGEodGhpcy5lbCk7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoZSBpbml0aWFsIGxvYWRpbmcgdmFsdWUgaXNuJ3QgZmFsc2UsIGEgdGltZW91dCBvZiAwIG1zXHJcbiAgICAgICAgLy8gaXMgbmVjZXNzYXJ5IGZvciB0aGUgY2FsY3VsYXRlZCBzcGlubmVyIHNpemUgdG8gYmUgY29ycmVjdC5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy51cGRhdGVMYWRkYShmYWxzZSk7IH0sIDApO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxhZGRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFkZGEucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlTGFkZGEocHJldmlvdXNWYWx1ZTogbGFkZGFWYWx1ZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5sYWRkYSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbG9hZGluZzogYm9vbGVhbiA9IHR5cGVvZiB0aGlzLmxvYWRpbmcgPT09ICdudW1iZXInIHx8ICEhdGhpcy5sb2FkaW5nO1xyXG4gICAgICAgIGxldCB3YXNMb2FkaW5nOiBib29sZWFuID0gdHlwZW9mIHByZXZpb3VzVmFsdWUgPT09ICdudW1iZXInIHx8ICEhcHJldmlvdXNWYWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKCFsb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIGlmICh3YXNMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhZGRhLnN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlRGlzYWJsZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghd2FzTG9hZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLmxhZGRhLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMubG9hZGluZyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgdGhpcy5sYWRkYS5zZXRQcm9ncmVzcyh0aGlzLmxvYWRpbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZURpc2FibGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZWwuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==