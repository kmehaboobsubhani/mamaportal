import { Directive, Output, EventEmitter, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class MdbTableRowDirective {
    constructor(el) {
        this.el = el;
        this.rowCreated = new EventEmitter();
        this.rowRemoved = new EventEmitter();
    }
    ngOnInit() {
        this.rowCreated.emit({ created: true, el: this.el.nativeElement });
    }
    ngOnDestroy() {
        this.rowRemoved.emit({ removed: true });
    }
}
MdbTableRowDirective.ɵfac = function MdbTableRowDirective_Factory(t) { return new (t || MdbTableRowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbTableRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbTableRowDirective, selectors: [["", "mdbTableRow", ""]], outputs: { rowCreated: "rowCreated", rowRemoved: "rowRemoved" } });
MdbTableRowDirective.ctorParameters = () => [
    { type: ElementRef }
];
MdbTableRowDirective.propDecorators = {
    rowCreated: [{ type: Output }],
    rowRemoved: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTableRowDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbTableRow]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { rowCreated: [{
            type: Output
        }], rowRemoved: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLXRhYmxlLXJvdy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYm9vdHN0cmFwLW1kL3NyYy9saWIvZnJlZS90YWJsZXMvZGlyZWN0aXZlcy9tZGItdGFibGUtcm93LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQXFCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLL0YsTUFBTSxPQUFPLG9CQUFvQjtBQUFHLElBS2xDLFlBQW9CLEVBQWM7QUFDcEMsUUFEc0IsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBSHpCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ2pELFFBQVksZUFBVSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7QUFDakQsSUFFRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztBQUN2RSxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDNUMsSUFBRSxDQUFDO0FBQ0g7Z0RBbEJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsZUFBZSxjQUMxQjs0TEFDSTtBQUFDO0FBQThDLFlBTFMsVUFBVTtBQUFHO0FBQUc7QUFHdEUseUJBSUosTUFBTTtBQUFLLHlCQUNYLE1BQU07QUFBSTs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYlRhYmxlUm93XSdcbn0pXG5leHBvcnQgY2xhc3MgTWRiVGFibGVSb3dEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQE91dHB1dCgpIHJvd0NyZWF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIHJvd1JlbW92ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnJvd0NyZWF0ZWQuZW1pdCh7IGNyZWF0ZWQ6IHRydWUsIGVsOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJvd1JlbW92ZWQuZW1pdCh7IHJlbW92ZWQ6IHRydWUgfSk7XG4gIH1cblxufVxuIl19