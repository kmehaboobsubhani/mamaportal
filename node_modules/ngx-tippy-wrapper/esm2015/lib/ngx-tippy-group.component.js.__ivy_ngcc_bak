import { Component, ElementRef, Input, ViewChild, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import tippy from 'tippy.js';
/**
 * This component implements next case: different tooltip content to many different elements, while only needing to initialize once with shared props
 */
export class NgxTippyGroupComponent {
    constructor(platform) {
        this.platform = platform;
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platform))
            return;
        this.setTooltips();
    }
    setTooltips() {
        const contentWrapperNativeEl = this.contentWrapper.nativeElement;
        const tooltips = Array.from(contentWrapperNativeEl.querySelectorAll('[data-grouped]'));
        this.initTippy(tooltips);
    }
    initTippy(tooltips) {
        tippy(tooltips, this.tippyProps);
    }
}
NgxTippyGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-tippy-group',
                template: `
    <div #contentWrapper>
      <ng-content></ng-content>
    </div>
  `
            },] }
];
NgxTippyGroupComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgxTippyGroupComponent.propDecorators = {
    tippyProps: [{ type: Input }],
    contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { read: ElementRef, static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpcHB5LWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGlwcHktd3JhcHBlci9zcmMvIiwic291cmNlcyI6WyJsaWIvbmd4LXRpcHB5LWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzVHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sS0FBSyxNQUFNLFVBQVUsQ0FBQztBQUc3Qjs7R0FFRztBQVNILE1BQU0sT0FBTyxzQkFBc0I7SUFJakMsWUFBeUMsUUFBZ0I7UUFBaEIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtJQUFHLENBQUM7SUFFN0QsZUFBZTtRQUNiLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU87UUFDNUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxXQUFXO1FBQ1QsTUFBTSxzQkFBc0IsR0FBZ0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7UUFDOUUsTUFBTSxRQUFRLEdBQWtCLEtBQUssQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBRXRHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELFNBQVMsQ0FBQyxRQUF1QjtRQUMvQixLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUE1QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRTs7OztHQUlUO2FBQ0Y7OztZQUtvRCxNQUFNLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7O3lCQUg5QixLQUFLOzZCQUNMLFNBQVMsU0FBQyxnQkFBZ0IsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdDaGlsZCwgSW5qZWN0LCBQTEFURk9STV9JRCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnO1xuaW1wb3J0IHsgTmd4VGlwcHlQcm9wcyB9IGZyb20gJy4vbmd4LXRpcHB5LmludGVyZmFjZXMnO1xuXG4vKipcbiAqIFRoaXMgY29tcG9uZW50IGltcGxlbWVudHMgbmV4dCBjYXNlOiBkaWZmZXJlbnQgdG9vbHRpcCBjb250ZW50IHRvIG1hbnkgZGlmZmVyZW50IGVsZW1lbnRzLCB3aGlsZSBvbmx5IG5lZWRpbmcgdG8gaW5pdGlhbGl6ZSBvbmNlIHdpdGggc2hhcmVkIHByb3BzXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC10aXBweS1ncm91cCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiAjY29udGVudFdyYXBwZXI+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5neFRpcHB5R3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCkgdGlwcHlQcm9wcz86IE5neFRpcHB5UHJvcHM7XG4gIEBWaWV3Q2hpbGQoJ2NvbnRlbnRXcmFwcGVyJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IGZhbHNlIH0pIGNvbnRlbnRXcmFwcGVyOiBFbGVtZW50UmVmO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm06IE9iamVjdCkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybSkpIHJldHVybjtcbiAgICB0aGlzLnNldFRvb2x0aXBzKCk7XG4gIH1cblxuICBzZXRUb29sdGlwcygpIHtcbiAgICBjb25zdCBjb250ZW50V3JhcHBlck5hdGl2ZUVsOiBIVE1MRWxlbWVudCA9IHRoaXMuY29udGVudFdyYXBwZXIubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCB0b29sdGlwczogSFRNTEVsZW1lbnRbXSA9IEFycmF5LmZyb20oY29udGVudFdyYXBwZXJOYXRpdmVFbC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1ncm91cGVkXScpKTtcblxuICAgIHRoaXMuaW5pdFRpcHB5KHRvb2x0aXBzKTtcbiAgfVxuXG4gIGluaXRUaXBweSh0b29sdGlwczogSFRNTEVsZW1lbnRbXSkge1xuICAgIHRpcHB5KHRvb2x0aXBzLCB0aGlzLnRpcHB5UHJvcHMpO1xuICB9XG59XG4iXX0=