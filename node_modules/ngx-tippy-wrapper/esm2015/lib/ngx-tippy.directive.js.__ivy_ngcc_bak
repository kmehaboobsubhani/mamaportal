import { Directive, ElementRef, Input, Renderer2, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import tippy from 'tippy.js';
import { NgxTippyService } from './ngx-tippy.service';
export class NgxTippyDirective {
    constructor(tippyEl, ngxTippyService, renderer, platform) {
        this.tippyEl = tippyEl;
        this.ngxTippyService = ngxTippyService;
        this.renderer = renderer;
        this.platform = platform;
    }
    ngOnInit() {
        if (isPlatformServer(this.platform))
            return;
        this.initTippy();
    }
    /**
     * Tooltip initialize
     * Content can be directly passed through `ngxTippy` selector
     */
    initTippy() {
        if (this.ngxTippy === null || this.ngxTippy === undefined)
            return;
        const tippyTarget = this.tippyEl.nativeElement;
        const tippyTemplate = this.ngxTippy;
        tippy(tippyTarget, Object.assign(Object.assign({}, (this.tippyProps || {})), (tippyTemplate && { content: tippyTemplate })));
        this.ngxTippyService.setTemplateVisible(tippyTemplate);
        this.setTippyInstance(tippyTarget);
    }
    setTippyInstance(tippyTarget) {
        const tippyInstance = tippyTarget._tippy;
        this.writeInstancesToStorage(tippyInstance);
        this.setClassName(tippyInstance);
    }
    setClassName(tippyInstance) {
        if (!this.tippyClassName)
            return;
        const classNames = this.tippyClassName.split(' ');
        classNames.length &&
            classNames.forEach((className) => {
                this.renderer.addClass(tippyInstance.popper.firstElementChild, className);
            });
    }
    /**
     * To manipulate tooltips, write all instances to storage
     * `tippyName` used as unique key
     * If `tippyName` does not provided - it will be generated using `tippyInstance.id`
     *
     * @param tippyInstance { NgxTippyInstance }
     */
    writeInstancesToStorage(tippyInstance) {
        this.ngxTippyService.setInstance(this.tippyName || `tippy-${tippyInstance.id}`, tippyInstance);
    }
}
NgxTippyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxTippy]',
            },] }
];
NgxTippyDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgxTippyService },
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgxTippyDirective.propDecorators = {
    ngxTippy: [{ type: Input }],
    tippyProps: [{ type: Input }],
    tippyName: [{ type: Input }],
    tippyClassName: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpcHB5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGlwcHktd3JhcHBlci9zcmMvIiwic291cmNlcyI6WyJsaWIvbmd4LXRpcHB5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxLQUFtQixNQUFNLFVBQVUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFVdEQsTUFBTSxPQUFPLGlCQUFpQjtJQU01QixZQUNVLE9BQW1CLEVBQ25CLGVBQWdDLEVBQ2hDLFFBQW1CLEVBQ0UsUUFBZ0I7UUFIckMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNFLGFBQVEsR0FBUixRQUFRLENBQVE7SUFDNUMsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFBRSxPQUFPO1FBQzVDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssU0FBUztRQUNmLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTO1lBQUUsT0FBTztRQUVsRSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUMvQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRXBDLEtBQUssQ0FBQyxXQUFXLGtDQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsR0FBSyxDQUFDLGFBQWEsSUFBSSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFHLENBQUM7UUFFckcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVPLGdCQUFnQixDQUFDLFdBQTZCO1FBQ3BELE1BQU0sYUFBYSxHQUFxQixXQUFXLENBQUMsTUFBTSxDQUFDO1FBRTNELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxZQUFZLENBQUMsYUFBK0I7UUFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjO1lBQUUsT0FBTztRQUNqQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsRCxVQUFVLENBQUMsTUFBTTtZQUNmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM1RSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyx1QkFBdUIsQ0FBQyxhQUErQjtRQUM3RCxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsYUFBYSxDQUFDLEVBQUUsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7OztZQS9ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7YUFDdkI7OztZQVoyQixVQUFVO1lBRzdCLGVBQWU7WUFIdUIsU0FBUztZQXVCYixNQUFNLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7O3VCQVRwQixLQUFLO3lCQUNMLEtBQUs7d0JBQ0wsS0FBSzs2QkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPbkluaXQsIEVsZW1lbnRSZWYsIElucHV0LCBSZW5kZXJlcjIsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHRpcHB5LCB7IEluc3RhbmNlIH0gZnJvbSAndGlwcHkuanMnO1xuaW1wb3J0IHsgTmd4VGlwcHlTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtdGlwcHkuc2VydmljZSc7XG5pbXBvcnQgeyBOZ3hUaXBweVByb3BzLCBOZ3hUaXBweUluc3RhbmNlLCBOZ3hUaXBweUNvbnRlbnQgfSBmcm9tICcuL25neC10aXBweS5pbnRlcmZhY2VzJztcblxuaW50ZXJmYWNlIFRpcHB5SFRNTEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIF90aXBweTogSW5zdGFuY2U7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hUaXBweV0nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hUaXBweURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIG5neFRpcHB5PzogTmd4VGlwcHlDb250ZW50IHwgbnVsbDtcbiAgQElucHV0KCkgdGlwcHlQcm9wcz86IE5neFRpcHB5UHJvcHM7XG4gIEBJbnB1dCgpIHRpcHB5TmFtZT86IHN0cmluZztcbiAgQElucHV0KCkgdGlwcHlDbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0aXBweUVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgbmd4VGlwcHlTZXJ2aWNlOiBOZ3hUaXBweVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm06IE9iamVjdFxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybSkpIHJldHVybjtcbiAgICB0aGlzLmluaXRUaXBweSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvb2x0aXAgaW5pdGlhbGl6ZVxuICAgKiBDb250ZW50IGNhbiBiZSBkaXJlY3RseSBwYXNzZWQgdGhyb3VnaCBgbmd4VGlwcHlgIHNlbGVjdG9yXG4gICAqL1xuICBwcml2YXRlIGluaXRUaXBweSgpIHtcbiAgICBpZiAodGhpcy5uZ3hUaXBweSA9PT0gbnVsbCB8fCB0aGlzLm5neFRpcHB5ID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIGNvbnN0IHRpcHB5VGFyZ2V0ID0gdGhpcy50aXBweUVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgdGlwcHlUZW1wbGF0ZSA9IHRoaXMubmd4VGlwcHk7XG5cbiAgICB0aXBweSh0aXBweVRhcmdldCwgeyAuLi4odGhpcy50aXBweVByb3BzIHx8IHt9KSwgLi4uKHRpcHB5VGVtcGxhdGUgJiYgeyBjb250ZW50OiB0aXBweVRlbXBsYXRlIH0pIH0pO1xuXG4gICAgdGhpcy5uZ3hUaXBweVNlcnZpY2Uuc2V0VGVtcGxhdGVWaXNpYmxlKHRpcHB5VGVtcGxhdGUpO1xuICAgIHRoaXMuc2V0VGlwcHlJbnN0YW5jZSh0aXBweVRhcmdldCk7XG4gIH1cblxuICBwcml2YXRlIHNldFRpcHB5SW5zdGFuY2UodGlwcHlUYXJnZXQ6IFRpcHB5SFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCB0aXBweUluc3RhbmNlOiBOZ3hUaXBweUluc3RhbmNlID0gdGlwcHlUYXJnZXQuX3RpcHB5O1xuXG4gICAgdGhpcy53cml0ZUluc3RhbmNlc1RvU3RvcmFnZSh0aXBweUluc3RhbmNlKTtcbiAgICB0aGlzLnNldENsYXNzTmFtZSh0aXBweUluc3RhbmNlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0Q2xhc3NOYW1lKHRpcHB5SW5zdGFuY2U6IE5neFRpcHB5SW5zdGFuY2UpIHtcbiAgICBpZiAoIXRoaXMudGlwcHlDbGFzc05hbWUpIHJldHVybjtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gdGhpcy50aXBweUNsYXNzTmFtZS5zcGxpdCgnICcpO1xuXG4gICAgY2xhc3NOYW1lcy5sZW5ndGggJiZcbiAgICAgIGNsYXNzTmFtZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGlwcHlJbnN0YW5jZS5wb3BwZXIuZmlyc3RFbGVtZW50Q2hpbGQsIGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBtYW5pcHVsYXRlIHRvb2x0aXBzLCB3cml0ZSBhbGwgaW5zdGFuY2VzIHRvIHN0b3JhZ2VcbiAgICogYHRpcHB5TmFtZWAgdXNlZCBhcyB1bmlxdWUga2V5XG4gICAqIElmIGB0aXBweU5hbWVgIGRvZXMgbm90IHByb3ZpZGVkIC0gaXQgd2lsbCBiZSBnZW5lcmF0ZWQgdXNpbmcgYHRpcHB5SW5zdGFuY2UuaWRgXG4gICAqXG4gICAqIEBwYXJhbSB0aXBweUluc3RhbmNlIHsgTmd4VGlwcHlJbnN0YW5jZSB9XG4gICAqL1xuICBwcml2YXRlIHdyaXRlSW5zdGFuY2VzVG9TdG9yYWdlKHRpcHB5SW5zdGFuY2U6IE5neFRpcHB5SW5zdGFuY2UpIHtcbiAgICB0aGlzLm5neFRpcHB5U2VydmljZS5zZXRJbnN0YW5jZSh0aGlzLnRpcHB5TmFtZSB8fCBgdGlwcHktJHt0aXBweUluc3RhbmNlLmlkfWAsIHRpcHB5SW5zdGFuY2UpO1xuICB9XG59XG4iXX0=