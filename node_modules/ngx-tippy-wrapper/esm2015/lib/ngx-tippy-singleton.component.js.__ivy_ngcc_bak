import { Component, ElementRef, Input, ViewChild, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import tippy, { createSingleton } from 'tippy.js';
/**
 * This component implements case - singleton: single tippy element that takes the place of an array of regular tippy instances
 */
export class NgxTippySingletonComponent {
    constructor(platform) {
        this.platform = platform;
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platform))
            return;
        this.setTooltips();
    }
    setTooltips() {
        const contentWrapperNativeEl = this.contentWrapper.nativeElement;
        const tooltips = Array.from(contentWrapperNativeEl.querySelectorAll('[data-singleton]'));
        this.initTippy(tooltips);
    }
    initTippy(tooltips) {
        createSingleton(tippy(tooltips), this.tippyProps);
    }
}
NgxTippySingletonComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-tippy-singleton',
                template: `
    <div #contentWrapper>
      <ng-content></ng-content>
    </div>
  `
            },] }
];
NgxTippySingletonComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgxTippySingletonComponent.propDecorators = {
    tippyProps: [{ type: Input }],
    contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { read: ElementRef, static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpcHB5LXNpbmdsZXRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRpcHB5LXdyYXBwZXIvc3JjLyIsInNvdXJjZXMiOlsibGliL25neC10aXBweS1zaW5nbGV0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxLQUFLLEVBQUUsRUFBRSxlQUFlLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHbEQ7O0dBRUc7QUFTSCxNQUFNLE9BQU8sMEJBQTBCO0lBSXJDLFlBQXlDLFFBQWdCO1FBQWhCLGFBQVEsR0FBUixRQUFRLENBQVE7SUFBRyxDQUFDO0lBRTdELGVBQWU7UUFDYixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFBRSxPQUFPO1FBQzVDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVztRQUNULE1BQU0sc0JBQXNCLEdBQWdCLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1FBQzlFLE1BQU0sUUFBUSxHQUFrQixLQUFLLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUV4RyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxTQUFTLENBQUMsUUFBdUI7UUFDL0IsZUFBZSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7O1lBNUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixRQUFRLEVBQUU7Ozs7R0FJVDthQUNGOzs7WUFLb0QsTUFBTSx1QkFBNUMsTUFBTSxTQUFDLFdBQVc7Ozt5QkFIOUIsS0FBSzs2QkFDTCxTQUFTLFNBQUMsZ0JBQWdCLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3Q2hpbGQsIEluamVjdCwgUExBVEZPUk1fSUQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHRpcHB5LCB7IGNyZWF0ZVNpbmdsZXRvbiB9IGZyb20gJ3RpcHB5LmpzJztcbmltcG9ydCB7IE5neFRpcHB5UHJvcHMgfSBmcm9tICcuL25neC10aXBweS5pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBpbXBsZW1lbnRzIGNhc2UgLSBzaW5nbGV0b246IHNpbmdsZSB0aXBweSBlbGVtZW50IHRoYXQgdGFrZXMgdGhlIHBsYWNlIG9mIGFuIGFycmF5IG9mIHJlZ3VsYXIgdGlwcHkgaW5zdGFuY2VzXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC10aXBweS1zaW5nbGV0b24nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgI2NvbnRlbnRXcmFwcGVyPlxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hUaXBweVNpbmdsZXRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSB0aXBweVByb3BzPzogTmd4VGlwcHlQcm9wcztcbiAgQFZpZXdDaGlsZCgnY29udGVudFdyYXBwZXInLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogZmFsc2UgfSkgY29udGVudFdyYXBwZXI6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybTogT2JqZWN0KSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtKSkgcmV0dXJuO1xuICAgIHRoaXMuc2V0VG9vbHRpcHMoKTtcbiAgfVxuXG4gIHNldFRvb2x0aXBzKCkge1xuICAgIGNvbnN0IGNvbnRlbnRXcmFwcGVyTmF0aXZlRWw6IEhUTUxFbGVtZW50ID0gdGhpcy5jb250ZW50V3JhcHBlci5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IHRvb2x0aXBzOiBIVE1MRWxlbWVudFtdID0gQXJyYXkuZnJvbShjb250ZW50V3JhcHBlck5hdGl2ZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNpbmdsZXRvbl0nKSk7XG5cbiAgICB0aGlzLmluaXRUaXBweSh0b29sdGlwcyk7XG4gIH1cblxuICBpbml0VGlwcHkodG9vbHRpcHM6IEhUTUxFbGVtZW50W10pIHtcbiAgICBjcmVhdGVTaW5nbGV0b24odGlwcHkodG9vbHRpcHMpLCB0aGlzLnRpcHB5UHJvcHMpO1xuICB9XG59XG4iXX0=