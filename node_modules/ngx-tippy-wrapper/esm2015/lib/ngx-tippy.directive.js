import { Directive, ElementRef, Input, Renderer2, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import tippy from 'tippy.js';
import { NgxTippyService } from './ngx-tippy.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ngx-tippy.service';
export class NgxTippyDirective {
    constructor(tippyEl, ngxTippyService, renderer, platform) {
        this.tippyEl = tippyEl;
        this.ngxTippyService = ngxTippyService;
        this.renderer = renderer;
        this.platform = platform;
    }
    ngOnInit() {
        if (isPlatformServer(this.platform))
            return;
        this.initTippy();
    }
    /**
     * Tooltip initialize
     * Content can be directly passed through `ngxTippy` selector
     */
    initTippy() {
        if (this.ngxTippy === null || this.ngxTippy === undefined)
            return;
        const tippyTarget = this.tippyEl.nativeElement;
        const tippyTemplate = this.ngxTippy;
        tippy(tippyTarget, Object.assign(Object.assign({}, (this.tippyProps || {})), (tippyTemplate && { content: tippyTemplate })));
        this.ngxTippyService.setTemplateVisible(tippyTemplate);
        this.setTippyInstance(tippyTarget);
    }
    setTippyInstance(tippyTarget) {
        const tippyInstance = tippyTarget._tippy;
        this.writeInstancesToStorage(tippyInstance);
        this.setClassName(tippyInstance);
    }
    setClassName(tippyInstance) {
        if (!this.tippyClassName)
            return;
        const classNames = this.tippyClassName.split(' ');
        classNames.length &&
            classNames.forEach((className) => {
                this.renderer.addClass(tippyInstance.popper.firstElementChild, className);
            });
    }
    /**
     * To manipulate tooltips, write all instances to storage
     * `tippyName` used as unique key
     * If `tippyName` does not provided - it will be generated using `tippyInstance.id`
     *
     * @param tippyInstance { NgxTippyInstance }
     */
    writeInstancesToStorage(tippyInstance) {
        this.ngxTippyService.setInstance(this.tippyName || `tippy-${tippyInstance.id}`, tippyInstance);
    }
}
NgxTippyDirective.ɵfac = function NgxTippyDirective_Factory(t) { return new (t || NgxTippyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgxTippyService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
NgxTippyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxTippyDirective, selectors: [["", "ngxTippy", ""]], inputs: { ngxTippy: "ngxTippy", tippyProps: "tippyProps", tippyName: "tippyName", tippyClassName: "tippyClassName" } });
NgxTippyDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgxTippyService },
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgxTippyDirective.propDecorators = {
    ngxTippy: [{ type: Input }],
    tippyProps: [{ type: Input }],
    tippyName: [{ type: Input }],
    tippyClassName: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxTippyDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxTippy]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgxTippyService }, { type: ɵngcc0.Renderer2 }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { ngxTippy: [{
            type: Input
        }], tippyProps: [{
            type: Input
        }], tippyName: [{
            type: Input
        }], tippyClassName: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpcHB5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRpcHB5LXdyYXBwZXIvc3JjL2xpYi9uZ3gtdGlwcHkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEtBQW1CLE1BQU0sVUFBVSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBVXRELE1BQU0sT0FBTyxpQkFBaUI7QUFBRyxJQU0vQixZQUNVLE9BQW1CLEVBQ25CLGVBQWdDLEVBQ2hDLFFBQW1CLEVBQ0UsUUFBZ0I7QUFDOUMsUUFKUyxZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsUUFDcEIsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQUMsUUFDakMsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ0MsYUFBUSxHQUFSLFFBQVEsQ0FBUTtBQUNqRCxJQUFLLENBQUM7QUFDTixJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUFFLFlBQUEsT0FBTztBQUNoRCxRQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNyQixJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTCxJQUFVLFNBQVM7QUFDbkIsUUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUztBQUFFLFlBQUEsT0FBTztBQUN0RSxRQUNJLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ25ELFFBQUksTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN4QyxRQUNJLEtBQUssQ0FBQyxXQUFXLGtDQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsR0FBSyxDQUFDLGFBQWEsSUFBSSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFHLENBQUM7QUFDekcsUUFDSSxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNELFFBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZDLElBQUUsQ0FBQztBQUNILElBQ1UsZ0JBQWdCLENBQUMsV0FBNkI7QUFDeEQsUUFBSSxNQUFNLGFBQWEsR0FBcUIsV0FBVyxDQUFDLE1BQU0sQ0FBQztBQUMvRCxRQUNJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRCxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDckMsSUFBRSxDQUFDO0FBQ0gsSUFDVSxZQUFZLENBQUMsYUFBK0I7QUFDdEQsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWM7QUFBRSxZQUFBLE9BQU87QUFDckMsUUFBSSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0RCxRQUNJLFVBQVUsQ0FBQyxNQUFNO0FBQ3JCLFlBQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQ3ZDLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbEYsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFFSDtBQUFPO0FBRUosT0FEQztBQUNMLElBQVUsdUJBQXVCLENBQUMsYUFBK0I7QUFDakUsUUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsYUFBYSxDQUFDLEVBQUUsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ25HLElBQUUsQ0FBQztBQUNIOzZDQWhFQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFlBQVksZUFDdkI7d09BQ0k7QUFBQztBQUEyQyxZQWJyQixVQUFVO0FBQUksWUFHakMsZUFBZTtBQUFJLFlBSG1CLFNBQVM7QUFBSSxZQXVCakIsTUFBTSx1QkFBNUMsTUFBTSxTQUFDLFdBQVc7QUFBUTtBQUFHO0FBR3JCLHVCQVpWLEtBQUs7QUFBSyx5QkFDVixLQUFLO0FBQUssd0JBQ1YsS0FBSztBQUFLLDZCQUNWLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyLCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB0aXBweSwgeyBJbnN0YW5jZSB9IGZyb20gJ3RpcHB5LmpzJztcbmltcG9ydCB7IE5neFRpcHB5U2VydmljZSB9IGZyb20gJy4vbmd4LXRpcHB5LnNlcnZpY2UnO1xuaW1wb3J0IHsgTmd4VGlwcHlQcm9wcywgTmd4VGlwcHlJbnN0YW5jZSwgTmd4VGlwcHlDb250ZW50IH0gZnJvbSAnLi9uZ3gtdGlwcHkuaW50ZXJmYWNlcyc7XG5cbmludGVyZmFjZSBUaXBweUhUTUxFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBfdGlwcHk6IEluc3RhbmNlO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4VGlwcHldJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4VGlwcHlEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBuZ3hUaXBweT86IE5neFRpcHB5Q29udGVudCB8IG51bGw7XG4gIEBJbnB1dCgpIHRpcHB5UHJvcHM/OiBOZ3hUaXBweVByb3BzO1xuICBASW5wdXQoKSB0aXBweU5hbWU/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHRpcHB5Q2xhc3NOYW1lPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGlwcHlFbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5neFRpcHB5U2VydmljZTogTmd4VGlwcHlTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtOiBPYmplY3RcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm0pKSByZXR1cm47XG4gICAgdGhpcy5pbml0VGlwcHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb29sdGlwIGluaXRpYWxpemVcbiAgICogQ29udGVudCBjYW4gYmUgZGlyZWN0bHkgcGFzc2VkIHRocm91Z2ggYG5neFRpcHB5YCBzZWxlY3RvclxuICAgKi9cbiAgcHJpdmF0ZSBpbml0VGlwcHkoKSB7XG4gICAgaWYgKHRoaXMubmd4VGlwcHkgPT09IG51bGwgfHwgdGhpcy5uZ3hUaXBweSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICBjb25zdCB0aXBweVRhcmdldCA9IHRoaXMudGlwcHlFbC5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IHRpcHB5VGVtcGxhdGUgPSB0aGlzLm5neFRpcHB5O1xuXG4gICAgdGlwcHkodGlwcHlUYXJnZXQsIHsgLi4uKHRoaXMudGlwcHlQcm9wcyB8fCB7fSksIC4uLih0aXBweVRlbXBsYXRlICYmIHsgY29udGVudDogdGlwcHlUZW1wbGF0ZSB9KSB9KTtcblxuICAgIHRoaXMubmd4VGlwcHlTZXJ2aWNlLnNldFRlbXBsYXRlVmlzaWJsZSh0aXBweVRlbXBsYXRlKTtcbiAgICB0aGlzLnNldFRpcHB5SW5zdGFuY2UodGlwcHlUYXJnZXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRUaXBweUluc3RhbmNlKHRpcHB5VGFyZ2V0OiBUaXBweUhUTUxFbGVtZW50KSB7XG4gICAgY29uc3QgdGlwcHlJbnN0YW5jZTogTmd4VGlwcHlJbnN0YW5jZSA9IHRpcHB5VGFyZ2V0Ll90aXBweTtcblxuICAgIHRoaXMud3JpdGVJbnN0YW5jZXNUb1N0b3JhZ2UodGlwcHlJbnN0YW5jZSk7XG4gICAgdGhpcy5zZXRDbGFzc05hbWUodGlwcHlJbnN0YW5jZSk7XG4gIH1cblxuICBwcml2YXRlIHNldENsYXNzTmFtZSh0aXBweUluc3RhbmNlOiBOZ3hUaXBweUluc3RhbmNlKSB7XG4gICAgaWYgKCF0aGlzLnRpcHB5Q2xhc3NOYW1lKSByZXR1cm47XG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IHRoaXMudGlwcHlDbGFzc05hbWUuc3BsaXQoJyAnKTtcblxuICAgIGNsYXNzTmFtZXMubGVuZ3RoICYmXG4gICAgICBjbGFzc05hbWVzLmZvckVhY2goKGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRpcHB5SW5zdGFuY2UucG9wcGVyLmZpcnN0RWxlbWVudENoaWxkLCBjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVG8gbWFuaXB1bGF0ZSB0b29sdGlwcywgd3JpdGUgYWxsIGluc3RhbmNlcyB0byBzdG9yYWdlXG4gICAqIGB0aXBweU5hbWVgIHVzZWQgYXMgdW5pcXVlIGtleVxuICAgKiBJZiBgdGlwcHlOYW1lYCBkb2VzIG5vdCBwcm92aWRlZCAtIGl0IHdpbGwgYmUgZ2VuZXJhdGVkIHVzaW5nIGB0aXBweUluc3RhbmNlLmlkYFxuICAgKlxuICAgKiBAcGFyYW0gdGlwcHlJbnN0YW5jZSB7IE5neFRpcHB5SW5zdGFuY2UgfVxuICAgKi9cbiAgcHJpdmF0ZSB3cml0ZUluc3RhbmNlc1RvU3RvcmFnZSh0aXBweUluc3RhbmNlOiBOZ3hUaXBweUluc3RhbmNlKSB7XG4gICAgdGhpcy5uZ3hUaXBweVNlcnZpY2Uuc2V0SW5zdGFuY2UodGhpcy50aXBweU5hbWUgfHwgYHRpcHB5LSR7dGlwcHlJbnN0YW5jZS5pZH1gLCB0aXBweUluc3RhbmNlKTtcbiAgfVxufVxuIl19