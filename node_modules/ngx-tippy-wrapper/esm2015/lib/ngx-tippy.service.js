import { Injectable, RendererFactory2, isDevMode } from '@angular/core';
import { Subject } from 'rxjs';
import tippy, { hideAll } from 'tippy.js';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class NgxTippyService {
    constructor(rendererFactory) {
        this.tippyInstances = new Map();
        this.tippyInstances$ = new Subject();
        this.createRenderer(rendererFactory);
    }
    /**
     * Working with storage
     */
    /**
     * Write tippy instances to storage
     *
     * @param name { string } name of tippy instance
     * @param state { NgxTippyInstance } tippy instance
     */
    setInstance(name, state) {
        this.tippyInstances.set(name, state);
        this.emitInstancesChange('setInstance', name);
    }
    /**
     * Get specific tippy instance
     *
     * @param name { string } name of tippy instance
     * @returns { NgxTippyInstance | null } specific tippy instance or null
     */
    getInstance(name) {
        return this.tippyInstances.has(name) ? this.tippyInstances.get(name) : null;
    }
    /**
     * Get all tippy instances from storage
     *
     * @returns { Map<string, NgxTippyInstance> | null } all tippy instances or null
     */
    getInstances() {
        return this.tippyInstances.size ? this.tippyInstances : null;
    }
    /**
     * Working with tippy instance methods
     */
    /**
     * Programmatically show the tippy
     *
     * @param name { string } name of tippy instance
     */
    show(name) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).show();
        this.emitInstancesChange('show', name);
    }
    /**
     * Programmatically hide the tippy
     *
     * @param name { string } name of tippy instance
     */
    hide(name) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).hide();
        this.emitInstancesChange('hide', name);
    }
    /**
     * Will hide the tippy only if the cursor is outside of the tippy's interactive region
     * This allows you to programmatically hook into interactive behavior upon a mouseleave event if implementing custom event listeners
     *
     * @param name { string } name of tippy instance
     * @param name { mouseEvent } pass the mouse event object in from your event listener
     */
    hideWithInteractivity(name, mouseEvent) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).hideWithInteractivity(mouseEvent);
        this.emitInstancesChange('hideWithInteractivity', name);
    }
    /**
     * Prevent a tippy from showing or hiding
     *
     * @param name { string } name of tippy instance
     */
    disable(name) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).disable();
        this.emitInstancesChange('disable', name);
    }
    /**
     * Re-enable a tippy
     *
     * @param name { string } name of tippy instance
     */
    enable(name) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).enable();
        this.emitInstancesChange('enable', name);
    }
    /**
     * Update any tippy props
     *
     * @param name { string } name of tippy instance
     * @param tippyProps { NgxTippyProps } new props
     */
    setProps(name, tippyProps) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).setProps(tippyProps);
        this.emitInstancesChange('setProps', name);
    }
    /**
     * Update the content for tippy
     *
     * @param name { string } name of tippy instance
     * @param tippyContent { NgxTippyContent } new content
     */
    setContent(name, tippyContent) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.setTemplateVisible(tippyContent);
        this.tippyInstances.get(name).setContent(tippyContent);
        this.emitInstancesChange('setContent', name);
    }
    /**
     * The element(s) that the trigger event listeners are added to
     * Allows you to separate the tippy's positioning from its trigger source
     *
     * @param name { string } name of tippy instance
     * @param triggerTarget { Element | Element[] } element(s) that the trigger tooltip
     */
    setTriggerTarget(name, triggerTarget) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).setProps({ triggerTarget });
        this.emitInstancesChange('setTriggerTarget', name);
    }
    /**
     * Unmount the tippy from the DOM
     *
     * @param name { string } name of tippy instance
     */
    unmount(name) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).unmount();
        this.emitInstancesChange('unmount', name);
    }
    /**
     * Clears the instances delay timeouts
     *
     * @param name { string } name of tippy instance
     */
    clearDelayTimeouts(name) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).clearDelayTimeouts();
        this.emitInstancesChange('clearDelayTimeouts', name);
    }
    /**
     * Permanently destroy and clean up the tippy instance
     *
     * @param name { string } name of tippy instance
     */
    destroy(name) {
        if (!this.tippyInstances.has(name)) {
            this.throwError(`Instance with identifier '${name}' does not exist`);
        }
        this.tippyInstances.get(name).destroy();
        this.emitInstancesChange('destroy', name);
        this.tippyInstances.delete(name);
    }
    /** Working with tippy static methods */
    /**
     * Set the default props for each new tippy instance
     *
     * @param tippyProps { NgxTippyProps } default props
     */
    setDefaultProps(tippyProps) {
        tippy.setDefaultProps(tippyProps);
    }
    /**
     * Show all tippies
     */
    showAll() {
        this.tippyInstances.forEach((tippyInstance, key) => {
            tippyInstance.show();
            this.emitInstancesChange('show', key);
        });
    }
    /**
     * Hide all tippies or hide all except a particular one
     * Additional hide them with duration
     *
     * @param { NgxHideAllOptions } [options] - additional hiding options
     */
    hideAll(options) {
        const exclude = options && this.tippyInstances.has(options.excludeName) && this.tippyInstances.get(options.excludeName);
        const duration = options && options.duration;
        hideAll({ duration, exclude });
    }
    /**
     * Subscription to change of tippy instances
     *
     * @returns { Observable<InstancesChanges> } observable of tippy instances change
     */
    get instancesChanges() {
        return this.tippyInstances$.asObservable();
    }
    /**
     * Service methods
     */
    setTemplateVisible(tippyContent) {
        tippyContent instanceof Element && this.renderer.setStyle(tippyContent, 'display', 'block');
    }
    emitInstancesChange(reason, name) {
        const instance = this.tippyInstances.get(name);
        this.tippyInstances$.next({ name, reason, instance });
    }
    createRenderer(rendererFactory) {
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    throwError(message, errorConstrictor = Error) {
        if (!isDevMode())
            return;
        throw new errorConstrictor(message);
    }
}
NgxTippyService.ɵfac = function NgxTippyService_Factory(t) { return new (t || NgxTippyService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2)); };
NgxTippyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxTippyService_Factory() { return new NgxTippyService(i0.ɵɵinject(i0.RendererFactory2)); }, token: NgxTippyService, providedIn: "root" });
NgxTippyService.ctorParameters = () => [
    { type: RendererFactory2 }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxTippyService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,