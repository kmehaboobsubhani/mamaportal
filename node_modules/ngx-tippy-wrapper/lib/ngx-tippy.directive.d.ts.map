{"version":3,"file":"ngx-tippy.directive.d.ts","sources":["ngx-tippy.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, ElementRef, Renderer2 } from '@angular/core';\nimport { NgxTippyService } from './ngx-tippy.service';\nimport { NgxTippyProps, NgxTippyContent } from './ngx-tippy.interfaces';\nexport declare class NgxTippyDirective implements OnInit {\n    private tippyEl;\n    private ngxTippyService;\n    private renderer;\n    private platform;\n    ngxTippy?: NgxTippyContent | null;\n    tippyProps?: NgxTippyProps;\n    tippyName?: string;\n    tippyClassName?: string;\n    constructor(tippyEl: ElementRef, ngxTippyService: NgxTippyService, renderer: Renderer2, platform: Object);\n    ngOnInit(): void;\n    /**\n     * Tooltip initialize\n     * Content can be directly passed through `ngxTippy` selector\n     */\n    private initTippy;\n    private setTippyInstance;\n    private setClassName;\n    /**\n     * To manipulate tooltips, write all instances to storage\n     * `tippyName` used as unique key\n     * If `tippyName` does not provided - it will be generated using `tippyInstance.id`\n     *\n     * @param tippyInstance { NgxTippyInstance }\n     */\n    private writeInstancesToStorage;\n}\n"]}