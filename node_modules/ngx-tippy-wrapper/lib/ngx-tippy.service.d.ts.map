{"version":3,"file":"ngx-tippy.service.d.ts","sources":["ngx-tippy.service.d.ts"],"names":[],"mappingssourcesContent":["import { RendererFactory2 } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NgxTippyInstance, NgxTippyProps, NgxTippyContent, NgxHideAllOptions, InstancesChanges } from './ngx-tippy.interfaces';\nexport declare class NgxTippyService {\n    private tippyInstances;\n    private tippyInstances$;\n    private renderer;\n    constructor(rendererFactory: RendererFactory2);\n    /**\n     * Working with storage\n     */\n    /**\n     * Write tippy instances to storage\n     *\n     * @param name { string } name of tippy instance\n     * @param state { NgxTippyInstance } tippy instance\n     */\n    setInstance(name: string, state: NgxTippyInstance): void;\n    /**\n     * Get specific tippy instance\n     *\n     * @param name { string } name of tippy instance\n     * @returns { NgxTippyInstance | null } specific tippy instance or null\n     */\n    getInstance(name: string): NgxTippyInstance | null;\n    /**\n     * Get all tippy instances from storage\n     *\n     * @returns { Map<string, NgxTippyInstance> | null } all tippy instances or null\n     */\n    getInstances(): Map<string, NgxTippyInstance> | null;\n    /**\n     * Working with tippy instance methods\n     */\n    /**\n     * Programmatically show the tippy\n     *\n     * @param name { string } name of tippy instance\n     */\n    show(name: string): void;\n    /**\n     * Programmatically hide the tippy\n     *\n     * @param name { string } name of tippy instance\n     */\n    hide(name: string): void;\n    /**\n     * Will hide the tippy only if the cursor is outside of the tippy's interactive region\n     * This allows you to programmatically hook into interactive behavior upon a mouseleave event if implementing custom event listeners\n     *\n     * @param name { string } name of tippy instance\n     * @param name { mouseEvent } pass the mouse event object in from your event listener\n     */\n    hideWithInteractivity(name: string, mouseEvent: MouseEvent): void;\n    /**\n     * Prevent a tippy from showing or hiding\n     *\n     * @param name { string } name of tippy instance\n     */\n    disable(name: string): void;\n    /**\n     * Re-enable a tippy\n     *\n     * @param name { string } name of tippy instance\n     */\n    enable(name: string): void;\n    /**\n     * Update any tippy props\n     *\n     * @param name { string } name of tippy instance\n     * @param tippyProps { NgxTippyProps } new props\n     */\n    setProps(name: string, tippyProps: NgxTippyProps): void;\n    /**\n     * Update the content for tippy\n     *\n     * @param name { string } name of tippy instance\n     * @param tippyContent { NgxTippyContent } new content\n     */\n    setContent(name: string, tippyContent: NgxTippyContent): void;\n    /**\n     * The element(s) that the trigger event listeners are added to\n     * Allows you to separate the tippy's positioning from its trigger source\n     *\n     * @param name { string } name of tippy instance\n     * @param triggerTarget { Element | Element[] } element(s) that the trigger tooltip\n     */\n    setTriggerTarget(name: string, triggerTarget: Element | Element[]): void;\n    /**\n     * Unmount the tippy from the DOM\n     *\n     * @param name { string } name of tippy instance\n     */\n    unmount(name: string): void;\n    /**\n     * Clears the instances delay timeouts\n     *\n     * @param name { string } name of tippy instance\n     */\n    clearDelayTimeouts(name: string): void;\n    /**\n     * Permanently destroy and clean up the tippy instance\n     *\n     * @param name { string } name of tippy instance\n     */\n    destroy(name: string): void;\n    /** Working with tippy static methods */\n    /**\n     * Set the default props for each new tippy instance\n     *\n     * @param tippyProps { NgxTippyProps } default props\n     */\n    setDefaultProps(tippyProps: NgxTippyProps): void;\n    /**\n     * Show all tippies\n     */\n    showAll(): void;\n    /**\n     * Hide all tippies or hide all except a particular one\n     * Additional hide them with duration\n     *\n     * @param { NgxHideAllOptions } [options] - additional hiding options\n     */\n    hideAll(options?: NgxHideAllOptions): void;\n    /**\n     * Subscription to change of tippy instances\n     *\n     * @returns { Observable<InstancesChanges> } observable of tippy instances change\n     */\n    get instancesChanges(): Observable<InstancesChanges>;\n    /**\n     * Service methods\n     */\n    setTemplateVisible(tippyContent: NgxTippyContent): void;\n    private emitInstancesChange;\n    private createRenderer;\n    private throwError;\n}\n"]}