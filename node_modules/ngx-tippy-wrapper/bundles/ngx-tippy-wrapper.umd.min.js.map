{"version":3,"sources":["../../projects/ngx-tippy-wrapper/src/lib/ngx-tippy.service.ts","../../projects/ngx-tippy-wrapper/src/lib/ngx-tippy.directive.ts","../../projects/ngx-tippy-wrapper/src/lib/ngx-tippy-group.component.ts","../../projects/ngx-tippy-wrapper/src/lib/ngx-tippy-singleton.component.ts","../../projects/ngx-tippy-wrapper/src/lib/ngx-tippy.module.ts"],"names":["NgxTippyService","rendererFactory","this","tippyInstances","Map","tippyInstances$","Subject","createRenderer","prototype","setInstance","name","state","set","emitInstancesChange","getInstance","has","get","getInstances","size","show","throwError","hide","hideWithInteractivity","mouseEvent","disable","enable","setProps","tippyProps","setContent","tippyContent","setTemplateVisible","setTriggerTarget","triggerTarget","unmount","clearDelayTimeouts","destroy","delete","setDefaultProps","tippy","showAll","_this","forEach","tippyInstance","key","hideAll","options","exclude","excludeName","duration","Object","defineProperty","asObservable","Element","renderer","setStyle","reason","instance","next","message","errorConstrictor","Error","isDevMode","Injectable","args","providedIn","RendererFactory2","NgxTippyDirective","tippyEl","ngxTippyService","platform","ngOnInit","isPlatformServer","initTippy","ngxTippy","undefined","tippyTarget","nativeElement","tippyTemplate","assign","content","setTippyInstance","_tippy","writeInstancesToStorage","setClassName","tippyClassName","classNames","split","length","className","addClass","popper","firstElementChild","tippyName","id","Directive","selector","ElementRef","Renderer2","decorators","type","Inject","PLATFORM_ID","Input","NgxTippyGroupComponent","ngAfterViewInit","setTooltips","contentWrapperNativeEl","contentWrapper","tooltips","Array","from","querySelectorAll","Component","template","ViewChild","read","static","NgxTippySingletonComponent","createSingleton","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable, Renderer2, RendererFactory2, isDevMode } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport tippy, { hideAll } from 'tippy.js';\nimport {\n  NgxTippyInstance,\n  NgxTippyProps,\n  NgxTippyContent,\n  NgxHideAllOptions,\n  InstancesChanges,\n  InstanceChangeReason,\n} from './ngx-tippy.interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxTippyService {\n  private tippyInstances: Map<string, NgxTippyInstance> = new Map();\n  private tippyInstances$ = new Subject<InstancesChanges>();\n  private renderer: Renderer2;\n\n  constructor(rendererFactory: RendererFactory2) {\n    this.createRenderer(rendererFactory);\n  }\n\n  /**\n   * Working with storage\n   */\n\n  /**\n   * Write tippy instances to storage\n   *\n   * @param name { string } name of tippy instance\n   * @param state { NgxTippyInstance } tippy instance\n   */\n  setInstance(name: string, state: NgxTippyInstance) {\n    this.tippyInstances.set(name, state);\n    this.emitInstancesChange('setInstance', name);\n  }\n\n  /**\n   * Get specific tippy instance\n   *\n   * @param name { string } name of tippy instance\n   * @returns { NgxTippyInstance | null } specific tippy instance or null\n   */\n  getInstance(name: string): NgxTippyInstance | null {\n    return this.tippyInstances.has(name) ? this.tippyInstances.get(name) : null;\n  }\n\n  /**\n   * Get all tippy instances from storage\n   *\n   * @returns { Map<string, NgxTippyInstance> | null } all tippy instances or null\n   */\n  getInstances(): Map<string, NgxTippyInstance> | null {\n    return this.tippyInstances.size ? this.tippyInstances : null;\n  }\n\n  /**\n   * Working with tippy instance methods\n   */\n\n  /**\n   * Programmatically show the tippy\n   *\n   * @param name { string } name of tippy instance\n   */\n  show(name: string) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).show();\n    this.emitInstancesChange('show', name);\n  }\n\n  /**\n   * Programmatically hide the tippy\n   *\n   * @param name { string } name of tippy instance\n   */\n  hide(name: string) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).hide();\n    this.emitInstancesChange('hide', name);\n  }\n\n  /**\n   * Will hide the tippy only if the cursor is outside of the tippy's interactive region\n   * This allows you to programmatically hook into interactive behavior upon a mouseleave event if implementing custom event listeners\n   *\n   * @param name { string } name of tippy instance\n   * @param name { mouseEvent } pass the mouse event object in from your event listener\n   */\n  hideWithInteractivity(name: string, mouseEvent: MouseEvent) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).hideWithInteractivity(mouseEvent);\n    this.emitInstancesChange('hideWithInteractivity', name);\n  }\n\n  /**\n   * Prevent a tippy from showing or hiding\n   *\n   * @param name { string } name of tippy instance\n   */\n  disable(name: string) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).disable();\n    this.emitInstancesChange('disable', name);\n  }\n\n  /**\n   * Re-enable a tippy\n   *\n   * @param name { string } name of tippy instance\n   */\n  enable(name: string) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).enable();\n    this.emitInstancesChange('enable', name);\n  }\n\n  /**\n   * Update any tippy props\n   *\n   * @param name { string } name of tippy instance\n   * @param tippyProps { NgxTippyProps } new props\n   */\n  setProps(name: string, tippyProps: NgxTippyProps) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).setProps(tippyProps);\n    this.emitInstancesChange('setProps', name);\n  }\n\n  /**\n   * Update the content for tippy\n   *\n   * @param name { string } name of tippy instance\n   * @param tippyContent { NgxTippyContent } new content\n   */\n  setContent(name: string, tippyContent: NgxTippyContent) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.setTemplateVisible(tippyContent);\n    this.tippyInstances.get(name).setContent(tippyContent);\n    this.emitInstancesChange('setContent', name);\n  }\n\n  /**\n   * The element(s) that the trigger event listeners are added to\n   * Allows you to separate the tippy's positioning from its trigger source\n   *\n   * @param name { string } name of tippy instance\n   * @param triggerTarget { Element | Element[] } element(s) that the trigger tooltip\n   */\n  setTriggerTarget(name: string, triggerTarget: Element | Element[]) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).setProps({ triggerTarget });\n    this.emitInstancesChange('setTriggerTarget', name);\n  }\n\n  /**\n   * Unmount the tippy from the DOM\n   *\n   * @param name { string } name of tippy instance\n   */\n  unmount(name: string) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).unmount();\n    this.emitInstancesChange('unmount', name);\n  }\n\n  /**\n   * Clears the instances delay timeouts\n   *\n   * @param name { string } name of tippy instance\n   */\n  clearDelayTimeouts(name: string) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).clearDelayTimeouts();\n    this.emitInstancesChange('clearDelayTimeouts', name);\n  }\n\n  /**\n   * Permanently destroy and clean up the tippy instance\n   *\n   * @param name { string } name of tippy instance\n   */\n  destroy(name: string) {\n    if (!this.tippyInstances.has(name)) {\n      this.throwError(`Instance with identifier '${name}' does not exist`);\n    }\n\n    this.tippyInstances.get(name).destroy();\n    this.emitInstancesChange('destroy', name);\n    this.tippyInstances.delete(name);\n  }\n\n  /** Working with tippy static methods */\n\n  /**\n   * Set the default props for each new tippy instance\n   *\n   * @param tippyProps { NgxTippyProps } default props\n   */\n  setDefaultProps(tippyProps: NgxTippyProps) {\n    tippy.setDefaultProps(tippyProps);\n  }\n\n  /**\n   * Show all tippies\n   */\n  showAll() {\n    this.tippyInstances.forEach((tippyInstance: NgxTippyInstance, key: string) => {\n      tippyInstance.show();\n      this.emitInstancesChange('show', key);\n    });\n  }\n\n  /**\n   * Hide all tippies or hide all except a particular one\n   * Additional hide them with duration\n   *\n   * @param { NgxHideAllOptions } [options] - additional hiding options\n   */\n  hideAll(options?: NgxHideAllOptions) {\n    const exclude =\n      options && this.tippyInstances.has(options.excludeName) && this.tippyInstances.get(options.excludeName);\n    const duration = options && options.duration;\n\n    hideAll({ duration, exclude });\n  }\n\n  /**\n   * Subscription to change of tippy instances\n   *\n   * @returns { Observable<InstancesChanges> } observable of tippy instances change\n   */\n  get instancesChanges(): Observable<InstancesChanges> {\n    return this.tippyInstances$.asObservable();\n  }\n\n  /**\n   * Service methods\n   */\n  public setTemplateVisible(tippyContent: NgxTippyContent) {\n    tippyContent instanceof Element && this.renderer.setStyle(tippyContent, 'display', 'block');\n  }\n\n  private emitInstancesChange(reason: InstanceChangeReason, name: string) {\n    const instance = this.tippyInstances.get(name);\n    this.tippyInstances$.next({ name, reason, instance });\n  }\n\n  private createRenderer(rendererFactory: RendererFactory2) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  private throwError(message: string, errorConstrictor: ErrorConstructor = Error) {\n    if (!isDevMode()) return;\n    throw new errorConstrictor(message);\n  }\n}\n","import { Directive, OnInit, ElementRef, Input, Renderer2, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport tippy, { Instance } from 'tippy.js';\nimport { NgxTippyService } from './ngx-tippy.service';\nimport { NgxTippyProps, NgxTippyInstance, NgxTippyContent } from './ngx-tippy.interfaces';\n\ninterface TippyHTMLElement extends HTMLElement {\n  _tippy: Instance;\n}\n\n@Directive({\n  selector: '[ngxTippy]',\n})\nexport class NgxTippyDirective implements OnInit {\n  @Input() ngxTippy?: NgxTippyContent | null;\n  @Input() tippyProps?: NgxTippyProps;\n  @Input() tippyName?: string;\n  @Input() tippyClassName?: string;\n\n  constructor(\n    private tippyEl: ElementRef,\n    private ngxTippyService: NgxTippyService,\n    private renderer: Renderer2,\n    @Inject(PLATFORM_ID) private platform: Object\n  ) {}\n\n  ngOnInit() {\n    if (isPlatformServer(this.platform)) return;\n    this.initTippy();\n  }\n\n  /**\n   * Tooltip initialize\n   * Content can be directly passed through `ngxTippy` selector\n   */\n  private initTippy() {\n    if (this.ngxTippy === null || this.ngxTippy === undefined) return;\n\n    const tippyTarget = this.tippyEl.nativeElement;\n    const tippyTemplate = this.ngxTippy;\n\n    tippy(tippyTarget, { ...(this.tippyProps || {}), ...(tippyTemplate && { content: tippyTemplate }) });\n\n    this.ngxTippyService.setTemplateVisible(tippyTemplate);\n    this.setTippyInstance(tippyTarget);\n  }\n\n  private setTippyInstance(tippyTarget: TippyHTMLElement) {\n    const tippyInstance: NgxTippyInstance = tippyTarget._tippy;\n\n    this.writeInstancesToStorage(tippyInstance);\n    this.setClassName(tippyInstance);\n  }\n\n  private setClassName(tippyInstance: NgxTippyInstance) {\n    if (!this.tippyClassName) return;\n    const classNames = this.tippyClassName.split(' ');\n\n    classNames.length &&\n      classNames.forEach((className) => {\n        this.renderer.addClass(tippyInstance.popper.firstElementChild, className);\n      });\n  }\n\n  /**\n   * To manipulate tooltips, write all instances to storage\n   * `tippyName` used as unique key\n   * If `tippyName` does not provided - it will be generated using `tippyInstance.id`\n   *\n   * @param tippyInstance { NgxTippyInstance }\n   */\n  private writeInstancesToStorage(tippyInstance: NgxTippyInstance) {\n    this.ngxTippyService.setInstance(this.tippyName || `tippy-${tippyInstance.id}`, tippyInstance);\n  }\n}\n","import { Component, ElementRef, Input, ViewChild, Inject, PLATFORM_ID, AfterViewInit } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport tippy from 'tippy.js';\nimport { NgxTippyProps } from './ngx-tippy.interfaces';\n\n/**\n * This component implements next case: different tooltip content to many different elements, while only needing to initialize once with shared props\n */\n@Component({\n  selector: 'ngx-tippy-group',\n  template: `\n    <div #contentWrapper>\n      <ng-content></ng-content>\n    </div>\n  `,\n})\nexport class NgxTippyGroupComponent implements AfterViewInit {\n  @Input() tippyProps?: NgxTippyProps;\n  @ViewChild('contentWrapper', { read: ElementRef, static: false }) contentWrapper: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platform: Object) {}\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platform)) return;\n    this.setTooltips();\n  }\n\n  setTooltips() {\n    const contentWrapperNativeEl: HTMLElement = this.contentWrapper.nativeElement;\n    const tooltips: HTMLElement[] = Array.from(contentWrapperNativeEl.querySelectorAll('[data-grouped]'));\n\n    this.initTippy(tooltips);\n  }\n\n  initTippy(tooltips: HTMLElement[]) {\n    tippy(tooltips, this.tippyProps);\n  }\n}\n","import { Component, ElementRef, Input, ViewChild, Inject, PLATFORM_ID, AfterViewInit } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport tippy, { createSingleton } from 'tippy.js';\nimport { NgxTippyProps } from './ngx-tippy.interfaces';\n\n/**\n * This component implements case - singleton: single tippy element that takes the place of an array of regular tippy instances\n */\n@Component({\n  selector: 'ngx-tippy-singleton',\n  template: `\n    <div #contentWrapper>\n      <ng-content></ng-content>\n    </div>\n  `,\n})\nexport class NgxTippySingletonComponent implements AfterViewInit {\n  @Input() tippyProps?: NgxTippyProps;\n  @ViewChild('contentWrapper', { read: ElementRef, static: false }) contentWrapper: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platform: Object) {}\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platform)) return;\n    this.setTooltips();\n  }\n\n  setTooltips() {\n    const contentWrapperNativeEl: HTMLElement = this.contentWrapper.nativeElement;\n    const tooltips: HTMLElement[] = Array.from(contentWrapperNativeEl.querySelectorAll('[data-singleton]'));\n\n    this.initTippy(tooltips);\n  }\n\n  initTippy(tooltips: HTMLElement[]) {\n    createSingleton(tippy(tooltips), this.tippyProps);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxTippySingletonComponent } from './ngx-tippy-singleton.component';\nimport { NgxTippyGroupComponent } from './ngx-tippy-group.component';\nimport { NgxTippyDirective } from './ngx-tippy.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxTippyDirective, NgxTippyGroupComponent, NgxTippySingletonComponent],\n  exports: [NgxTippyDirective, NgxTippyGroupComponent, NgxTippySingletonComponent],\n  providers: [],\n})\nexport class NgxTippyModule {}\n"]}