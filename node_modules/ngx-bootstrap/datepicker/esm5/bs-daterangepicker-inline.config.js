/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { BsDatepickerConfig } from './bs-datepicker.config';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var BsDaterangepickerInlineConfig = /** @class */ (function (_super) {
    __extends(BsDaterangepickerInlineConfig, _super);
    function BsDaterangepickerInlineConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // DatepickerRenderOptions
        _this.displayMonths = 2;
        /**
         * turn on/off animation
         */
        _this.isAnimated = false;
        return _this;
    }
    /** @nocollapse */ BsDaterangepickerInlineConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function BsDaterangepickerInlineConfig_Factory() { return new BsDaterangepickerInlineConfig(); }, token: BsDaterangepickerInlineConfig, providedIn: "root" });
BsDaterangepickerInlineConfig.ɵfac = function BsDaterangepickerInlineConfig_Factory(t) { return ɵBsDaterangepickerInlineConfig_BaseFactory(t || BsDaterangepickerInlineConfig); };
var ɵBsDaterangepickerInlineConfig_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BsDaterangepickerInlineConfig);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BsDaterangepickerInlineConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
    return BsDaterangepickerInlineConfig;
}(BsDatepickerConfig));
export { BsDaterangepickerInlineConfig };
if (false) {
    /** @type {?} */
    BsDaterangepickerInlineConfig.prototype.displayMonths;
    /**
     * turn on/off animation
     * @type {?}
     */
    BsDaterangepickerInlineConfig.prototype.isAnimated;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXJhbmdlcGlja2VyLWlubGluZS5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5neC1ib290c3RyYXAvZGF0ZXBpY2tlci9icy1kYXRlcmFuZ2VwaWNrZXItaW5saW5lLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQ7O0FBQ0E7QUFHaUMsSUFBa0IsaURBQWtCO0FBQUMsSUFIdEU7QUFHSyxRQUhMLHFFQVFDO0FBQ0Q7QUFBbUMsUUFKL0IsbUJBQWEsR0FBRyxDQUFDLENBQUM7QUFDdEI7QUFBWTtBQUNBO0FBQ1osUUFESSxnQkFBVSxHQUFHLEtBQUssQ0FBQztBQUN2QjtBQUNvQixLQURuQixBQUxRO2lFQUhSLFVBQVUsU0FBQyxzQkFDVixVQUFVLEVBQUUsTUFBTSxrQkFDbkIsOUlBQ1M7Ozs7Ozs7OzBCQU1tRTtBQUFDLHdDQVo5RTtBQUFFLENBV0QsQUFSRCxDQUdtRCxrQkFBa0IsR0FLcEU7QUFDRCxTQU5hLDZCQUE2QjtBQUFJO0FBQWE7QUFDbkQsSUFDSixzREFBa0I7QUFDdEI7QUFBUTtBQUNKO0FBQWlCO0FBRWxCLElBRkMsbURBQW1CO0FBQ3ZCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc0RhdGVwaWNrZXJDb25maWcgfSBmcm9tICcuL2JzLWRhdGVwaWNrZXIuY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQnNEYXRlcmFuZ2VwaWNrZXJJbmxpbmVDb25maWcgZXh0ZW5kcyBCc0RhdGVwaWNrZXJDb25maWcge1xuICAgIC8vIERhdGVwaWNrZXJSZW5kZXJPcHRpb25zXG4gICAgZGlzcGxheU1vbnRocyA9IDI7XG4gICAgLyoqIHR1cm4gb24vb2ZmIGFuaW1hdGlvbiAqL1xuICAgIGlzQW5pbWF0ZWQgPSBmYWxzZTtcbn1cbiJdfQ==