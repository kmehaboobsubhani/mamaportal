{"version":3,"file":"pascalhonegger-ng-datatable.js","sources":["../../../projects/ng-datatable/src/lib/BootstrapPaginator.ts","../../../projects/ng-datatable/src/lib/DataTable.ts","../../../projects/ng-datatable/src/lib/Paginator.ts","../../../projects/ng-datatable/src/lib/DefaultSorter.ts","../../../projects/ng-datatable/src/lib/DataTableModule.ts","../../../../projects/ng-datatable/src/public-api.ts","../../../../projects/ng-datatable/src/pascalhonegger-ng-datatable.ts"],"sourcesContent":["import {Component, Input, OnChanges} from \"@angular/core\";\r\nimport {DataTable} from \"./DataTable\";\r\n\r\n@Component({\r\n    selector: \"mfBootstrapPaginator\",\r\n    template: `\r\n    <mfPaginator #p [mfTable]=\"mfTable\">\r\n        <ul class=\"pagination\" *ngIf=\"p.dataLength > p.rowsOnPage\">\r\n            <li class=\"page-item\" [class.disabled]=\"p.activePage <= 1\" (click)=\"p.setPage(1)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">&laquo;</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 4 && p.activePage + 1 > p.lastPage\" (click)=\"p.setPage(p.activePage - 4)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-4}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 3 && p.activePage + 2 > p.lastPage\" (click)=\"p.setPage(p.activePage - 3)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-3}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 2\" (click)=\"p.setPage(p.activePage - 2)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-2}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 1\" (click)=\"p.setPage(p.activePage - 1)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-1}}</a>\r\n            </li>\r\n            <li class=\"page-item active\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 1 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 1)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+1}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 2 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 2)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+2}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 3 <= p.lastPage && p.activePage < 3\" (click)=\"p.setPage(p.activePage + 3)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+3}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 4 <= p.lastPage && p.activePage < 2\" (click)=\"p.setPage(p.activePage + 4)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+4}}</a>\r\n            </li>\r\n            <li class=\"page-item\" [class.disabled]=\"p.activePage >= p.lastPage\" (click)=\"p.setPage(p.lastPage)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">&raquo;</a>\r\n            </li>\r\n        </ul>\r\n        <ul class=\"pagination pull-right float-sm-right\" *ngIf=\"p.dataLength > minRowsOnPage\">\r\n            <li class=\"page-item\" *ngFor=\"let rows of rowsOnPageSet\" [class.active]=\"p.rowsOnPage===rows\" (click)=\"p.setRowsOnPage(rows)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{rows}}</a>\r\n            </li>\r\n        </ul>\r\n    </mfPaginator>\r\n    `\r\n})\r\nexport class BootstrapPaginator implements OnChanges {\r\n    @Input(\"rowsOnPageSet\") rowsOnPageSet = [];\r\n    @Input(\"mfTable\") mfTable: DataTable;\r\n\r\n    minRowsOnPage = 0;\r\n\r\n    ngOnChanges(changes: any): any {\r\n        if (changes.rowsOnPageSet) {\r\n            this.minRowsOnPage = this.rowsOnPageSet.reduce((previous, current) => current < previous ? current : previous);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Directive, Input, EventEmitter, SimpleChange, OnChanges, DoCheck, IterableDiffers,\r\n    IterableDiffer, Output\r\n} from \"@angular/core\";\r\nimport { ReplaySubject } from \"rxjs\";\r\n\r\nexport interface SortEvent {\r\n    sortBy: string | string[] | Function | Function[];\r\n    sortOrder: string;\r\n}\r\n\r\nexport interface PageEvent {\r\n    activePage: number;\r\n    rowsOnPage: number;\r\n    dataLength: number;\r\n}\r\n\r\nexport interface DataEvent {\r\n    length: number;\r\n}\r\n\r\n@Directive({\r\n    selector: \"table[mfData]\",\r\n    exportAs: \"mfDataTable\"\r\n})\r\nexport class DataTable implements OnChanges, DoCheck {\r\n\r\n    private diff: IterableDiffer<any>;\r\n    @Input(\"mfData\") public inputData: any[] = [];\r\n\r\n    @Input(\"mfSortBy\") public sortBy: string | string[] | Function | Function[] = \"\";\r\n    @Input(\"mfSortOrder\") public sortOrder: \"asc\" | \"desc\" = \"asc\";\r\n    @Output(\"mfSortByChange\") public sortByChange = new EventEmitter<string | string[]>();\r\n    @Output(\"mfSortOrderChange\") public sortOrderChange = new EventEmitter<string>();\r\n\r\n    @Input(\"mfRowsOnPage\") public rowsOnPage = 1000;\r\n    @Input(\"mfActivePage\") public activePage = 1;\r\n\r\n    private mustRecalculateData = false;\r\n\r\n    public data: any[];\r\n\r\n    public onSortChange = new ReplaySubject<SortEvent>(1);\r\n    public onPageChange = new EventEmitter<PageEvent>();\r\n\r\n    public constructor(private differs: IterableDiffers) {\r\n        this.diff = differs.find([]).create(null);\r\n    }\r\n\r\n    public getSort(): SortEvent {\r\n        return { sortBy: this.sortBy, sortOrder: this.sortOrder };\r\n    }\r\n\r\n    public setSort(sortBy: string | string[], sortOrder: \"asc\" | \"desc\"): void {\r\n        if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {\r\n            this.sortBy = sortBy;\r\n            this.sortOrder = [\"asc\", \"desc\"].indexOf(sortOrder) >= 0 ? sortOrder : \"asc\";\r\n            this.mustRecalculateData = true;\r\n            this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });\r\n            this.sortByChange.emit(this.sortBy);\r\n            this.sortOrderChange.emit(this.sortOrder);\r\n        }\r\n    }\r\n\r\n    public getPage(): PageEvent {\r\n        return { activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length };\r\n    }\r\n\r\n    public setPage(activePage: number, rowsOnPage: number): void {\r\n        if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {\r\n            this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);\r\n            this.rowsOnPage = rowsOnPage;\r\n            this.mustRecalculateData = true;\r\n            this.onPageChange.emit({\r\n                activePage: this.activePage,\r\n                rowsOnPage: this.rowsOnPage,\r\n                dataLength: this.inputData ? this.inputData.length : 0\r\n            });\r\n        }\r\n    }\r\n\r\n    private calculateNewActivePage(previousRowsOnPage: number, currentRowsOnPage: number): number {\r\n        const firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;\r\n        const newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);\r\n        return newActivePage;\r\n    }\r\n\r\n    private recalculatePage() {\r\n        const lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);\r\n        this.activePage = lastPage < this.activePage ? lastPage : this.activePage;\r\n        this.activePage = this.activePage || 1;\r\n\r\n        this.onPageChange.emit({\r\n            activePage: this.activePage,\r\n            rowsOnPage: this.rowsOnPage,\r\n            dataLength: this.inputData.length\r\n        });\r\n    }\r\n\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }): any {\r\n        if (changes.rowsOnPage) {\r\n            this.rowsOnPage = changes.rowsOnPage.previousValue;\r\n            this.setPage(this.activePage, changes.rowsOnPage.currentValue);\r\n            this.mustRecalculateData = true;\r\n        }\r\n        if (changes.sortBy || changes.sortOrder) {\r\n            if ([\"asc\", \"desc\"].indexOf(this.sortOrder) < 0) {\r\n                console.warn(\"ng-datatable: value for input mfSortOrder must be one of ['asc', 'desc'], but is:\", this.sortOrder);\r\n                this.sortOrder = \"asc\";\r\n            }\r\n            if (this.sortBy) {\r\n                this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });\r\n            }\r\n            this.mustRecalculateData = true;\r\n        }\r\n        if (changes.inputData) {\r\n            this.inputData = changes.inputData.currentValue || [];\r\n            this.recalculatePage();\r\n            this.mustRecalculateData = true;\r\n        }\r\n    }\r\n\r\n    public ngDoCheck(): any {\r\n        const changes = this.diff.diff(this.inputData);\r\n        if (changes) {\r\n            this.recalculatePage();\r\n            this.mustRecalculateData = true;\r\n        }\r\n        if (this.mustRecalculateData) {\r\n            this.fillData();\r\n            this.mustRecalculateData = false;\r\n        }\r\n    }\r\n\r\n    private fillData(): void {\r\n        // this.activePage = this.activePage;\r\n        // this.rowsOnPage = this.rowsOnPage;\r\n\r\n        const offset = (this.activePage - 1) * this.rowsOnPage;\r\n        // let data = this.inputData;\r\n        // const sortBy = this.sortBy;\r\n        // if (typeof sortBy === \"string\" || sortBy instanceof String) {\r\n        //     data = orderBy(data, this.caseInsensitiveIteratee(sortBy as string), [this.sortOrder]);\r\n        // } else {\r\n        //     data = orderBy(data, sortBy, [this.sortOrder]);\r\n        // }\r\n        // data = slice(data, offset, offset + this.rowsOnPage);\r\n\r\n        this.data = [...this.inputData]\r\n            .sort(this.sorter(this.sortBy, this.sortOrder))\r\n            .slice(offset, offset + this.rowsOnPage);\r\n    }\r\n\r\n    private caseInsensitiveIteratee(sortBy: string | Function) {\r\n        return (row: any): any => {\r\n            let value = row;\r\n            if (typeof sortBy === \"string\" || sortBy instanceof String) {\r\n                for (const sortByProperty of sortBy.split(\".\")) {\r\n                    if (value) {\r\n                        value = value[sortByProperty];\r\n                    }\r\n                }\r\n            } else {\r\n                value = sortBy(value);\r\n            }\r\n\r\n            if (value && typeof value === \"string\" || value instanceof String) {\r\n                return value.toLowerCase();\r\n            }\r\n\r\n            return value;\r\n        };\r\n    }\r\n\r\n    private compare(left: any, right: any): number {\r\n        return left === right ? 0 : left == null || left > right ? 1 : -1;\r\n    }\r\n\r\n    private sorter<T>(sortBy: string | Function | (string | Function)[], sortOrder: string): (left: T, right: T) => number {\r\n        const order = sortOrder === \"desc\" ? -1 : 1;\r\n        if (Array.isArray(sortBy)) {\r\n            const iteratees = sortBy.map((entry: string | Function) => this.caseInsensitiveIteratee(entry));\r\n            return (left, right) => {\r\n                for (const iteratee of iteratees) {\r\n                    const comparison = this.compare(iteratee(left), iteratee(right)) * order;\r\n                    if (comparison !== 0) {\r\n                        return comparison;\r\n                    }\r\n                }\r\n                return 0;\r\n            };\r\n        } else {\r\n            const iteratee = this.caseInsensitiveIteratee(sortBy);\r\n            return (left, right) => this.compare(iteratee(left), iteratee(right)) * order;\r\n        }\r\n    }\r\n}\r\n","import {Component, Input, SimpleChange, OnChanges, Optional} from \"@angular/core\";\r\nimport {DataTable, PageEvent} from \"./DataTable\";\r\n\r\n@Component({\r\n    selector: \"mfPaginator\",\r\n    template: `<ng-content></ng-content>`\r\n})\r\nexport class Paginator implements OnChanges {\r\n\r\n    @Input(\"mfTable\") inputMfTable: DataTable;\r\n\r\n    private mfTable: DataTable;\r\n\r\n    public activePage: number;\r\n    public rowsOnPage: number;\r\n    public dataLength = 0;\r\n    public lastPage: number;\r\n\r\n    public constructor(@Optional() private injectMfTable: DataTable) {\r\n    }\r\n\r\n    public ngOnChanges(changes: {[key: string]: SimpleChange}): any {\r\n        this.mfTable = this.inputMfTable || this.injectMfTable;\r\n        this.onPageChangeSubscriber(this.mfTable.getPage());\r\n        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);\r\n    }\r\n\r\n    public setPage(pageNumber: number): void {\r\n        this.mfTable.setPage(pageNumber, this.rowsOnPage);\r\n    }\r\n\r\n    public setRowsOnPage(rowsOnPage: number): void {\r\n        this.mfTable.setPage(this.activePage, rowsOnPage);\r\n    }\r\n\r\n    private onPageChangeSubscriber = (event: PageEvent) => {\r\n        this.activePage = event.activePage;\r\n        this.rowsOnPage = event.rowsOnPage;\r\n        this.dataLength = event.dataLength;\r\n        this.lastPage = Math.ceil(this.dataLength / this.rowsOnPage);\r\n    }\r\n}\r\n","import {Component, Input, OnInit} from \"@angular/core\";\r\nimport {DataTable, SortEvent} from \"./DataTable\";\r\n\r\n@Component({\r\n    selector: \"mfDefaultSorter\",\r\n    template: `\r\n        <a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">\r\n            <ng-content></ng-content>\r\n            <span *ngIf=\"isSortedByMeAsc\" class=\"glyphicon glyphicon-triangle-top\" aria-hidden=\"true\"></span>\r\n            <span *ngIf=\"isSortedByMeDesc\" class=\"glyphicon glyphicon-triangle-bottom\" aria-hidden=\"true\"></span>\r\n        </a>`\r\n})\r\nexport class DefaultSorter implements OnInit {\r\n    @Input(\"by\") sortBy: string;\r\n\r\n    isSortedByMeAsc = false;\r\n    isSortedByMeDesc = false;\r\n\r\n    public constructor(private mfTable: DataTable) {\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.mfTable.onSortChange.subscribe((event: SortEvent) => {\r\n            // tslint:disable:triple-equals\r\n            this.isSortedByMeAsc = (event.sortBy == this.sortBy && event.sortOrder == \"asc\");\r\n            this.isSortedByMeDesc = (event.sortBy == this.sortBy && event.sortOrder == \"desc\");\r\n            // tslint:enable:triple-equals\r\n        });\r\n    }\r\n\r\n    sort() {\r\n        if (this.isSortedByMeAsc) {\r\n            this.mfTable.setSort(this.sortBy, \"desc\");\r\n        } else {\r\n            this.mfTable.setSort(this.sortBy, \"asc\");\r\n        }\r\n    }\r\n}\r\n","import {NgModule} from \"@angular/core\";\r\nimport {CommonModule} from \"@angular/common\";\r\n\r\nimport {DataTable} from \"./DataTable\";\r\nimport {DefaultSorter} from \"./DefaultSorter\";\r\nimport {Paginator} from \"./Paginator\";\r\nimport {BootstrapPaginator} from \"./BootstrapPaginator\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        DataTable,\r\n        DefaultSorter,\r\n        Paginator,\r\n        BootstrapPaginator\r\n    ],\r\n    exports: [\r\n        DataTable,\r\n        DefaultSorter,\r\n        Paginator,\r\n        BootstrapPaginator\r\n    ]\r\n})\r\nexport class DataTableModule {\r\n\r\n}\r\n","/*\n * Public API Surface of ng-datatable\n */\n\nexport * from \"./lib/BootstrapPaginator\";\nexport * from \"./lib/Paginator\";\nexport * from \"./lib/DefaultSorter\";\nexport * from \"./lib/DataTable\";\nexport * from \"./lib/DataTableModule\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;MAkDa,kBAAkB;IA/C/B;QAgD4B,kBAAa,GAAG,EAAE,CAAC;QAG3C,kBAAa,GAAG,CAAC,CAAC;KAOrB;IALG,WAAW,CAAC,OAAY;QACpB,IAAI,OAAO,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,OAAO,KAAK,OAAO,GAAG,QAAQ,GAAG,OAAO,GAAG,QAAQ,CAAC,CAAC;SAClH;KACJ;;;YAzDJ,SAAS,SAAC;gBACP,QAAQ,EAAE,sBAAsB;gBAChC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2CT;aACJ;;;4BAEI,KAAK,SAAC,eAAe;sBACrB,KAAK,SAAC,SAAS;;;MC3BP,SAAS;IAoBlB,YAA2B,OAAwB;QAAxB,YAAO,GAAP,OAAO,CAAiB;QAjB3B,cAAS,GAAU,EAAE,CAAC;QAEpB,WAAM,GAA8C,EAAE,CAAC;QACpD,cAAS,GAAmB,KAAK,CAAC;QAC9B,iBAAY,GAAG,IAAI,YAAY,EAAqB,CAAC;QAClD,oBAAe,GAAG,IAAI,YAAY,EAAU,CAAC;QAEnD,eAAU,GAAG,IAAI,CAAC;QAClB,eAAU,GAAG,CAAC,CAAC;QAErC,wBAAmB,GAAG,KAAK,CAAC;QAI7B,iBAAY,GAAG,IAAI,aAAa,CAAY,CAAC,CAAC,CAAC;QAC/C,iBAAY,GAAG,IAAI,YAAY,EAAa,CAAC;QAGhD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC7C;IAEM,OAAO;QACV,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;KAC7D;IAEM,OAAO,CAAC,MAAyB,EAAE,SAAyB;QAC/D,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YACxD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,SAAS,GAAG,KAAK,CAAC;YAC7E,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC3E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC7C;KACJ;IAEM,OAAO;QACV,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;KAC1G;IAEM,OAAO,CAAC,UAAkB,EAAE,UAAkB;QACjD,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,EAAE;YAClE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,KAAK,UAAU,GAAG,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YACzH,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,UAAU,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC;aACzD,CAAC,CAAC;SACN;KACJ;IAEO,sBAAsB,CAAC,kBAA0B,EAAE,iBAAyB;QAChF,MAAM,cAAc,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,kBAAkB,GAAG,CAAC,CAAC;QACtE,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,iBAAiB,CAAC,CAAC;QACpE,OAAO,aAAa,CAAC;KACxB;IAEO,eAAe;QACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,UAAU,GAAG,QAAQ,GAAG,IAAI,CAAC,UAAU,GAAG,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;QAC1E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;QAEvC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACnB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM;SACpC,CAAC,CAAC;KACN;IAEM,WAAW,CAAC,OAAwC;QACvD,IAAI,OAAO,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC;YACnD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAC/D,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACnC;QACD,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,EAAE;YACrC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBAC7C,OAAO,CAAC,IAAI,CAAC,mFAAmF,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B;YACD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;aAC9E;YACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACnC;QACD,IAAI,OAAO,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,YAAY,IAAI,EAAE,CAAC;YACtD,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACnC;KACJ;IAEM,SAAS;QACZ,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACnC;QACD,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;SACpC;KACJ;IAEO,QAAQ;;;QAIZ,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC;;;;;;;;;QAUvD,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;aAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9C,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;KAChD;IAEO,uBAAuB,CAAC,MAAyB;QACrD,OAAO,CAAC,GAAQ;YACZ,IAAI,KAAK,GAAG,GAAG,CAAC;YAChB,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,YAAY,MAAM,EAAE;gBACxD,KAAK,MAAM,cAAc,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBAC5C,IAAI,KAAK,EAAE;wBACP,KAAK,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;qBACjC;iBACJ;aACJ;iBAAM;gBACH,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;aACzB;YAED,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,MAAM,EAAE;gBAC/D,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC;aAC9B;YAED,OAAO,KAAK,CAAC;SAChB,CAAC;KACL;IAEO,OAAO,CAAC,IAAS,EAAE,KAAU;QACjC,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KACrE;IAEO,MAAM,CAAI,MAAiD,EAAE,SAAiB;QAClF,MAAM,KAAK,GAAG,SAAS,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAwB,KAAK,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC;YAChG,OAAO,CAAC,IAAI,EAAE,KAAK;gBACf,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;oBACzE,IAAI,UAAU,KAAK,CAAC,EAAE;wBAClB,OAAO,UAAU,CAAC;qBACrB;iBACJ;gBACD,OAAO,CAAC,CAAC;aACZ,CAAC;SACL;aAAM;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;YACtD,OAAO,CAAC,IAAI,EAAE,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;SACjF;KACJ;;;YA9KJ,SAAS,SAAC;gBACP,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,aAAa;aAC1B;;;YAvBqE,eAAe;;;wBA2BhF,KAAK,SAAC,QAAQ;qBAEd,KAAK,SAAC,UAAU;wBAChB,KAAK,SAAC,aAAa;2BACnB,MAAM,SAAC,gBAAgB;8BACvB,MAAM,SAAC,mBAAmB;yBAE1B,KAAK,SAAC,cAAc;yBACpB,KAAK,SAAC,cAAc;;;MC7BZ,SAAS;IAWlB,YAAuC,aAAwB;QAAxB,kBAAa,GAAb,aAAa,CAAW;QAHxD,eAAU,GAAG,CAAC,CAAC;QAoBd,2BAAsB,GAAG,CAAC,KAAgB;YAC9C,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;SAChE,CAAA;KArBA;IAEM,WAAW,CAAC,OAAsC;QACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC;QACvD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;KACpE;IAEM,OAAO,CAAC,UAAkB;QAC7B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KACrD;IAEM,aAAa,CAAC,UAAkB;QACnC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;KACrD;;;YA9BJ,SAAS,SAAC;gBACP,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE,2BAA2B;aACxC;;;YALO,SAAS,uBAiBO,QAAQ;;;2BAT3B,KAAK,SAAC,SAAS;;;MCGP,aAAa;IAMtB,YAA2B,OAAkB;QAAlB,YAAO,GAAP,OAAO,CAAW;QAH7C,oBAAe,GAAG,KAAK,CAAC;QACxB,qBAAgB,GAAG,KAAK,CAAC;KAGxB;IAEM,QAAQ;QACX,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,KAAgB;;YAEjD,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,CAAC;YACjF,IAAI,CAAC,gBAAgB,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,MAAM,CAAC,CAAC;;SAEtF,CAAC,CAAC;KACN;IAED,IAAI;QACA,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAC7C;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAC5C;KACJ;;;YAjCJ,SAAS,SAAC;gBACP,QAAQ,EAAE,iBAAiB;gBAC3B,QAAQ,EAAE;;;;;aAKD;aACZ;;;YAVO,SAAS;;;qBAYZ,KAAK,SAAC,IAAI;;;MCYF,eAAe;;;YAjB3B,QAAQ,SAAC;gBACN,OAAO,EAAE;oBACL,YAAY;iBACf;gBACD,YAAY,EAAE;oBACV,SAAS;oBACT,aAAa;oBACb,SAAS;oBACT,kBAAkB;iBACrB;gBACD,OAAO,EAAE;oBACL,SAAS;oBACT,aAAa;oBACb,SAAS;oBACT,kBAAkB;iBACrB;aACJ;;;ACxBD;;;;ACAA;;;;;;"}