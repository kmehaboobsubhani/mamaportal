import { Component, Input, EventEmitter, Directive, IterableDiffers, Output, Optional, NgModule } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { CommonModule } from '@angular/common';

class BootstrapPaginator {
    constructor() {
        this.rowsOnPageSet = [];
        this.minRowsOnPage = 0;
    }
    ngOnChanges(changes) {
        if (changes.rowsOnPageSet) {
            this.minRowsOnPage = this.rowsOnPageSet.reduce((previous, current) => current < previous ? current : previous);
        }
    }
}
BootstrapPaginator.decorators = [
    { type: Component, args: [{
                selector: "mfBootstrapPaginator",
                template: `
    <mfPaginator #p [mfTable]="mfTable">
        <ul class="pagination" *ngIf="p.dataLength > p.rowsOnPage">
            <li class="page-item" [class.disabled]="p.activePage <= 1" (click)="p.setPage(1)">
                <a class="page-link" style="cursor: pointer">&laquo;</a>
            </li>
            <li class="page-item" *ngIf="p.activePage > 4 && p.activePage + 1 > p.lastPage" (click)="p.setPage(p.activePage - 4)">
                <a class="page-link" style="cursor: pointer">{{p.activePage-4}}</a>
            </li>
            <li class="page-item" *ngIf="p.activePage > 3 && p.activePage + 2 > p.lastPage" (click)="p.setPage(p.activePage - 3)">
                <a class="page-link" style="cursor: pointer">{{p.activePage-3}}</a>
            </li>
            <li class="page-item" *ngIf="p.activePage > 2" (click)="p.setPage(p.activePage - 2)">
                <a class="page-link" style="cursor: pointer">{{p.activePage-2}}</a>
            </li>
            <li class="page-item" *ngIf="p.activePage > 1" (click)="p.setPage(p.activePage - 1)">
                <a class="page-link" style="cursor: pointer">{{p.activePage-1}}</a>
            </li>
            <li class="page-item active">
                <a class="page-link" style="cursor: pointer">{{p.activePage}}</a>
            </li>
            <li class="page-item" *ngIf="p.activePage + 1 <= p.lastPage" (click)="p.setPage(p.activePage + 1)">
                <a class="page-link" style="cursor: pointer">{{p.activePage+1}}</a>
            </li>
            <li class="page-item" *ngIf="p.activePage + 2 <= p.lastPage" (click)="p.setPage(p.activePage + 2)">
                <a class="page-link" style="cursor: pointer">{{p.activePage+2}}</a>
            </li>
            <li class="page-item" *ngIf="p.activePage + 3 <= p.lastPage && p.activePage < 3" (click)="p.setPage(p.activePage + 3)">
                <a class="page-link" style="cursor: pointer">{{p.activePage+3}}</a>
            </li>
            <li class="page-item" *ngIf="p.activePage + 4 <= p.lastPage && p.activePage < 2" (click)="p.setPage(p.activePage + 4)">
                <a class="page-link" style="cursor: pointer">{{p.activePage+4}}</a>
            </li>
            <li class="page-item" [class.disabled]="p.activePage >= p.lastPage" (click)="p.setPage(p.lastPage)">
                <a class="page-link" style="cursor: pointer">&raquo;</a>
            </li>
        </ul>
        <ul class="pagination pull-right float-sm-right" *ngIf="p.dataLength > minRowsOnPage">
            <li class="page-item" *ngFor="let rows of rowsOnPageSet" [class.active]="p.rowsOnPage===rows" (click)="p.setRowsOnPage(rows)">
                <a class="page-link" style="cursor: pointer">{{rows}}</a>
            </li>
        </ul>
    </mfPaginator>
    `
            },] }
];
BootstrapPaginator.propDecorators = {
    rowsOnPageSet: [{ type: Input, args: ["rowsOnPageSet",] }],
    mfTable: [{ type: Input, args: ["mfTable",] }]
};

class DataTable {
    constructor(differs) {
        this.differs = differs;
        this.inputData = [];
        this.sortBy = "";
        this.sortOrder = "asc";
        this.sortByChange = new EventEmitter();
        this.sortOrderChange = new EventEmitter();
        this.rowsOnPage = 1000;
        this.activePage = 1;
        this.mustRecalculateData = false;
        this.onSortChange = new ReplaySubject(1);
        this.onPageChange = new EventEmitter();
        this.diff = differs.find([]).create(null);
    }
    getSort() {
        return { sortBy: this.sortBy, sortOrder: this.sortOrder };
    }
    setSort(sortBy, sortOrder) {
        if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {
            this.sortBy = sortBy;
            this.sortOrder = ["asc", "desc"].indexOf(sortOrder) >= 0 ? sortOrder : "asc";
            this.mustRecalculateData = true;
            this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });
            this.sortByChange.emit(this.sortBy);
            this.sortOrderChange.emit(this.sortOrder);
        }
    }
    getPage() {
        return { activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length };
    }
    setPage(activePage, rowsOnPage) {
        if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {
            this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);
            this.rowsOnPage = rowsOnPage;
            this.mustRecalculateData = true;
            this.onPageChange.emit({
                activePage: this.activePage,
                rowsOnPage: this.rowsOnPage,
                dataLength: this.inputData ? this.inputData.length : 0
            });
        }
    }
    calculateNewActivePage(previousRowsOnPage, currentRowsOnPage) {
        const firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;
        const newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);
        return newActivePage;
    }
    recalculatePage() {
        const lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);
        this.activePage = lastPage < this.activePage ? lastPage : this.activePage;
        this.activePage = this.activePage || 1;
        this.onPageChange.emit({
            activePage: this.activePage,
            rowsOnPage: this.rowsOnPage,
            dataLength: this.inputData.length
        });
    }
    ngOnChanges(changes) {
        if (changes.rowsOnPage) {
            this.rowsOnPage = changes.rowsOnPage.previousValue;
            this.setPage(this.activePage, changes.rowsOnPage.currentValue);
            this.mustRecalculateData = true;
        }
        if (changes.sortBy || changes.sortOrder) {
            if (["asc", "desc"].indexOf(this.sortOrder) < 0) {
                console.warn("ng-datatable: value for input mfSortOrder must be one of ['asc', 'desc'], but is:", this.sortOrder);
                this.sortOrder = "asc";
            }
            if (this.sortBy) {
                this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });
            }
            this.mustRecalculateData = true;
        }
        if (changes.inputData) {
            this.inputData = changes.inputData.currentValue || [];
            this.recalculatePage();
            this.mustRecalculateData = true;
        }
    }
    ngDoCheck() {
        const changes = this.diff.diff(this.inputData);
        if (changes) {
            this.recalculatePage();
            this.mustRecalculateData = true;
        }
        if (this.mustRecalculateData) {
            this.fillData();
            this.mustRecalculateData = false;
        }
    }
    fillData() {
        // this.activePage = this.activePage;
        // this.rowsOnPage = this.rowsOnPage;
        const offset = (this.activePage - 1) * this.rowsOnPage;
        // let data = this.inputData;
        // const sortBy = this.sortBy;
        // if (typeof sortBy === "string" || sortBy instanceof String) {
        //     data = orderBy(data, this.caseInsensitiveIteratee(sortBy as string), [this.sortOrder]);
        // } else {
        //     data = orderBy(data, sortBy, [this.sortOrder]);
        // }
        // data = slice(data, offset, offset + this.rowsOnPage);
        this.data = [...this.inputData]
            .sort(this.sorter(this.sortBy, this.sortOrder))
            .slice(offset, offset + this.rowsOnPage);
    }
    caseInsensitiveIteratee(sortBy) {
        return (row) => {
            let value = row;
            if (typeof sortBy === "string" || sortBy instanceof String) {
                for (const sortByProperty of sortBy.split(".")) {
                    if (value) {
                        value = value[sortByProperty];
                    }
                }
            }
            else {
                value = sortBy(value);
            }
            if (value && typeof value === "string" || value instanceof String) {
                return value.toLowerCase();
            }
            return value;
        };
    }
    compare(left, right) {
        return left === right ? 0 : left == null || left > right ? 1 : -1;
    }
    sorter(sortBy, sortOrder) {
        const order = sortOrder === "desc" ? -1 : 1;
        if (Array.isArray(sortBy)) {
            const iteratees = sortBy.map((entry) => this.caseInsensitiveIteratee(entry));
            return (left, right) => {
                for (const iteratee of iteratees) {
                    const comparison = this.compare(iteratee(left), iteratee(right)) * order;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            };
        }
        else {
            const iteratee = this.caseInsensitiveIteratee(sortBy);
            return (left, right) => this.compare(iteratee(left), iteratee(right)) * order;
        }
    }
}
DataTable.decorators = [
    { type: Directive, args: [{
                selector: "table[mfData]",
                exportAs: "mfDataTable"
            },] }
];
DataTable.ctorParameters = () => [
    { type: IterableDiffers }
];
DataTable.propDecorators = {
    inputData: [{ type: Input, args: ["mfData",] }],
    sortBy: [{ type: Input, args: ["mfSortBy",] }],
    sortOrder: [{ type: Input, args: ["mfSortOrder",] }],
    sortByChange: [{ type: Output, args: ["mfSortByChange",] }],
    sortOrderChange: [{ type: Output, args: ["mfSortOrderChange",] }],
    rowsOnPage: [{ type: Input, args: ["mfRowsOnPage",] }],
    activePage: [{ type: Input, args: ["mfActivePage",] }]
};

class Paginator {
    constructor(injectMfTable) {
        this.injectMfTable = injectMfTable;
        this.dataLength = 0;
        this.onPageChangeSubscriber = (event) => {
            this.activePage = event.activePage;
            this.rowsOnPage = event.rowsOnPage;
            this.dataLength = event.dataLength;
            this.lastPage = Math.ceil(this.dataLength / this.rowsOnPage);
        };
    }
    ngOnChanges(changes) {
        this.mfTable = this.inputMfTable || this.injectMfTable;
        this.onPageChangeSubscriber(this.mfTable.getPage());
        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);
    }
    setPage(pageNumber) {
        this.mfTable.setPage(pageNumber, this.rowsOnPage);
    }
    setRowsOnPage(rowsOnPage) {
        this.mfTable.setPage(this.activePage, rowsOnPage);
    }
}
Paginator.decorators = [
    { type: Component, args: [{
                selector: "mfPaginator",
                template: `<ng-content></ng-content>`
            },] }
];
Paginator.ctorParameters = () => [
    { type: DataTable, decorators: [{ type: Optional }] }
];
Paginator.propDecorators = {
    inputMfTable: [{ type: Input, args: ["mfTable",] }]
};

class DefaultSorter {
    constructor(mfTable) {
        this.mfTable = mfTable;
        this.isSortedByMeAsc = false;
        this.isSortedByMeDesc = false;
    }
    ngOnInit() {
        this.mfTable.onSortChange.subscribe((event) => {
            // tslint:disable:triple-equals
            this.isSortedByMeAsc = (event.sortBy == this.sortBy && event.sortOrder == "asc");
            this.isSortedByMeDesc = (event.sortBy == this.sortBy && event.sortOrder == "desc");
            // tslint:enable:triple-equals
        });
    }
    sort() {
        if (this.isSortedByMeAsc) {
            this.mfTable.setSort(this.sortBy, "desc");
        }
        else {
            this.mfTable.setSort(this.sortBy, "asc");
        }
    }
}
DefaultSorter.decorators = [
    { type: Component, args: [{
                selector: "mfDefaultSorter",
                template: `
        <a style="cursor: pointer" (click)="sort()" class="text-nowrap">
            <ng-content></ng-content>
            <span *ngIf="isSortedByMeAsc" class="glyphicon glyphicon-triangle-top" aria-hidden="true"></span>
            <span *ngIf="isSortedByMeDesc" class="glyphicon glyphicon-triangle-bottom" aria-hidden="true"></span>
        </a>`
            },] }
];
DefaultSorter.ctorParameters = () => [
    { type: DataTable }
];
DefaultSorter.propDecorators = {
    sortBy: [{ type: Input, args: ["by",] }]
};

class DataTableModule {
}
DataTableModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    DataTable,
                    DefaultSorter,
                    Paginator,
                    BootstrapPaginator
                ],
                exports: [
                    DataTable,
                    DefaultSorter,
                    Paginator,
                    BootstrapPaginator
                ]
            },] }
];

/*
 * Public API Surface of ng-datatable
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BootstrapPaginator, DataTable, DataTableModule, DefaultSorter, Paginator };
//# sourceMappingURL=pascalhonegger-ng-datatable.js.map
