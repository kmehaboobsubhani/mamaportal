import { Component, Input, Optional } from "@angular/core";
import { DataTable } from "./DataTable";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './DataTable';

const _c0 = ["*"];
export class Paginator {
    constructor(injectMfTable) {
        this.injectMfTable = injectMfTable;
        this.dataLength = 0;
        this.onPageChangeSubscriber = (event) => {
            this.activePage = event.activePage;
            this.rowsOnPage = event.rowsOnPage;
            this.dataLength = event.dataLength;
            this.lastPage = Math.ceil(this.dataLength / this.rowsOnPage);
        };
    }
    ngOnChanges(changes) {
        this.mfTable = this.inputMfTable || this.injectMfTable;
        this.onPageChangeSubscriber(this.mfTable.getPage());
        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);
    }
    setPage(pageNumber) {
        this.mfTable.setPage(pageNumber, this.rowsOnPage);
    }
    setRowsOnPage(rowsOnPage) {
        this.mfTable.setPage(this.activePage, rowsOnPage);
    }
}
Paginator.ɵfac = function Paginator_Factory(t) { return new (t || Paginator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataTable, 8)); };
Paginator.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Paginator, selectors: [["mfPaginator"]], inputs: { inputMfTable: ["mfTable", "inputMfTable"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function Paginator_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
Paginator.ctorParameters = () => [
    { type: DataTable, decorators: [{ type: Optional }] }
];
Paginator.propDecorators = {
    inputMfTable: [{ type: Input, args: ["mfTable",] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Paginator, [{
        type: Component,
        args: [{
                selector: "mfPaginator",
                template: `<ng-content></ng-content>`
            }]
    }], function () { return [{ type: ɵngcc1.DataTable, decorators: [{
                type: Optional
            }] }]; }, { inputMfTable: [{
            type: Input,
            args: ["mfTable"]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnaW5hdG9yLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1kYXRhdGFibGUvc3JjL2xpYi9QYWdpbmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQTJCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUMsU0FBUyxFQUFZLE1BQU0sYUFBYSxDQUFDOzs7OztBQU1qRCxNQUFNLE9BQU8sU0FBUztBQUFJLElBV3RCLFlBQXVDLGFBQXdCO0FBQ25FLFFBRDJDLGtCQUFhLEdBQWIsYUFBYSxDQUFXO0FBQUUsUUFIMUQsZUFBVSxHQUFHLENBQUMsQ0FBQztBQUMxQixRQW1CWSwyQkFBc0IsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtBQUMxRCxZQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztBQUMzQyxZQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztBQUMzQyxZQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztBQUMzQyxZQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRSxRQUFJLENBQUMsQ0FBQTtBQUNMLElBdEJJLENBQUM7QUFDTCxJQUNXLFdBQVcsQ0FBQyxPQUFzQztBQUFLLFFBQzFELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQy9ELFFBQVEsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM1RCxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN6RSxJQUFJLENBQUM7QUFDTCxJQUNXLE9BQU8sQ0FBQyxVQUFrQjtBQUFLLFFBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDMUQsSUFBSSxDQUFDO0FBQ0wsSUFDVyxhQUFhLENBQUMsVUFBa0I7QUFBSyxRQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzFELElBQUksQ0FBQztBQUNMO3VDQS9CQyxTQUFTLFNBQUMsbUJBQ1AsUUFBUSxFQUFFLGFBQWEsbUJBQ3ZCLFFBQVE7QUFBRSwyQkFBMkIsZUFDeEM7Ozs2QkFDSTtBQUFFO0FBQW9DLFlBTm5DLFNBQVMsdUJBaUJPLFFBQVE7QUFBTztBQUFJO0FBQzFDLDJCQVZJLEtBQUssU0FBQyxTQUFTO0FBQU87Ozs7Ozs7Ozs7Ozs7QUFUQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFXQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQW9CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQXJCQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTlCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFMQSxBQUFBLEFBaUJBLEFBQUEsQUFUQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgU2ltcGxlQ2hhbmdlLCBPbkNoYW5nZXMsIE9wdGlvbmFsfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge0RhdGFUYWJsZSwgUGFnZUV2ZW50fSBmcm9tIFwiLi9EYXRhVGFibGVcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwibWZQYWdpbmF0b3JcIixcclxuICAgIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmBcclxufSlcclxuZXhwb3J0IGNsYXNzIFBhZ2luYXRvciBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcblxyXG4gICAgQElucHV0KFwibWZUYWJsZVwiKSBpbnB1dE1mVGFibGU6IERhdGFUYWJsZTtcclxuXHJcbiAgICBwcml2YXRlIG1mVGFibGU6IERhdGFUYWJsZTtcclxuXHJcbiAgICBwdWJsaWMgYWN0aXZlUGFnZTogbnVtYmVyO1xyXG4gICAgcHVibGljIHJvd3NPblBhZ2U6IG51bWJlcjtcclxuICAgIHB1YmxpYyBkYXRhTGVuZ3RoID0gMDtcclxuICAgIHB1YmxpYyBsYXN0UGFnZTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGluamVjdE1mVGFibGU6IERhdGFUYWJsZSkge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7W2tleTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlfSk6IGFueSB7XHJcbiAgICAgICAgdGhpcy5tZlRhYmxlID0gdGhpcy5pbnB1dE1mVGFibGUgfHwgdGhpcy5pbmplY3RNZlRhYmxlO1xyXG4gICAgICAgIHRoaXMub25QYWdlQ2hhbmdlU3Vic2NyaWJlcih0aGlzLm1mVGFibGUuZ2V0UGFnZSgpKTtcclxuICAgICAgICB0aGlzLm1mVGFibGUub25QYWdlQ2hhbmdlLnN1YnNjcmliZSh0aGlzLm9uUGFnZUNoYW5nZVN1YnNjcmliZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQYWdlKHBhZ2VOdW1iZXI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubWZUYWJsZS5zZXRQYWdlKHBhZ2VOdW1iZXIsIHRoaXMucm93c09uUGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJvd3NPblBhZ2Uocm93c09uUGFnZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tZlRhYmxlLnNldFBhZ2UodGhpcy5hY3RpdmVQYWdlLCByb3dzT25QYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uUGFnZUNoYW5nZVN1YnNjcmliZXIgPSAoZXZlbnQ6IFBhZ2VFdmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlUGFnZSA9IGV2ZW50LmFjdGl2ZVBhZ2U7XHJcbiAgICAgICAgdGhpcy5yb3dzT25QYWdlID0gZXZlbnQucm93c09uUGFnZTtcclxuICAgICAgICB0aGlzLmRhdGFMZW5ndGggPSBldmVudC5kYXRhTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubGFzdFBhZ2UgPSBNYXRoLmNlaWwodGhpcy5kYXRhTGVuZ3RoIC8gdGhpcy5yb3dzT25QYWdlKTtcclxuICAgIH1cclxufVxyXG4iXX0=