import { Directive, Input, EventEmitter, IterableDiffers, Output } from "@angular/core";
import { ReplaySubject } from "rxjs";
export class DataTable {
    constructor(differs) {
        this.differs = differs;
        this.inputData = [];
        this.sortBy = "";
        this.sortOrder = "asc";
        this.sortByChange = new EventEmitter();
        this.sortOrderChange = new EventEmitter();
        this.rowsOnPage = 1000;
        this.activePage = 1;
        this.mustRecalculateData = false;
        this.onSortChange = new ReplaySubject(1);
        this.onPageChange = new EventEmitter();
        this.diff = differs.find([]).create(null);
    }
    getSort() {
        return { sortBy: this.sortBy, sortOrder: this.sortOrder };
    }
    setSort(sortBy, sortOrder) {
        if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {
            this.sortBy = sortBy;
            this.sortOrder = ["asc", "desc"].indexOf(sortOrder) >= 0 ? sortOrder : "asc";
            this.mustRecalculateData = true;
            this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });
            this.sortByChange.emit(this.sortBy);
            this.sortOrderChange.emit(this.sortOrder);
        }
    }
    getPage() {
        return { activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length };
    }
    setPage(activePage, rowsOnPage) {
        if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {
            this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);
            this.rowsOnPage = rowsOnPage;
            this.mustRecalculateData = true;
            this.onPageChange.emit({
                activePage: this.activePage,
                rowsOnPage: this.rowsOnPage,
                dataLength: this.inputData ? this.inputData.length : 0
            });
        }
    }
    calculateNewActivePage(previousRowsOnPage, currentRowsOnPage) {
        const firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;
        const newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);
        return newActivePage;
    }
    recalculatePage() {
        const lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);
        this.activePage = lastPage < this.activePage ? lastPage : this.activePage;
        this.activePage = this.activePage || 1;
        this.onPageChange.emit({
            activePage: this.activePage,
            rowsOnPage: this.rowsOnPage,
            dataLength: this.inputData.length
        });
    }
    ngOnChanges(changes) {
        if (changes.rowsOnPage) {
            this.rowsOnPage = changes.rowsOnPage.previousValue;
            this.setPage(this.activePage, changes.rowsOnPage.currentValue);
            this.mustRecalculateData = true;
        }
        if (changes.sortBy || changes.sortOrder) {
            if (["asc", "desc"].indexOf(this.sortOrder) < 0) {
                console.warn("ng-datatable: value for input mfSortOrder must be one of ['asc', 'desc'], but is:", this.sortOrder);
                this.sortOrder = "asc";
            }
            if (this.sortBy) {
                this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });
            }
            this.mustRecalculateData = true;
        }
        if (changes.inputData) {
            this.inputData = changes.inputData.currentValue || [];
            this.recalculatePage();
            this.mustRecalculateData = true;
        }
    }
    ngDoCheck() {
        const changes = this.diff.diff(this.inputData);
        if (changes) {
            this.recalculatePage();
            this.mustRecalculateData = true;
        }
        if (this.mustRecalculateData) {
            this.fillData();
            this.mustRecalculateData = false;
        }
    }
    fillData() {
        // this.activePage = this.activePage;
        // this.rowsOnPage = this.rowsOnPage;
        const offset = (this.activePage - 1) * this.rowsOnPage;
        // let data = this.inputData;
        // const sortBy = this.sortBy;
        // if (typeof sortBy === "string" || sortBy instanceof String) {
        //     data = orderBy(data, this.caseInsensitiveIteratee(sortBy as string), [this.sortOrder]);
        // } else {
        //     data = orderBy(data, sortBy, [this.sortOrder]);
        // }
        // data = slice(data, offset, offset + this.rowsOnPage);
        this.data = [...this.inputData]
            .sort(this.sorter(this.sortBy, this.sortOrder))
            .slice(offset, offset + this.rowsOnPage);
    }
    caseInsensitiveIteratee(sortBy) {
        return (row) => {
            let value = row;
            if (typeof sortBy === "string" || sortBy instanceof String) {
                for (const sortByProperty of sortBy.split(".")) {
                    if (value) {
                        value = value[sortByProperty];
                    }
                }
            }
            else {
                value = sortBy(value);
            }
            if (value && typeof value === "string" || value instanceof String) {
                return value.toLowerCase();
            }
            return value;
        };
    }
    compare(left, right) {
        return left === right ? 0 : left == null || left > right ? 1 : -1;
    }
    sorter(sortBy, sortOrder) {
        const order = sortOrder === "desc" ? -1 : 1;
        if (Array.isArray(sortBy)) {
            const iteratees = sortBy.map((entry) => this.caseInsensitiveIteratee(entry));
            return (left, right) => {
                for (const iteratee of iteratees) {
                    const comparison = this.compare(iteratee(left), iteratee(right)) * order;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            };
        }
        else {
            const iteratee = this.caseInsensitiveIteratee(sortBy);
            return (left, right) => this.compare(iteratee(left), iteratee(right)) * order;
        }
    }
}
DataTable.decorators = [
    { type: Directive, args: [{
                selector: "table[mfData]",
                exportAs: "mfDataTable"
            },] }
];
DataTable.ctorParameters = () => [
    { type: IterableDiffers }
];
DataTable.propDecorators = {
    inputData: [{ type: Input, args: ["mfData",] }],
    sortBy: [{ type: Input, args: ["mfSortBy",] }],
    sortOrder: [{ type: Input, args: ["mfSortOrder",] }],
    sortByChange: [{ type: Output, args: ["mfSortByChange",] }],
    sortOrderChange: [{ type: Output, args: ["mfSortOrderChange",] }],
    rowsOnPage: [{ type: Input, args: ["mfRowsOnPage",] }],
    activePage: [{ type: Input, args: ["mfActivePage",] }]
};
//# sourceMappingURL=data:application/json;base64,