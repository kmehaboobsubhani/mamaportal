import { EventEmitter, SimpleChange, OnChanges, DoCheck, IterableDiffers } from "@angular/core";
import { ReplaySubject } from "rxjs";
import * as ɵngcc0 from '@angular/core';
export interface SortEvent {
    sortBy: string | string[] | Function | Function[];
    sortOrder: string;
}
export interface PageEvent {
    activePage: number;
    rowsOnPage: number;
    dataLength: number;
}
export interface DataEvent {
    length: number;
}
export declare class DataTable implements OnChanges, DoCheck {
    private differs;
    private diff;
    inputData: any[];
    sortBy: string | string[] | Function | Function[];
    sortOrder: "asc" | "desc";
    sortByChange: EventEmitter<string | string[]>;
    sortOrderChange: EventEmitter<string>;
    rowsOnPage: number;
    activePage: number;
    private mustRecalculateData;
    data: any[];
    onSortChange: ReplaySubject<SortEvent>;
    onPageChange: EventEmitter<PageEvent>;
    constructor(differs: IterableDiffers);
    getSort(): SortEvent;
    setSort(sortBy: string | string[], sortOrder: "asc" | "desc"): void;
    getPage(): PageEvent;
    setPage(activePage: number, rowsOnPage: number): void;
    private calculateNewActivePage;
    private recalculatePage;
    ngOnChanges(changes: {
        [key: string]: SimpleChange;
    }): any;
    ngDoCheck(): any;
    private fillData;
    private caseInsensitiveIteratee;
    private compare;
    private sorter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataTable, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DataTable, "table[mfData]", ["mfDataTable"], { "inputData": "mfData"; "sortBy": "mfSortBy"; "sortOrder": "mfSortOrder"; "rowsOnPage": "mfRowsOnPage"; "activePage": "mfActivePage"; }, { "sortByChange": "mfSortByChange"; "sortOrderChange": "mfSortOrderChange"; }, never>;
}

//# sourceMappingURL=DataTable.d.ts.map