{"version":3,"sources":["../../../projects/ng-chartjs/src/lib/store.service.ts","../../../projects/ng-chartjs/src/lib/plugins-config.ts","../../../projects/ng-chartjs/src/lib/ng-chartjs.service.ts","../../../projects/ng-chartjs/src/lib/colors.ts","../../../projects/ng-chartjs/src/lib/ng-chartjs.directive.ts","../../../projects/ng-chartjs/src/lib/plugin-token.ts","../../../projects/ng-chartjs/src/lib/ng-chartjs.module.ts"],"names":["StoreService","this","_chartInstances","_chartId","prototype","addChart","id","chart","i","length","push","removeChart","splice","getChart","Injectable","args","providedIn","plugins","NgChartjsService","storeService","pluginConfig","Chart.plugins","register","PluginConfig","DefaultColors","rgba","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","formatLineColor","colors","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","formatBarColor","hoverBackgroundColor","hoverBorderColor","formatPieColors","map","color","formatPolarAreaColors","getRandomColor","generateColor","index","generateColors","count","colorsArr","Array","getColors","chartType","NgChartjsDirective","element","ngChartjsService","zone","labels","options","noZone","chartClick","EventEmitter","chartHover","initFlag","hasChanges","ngOnInit","_this","ctx","nativeElement","getContext","data","datasets","runOutsideAngular","refresh","ngOnChanges","changes","hasOwnProperty","updateChartData","currentValue","legend","previousValue","display","addData_","adding","removing","orientation","removeData_","Object","assign","resetOption","update","ngOnDestroy","destroy","addData","removeData","getChartBuilder","hasAttribute","newDataValues","isArray","forEach","dataset","label","updateColors","getDatasets","hover","onHover","event","active","emit","onClick","opts","type","inlinePlugins","Chart","Error","elm","newElm","console","log","pop","shift","Directive","selector","exportAs","ElementRef","NgZone","Input","Output","NgChartjsCustomPluginToken","InjectionToken","ngChartjsCustomPluginsFactory","NgChartjsModule","registerPlugin","ngModule","providers","provide","useValue","deps","useFactory","NgModule","imports","declarations","exports"],"mappings":"0pBAEA,SAAAA,IAIUC,KAAAC,gBAAyB,GACzBD,KAAAE,SAAqB,UAE7BH,EAAAI,UAAAC,SAAA,SAASC,EAAYC,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,KAAKE,SAASM,OAAQD,IACxC,GAAIF,IAAOL,KAAKE,SAASK,GACvB,OAGJP,KAAKE,SAASO,KAAKJ,GACnBL,KAAKC,gBAAgBQ,KAAKH,IAG5BP,EAAAI,UAAAO,YAAA,SAAYL,GACV,IAAK,IAAIE,EAAI,EAAGA,EAAIP,KAAKE,SAASM,OAAQD,IACpCF,IAAOL,KAAKE,SAASK,KACvBP,KAAKE,SAASS,OAAOJ,EAAG,GACxBP,KAAKC,gBAAgBU,OAAOJ,EAAG,KAKrCR,EAAAI,UAAAS,SAAA,SAASP,GACP,IAAK,IAAIE,EAAI,EAAGA,EAAIP,KAAKE,SAASM,OAAQD,IACxC,GAAIF,IAAOL,KAAKE,SAASK,GACvB,OAAOP,KAAKC,gBAAgBM,GAGhC,OAAO,0HAhCVM,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,iBCDd,WAIIf,KAAAgB,QAAiB,mHAJpBH,EAAAA,WAAUC,KAAA,CAAC,CACRC,WAAY,4BCOZ,SAAAE,EACUC,EACAC,GADAnB,KAAAkB,aAAAA,EACAlB,KAAAmB,aAAAA,EACR,IAAMH,EAAUG,EAAaH,QAC7B,GAAuB,IAAnBA,EAAQR,QAAgBQ,EAC1B,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAQR,OAAQD,IAC9BS,EAAQT,IACVa,EAAAA,QAAcC,SAASL,EAAQT,WAMvCU,EAAAd,UAAAS,SAAA,SAASP,GACP,OAAOL,KAAKkB,aAAaN,SAASP,qJAnBvCQ,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHLhB,SADAuB,SC0BIC,EAA4B,CACrC,CAAC,GAAI,GAAI,KACT,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,IAAK,GAAI,IACV,CAAC,IAAK,GAAI,KACV,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,IAAK,KACT,CAAC,GAAI,IAAK,KACV,CAAC,IAAK,IAAK,GACX,CAAC,GAAI,IAAK,IACV,CAAC,IAAK,IAAK,IACX,CAAC,GAAI,IAAK,eASEC,EAAKC,EAAkBC,GACnC,MAAO,QAAUD,EAAOE,OAAOD,GAAOE,KAAK,KAAO,aAGtCC,EAAaC,EAAaC,GACtC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,WAGzCK,EAAgBC,GAC5B,MAAO,CACHC,gBAAiBb,EAAKY,EAAQ,KAC9BE,YAAad,EAAKY,EAAQ,GAC1BG,qBAAsBf,EAAKY,EAAQ,GACnCI,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuBlB,EAAKY,EAAQ,eAI5BO,EAAeP,GAC3B,MAAO,CACHC,gBAAiBb,EAAKY,EAAQ,KAC9BE,YAAad,EAAKY,EAAQ,GAC1BQ,qBAAsBpB,EAAKY,EAAQ,GACnCS,iBAAkBrB,EAAKY,EAAQ,aAIvBU,EAAgBV,GAC5B,MAAO,CACHC,gBAAiBD,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,QAC7DV,YAAaF,EAAOW,KAAI,WAAM,MAAA,UAC9BR,qBAAsBH,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,MAClER,iBAAkBJ,EAAOW,KAAI,WAAM,MAAA,UACnCN,0BAA2BL,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,MACvEN,sBAAuBN,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,gBAI3DC,EAAsBb,GAClC,MAAO,CACHC,gBAAiBD,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,QAC7DV,YAAaF,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,MACzDJ,qBAAsBR,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,MAClEH,iBAAkBT,EAAOW,KAAI,SAACC,GAAoB,OAAAxB,EAAKwB,EAAO,gBAItDE,IACZ,MAAO,CAACrB,EAAa,EAAG,KAAMA,EAAa,EAAG,KAAMA,EAAa,EAAG,eAaxDsB,EAAcC,GAC1B,OAAO7B,EAAc6B,IAAUF,aAanBG,EAAeC,GAE3B,IADA,IAAMC,EAAwB,IAAIC,MAAMF,GAC/B/C,EAAI,EAAGA,EAAI+C,EAAO/C,IACvBgD,EAAUhD,GAAKgB,EAAchB,IAAM2C,IAEvC,OAAOK,WAeKE,EAAUC,EAAmBN,EAAeE,GACxD,MAAkB,QAAdI,GACc,aAAdA,GACc,WAAdA,GACc,YAAdA,EACOZ,EAAgBO,EAAeC,IAGxB,cAAdI,EACOT,EAAsBI,EAAeC,IAG9B,SAAdI,GAAsC,UAAdA,EACjBvB,EAAgBgB,EAAcC,IAGvB,QAAdM,GAAqC,kBAAdA,EAChBf,EAAeQ,EAAcC,IAGjCD,EAAcC,oBC3FvB,SAAAO,EACEC,EACQC,EACA3C,EACA4C,GAFA9D,KAAA6D,iBAAAA,EACA7D,KAAAkB,aAAAA,EACAlB,KAAA8D,KAAAA,EA9CD9D,KAAA+D,OAAiB,GAEjB/D,KAAAgE,QAA8B,GAqB9BhE,KAAAiE,QAAS,EAETjE,KAAAK,GAAa,KAGZL,KAAAkE,WAA2C,IAAIC,EAAAA,aAE/CnE,KAAAoE,WAA2C,IAAID,EAAAA,aAOjDnE,KAAAqE,UAAW,EACXrE,KAAAsE,YAAa,EASnBtE,KAAK4D,QAAUA,SAGjBD,EAAAxD,UAAAoE,SAAA,WAAA,IAAAC,EAAAxE,KACEA,KAAKyE,IAAMzE,KAAK4D,QAAQc,cAAcC,WAAW,MACjD3E,KAAKqE,UAAW,GAEZrE,KAAK4E,MAAQ5E,KAAK6E,YAChB7E,KAAKiE,OACPjE,KAAK8D,KAAKgB,mBAAkB,WAC3BN,EAAKO,aAGN/E,KAAK+E,YAKXpB,EAAAxD,UAAA6E,YAAA,SAAYC,GAENjF,KAAKqE,YAEHY,EAAQC,eAAe,SAAWD,EAAQC,eAAe,eACvDD,EAAQL,KACV5E,KAAKmF,gBAAgBF,EAAQL,KAAKQ,cAElCpF,KAAKmF,gBAAgBF,EAAQJ,SAASO,cAExCpF,KAAKsE,YAAa,GAGhBW,EAAQC,eAAe,YACzBlF,KAAKM,MAAMsE,KAAKb,OAASkB,EAAQlB,OAAOqB,aACxCpF,KAAKsE,YAAa,GAGhBW,EAAQC,eAAe,WACrBD,EAAQI,OAAOD,eAAiBH,EAAQI,OAAOC,gBAEjDtF,KAAKM,MAAM0D,QAAQqB,OAAOE,QAAUN,EAAQI,OAAOD,aACnDpF,KAAKsE,YAAa,GAIlBW,EAAQC,eAAe,YACzBlF,KAAKwF,SAASP,EAAQQ,OAAOL,aAAarB,OAAQkB,EAAQQ,OAAOL,aAAaR,MAC9E5E,KAAKsE,YAAa,GAGhBW,EAAQC,eAAe,cACyB,WAA9CD,EAAQS,SAASN,aAAaO,aAA0E,WAA9CV,EAAQS,SAASN,aAAaO,cAC1F3F,KAAK4F,YAAYX,EAAQS,SAASN,aAAaO,aAC/C3F,KAAKsE,YAAa,IAIlBW,EAAQC,eAAe,cACzBlF,KAAK+E,UAGHE,EAAQC,eAAe,iBACzBW,OAAOC,OAAO9F,KAAKM,MAAM0D,QAASiB,EAAQc,YAAYX,cACtDpF,KAAKsE,YAAa,GAGhBtE,KAAKsE,aACPtE,KAAKM,MAAM0F,SACXhG,KAAKsE,YAAa,GAIhBW,EAAQC,eAAe,QACzBlF,KAAKU,YAAYuE,EAAQ5E,GAAGiF,eAC5BtF,KAAKI,SAAS6E,EAAQ5E,GAAG+E,iBAK/BzB,EAAAxD,UAAA8F,YAAA,WACMjG,KAAKM,QACPN,KAAKM,MAAM4F,UAEXlG,KAAKM,WAAQ,EAEbN,KAAKU,YAAYV,KAAKK,MAK1BsD,EAAAxD,UAAA6F,OAAA,WACEhG,KAAKM,MAAM0F,UAIbrC,EAAAxD,UAAAgG,QAAA,SAAQpC,EAAkBa,GACxB5E,KAAKwF,SAASzB,EAAQa,GACtB5E,KAAKgG,UAGPrC,EAAAxD,UAAAiG,WAAA,SAAWT,GACT3F,KAAK4F,YAAYD,GACjB3F,KAAKgG,UAGCrC,EAAAxD,UAAA4E,QAAA,WACN/E,KAAKiG,cACLjG,KAAKM,MAAQN,KAAKqG,gBAAgBrG,KAAKyE,KACvCzE,KAAKI,SAASJ,KAAKK,KAGbsD,EAAAxD,UAAAO,YAAA,SAAYL,GACdL,KAAK4D,QAAQc,cAAc4B,aAAa,MAC1CtG,KAAKkB,aAAaR,YAAYV,KAAK4D,QAAQc,cAAcrE,IAGvDA,MAAAA,GACFL,KAAKkB,aAAaR,YAAYL,IAI1BsD,EAAAxD,UAAAC,SAAA,SAASC,GACXL,KAAK4D,QAAQc,cAAc4B,aAAa,MAC1CtG,KAAKkB,aAAad,SAASJ,KAAK4D,QAAQc,cAAcrE,GAAIL,KAAKM,OAG7DD,MAAAA,GACFL,KAAKkB,aAAad,SAASC,EAAIL,KAAKM,QAIhCqD,EAAAxD,UAAAgF,gBAAA,SAAgBoB,GAClB/C,MAAMgD,QAAQD,EAAc,GAAG3B,MAEjC5E,KAAKM,MAAMsE,KAAKC,SAAS4B,SAAQ,SAACC,EAA8BnG,GAC9DmG,EAAQ9B,KAAO2B,EAAchG,GAAGqE,KAE5B2B,EAAchG,GAAGoG,QACnBD,EAAQC,MAAQJ,EAAchG,GAAGoG,UAKrC3G,KAAKM,MAAMsE,KAAKC,SAAS,GAAGD,KAAO2B,EAIrCvG,KAAKM,MAAMsE,KAAKC,SAAW7E,KAAK4G,aAAa5G,KAAKM,MAAMsE,KAAKC,WAGvDlB,EAAAxD,UAAAkG,gBAAA,SAAgB5B,GAAhB,IAAAD,EAAAxE,KACA6E,EAAW7E,KAAK6G,cAEhB7C,EAA8B6B,OAAOC,OAAO,GAAI9F,KAAKgE,UACvC,IAAhBhE,KAAKqF,SACPrB,EAAQqB,OAAS,CAAEE,SAAS,IAG9BvB,EAAQ8C,MAAQ9C,EAAQ8C,OAAS,GAC5B9C,EAAQ8C,MAAMC,UACjB/C,EAAQ8C,MAAMC,QAAU,SAACC,EAAmBC,GACtCA,IAAWA,EAAOzG,QAGtBgE,EAAKJ,WAAW8C,KAAK,CAAEF,MAAKA,EAAEC,OAAMA,MAInCjD,EAAQmD,UACXnD,EAAQmD,QAAU,SAACH,EAAmBC,GACpCzC,EAAKN,WAAWgD,KAAK,CAAEF,MAAKA,EAAEC,OAAMA,MAIxC,IAAMG,EAAO,CACXC,KAAMrH,KAAK0D,UACXkB,KAAM,CACJb,OAAQ/D,KAAK+D,OACbc,SAAUA,GAEZb,QAASA,EACThD,QAAShB,KAAKsH,eAGhB,OAAO,IAAIC,EAAM9C,EAAK2C,IAIhBzD,EAAAxD,UAAA0G,YAAA,WAAA,IAAArC,EAAAxE,KAEF6E,OAAkC,EActC,KAZK7E,KAAK6E,WAAa7E,KAAK6E,SAASrE,QAAWR,KAAK4E,MAAQ5E,KAAK4E,KAAKpE,UAEnEqE,EADErB,MAAMgD,QAAQxG,KAAK4E,KAAK,IACd5E,KAAK4E,KAAoB7B,KAAI,SAAC6B,EAAgBxB,GACxD,MAAO,CAAEwB,KAAIA,EAAE+B,MAAOnC,EAAKT,OAAOX,IAAU,SAASA,MAG5C,CAAC,CAAEwB,KAAM5E,KAAK4E,KAAM+B,MAAO,eAI1C9B,EAAW7E,KAAK4G,aAAa/B,IAG3B,MAAM,IAAI2C,MAAM,6FACqCxH,KAAK0D,WAG5D,OAAOmB,GAIDlB,EAAAxD,UAAAyG,aAAA,SAAa/B,GAAb,IAAAL,EAAAxE,KAcN,OAbIA,KAAK6E,UAAY7E,KAAK6E,SAASrE,QAAWqE,GAAYA,EAASrE,UAEjEqE,GAAY7E,KAAK6E,UAAYA,GAAU9B,KAAI,SAAC0E,EAA0BrE,GACpE,IAAMsE,EAA8B7B,OAAOC,OAAO,GAAI2B,GAOtD,OANIjD,EAAKpC,QAAUoC,EAAKpC,OAAO5B,OAC7BqF,OAAOC,OAAO4B,EAAQlD,EAAKpC,OAAOgB,IAGlCyC,OAAOC,OAAO4B,EAAQjE,EAAUe,EAAKd,UAAWN,EAAOsE,EAAO9C,KAAKpE,SAE9DkH,MAGJ7C,GAGDlB,EAAAxD,UAAAqF,SAAA,SAASzB,EAAkBa,GAA3B,IAAAJ,EAAAxE,KACgB,IAAlB+D,EAAOvD,QAAgC,IAAhBoE,EAAKpE,SAKhCuD,EAAO0C,SAAQ,SAACE,GAAYnC,EAAKlE,MAAMsE,KAAKb,OAAOtD,KAAKkG,MAExD3G,KAAKM,MAAMsE,KAAKC,SAAS4B,SAAQ,SAACC,EAAStD,GACzC,GAAIwB,EAAKxB,GACP,IAAK,IAAI7C,EAAI,EAAGA,EAAIqE,EAAKxB,GAAO5C,OAAQD,IAEtCmG,EAAQ9B,KAAKnE,KAAKmE,EAAKxB,GAAO7C,SAGhCoH,QAAQC,IAAI,wDAMVjE,EAAAxD,UAAAyF,YAAA,SAAYD,GAEE,WAAhBA,GAEF3F,KAAKM,MAAMsE,KAAKb,OAAO8D,MAEvB7H,KAAKM,MAAMsE,KAAKC,SAAS4B,SAAQ,SAACC,GAEhCA,EAAQ9B,KAAKiD,UAEU,WAAhBlC,IAET3F,KAAKM,MAAMsE,KAAKb,OAAO+D,QAEvB9H,KAAKM,MAAMsE,KAAKC,SAAS4B,SAAQ,SAACC,GAEhCA,EAAQ9B,KAAKkD,sCAnUpBC,EAAAA,UAASjH,KAAA,CAAC,CAAEkH,SAAU,oBAAqBC,SAAU,yDAjBpDC,EAAAA,kBASOjH,SADAlB,SAHPoI,EAAAA,wCAiBCC,EAAAA,wBAGAA,EAAAA,sBAEAA,EAAAA,uBAEAA,EAAAA,6BAGAA,EAAAA,yBAGAA,EAAAA,sBAGAA,EAAAA,sBAGAA,EAAAA,sBAGAA,EAAAA,wBAEAA,EAAAA,2BAEAA,EAAAA,sBAEAA,EAAAA,kBAEAA,EAAAA,0BAGAC,EAAAA,2BAEAA,EAAAA,cC5DUC,EAAkD,IAAIC,EAAAA,eAAsB,iDCIzEC,EAA8BxH,GAC5C,IAAMG,EAAe,IAAIG,EAEzB,OADAH,EAAaH,QAAUA,EAChBG,mBAST,SAAAsH,YAKgBA,EAAAC,eAAP,SAAsB1H,GAC3B,YAD2B,IAAAA,IAAAA,EAAA,IACpB,CACL2H,SAAUF,EACVG,UAAW,CACT,CACEC,QAASP,EACTQ,SAAU9H,GAEZ,CACE+H,KAAM,CAACT,GACPO,QAAUvH,EACV0H,WAAYR,+BAtBrBS,EAAAA,SAAQnI,KAAA,CAAC,CACRoI,QAAS,GACTC,aAAc,CAACxF,GACfyF,QAAS,CAACzF,GACViF,UAAW,CAAC3H","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n  private _chartInstances: any[] = [];\n  private _chartId: string[] = [];\n\n  addChart(id: string, chart: any): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return;\n      }\n    }\n    this._chartId.push(id);\n    this._chartInstances.push(chart);\n  }\n\n  removeChart(id: string): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        this._chartId.splice(i, 1);\n        this._chartInstances.splice(i, 1);  // delete chart instance.\n      }\n    }\n  }\n\n  getChart(id: string): any {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return this._chartInstances[i];\n      }\n    }\n    return null;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PluginConfig {\n    plugins: any[] = [];\n}\n\n","import { Injectable } from '@angular/core';\nimport * as Chart from 'chart.js';\nimport { PluginConfig } from './plugins-config';\nimport { StoreService } from './store.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgChartjsService {\n\n    constructor(\n      private storeService: StoreService,\n      private pluginConfig: PluginConfig) {\n      const plugins = pluginConfig.plugins;\n      if (plugins.length !== 0 || plugins) {\n        for (let i = 0; i < plugins.length; i++) {\n          if (plugins[i]) {\n            Chart.plugins.register(plugins[i]);\n          }\n        }\n      }\n    }\n    // get chart instance by id\n    getChart(id: string): any {\n      return this.storeService.getChart(id);\n    }\n}\n","export interface Color {\n    backgroundColor?: string | string[];\n    borderWidth?: number | number[];\n    borderColor?: string | string[];\n    borderCapStyle?: string;\n    borderDash?: number[];\n    borderDashOffset?: number;\n    borderJoinStyle?: string;\n\n    pointBorderColor?: string | string[];\n    pointBackgroundColor?: string | string[];\n    pointBorderWidth?: number | number[];\n\n    pointRadius?: number | number[];\n    pointHoverRadius?: number | number[];\n    pointHitRadius?: number | number[];\n\n    pointHoverBackgroundColor?: string | string[];\n    pointHoverBorderColor?: string | string[];\n    pointHoverBorderWidth?: number | number[];\n    pointStyle?: string | string[];\n\n    hoverBackgroundColor?: string | string[];\n    hoverBorderColor?: string | string[];\n    hoverBorderWidth?: number;\n}\n\n// Default colors\nexport const DefaultColors: number[][] = [\n    [63, 81, 181],       // Indogo\n    [0, 150, 136],       // Teal\n    [255, 152, 0],       // Orange\n    [233, 30, 99],       // Pink\n    [156, 39, 176],      // Purple\n    [0, 188, 212],       // Cyan\n    [3, 169, 244],       // Light Blue\n    [96, 125, 139],      // Blue Grey\n    [255, 193, 7],       // Amber\n    [37, 155, 36],       // Green\n    [205, 220, 57],      // Lime\n    [86, 119, 252]       // Blue\n];\n\n// pie | doughnut\nexport interface Colors extends Color {\n    data?: number[];\n    label?: string;\n}\n\nexport function rgba(colour: number[], alpha: number): string {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nexport function getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function formatLineColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.35),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.95)\n    };\n}\n\nexport function formatBarColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.75),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 1),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\n\nexport function formatPieColors(colors: number[][]): Colors {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.76)),\n        borderColor: colors.map(() => '#fff'),\n        pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointBorderColor: colors.map(() => '#fff'),\n        pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function formatPolarAreaColors(colors: number[][]): Color {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.75)),\n        borderColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function getRandomColor(): number[] {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n\n\n/**\n* @method Generate colors for line|bar charts\n* @param index he index of the default color array. eg. 0, 1\n* @return number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColor(index: number): number[] {\n    return DefaultColors[index] || getRandomColor();\n}\n\n\n/**\n* @method Generate colors for pie|doughnut charts\n* @param count Length of data. eg. datasets.data.length\n* @return number[][]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColors(count: number): number[][] {\n    const colorsArr: number[][] = new Array(count);\n    for (let i = 0; i < count; i++) {\n        colorsArr[i] = DefaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n\n\n/**\n* @method Generate colors by chart type\n* @param chartType The type of chart you are using. eg. line,bar\n* @param index The index of the default color array. eg. DefaultColors[index]\n* @param count Length of data. eg. datasets.data.length\n* @return Color or number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function getColors(chartType: string, index: number, count: number): Color | number[] {\n    if (chartType === 'pie' ||\n        chartType === 'doughnut' ||\n        chartType === 'bubble' ||\n        chartType === 'scatter') {\n        return formatPieColors(generateColors(count));\n    }\n\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n\n    return generateColor(index);\n}\n","import {\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Output,\n  SimpleChanges,\n  Directive,\n  NgZone\n} from '@angular/core';\nimport * as Chart from 'chart.js';\nimport { StoreService } from './store.service';\nimport { NgChartjsService } from './ng-chartjs.service';\nimport { getColors, Colors } from './colors';\n\nexport type Labels = Array<string | string[] | number | number[] | Date | Date[] | any | any[]>;\nexport type Orientation = 'oldest' | 'latest';\nexport interface NgChartjsEvent { event: MouseEvent; active: Array<{}>; }\n\n/* tslint:disable-next-line */\n@Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ngChartjs' })\nexport class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {\n\n  // 图表的点集，它应该是数组<number []>仅用于线，条和雷达，否则数字[];\n  // @ts-ignore\n  @Input() data: number[] | any[];\n  // 相当于chart.js内 data: {datasets: [{...}]}\n  // @ts-ignore\n  @Input() datasets: Chart.ChartDataSets[];\n  // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut\n  @Input() labels: Labels = [];\n  // 相当于chart.js的option\n  @Input() options: Chart.ChartOptions = {};\n  // 内联插件属性\n  // @ts-ignore\n  @Input() inlinePlugins: any[];\n  // chartType line, bar, radar, pie, polarArea, doughnut\n  // @ts-ignore\n  @Input() chartType: Chart.ChartType;\n  // 数据颜色，如果没有指定，将使用默认和|或随机颜色\n  // @ts-ignore\n  @Input() colors: Colors[];\n  // 是否显示图例\n  // @ts-ignore\n  @Input() legend: boolean;\n\n  // @ts-ignore\n  @Input() adding: { labels: Labels[], data: any[][] };\n  // @ts-ignore\n  @Input() removing: { orientation: Orientation };  // orientation is 'oldest' or 'latest\n  // @ts-ignore\n  @Input() resetOption: Chart.ChartOptions;\n\n  @Input() noZone = true; // disable angular NgZone\n  // @ts-ignore\n  @Input() id: string = null; // chart instance id\n\n  // 鼠标点击图表所有的区域\n  @Output() chartClick: EventEmitter<NgChartjsEvent> = new EventEmitter();\n  // 鼠标悬浮在标签或者活跃的点上面时\n  @Output() chartHover: EventEmitter<NgChartjsEvent> = new EventEmitter();\n\n  // get Chartjs object\n  // @ts-ignore\n  chart: Chart;\n  // @ts-ignore\n  private ctx: CanvasRenderingContext2D;\n  private initFlag = false;\n  private hasChanges = false;\n\n  private element: ElementRef;\n\n  public constructor(\n    element: ElementRef,\n    private ngChartjsService: NgChartjsService,\n    private storeService: StoreService,\n    private zone: NgZone) {\n    this.element = element;   // 获取指令所在canvas元素\n  }\n\n  ngOnInit(): void {\n    this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx\n    this.initFlag = true; // 是否初始化了的标志\n\n    if (this.data || this.datasets) { // 判断data和datasets有一个有数据就刷新\n      if (this.noZone) {\n        this.zone.runOutsideAngular(() => {\n         this.refresh();\n        });\n      } else {\n        this.refresh();\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // TODO: 插件变化刷新，开放刷新按钮\n    if (this.initFlag) {\n      // Check if the changes are in the data or datasets\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n        if (changes.data) {\n          this.updateChartData(changes.data.currentValue);\n        } else {\n          this.updateChartData(changes.datasets.currentValue);\n        }\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('labels')) {\n        this.chart.data.labels = changes.labels.currentValue;\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('legend')) {\n        if (changes.legend.currentValue !== changes.legend.previousValue) {\n          // @ts-ignore\n          this.chart.options.legend.display = changes.legend.currentValue;\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('adding')) {\n        this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('removing')) {\n        if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n          this.removeData_(changes.removing.currentValue.orientation);\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('chartType')) {\n        this.refresh();\n      }\n\n      if (changes.hasOwnProperty('resetOption')) {\n        Object.assign(this.chart.options, changes.resetOption.currentValue);\n        this.hasChanges = true;\n      }\n\n      if (this.hasChanges) {\n        this.chart.update();\n        this.hasChanges = false;\n      }\n\n      // change chart id\n      if (changes.hasOwnProperty('id')) {\n        this.removeChart(changes.id.previousValue);\n        this.addChart(changes.id.currentValue);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.destroy();\n      // @ts-ignore\n      this.chart = void 0;\n\n      this.removeChart(this.id);\n    }\n  }\n\n  // update chartjs\n  update(): void {\n    this.chart.update();\n  }\n\n  // Dynamic add data\n  addData(labels: Labels[], data: any[][]): void {\n    this.addData_(labels, data);\n    this.update();\n  }\n  // Dynamic remove data, orientation is 'ildest' or 'latest'\n  removeData(orientation: Orientation): void {\n    this.removeData_(orientation);\n    this.update();\n  }\n\n  private refresh(): void {\n    this.ngOnDestroy();\n    this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\n    this.addChart(this.id);\n  }\n\n  private removeChart(id: string): void {\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.removeChart(this.element.nativeElement.id);\n      return;\n    }\n    if (id !== null && id !== undefined) {\n      this.storeService.removeChart(id);  // delete chart instance.\n    }\n  }\n\n  private addChart(id: string): void {\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.addChart(this.element.nativeElement.id, this.chart);\n      return;\n    }\n    if (id !== null && id !== undefined) {\n      this.storeService.addChart(id, this.chart);\n    }\n  }\n\n  private updateChartData(newDataValues: number[] | any[]): void {\n    if (Array.isArray(newDataValues[0].data)) {\n      // @ts-ignore\n      this.chart.data.datasets.forEach((dataset: Chart.ChartDataSets, i: number) => {\n        dataset.data = newDataValues[i].data;\n\n        if (newDataValues[i].label) {\n          dataset.label = newDataValues[i].label;\n        }\n      });\n    } else {\n      // @ts-ignore\n      this.chart.data.datasets[0].data = newDataValues;\n    }\n    // update colors\n    // @ts-ignore\n    this.chart.data.datasets = this.updateColors(this.chart.data.datasets);\n  }\n\n  private getChartBuilder(ctx: CanvasRenderingContext2D/*, data:Array<any>, options:any*/): Chart {\n    const datasets = this.getDatasets();\n\n    const options: Chart.ChartOptions = Object.assign({}, this.options); // 深复制options\n    if (this.legend === false) {  // 设置options的legend TODO: 后续这个属性去除，直接在options内设置\n      options.legend = { display: false };\n    }\n    // hock for onHover and onClick events\n    options.hover = options.hover || {};\n    if (!options.hover.onHover) {\n      options.hover.onHover = (event: MouseEvent, active: Array<{}>) => {\n        if (active && !active.length) {\n          return;\n        }\n        this.chartHover.emit({ event, active });\n      };\n    }\n\n    if (!options.onClick) {\n      options.onClick = (event: MouseEvent, active: Array<{}>) => {\n        this.chartClick.emit({ event, active });\n      };\n    }\n\n    const opts = {\n      type: this.chartType,\n      data: {\n        labels: this.labels,\n        datasets: datasets   // TODO: 后续更改这个属性名字，否则警告\n      },\n      options: options,   // TODO: 后续更改这个属性名字，否则警告\n      plugins: this.inlinePlugins\n    };\n\n    return new Chart(ctx, opts);\n  }\n\n  // 获取 chart.js的datasets数据\n  private getDatasets(): Chart.ChartDataSets[] {\n    // @ts-ignore\n    let datasets: Chart.ChartDataSets[] = void 0;\n    // in case if datasets is not provided, but data is present\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n      if (Array.isArray(this.data[0])) {\n        datasets = (this.data as number[][]).map((data: number[], index: number) => {\n          return { data, label: this.labels[index] || `Label ${index}` };\n        });\n      } else {\n        datasets = [{ data: this.data, label: `Label 0` }];\n      }\n    }\n\n    datasets = this.updateColors(datasets); // update colors\n\n    if (!datasets) {\n      throw new Error(`ng-chartjs configuration error,\n      data or datasets field are required to render char ${this.chartType}`);\n    }\n\n    return datasets;\n  }\n\n  // update dataset colors\n  private updateColors(datasets: Chart.ChartDataSets[]): Chart.ChartDataSets[] {\n    if (this.datasets && this.datasets.length || (datasets && datasets.length)) {\n      // fix elm type, pre type is number\n      datasets = (this.datasets || datasets).map((elm: Chart.ChartDataSets, index: number) => {\n        const newElm: Chart.ChartDataSets = Object.assign({}, elm);\n        if (this.colors && this.colors.length) {\n          Object.assign(newElm, this.colors[index]);\n        } else {\n          // @ts-ignore\n          Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\n        }\n        return newElm;\n      });\n    }\n    return datasets;\n  }\n\n  private addData_(labels: Labels[], data: any[][]): void {\n    if (labels.length === 0 || data.length === 0) {\n      return;\n    }\n    // update labels\n    // @ts-ignore\n    labels.forEach((label) => { this.chart.data.labels.push(label); });\n    // @ts-ignore\n    this.chart.data.datasets.forEach((dataset, index) => {\n      if (data[index]) {\n        for (let i = 0; i < data[index].length; i++) {\n          // @ts-ignore\n          dataset.data.push(data[index][i]);\n        }\n      } else {\n        console.log('The added data does not match the original data');\n        return;\n      }\n    });\n  }\n\n  private removeData_(orientation: Orientation): void {\n    // fix: support to oldest feature\n    if (orientation === 'latest') {\n      // @ts-ignore\n      this.chart.data.labels.pop();\n      // @ts-ignore\n      this.chart.data.datasets.forEach((dataset: Chart.ChartDataSets) => {\n        // @ts-ignore\n        dataset.data.pop();\n      });\n    } else if (orientation === 'oldest') {\n      // @ts-ignore\n      this.chart.data.labels.shift();\n      // @ts-ignore\n      this.chart.data.datasets.forEach((dataset: Chart.ChartDataSets) => {\n        // @ts-ignore\n        dataset.data.shift();\n      });\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const NgChartjsCustomPluginToken: InjectionToken<any> = new InjectionToken<any[]>('[ngx-chart-js] Global Default Plugin');\n\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf } from '@angular/core';\nimport { NgChartjsDirective } from './ng-chartjs.directive';\nimport { NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './plugins-config';\nimport { NgChartjsService } from './ng-chartjs.service';\n\nexport function ngChartjsCustomPluginsFactory(plugins: any[]): PluginConfig {\n  const pluginConfig = new PluginConfig();\n  pluginConfig.plugins = plugins;\n  return pluginConfig;\n}\n\n@NgModule({\n  imports: [],\n  declarations: [NgChartjsDirective],\n  exports: [NgChartjsDirective],\n  providers: [NgChartjsService]\n})\nexport class NgChartjsModule {\n  /**\n   * Register a plugin.\n   * @param plugin\n   */\n  public static registerPlugin(plugins: any[] = []): ModuleWithProviders<NgChartjsModule> {\n    return {\n      ngModule: NgChartjsModule,\n      providers: [\n        {\n          provide: NgChartjsCustomPluginToken,\n          useValue: plugins\n        },\n        {\n          deps: [NgChartjsCustomPluginToken],\n          provide:  PluginConfig,\n          useFactory: ngChartjsCustomPluginsFactory\n        }\n      ]\n    };\n  }\n}\n"]}