(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('chart.js')) :
    typeof define === 'function' && define.amd ? define('ng-chartjs', ['@angular/core','exports', '@angular/core', 'chart.js'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global['ng-chartjs'] = {}, global.ng.core, global.chart_js));
}(this, (function (ɵngcc0,exports, i0, Chart) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var Chart__namespace = /*#__PURE__*/_interopNamespace(Chart);

    var StoreService = /** @class */ (function () {
        function StoreService() {
            this._chartInstances = [];
            this._chartId = [];
        }
        StoreService.prototype.addChart = function (id, chart) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    return;
                }
            }
            this._chartId.push(id);
            this._chartInstances.push(chart);
        };
        StoreService.prototype.removeChart = function (id) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    this._chartId.splice(i, 1);
                    this._chartInstances.splice(i, 1); // delete chart instance.
                }
            }
        };
        StoreService.prototype.getChart = function (id) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    return this._chartInstances[i];
                }
            }
            return null;
        };
StoreService.ɵfac = function StoreService_Factory(t) { return new (t || StoreService)(); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
        return StoreService;
    }());
    StoreService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreService_Factory() { return new StoreService(); }, token: StoreService, providedIn: "root" });

    var PluginConfig = /** @class */ (function () {
        function PluginConfig() {
            this.plugins = [];
        }
PluginConfig.ɵfac = function PluginConfig_Factory(t) { return new (t || PluginConfig)(); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PluginConfig, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
        return PluginConfig;
    }());
    PluginConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function PluginConfig_Factory() { return new PluginConfig(); }, token: PluginConfig, providedIn: "root" });

    var NgChartjsService = /** @class */ (function () {
        function NgChartjsService(storeService, pluginConfig) {
            this.storeService = storeService;
            this.pluginConfig = pluginConfig;
            var plugins = pluginConfig.plugins;
            if (plugins.length !== 0 || plugins) {
                for (var i = 0; i < plugins.length; i++) {
                    if (plugins[i]) {
                        Chart.plugins.register(plugins[i]);
                    }
                }
            }
        }
        // get chart instance by id
        NgChartjsService.prototype.getChart = function (id) {
            return this.storeService.getChart(id);
        };
NgChartjsService.ɵfac = function NgChartjsService_Factory(t) { return new (t || NgChartjsService)(ɵngcc0.ɵɵinject(StoreService), ɵngcc0.ɵɵinject(PluginConfig)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgChartjsService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: StoreService }, { type: PluginConfig }]; }, null); })();
        return NgChartjsService;
    }());
    NgChartjsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.ɵɵinject(StoreService), i0.ɵɵinject(PluginConfig)); }, token: NgChartjsService, providedIn: "root" });
    NgChartjsService.ctorParameters = function () { return [
        { type: StoreService },
        { type: PluginConfig }
    ]; };

    // Default colors
    var DefaultColors = [
        [63, 81, 181],
        [0, 150, 136],
        [255, 152, 0],
        [233, 30, 99],
        [156, 39, 176],
        [0, 188, 212],
        [3, 169, 244],
        [96, 125, 139],
        [255, 193, 7],
        [37, 155, 36],
        [205, 220, 57],
        [86, 119, 252] // Blue
    ];
    function rgba(colour, alpha) {
        return 'rgba(' + colour.concat(alpha).join(',') + ')';
    }
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function formatLineColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.35),
            borderColor: rgba(colors, 1),
            pointBackgroundColor: rgba(colors, 1),
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: rgba(colors, 0.95)
        };
    }
    function formatBarColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.75),
            borderColor: rgba(colors, 1),
            hoverBackgroundColor: rgba(colors, 1),
            hoverBorderColor: rgba(colors, 1)
        };
    }
    function formatPieColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.76); }),
            borderColor: colors.map(function () { return '#fff'; }),
            pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointBorderColor: colors.map(function () { return '#fff'; }),
            pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    function formatPolarAreaColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.75); }),
            borderColor: colors.map(function (color) { return rgba(color, 1); }),
            hoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    function getRandomColor() {
        return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
    }
    /**
    * @method Generate colors for line|bar charts
    * @param index he index of the default color array. eg. 0, 1
    * @return number[]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function generateColor(index) {
        return DefaultColors[index] || getRandomColor();
    }
    /**
    * @method Generate colors for pie|doughnut charts
    * @param count Length of data. eg. datasets.data.length
    * @return number[][]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function generateColors(count) {
        var colorsArr = new Array(count);
        for (var i = 0; i < count; i++) {
            colorsArr[i] = DefaultColors[i] || getRandomColor();
        }
        return colorsArr;
    }
    /**
    * @method Generate colors by chart type
    * @param chartType The type of chart you are using. eg. line,bar
    * @param index The index of the default color array. eg. DefaultColors[index]
    * @param count Length of data. eg. datasets.data.length
    * @return Color or number[]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function getColors(chartType, index, count) {
        if (chartType === 'pie' ||
            chartType === 'doughnut' ||
            chartType === 'bubble' ||
            chartType === 'scatter') {
            return formatPieColors(generateColors(count));
        }
        if (chartType === 'polarArea') {
            return formatPolarAreaColors(generateColors(count));
        }
        if (chartType === 'line' || chartType === 'radar') {
            return formatLineColor(generateColor(index));
        }
        if (chartType === 'bar' || chartType === 'horizontalBar') {
            return formatBarColor(generateColor(index));
        }
        return generateColor(index);
    }

    /* tslint:disable-next-line */
    var NgChartjsDirective = /** @class */ (function () {
        function NgChartjsDirective(element, ngChartjsService, storeService, zone) {
            this.ngChartjsService = ngChartjsService;
            this.storeService = storeService;
            this.zone = zone;
            // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
            this.labels = [];
            // 相当于chart.js的option
            this.options = {};
            this.noZone = true; // disable angular NgZone
            // @ts-ignore
            this.id = null; // chart instance id
            // 鼠标点击图表所有的区域
            this.chartClick = new i0.EventEmitter();
            // 鼠标悬浮在标签或者活跃的点上面时
            this.chartHover = new i0.EventEmitter();
            this.initFlag = false;
            this.hasChanges = false;
            this.element = element; // 获取指令所在canvas元素
        }
        NgChartjsDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
            this.initFlag = true; // 是否初始化了的标志
            if (this.data || this.datasets) { // 判断data和datasets有一个有数据就刷新
                if (this.noZone) {
                    this.zone.runOutsideAngular(function () {
                        _this.refresh();
                    });
                }
                else {
                    this.refresh();
                }
            }
        };
        NgChartjsDirective.prototype.ngOnChanges = function (changes) {
            // TODO: 插件变化刷新，开放刷新按钮
            if (this.initFlag) {
                // Check if the changes are in the data or datasets
                if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                    if (changes.data) {
                        this.updateChartData(changes.data.currentValue);
                    }
                    else {
                        this.updateChartData(changes.datasets.currentValue);
                    }
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('labels')) {
                    this.chart.data.labels = changes.labels.currentValue;
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('legend')) {
                    if (changes.legend.currentValue !== changes.legend.previousValue) {
                        // @ts-ignore
                        this.chart.options.legend.display = changes.legend.currentValue;
                        this.hasChanges = true;
                    }
                }
                if (changes.hasOwnProperty('adding')) {
                    this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('removing')) {
                    if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {
                        this.removeData_(changes.removing.currentValue.orientation);
                        this.hasChanges = true;
                    }
                }
                if (changes.hasOwnProperty('chartType')) {
                    this.refresh();
                }
                if (changes.hasOwnProperty('resetOption')) {
                    Object.assign(this.chart.options, changes.resetOption.currentValue);
                    this.hasChanges = true;
                }
                if (this.hasChanges) {
                    this.chart.update();
                    this.hasChanges = false;
                }
                // change chart id
                if (changes.hasOwnProperty('id')) {
                    this.removeChart(changes.id.previousValue);
                    this.addChart(changes.id.currentValue);
                }
            }
        };
        NgChartjsDirective.prototype.ngOnDestroy = function () {
            if (this.chart) {
                this.chart.destroy();
                // @ts-ignore
                this.chart = void 0;
                this.removeChart(this.id);
            }
        };
        // update chartjs
        NgChartjsDirective.prototype.update = function () {
            this.chart.update();
        };
        // Dynamic add data
        NgChartjsDirective.prototype.addData = function (labels, data) {
            this.addData_(labels, data);
            this.update();
        };
        // Dynamic remove data, orientation is 'ildest' or 'latest'
        NgChartjsDirective.prototype.removeData = function (orientation) {
            this.removeData_(orientation);
            this.update();
        };
        NgChartjsDirective.prototype.refresh = function () {
            this.ngOnDestroy();
            this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
            this.addChart(this.id);
        };
        NgChartjsDirective.prototype.removeChart = function (id) {
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.removeChart(this.element.nativeElement.id);
                return;
            }
            if (id !== null && id !== undefined) {
                this.storeService.removeChart(id); // delete chart instance.
            }
        };
        NgChartjsDirective.prototype.addChart = function (id) {
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.addChart(this.element.nativeElement.id, this.chart);
                return;
            }
            if (id !== null && id !== undefined) {
                this.storeService.addChart(id, this.chart);
            }
        };
        NgChartjsDirective.prototype.updateChartData = function (newDataValues) {
            if (Array.isArray(newDataValues[0].data)) {
                // @ts-ignore
                this.chart.data.datasets.forEach(function (dataset, i) {
                    dataset.data = newDataValues[i].data;
                    if (newDataValues[i].label) {
                        dataset.label = newDataValues[i].label;
                    }
                });
            }
            else {
                // @ts-ignore
                this.chart.data.datasets[0].data = newDataValues;
            }
            // update colors
            // @ts-ignore
            this.chart.data.datasets = this.updateColors(this.chart.data.datasets);
        };
        NgChartjsDirective.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {
            var _this = this;
            var datasets = this.getDatasets();
            var options = Object.assign({}, this.options); // 深复制options
            if (this.legend === false) { // 设置options的legend TODO: 后续这个属性去除，直接在options内设置
                options.legend = { display: false };
            }
            // hock for onHover and onClick events
            options.hover = options.hover || {};
            if (!options.hover.onHover) {
                options.hover.onHover = function (event, active) {
                    if (active && !active.length) {
                        return;
                    }
                    _this.chartHover.emit({ event: event, active: active });
                };
            }
            if (!options.onClick) {
                options.onClick = function (event, active) {
                    _this.chartClick.emit({ event: event, active: active });
                };
            }
            var opts = {
                type: this.chartType,
                data: {
                    labels: this.labels,
                    datasets: datasets // TODO: 后续更改这个属性名字，否则警告
                },
                options: options,
                plugins: this.inlinePlugins
            };
            return new Chart__namespace(ctx, opts);
        };
        // 获取 chart.js的datasets数据
        NgChartjsDirective.prototype.getDatasets = function () {
            var _this = this;
            // @ts-ignore
            var datasets = void 0;
            // in case if datasets is not provided, but data is present
            if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
                if (Array.isArray(this.data[0])) {
                    datasets = this.data.map(function (data, index) {
                        return { data: data, label: _this.labels[index] || "Label " + index };
                    });
                }
                else {
                    datasets = [{ data: this.data, label: "Label 0" }];
                }
            }
            datasets = this.updateColors(datasets); // update colors
            if (!datasets) {
                throw new Error("ng-chartjs configuration error,\n      data or datasets field are required to render char " + this.chartType);
            }
            return datasets;
        };
        // update dataset colors
        NgChartjsDirective.prototype.updateColors = function (datasets) {
            var _this = this;
            if (this.datasets && this.datasets.length || (datasets && datasets.length)) {
                // fix elm type, pre type is number
                datasets = (this.datasets || datasets).map(function (elm, index) {
                    var newElm = Object.assign({}, elm);
                    if (_this.colors && _this.colors.length) {
                        Object.assign(newElm, _this.colors[index]);
                    }
                    else {
                        // @ts-ignore
                        Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));
                    }
                    return newElm;
                });
            }
            return datasets;
        };
        NgChartjsDirective.prototype.addData_ = function (labels, data) {
            var _this = this;
            if (labels.length === 0 || data.length === 0) {
                return;
            }
            // update labels
            // @ts-ignore
            labels.forEach(function (label) { _this.chart.data.labels.push(label); });
            // @ts-ignore
            this.chart.data.datasets.forEach(function (dataset, index) {
                if (data[index]) {
                    for (var i = 0; i < data[index].length; i++) {
                        // @ts-ignore
                        dataset.data.push(data[index][i]);
                    }
                }
                else {
                    console.log('The added data does not match the original data');
                    return;
                }
            });
        };
        NgChartjsDirective.prototype.removeData_ = function (orientation) {
            // fix: support to oldest feature
            if (orientation === 'latest') {
                // @ts-ignore
                this.chart.data.labels.pop();
                // @ts-ignore
                this.chart.data.datasets.forEach(function (dataset) {
                    // @ts-ignore
                    dataset.data.pop();
                });
            }
            else if (orientation === 'oldest') {
                // @ts-ignore
                this.chart.data.labels.shift();
                // @ts-ignore
                this.chart.data.datasets.forEach(function (dataset) {
                    // @ts-ignore
                    dataset.data.shift();
                });
            }
        };
NgChartjsDirective.ɵfac = function NgChartjsDirective_Factory(t) { return new (t || NgChartjsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgChartjsService), ɵngcc0.ɵɵdirectiveInject(StoreService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
NgChartjsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgChartjsDirective, selectors: [["canvas", "ngChartjs", ""]], inputs: { labels: "labels", options: "options", noZone: "noZone", id: "id", data: "data", datasets: "datasets", inlinePlugins: "inlinePlugins", chartType: "chartType", colors: "colors", legend: "legend", adding: "adding", removing: "removing", resetOption: "resetOption" }, outputs: { chartClick: "chartClick", chartHover: "chartHover" }, exportAs: ["ngChartjs"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgChartjsDirective, [{
        type: i0.Directive,
        args: [{ selector: 'canvas[ngChartjs]', exportAs: 'ngChartjs' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NgChartjsService }, { type: StoreService }, { type: ɵngcc0.NgZone }]; }, { labels: [{
            type: i0.Input
        }], options: [{
            type: i0.Input
        }], noZone: [{
            type: i0.Input
        }], id: [{
            type: i0.Input
        }], chartClick: [{
            type: i0.Output
        }], chartHover: [{
            type: i0.Output
        }], data: [{
            type: i0.Input
        }], datasets: [{
            type: i0.Input
        }], inlinePlugins: [{
            type: i0.Input
        }], chartType: [{
            type: i0.Input
        }], colors: [{
            type: i0.Input
        }], legend: [{
            type: i0.Input
        }], adding: [{
            type: i0.Input
        }], removing: [{
            type: i0.Input
        }], resetOption: [{
            type: i0.Input
        }] }); })();
        return NgChartjsDirective;
    }());
    NgChartjsDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NgChartjsService },
        { type: StoreService },
        { type: i0.NgZone }
    ]; };
    NgChartjsDirective.propDecorators = {
        data: [{ type: i0.Input }],
        datasets: [{ type: i0.Input }],
        labels: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        inlinePlugins: [{ type: i0.Input }],
        chartType: [{ type: i0.Input }],
        colors: [{ type: i0.Input }],
        legend: [{ type: i0.Input }],
        adding: [{ type: i0.Input }],
        removing: [{ type: i0.Input }],
        resetOption: [{ type: i0.Input }],
        noZone: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        chartClick: [{ type: i0.Output }],
        chartHover: [{ type: i0.Output }]
    };

    var NgChartjsCustomPluginToken = new i0.InjectionToken('[ngx-chart-js] Global Default Plugin');

    function ngChartjsCustomPluginsFactory(plugins) {
        var pluginConfig = new PluginConfig();
        pluginConfig.plugins = plugins;
        return pluginConfig;
    }
    var NgChartjsModule = /** @class */ (function () {
        function NgChartjsModule() {
        }
        /**
         * Register a plugin.
         * @param plugin
         */
        NgChartjsModule.registerPlugin = function (plugins) {
            if (plugins === void 0) { plugins = []; }
            return {
                ngModule: NgChartjsModule,
                providers: [
                    {
                        provide: NgChartjsCustomPluginToken,
                        useValue: plugins
                    },
                    {
                        deps: [NgChartjsCustomPluginToken],
                        provide: PluginConfig,
                        useFactory: ngChartjsCustomPluginsFactory
                    }
                ]
            };
        };
NgChartjsModule.ɵfac = function NgChartjsModule_Factory(t) { return new (t || NgChartjsModule)(); };
NgChartjsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgChartjsModule });
NgChartjsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [NgChartjsService], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChartjsModule, { declarations: [NgChartjsDirective], exports: [NgChartjsDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgChartjsModule, [{
        type: i0.NgModule,
        args: [{
                imports: [],
                declarations: [NgChartjsDirective],
                exports: [NgChartjsDirective],
                providers: [NgChartjsService]
            }]
    }], function () { return []; }, null); })();
        return NgChartjsModule;
    }());

    /*
     * Public API Surface of ng-chartjs
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DefaultColors = DefaultColors;
    exports.NgChartjsDirective = NgChartjsDirective;
    exports.NgChartjsModule = NgChartjsModule;
    exports.NgChartjsService = NgChartjsService;
    exports.formatBarColor = formatBarColor;
    exports.formatLineColor = formatLineColor;
    exports.formatPieColors = formatPieColors;
    exports.formatPolarAreaColors = formatPolarAreaColors;
    exports.generateColor = generateColor;
    exports.generateColors = generateColors;
    exports.getColors = getColors;
    exports.getRandomColor = getRandomColor;
    exports.getRandomInt = getRandomInt;
    exports.ngChartjsCustomPluginsFactory = ngChartjsCustomPluginsFactory;
    exports.rgba = rgba;
    exports.ɵa = StoreService;
    exports.ɵb = PluginConfig;
    exports.ɵc = NgChartjsCustomPluginToken;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-chartjs.umd.js.map