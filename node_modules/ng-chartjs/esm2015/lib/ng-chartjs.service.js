import { Injectable } from '@angular/core';
import * as Chart from 'chart.js';
import { PluginConfig } from './plugins-config';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./store.service";
import * as i2 from "./plugins-config";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './store.service';
import * as ɵngcc2 from './plugins-config';
export class NgChartjsService {
    constructor(storeService, pluginConfig) {
        this.storeService = storeService;
        this.pluginConfig = pluginConfig;
        const plugins = pluginConfig.plugins;
        if (plugins.length !== 0 || plugins) {
            for (let i = 0; i < plugins.length; i++) {
                if (plugins[i]) {
                    Chart.plugins.register(plugins[i]);
                }
            }
        }
    }
    // get chart instance by id
    getChart(id) {
        return this.storeService.getChart(id);
    }
}
NgChartjsService.ɵfac = function NgChartjsService_Factory(t) { return new (t || NgChartjsService)(ɵngcc0.ɵɵinject(ɵngcc1.StoreService), ɵngcc0.ɵɵinject(ɵngcc2.PluginConfig)); };
NgChartjsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.ɵɵinject(i1.StoreService), i0.ɵɵinject(i2.PluginConfig)); }, token: NgChartjsService, providedIn: "root" });
NgChartjsService.ctorParameters = () => [
    { type: StoreService },
    { type: PluginConfig }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgChartjsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.StoreService }, { type: ɵngcc2.PluginConfig }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jaGFydGpzL3NyYy9saWIvbmctY2hhcnRqcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxLQUFLLEtBQUssTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQztBQUdDO0FBR0c7Ozs7QUFGSixNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBQ0ksWUFDVSxZQUEwQixFQUMxQixZQUEwQjtBQUN4QyxRQUZjLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQUMsUUFDM0IsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUNuQyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQzNDLFFBQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDM0MsWUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNqRCxnQkFBVSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUMxQixvQkFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyxpQkFBVztBQUNYLGFBQVM7QUFDVCxTQUFPO0FBQ1AsSUFBSSxDQUFDO0FBQ0wsSUFBSSwyQkFBMkI7QUFDL0IsSUFBSSxRQUFRLENBQUMsRUFBVTtBQUFJLFFBQ3JCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUMsSUFBSSxDQUFDO0FBQ0w7aUxBQUM7QUFDRCwyT0FuQks7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFLRyxZQVBOLFlBQVk7V0FHbkIsVUFBVSxFQUFFLHZCQUhXLFlBRGhCLFlBQVk7RUFJRCxGQUpJO2FBS3ZCOzs7Ozs0R0FMeUI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIENoYXJ0IGZyb20gJ2NoYXJ0LmpzJztcbmltcG9ydCB7IFBsdWdpbkNvbmZpZyB9IGZyb20gJy4vcGx1Z2lucy1jb25maWcnO1xuaW1wb3J0IHsgU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmdDaGFydGpzU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgc3RvcmVTZXJ2aWNlOiBTdG9yZVNlcnZpY2UsXG4gICAgICBwcml2YXRlIHBsdWdpbkNvbmZpZzogUGx1Z2luQ29uZmlnKSB7XG4gICAgICBjb25zdCBwbHVnaW5zID0gcGx1Z2luQ29uZmlnLnBsdWdpbnM7XG4gICAgICBpZiAocGx1Z2lucy5sZW5ndGggIT09IDAgfHwgcGx1Z2lucykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocGx1Z2luc1tpXSkge1xuICAgICAgICAgICAgQ2hhcnQucGx1Z2lucy5yZWdpc3RlcihwbHVnaW5zW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZ2V0IGNoYXJ0IGluc3RhbmNlIGJ5IGlkXG4gICAgZ2V0Q2hhcnQoaWQ6IHN0cmluZyk6IGFueSB7XG4gICAgICByZXR1cm4gdGhpcy5zdG9yZVNlcnZpY2UuZ2V0Q2hhcnQoaWQpO1xuICAgIH1cbn1cbiJdfQ==