import { NgModule } from '@angular/core';
import { NgChartjsDirective } from './ng-chartjs.directive';
import { NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './plugins-config';
import { NgChartjsService } from './ng-chartjs.service';
import * as ɵngcc0 from '@angular/core';
export function ngChartjsCustomPluginsFactory(plugins) {
    const pluginConfig = new PluginConfig();
    pluginConfig.plugins = plugins;
    return pluginConfig;
}
export class NgChartjsModule {
    /**
     * Register a plugin.
     * @param plugin
     */
    static registerPlugin(plugins = []) {
        return {
            ngModule: NgChartjsModule,
            providers: [
                {
                    provide: NgChartjsCustomPluginToken,
                    useValue: plugins
                },
                {
                    deps: [NgChartjsCustomPluginToken],
                    provide: PluginConfig,
                    useFactory: ngChartjsCustomPluginsFactory
                }
            ]
        };
    }
}
NgChartjsModule.ɵfac = function NgChartjsModule_Factory(t) { return new (t || NgChartjsModule)(); };
NgChartjsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgChartjsModule });
NgChartjsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [NgChartjsService], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChartjsModule, { declarations: function () { return [NgChartjsDirective]; }, exports: function () { return [NgChartjsDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgChartjsModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [NgChartjsDirective],
                exports: [NgChartjsDirective],
                providers: [NgChartjsService]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWNoYXJ0anMvc3JjL2xpYi9uZy1jaGFydGpzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUEyQyxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBRXhELE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxPQUFjO0FBQUksSUFDOUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUMxQyxJQUFFLFlBQVksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ2pDLElBQUUsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQVFELE1BQU0sT0FBTyxlQUFlO0FBQzVCLElBQUU7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQVMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFpQixFQUFFO0FBQUksUUFDbEQsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGVBQWU7QUFDL0IsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsMEJBQTBCO0FBQzdDLG9CQUFVLFFBQVEsRUFBRSxPQUFPO0FBQzNCLGlCQUFTO0FBQ1QsZ0JBQVE7QUFDUixvQkFBVSxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztBQUM1QyxvQkFBVSxPQUFPLEVBQUcsWUFBWTtBQUNoQyxvQkFBVSxVQUFVLEVBQUUsNkJBQTZCO0FBQ25ELGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzJDQTNCQyxRQUFRLFNBQUMsa0JBQ1IsT0FBTyxFQUFFLEVBQUU7TUFDWCxZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFDbEMsT0FBTyxFQUFFLENBQUM7V0FBa0IsQ0FBQyxrQkFDN0IsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsY0FDOUI7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ2hhcnRqc0RpcmVjdGl2ZSB9IGZyb20gJy4vbmctY2hhcnRqcy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4gfSBmcm9tICcuL3BsdWdpbi10b2tlbic7XG5pbXBvcnQgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuL3BsdWdpbnMtY29uZmlnJztcbmltcG9ydCB7IE5nQ2hhcnRqc1NlcnZpY2UgfSBmcm9tICcuL25nLWNoYXJ0anMuc2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZ0NoYXJ0anNDdXN0b21QbHVnaW5zRmFjdG9yeShwbHVnaW5zOiBhbnlbXSk6IFBsdWdpbkNvbmZpZyB7XG4gIGNvbnN0IHBsdWdpbkNvbmZpZyA9IG5ldyBQbHVnaW5Db25maWcoKTtcbiAgcGx1Z2luQ29uZmlnLnBsdWdpbnMgPSBwbHVnaW5zO1xuICByZXR1cm4gcGx1Z2luQ29uZmlnO1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbTmdDaGFydGpzRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW05nQ2hhcnRqc0RpcmVjdGl2ZV0sXG4gIHByb3ZpZGVyczogW05nQ2hhcnRqc1NlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRqc01vZHVsZSB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICogQHBhcmFtIHBsdWdpblxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWdpc3RlclBsdWdpbihwbHVnaW5zOiBhbnlbXSA9IFtdKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ0NoYXJ0anNNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nQ2hhcnRqc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4sXG4gICAgICAgICAgdXNlVmFsdWU6IHBsdWdpbnNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlcHM6IFtOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbl0sXG4gICAgICAgICAgcHJvdmlkZTogIFBsdWdpbkNvbmZpZyxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBuZ0NoYXJ0anNDdXN0b21QbHVnaW5zRmFjdG9yeVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19