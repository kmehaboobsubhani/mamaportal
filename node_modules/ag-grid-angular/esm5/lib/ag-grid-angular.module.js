import { __decorate } from "tslib";
import { ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';
import { AgGridAngular } from './ag-grid-angular.component';
import { AgGridColumn } from './ag-grid-column.component';
import * as ɵngcc0 from '@angular/core';
var AgGridModule = /** @class */ (function () {
    function AgGridModule() {
    }
    AgGridModule_1 = AgGridModule;
    AgGridModule.withComponents = function (components) {
        return {
            ngModule: AgGridModule_1,
            providers: [
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: components, multi: true }
            ],
        };
    };
    AgGridModule.forRoot = function (components) {
        return {
            ngModule: AgGridModule_1,
            providers: [
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: components, multi: true }
            ],
        };
    };
    var AgGridModule_1;
AgGridModule.ɵfac = function AgGridModule_Factory(t) { return new (t || AgGridModule)(); };
AgGridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AgGridModule });
AgGridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgGridModule, { declarations: function () { return [AgGridAngular, AgGridColumn]; }, exports: function () { return [AgGridAngular, AgGridColumn]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AgGridModule, [{
        type: NgModule,
        args: [{
                declarations: [AgGridAngular, AgGridColumn],
                imports: [],
                exports: [AgGridAngular, AgGridColumn]
            }]
    }], function () { return []; }, null); })();
    return AgGridModule;
}());
export { AgGridModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWctZ3JpZC1hbmd1bGFyLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiYWctZ3JpZC1hbmd1bGFyL2xpYi9hZy1ncmlkLWFuZ3VsYXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsNEJBQTRCLEVBQXVCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUxRixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDRCQUE0QixDQUFDOztBQU94RDtBQUNvQixJQURwQjtBQUEwQixJQW1CMUIsQ0FBQztBQUNELHFCQXBCYSxZQUFZO0FBQUUsSUFDaEIsMkJBQWMsR0FBckIsVUFBc0IsVUFBZ0I7QUFBSSxRQUN0QyxPQUFPO0FBQ2YsWUFBWSxRQUFRLEVBQUUsY0FBWTtBQUNsQyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0IsRUFBQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO0FBQzFGLGFBQWE7QUFDYixTQUFTLENBQUM7QUFDVixJQUFJLENBQUM7QUFFTCxJQUFXLG9CQUFPLEdBQWQsVUFBZSxVQUFnQjtBQUFJLFFBQy9CLE9BQU87QUFDZixZQUFZLFFBQVEsRUFBRSxjQUFZO0FBQ2xDLFlBQVksU0FBUyxFQUFFO0FBQ3ZCLGdCQUFnQixFQUFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7QUFDMUYsYUFBYTtBQUNiLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUVMO0lBbkJhLFlBQVkseUNBTHhCLFFBQVEsQ0FBQyxjQUNOO0FBQVksRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsY0FDM0MsT0FBTyxFQUFFLEVBQUU7Q0FDWCxPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLFVBQ3pDLENBQUMsUUFDVztNQUFZLENBbUJ4Qjs7Ozs7Ozs7Z0RBQ0Q7QUFBQyxJQURELG1CQUFDO0FBQ0EsQ0FEQSxBQW5CRCxJQW1CQztBQUNELFNBcEJhLFlBQVk7QUFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtBZ0dyaWRBbmd1bGFyfSBmcm9tICcuL2FnLWdyaWQtYW5ndWxhci5jb21wb25lbnQnO1xuaW1wb3J0IHtBZ0dyaWRDb2x1bW59IGZyb20gJy4vYWctZ3JpZC1jb2x1bW4uY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtBZ0dyaWRBbmd1bGFyLCBBZ0dyaWRDb2x1bW5dLFxuICAgIGltcG9ydHM6IFtdLFxuICAgIGV4cG9ydHM6IFtBZ0dyaWRBbmd1bGFyLCBBZ0dyaWRDb2x1bW5dXG59KVxuZXhwb3J0IGNsYXNzIEFnR3JpZE1vZHVsZSB7XG4gICAgc3RhdGljIHdpdGhDb21wb25lbnRzKGNvbXBvbmVudHM/OiBhbnkpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPGFueT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEFnR3JpZE1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtwcm92aWRlOiBBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTLCB1c2VWYWx1ZTogY29tcG9uZW50cywgbXVsdGk6IHRydWV9XG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JSb290KGNvbXBvbmVudHM/OiBhbnkpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPGFueT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEFnR3JpZE1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtwcm92aWRlOiBBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTLCB1c2VWYWx1ZTogY29tcG9uZW50cywgbXVsdGk6IHRydWV9XG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIH1cblxufVxuIl19