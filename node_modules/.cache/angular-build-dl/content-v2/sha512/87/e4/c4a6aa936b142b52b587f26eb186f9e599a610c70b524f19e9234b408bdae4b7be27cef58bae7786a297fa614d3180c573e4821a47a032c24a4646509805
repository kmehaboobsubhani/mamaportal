{"version":3,"sources":["webpack:///src/app/views/business-technical/validation-forms.service.ts","webpack:///src/app/views/business-technical/business-technical-routing.module.ts","webpack:///src/app/views/business-technical/business-technical.component.css","webpack:///src/app/views/business-technical/business-technical-module.ts","webpack:///src/app/views/business-technical/business-technical.component.ts","webpack:///src/app/views/business-technical/business-technical.component.html"],"names":["ValidationFormsService","formRules","nonEmpty","usernameMin","passwordMin","passwordPattern","formErrors","firstName","lastName","username","email","password","confirmPassword","accept","errorMessages","required","minLength","pattern","passwordMismatch","requiredTrue","providedIn","routes","path","component","data","title","BusinessTechnicalRoutingModule","imports","forChild","exports","BusinessTechnicalModule","declarations","confirmPasswordValidator","control","get","confirm","value","BusinessTechnicalComponent","fb","vf","submitted","_tabs","createForm","filter","tab","disabled","showModal","simpleForm","group","validators","controls","reset","status","console","warn","onValidate","alert","selector","template","providers"],"mappings":"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","file":"views-business-technical-business-technical-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BusinessTechnicalComponent } from './business-technical.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BusinessTechnicalComponent,\r\n    data: {\r\n      title: 'BusinessTechnical',\r\n    }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class BusinessTechnicalRoutingModule {}\r\n","export default \"::ng-deep .card-body {\\r\\n    flex: 1 1 auto;\\r\\n    min-height: 1px;\\r\\n    padding: 1.25rem;\\r\\n    margin-bottom: 280px;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .nav-tabs-boxed .tab-content {\\r\\n    padding: 0.75rem 1.25rem;\\r\\n    border: 1px solid;\\r\\n    border-radius: 0 0.25rem 0.25rem 0.25rem;\\r\\n    color: #768192;\\r\\n    background-color: #fff;\\r\\n    border-color: #d8dbe0;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .card-style {\\r\\n    border: none;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1c2luZXNzLXRlY2huaWNhbC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksY0FBYztJQUNkLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsb0JBQW9CO0VBQ3RCOztFQUVBO0lBQ0Usd0JBQXdCO0lBQ3hCLGlCQUFpQjtJQUNqQix3Q0FBd0M7SUFDeEMsY0FBYztJQUNkLHNCQUFzQjtJQUN0QixxQkFBcUI7RUFDdkI7O0VBRUE7SUFDRSxZQUFZO0VBQ2QiLCJmaWxlIjoiYnVzaW5lc3MtdGVjaG5pY2FsLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XHJcbiAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgIG1pbi1oZWlnaHQ6IDFweDtcclxuICAgIHBhZGRpbmc6IDEuMjVyZW07XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyODBweDtcclxuICB9XHJcbiAgXHJcbiAgOjpuZy1kZWVwIC5uYXYtdGFicy1ib3hlZCAudGFiLWNvbnRlbnQge1xyXG4gICAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiAwIDAuMjVyZW0gMC4yNXJlbSAwLjI1cmVtO1xyXG4gICAgY29sb3I6ICM3NjgxOTI7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjZDhkYmUwO1xyXG4gIH1cclxuICBcclxuICA6Om5nLWRlZXAgLmNhcmQtc3R5bGUge1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gIH0iXX0= */\";","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\r\nimport { IconModule } from '@coreui/icons-angular';\r\nimport { BusinessTechnicalRoutingModule } from './business-technical-routing.module';\r\nimport { BusinessTechnicalComponent } from './business-technical.component';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\nBusinessTechnicalRoutingModule,\r\n    CardModule,\r\n    GridModule,\r\n    IconModule,\r\n    SwitchModule,\r\n    PaginationModule,\r\n    FormsModule,\r\n    TabsetModule,\r\n    BadgeModule,\r\n    FormsModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ValidationFormsRoutingModule,\r\n    GridModule,\r\n    CardModule,\r\n    ButtonModule,\r\n    BadgeModule,\r\n    FormModule,\r\n  ],\r\n  declarations: [BusinessTechnicalComponent],\r\n})\r\nexport class BusinessTechnicalModule {}\r\n","import { Component } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\nimport { CommonDataService } from '../../Common/common-data.service';\nimport { DataService } from '../../service/data.service';\nimport { Router } from '@angular/router';\nimport { Business } from './business';\n\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  selector: 'app-business-technical',\n  templateUrl: './business-technical.component.html',\n  styleUrls: ['./business-technical.component.css'],\n  providers: [ValidationFormsService],\n})\nexport class BusinessTechnicalComponent {\n  simpleForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n  showModal: boolean;\n  registerForm: FormGroup;\n  entryForm: FormGroup;\n  private _tabs: any[] = [\n    \n    //{ header: 'Certificates', panel: this.lorem[3], icon: 'cil-envelope-closed' },\n  ];\n\n  public get tabs() {\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\n    // console.log('tabs:', tabs);\n    // return tabs;\n    return this._tabs;\n  }\n\n  public get tabs2() {\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\n    // console.log('tabs:', tabs);\n    // return tabs;\n    return this._tabs.filter((tab) => !tab.disabled);\n  }\n\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  showing() { \n    debugger;\n    this.showModal = true;\n  }\n \n  hide()\n  {\n    debugger;\n    this.showModal = false;\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group(\n      {\n        firstName: ['', [Validators.required]],\n        lastName: ['', [Validators.required]],\n        username: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.usernameMin),\n            Validators.pattern(this.vf.formRules.nonEmpty),\n          ],\n        ],\n        email: ['', [Validators.required, Validators.email]],\n        password: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.passwordMin),\n            Validators.pattern(this.vf.formRules.passwordPattern),\n          ],\n        ],\n        confirmPassword: ['', [Validators.required]],\n        accept: [false, [Validators.requiredTrue]],\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.simpleForm.controls;\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.simpleForm.reset();\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.simpleForm.status === 'VALID';\n  }\n\n  onSubmit() {\n    console.warn(this.onValidate(), this.simpleForm.value);\n\n    if (this.onValidate()) {\n      // TODO: Use EventEmitter with form value\n      console.warn(this.simpleForm.value);\n      alert('SUCCESS!');\n    }\n  }\n\n  onSubmits() {\n    console.warn(this.onValidate(), this.simpleForm.value);\n\n    if (this.onValidate()) {\n      // TODO: Use EventEmitter with form value\n      console.warn(this.simpleForm.value);\n      alert('SUCCESS!');\n    }\n  }\n}\n","export default \"<div class=\\\"fade-in\\\">\\n  <c-row>\\n    <c-col md=\\\"100\\\">\\n      <c-card>\\n        <c-card-body>\\n          <!--          <c-tabset [activeTab]=\\\"setTab\\\" (activeTabChange)=\\\"setTab=$event\\\" boxed=\\\"true\\\" [variant]=\\\"'pills'\\\">-->\\n          <!--          <c-tabset [(activeTab)]=\\\"setTab\\\" (activeTabChange)=\\\"onTabChange($event)\\\">-->\\n          <!--          <c-tabset variant=\\\"pills\\\" boxed=\\\"true\\\">-->\\n          <c-tabset boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\n            <c-tablist>\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\n                {{tab.header}}\\n              </c-tab>\\n            </c-tablist>\\n            <c-tab-content>\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\n                <ng-container *ngIf=\\\"i===0\\\">\\n                  <div class=\\\"fade-in\\\">\\n                    <c-row>\\n                      <c-col md=\\\"12\\\">\\n                        <c-card class=\\\"card-style\\\">\\n\\n                          <c-card-body>\\n\\n                            <c-row>\\n                              <c-col md=\\\"16\\\">\\n                                <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\"\\n                                  class=\\\"needs-validation\\\">\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">Machine Type</label>\\n                                    <input cInput id=\\\"firstName\\\" formControlName=\\\"firstName\\\" placeholder=\\\"Machine Type\\\"\\n                                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['firstName'].errors.required\\\">Machine Type is required</div>\\n                                    </div>\\n                                  </c-form-group>\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Address</label>\\n                                    <input cInput id=\\\"lastName\\\" formControlName=\\\"lastName\\\" placeholder=\\\"Address\\\"\\n                                      autocomplete=\\\"family-name\\\" required\\n                                      [ngClass]=\\\"{ 'is-invalid':  (submitted || f.lastName.touched) && f.lastName.invalid, 'is-valid': f.lastName.touched && f.lastName.valid }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['lastName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['lastName'].errors.required\\\">Address is required</div>\\n                                    </div>\\n                                  </c-form-group>\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"username\\\">Lattitude</label>\\n                                    <input cInput id=\\\"username\\\" formControlName=\\\"username\\\" placeholder=\\\"Lattitude\\\"\\n                                      autocomplete=\\\"username\\\" required\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.username.touched) && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['username'].errors.required\\\">Lattitude is required</div>\\n                                      <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}\\n                                      </div>\\n                                      <div *ngIf=\\\"f['username'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\n                                    </div>\\n                                  </c-form-group>\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"email\\\">Longitude</label>\\n                                    <input cInput id=\\\"email\\\" type=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"Longitude\\\"\\n                                      autocomplete=\\\"email\\\" required\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['email'].errors.required\\\">Longitude is required</div>\\n                                      <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\n                                    </div>\\n                                  </c-form-group>\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">Phone number</label>\\n                                    <input cInput id=\\\"firstName\\\" formControlName=\\\"firstName\\\" placeholder=\\\"Phone number\\\"\\n                                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['firstName'].errors.required\\\">Phone number is required</div>\\n                                    </div>\\n                                  </c-form-group>\\n                                  <c-row>\\n                                    <c-form-group cCol md=\\\"6\\\">\\n                                      <label class=\\\"col-form-label\\\" for=\\\"password\\\">Password</label>\\n                                      <input cInput id=\\\"password\\\" type=\\\"password\\\" formControlName=\\\"password\\\"\\n                                        placeholder=\\\"Password\\\" autocomplete=\\\"new-password\\\" required\\n                                        [ngClass]=\\\"{ 'is-invalid': (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\" />\\n                                      <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                        <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                                        <div *ngIf=\\\"f['password'].errors.minlength\\\">{{formErrors.password.minLength}}\\n                                        </div>\\n                                        <div *ngIf=\\\"f['password'].errors.pattern\\\">{{formErrors.password.pattern}}</div>\\n                                      </div>\\n                                    </c-form-group>\\n                                    <c-form-group cCol md=\\\"6\\\">\\n                                      <label class=\\\"col-form-label\\\" for=\\\"confirmPassword\\\">Confirm password</label>\\n                                      <input cInput id=\\\"confirmPassword\\\" type=\\\"password\\\"\\n                                        formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm password\\\"\\n                                        autocomplete=\\\"new-password\\\" required\\n                                        [ngClass]=\\\"{ 'is-invalid': submitted && simpleForm.errors, 'is-valid': f.confirmPassword.touched && !simpleForm.errors }\\\" />\\n                                      <div *ngIf=\\\"submitted && simpleForm.errors\\\" class=\\\"invalid-feedback\\\">\\n                                        <div *ngIf=\\\"simpleForm.errors['passwordMismatch']\\\">\\n                                          {{formErrors.confirmPassword.passwordMismatch}}</div>\\n                                      </div>\\n                                    </c-form-group>\\n                                  </c-row>\\n                                  <c-form-group>\\n                                    <c-form-check variant=\\\"checkbox\\\" custom>\\n                                      <input cInput custom type=\\\"checkbox\\\" id=\\\"accept\\\" formControlName=\\\"accept\\\" required\\n                                        [ngClass]=\\\"{ 'is-invalid': submitted && f.accept.invalid, 'is-valid': f.accept.valid }\\\" />\\n                                      <label cLabel custom for=\\\"accept\\\">I accept the terms of use</label>\\n                                      <c-form-feedback *ngIf=\\\"submitted && f['accept'].invalid\\\" [valid]=\\\"false\\\">\\n                                        <div *ngIf=\\\"f['accept'].errors.required\\\">You have to accept our Terms and\\n                                          Conditions</div>\\n                                      </c-form-feedback>\\n                                    </c-form-check>\\n                                  </c-form-group>\\n                                  <c-form-group>\\n                                    <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\n                                      [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\"\\n                                      [tabindex]=\\\"'0'\\\">Submit</button>\\n                                    <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                                      (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                                    <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\"\\n                                      [tabindex]=\\\"'0'\\\">Reset</button>\\n                                  </c-form-group>\\n                                </form>\\n                              </c-col>\\n\\n                            </c-row>\\n                          </c-card-body>\\n                        </c-card>\\n                      </c-col>\\n                    </c-row>\\n                  </div>\\n\\n                </ng-container>\\n                <ng-container *ngIf=\\\"i===1\\\">\\n                  <div class=\\\"fade-in\\\">\\n                    <c-row>\\n                      <c-col md=\\\"12\\\">\\n                        <c-card class=\\\"card-style\\\">\\n\\n                          <c-card-body>\\n\\n                            <c-row>\\n                              <c-col md=\\\"16\\\">\\n                                <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\"\\n                                  class=\\\"needs-validation\\\">\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">Wifi Name</label>\\n                                    <input cInput id=\\\"firstName\\\" formControlName=\\\"firstName\\\" placeholder=\\\"Wifi Name\\\"\\n                                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['firstName'].errors.required\\\">Wifi name is required</div>\\n                                    </div>\\n                                  </c-form-group>\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Controller board</label>\\n                                    <input cInput id=\\\"lastName\\\" formControlName=\\\"lastName\\\"\\n                                      placeholder=\\\"Controller board\\\" autocomplete=\\\"family-name\\\" required\\n                                      [ngClass]=\\\"{ 'is-invalid':  (submitted || f.lastName.touched) && f.lastName.invalid, 'is-valid': f.lastName.touched && f.lastName.valid }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['lastName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['lastName'].errors.required\\\">Controller board is required</div>\\n                                    </div>\\n                                  </c-form-group>\\n                                  <c-form-group>\\n                                    <label class=\\\"col-form-label\\\" for=\\\"username\\\">UPI</label>\\n                                    <input cInput id=\\\"username\\\" formControlName=\\\"username\\\" placeholder=\\\"UPI\\\"\\n                                      autocomplete=\\\"username\\\" required\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.username.touched) && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\n                                    <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\n                                      <div *ngIf=\\\"f['username'].errors.required\\\">UPI is required</div>\\n                                      <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}\\n                                      </div>\\n                                      <div *ngIf=\\\"f['username'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\n                                    </div>\\n                                  </c-form-group>\\n\\n\\n                                  <c-form-group>\\n                                    <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\n                                      [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\"\\n                                      [tabindex]=\\\"'0'\\\">Submit</button>\\n                                    <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                                      (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                                    <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\"\\n                                      [tabindex]=\\\"'0'\\\">Reset</button>\\n                                  </c-form-group>\\n\\n                                </form>\\n                              </c-col>\\n\\n                            </c-row>\\n                          </c-card-body>\\n                        </c-card>\\n                      </c-col>\\n                    </c-row>\\n                  </div>\\n\\n                </ng-container>\\n              </c-tab-pane>\\n            </c-tab-content>\\n          </c-tabset>\\n        </c-card-body>\\n      </c-card>\\n    </c-col>\\n  </c-row>\\n</div>\\n\\n\\n\\n<div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\"\\n  aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">Register</h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmits()\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>FirstName</label>\\n                <input type=\\\"text\\\" formControlName=\\\"firstname\\\" class=\\\"form-control\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.firstname.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.firstname.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.firstname.errors.required\\\">FirstName is required</div>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"col-sm-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Email</label>\\n                <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n                  <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"col-sm-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Mobile</label>\\n                <input type=\\\"text\\\" formControlName=\\\"mobile\\\" class=\\\"form-control\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.mobile.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.mobile.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.mobile.errors\\\">Mobile must be Valid and at least 10 digits</div>\\n\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"col-sm-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Password</label>\\n                <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                  <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n        </form>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\n\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";"]}