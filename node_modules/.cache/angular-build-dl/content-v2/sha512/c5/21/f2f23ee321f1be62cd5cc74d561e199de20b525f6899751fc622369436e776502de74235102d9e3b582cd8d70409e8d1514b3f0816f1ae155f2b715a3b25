{"version":3,"sources":["webpack:///src/app/views/forms/validation-forms/validation-forms.component.ts","webpack:///src/app/views/forms/validation-forms/validation-forms.component.html","webpack:///src/app/views/forms/validation-forms/validation-forms.service.ts","webpack:///src/app/views/forms/validation-forms/validation-forms-routing.module.ts","webpack:///src/app/views/forms/validation-forms/validation-forms.component.scss"],"names":["confirmPasswordValidator","control","password","get","confirm","value","passwordMismatch","ValidationFormsComponent","fb","vf","submitted","formErrors","errorMessages","createForm","simpleForm","group","firstName","required","lastName","username","minLength","formRules","usernameMin","pattern","nonEmpty","email","passwordMin","passwordPattern","confirmPassword","accept","requiredTrue","validators","controls","reset","status","console","warn","onValidate","alert","template","providers","ValidationFormsService","providedIn","routes","path","component","data","title","ValidationFormsRoutingModule","imports","forChild","exports"],"mappings":"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","file":"default~validation-forms-validation-forms-module~views-business-technical-business-technical-module~~fb80271e-es5.js","sourcesContent":["import { Component } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\n\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  templateUrl: './validation-forms.component.html',\n  styleUrls: ['./validation-forms.component.scss'],\n  providers: [ValidationFormsService],\n})\nexport class ValidationFormsComponent {\n  simpleForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group(\n      {\n        firstName: ['', [Validators.required]],\n        lastName: ['', [Validators.required]],\n        username: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.usernameMin),\n            Validators.pattern(this.vf.formRules.nonEmpty),\n          ],\n        ],\n        email: ['', [Validators.required, Validators.email]],\n        password: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.passwordMin),\n            Validators.pattern(this.vf.formRules.passwordPattern),\n          ],\n        ],\n        confirmPassword: ['', [Validators.required]],\n        accept: [false, [Validators.requiredTrue]],\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.simpleForm.controls;\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.simpleForm.reset();\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.simpleForm.status === 'VALID';\n  }\n\n  onSubmit() {\n    console.warn(this.onValidate(), this.simpleForm.value);\n\n    if (this.onValidate()) {\n      // TODO: Use EventEmitter with form value\n      console.warn(this.simpleForm.value);\n      alert('SUCCESS!');\n    }\n  }\n}\n","export default \"<div class=\\\"fade-in\\\">\\n  <c-row>\\n    <c-col md=\\\"12\\\">\\n      <c-card>\\n        <c-card-header>\\n          Form Validation\\n        </c-card-header>\\n        <c-card-body>Angular Form Validation\\n          <hr>\\n          <c-row>\\n            <c-col md=\\\"6\\\" >\\n              <h6>Simple Form</h6>\\n              <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">First name</label>\\n                  <input cInput\\n                         id=\\\"firstName\\\"\\n                         formControlName=\\\"firstName\\\"\\n                         placeholder=\\\"First name\\\"\\n                         autocomplete=\\\"given-name\\\"\\n                         required\\n                         [autofocus]=\\\"true\\\"\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\n                  <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['firstName'].errors.required\\\">First Name is required</div>\\n                  </div>\\n                </c-form-group>\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Last name</label>\\n                  <input cInput\\n                         id=\\\"lastName\\\"\\n                         formControlName=\\\"lastName\\\"\\n                         placeholder=\\\"Last name\\\"\\n                         autocomplete=\\\"family-name\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid':  (submitted || f.lastName.touched) && f.lastName.invalid, 'is-valid': f.lastName.touched && f.lastName.valid }\\\" />\\n                  <div *ngIf=\\\"submitted && f['lastName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['lastName'].errors.required\\\">Last Name is required</div>\\n                  </div>\\n                </c-form-group>\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"username\\\">Username</label>\\n                  <input cInput\\n                         id=\\\"username\\\"\\n                         formControlName=\\\"username\\\"\\n                         placeholder=\\\"Username\\\"\\n                         autocomplete=\\\"username\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.username.touched) && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['username'].errors.required\\\">Username is required</div>\\n                    <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}</div>\\n                    <div *ngIf=\\\"f['username'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\n                  </div>\\n                </c-form-group>\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"email\\\">Email</label>\\n                  <input cInput\\n                         id=\\\"email\\\"\\n                         type=\\\"email\\\"\\n                         formControlName=\\\"email\\\"\\n                         placeholder=\\\"Email\\\"\\n                         autocomplete=\\\"email\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\n                  <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['email'].errors.required\\\">Email is required</div>\\n                    <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\n                  </div>\\n                </c-form-group>\\n                <c-row>\\n                  <c-form-group cCol md=\\\"6\\\" >\\n                    <label class=\\\"col-form-label\\\" for=\\\"password\\\">Password</label>\\n                    <input cInput\\n                           id=\\\"password\\\"\\n                           type=\\\"password\\\"\\n                           formControlName=\\\"password\\\"\\n                           placeholder=\\\"Password\\\"\\n                           autocomplete=\\\"new-password\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\" />\\n                    <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                      <div *ngIf=\\\"f['password'].errors.minlength\\\">{{formErrors.password.minLength}}</div>\\n                      <div *ngIf=\\\"f['password'].errors.pattern\\\">{{formErrors.password.pattern}}</div>\\n                    </div>\\n                  </c-form-group>\\n                  <c-form-group cCol md=\\\"6\\\" >\\n                    <label class=\\\"col-form-label\\\" for=\\\"confirmPassword\\\">Confirm password</label>\\n                    <input cInput\\n                           id=\\\"confirmPassword\\\"\\n                           type=\\\"password\\\"\\n                           formControlName=\\\"confirmPassword\\\"\\n                           placeholder=\\\"Confirm password\\\"\\n                           autocomplete=\\\"new-password\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && simpleForm.errors, 'is-valid': f.confirmPassword.touched && !simpleForm.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && simpleForm.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"simpleForm.errors['passwordMismatch']\\\">{{formErrors.confirmPassword.passwordMismatch}}</div>\\n                    </div>\\n                  </c-form-group>\\n                </c-row>\\n                <c-form-group>\\n                  <c-form-check variant=\\\"checkbox\\\" custom>\\n                    <input cInput custom\\n                           type=\\\"checkbox\\\"\\n                           id=\\\"accept\\\"\\n                           formControlName=\\\"accept\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && f.accept.invalid, 'is-valid': f.accept.valid }\\\" />\\n                    <label cLabel custom for=\\\"accept\\\">I accept the terms of use</label>\\n                    <c-form-feedback *ngIf=\\\"submitted && f['accept'].invalid\\\" [valid]=\\\"false\\\">\\n                      <div *ngIf=\\\"f['accept'].errors.required\\\">You have to accept our Terms and Conditions</div>\\n                    </c-form-feedback>\\n                  </c-form-check>\\n                </c-form-group>\\n                <c-form-group>\\n                  <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\" [tabindex]=\\\"'0'\\\">Submit</button>\\n                  <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                  <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Reset</button>\\n                </c-form-group>\\n              </form>\\n            </c-col>\\n            <c-col md=\\\"6\\\">\\n              <c-card class=\\\"bg-dark\\\" [ngClass]=\\\"{ 'bg-info' : simpleForm.valid }\\\">\\n                <c-card-body>\\n                  <pre class=\\\"text-white\\\">Value: <code>{{ simpleForm.value | json }}</code></pre>\\n                  <ul>\\n                    <li>\\n                      Status: {{ simpleForm.status }}\\n                    </li>\\n                    <li>\\n                      Errors: {{ simpleForm.errors | json }}\\n                    </li>\\n                    <li>\\n                      Valid: {{ simpleForm.valid }}\\n                    </li>\\n                    <li>\\n                      Pristine: {{ simpleForm.pristine }}\\n                    </li>\\n                  </ul>\\n                </c-card-body>\\n              </c-card>\\n             </c-col>\\n          </c-row>\\n        </c-card-body>\\n      </c-card>\\n    </c-col>\\n  </c-row>\\n</div>\\n\";","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ValidationFormsComponent } from './validation-forms.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ValidationFormsComponent,\n    data: {\n      title: 'Form Validation',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ValidationFormsRoutingModule {}\n","export default \".btn:disabled {\\n  cursor: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcdmFsaWRhdGlvbi1mb3Jtcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7QUFDRiIsImZpbGUiOiJ2YWxpZGF0aW9uLWZvcm1zLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ0bjpkaXNhYmxlZCB7XG4gIGN1cnNvcjogYXV0bztcbn1cbiJdfQ== */\";"]}