{"version":3,"sources":["webpack:///src/app/views/inventory/items/items.component.ts","webpack:///src/app/views/inventory/items/items-filter.pipe.ts","webpack:///src/app/views/inventory/items/items.module.ts","webpack:///src/app/views/inventory/items/items-routing.module.ts","webpack:///src/app/views/inventory/items/items.component.scss","webpack:///src/app/views/inventory/items/items.component.html"],"names":["DataTablesComponent","fb","service","commonData","spinner","router","filterQuery","springs","levels","curLoadedQty","customer","submitted","ica","sortByWordLength","a","name","length","createForm","setTab","getAllItemsOfMerchant","merchantId","subscribe","data","setTimeout","error","_setTab","value","num","regDate","date","Date","toLocaleDateString","year","month","day","showModal","simpleForm","group","cid","required","crc","asn","iid","itp","spn","imx","key","mid","qmx","companyName","billingPlan","panNo","gstNo","phone","address","country","pincode","primaryContact","secondaryContact","controls","reset","status","onValidate","console","warn","alert","changes","log","selector","template","DataFilterPipe","array","query","row","indexOf","DataTablesInitModule","imports","declarations","routes","path","component","title","DataTablesRoutingModule","forChild","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAuBA;;;UAQaA,mBAAmB;AA8B9B,qCAAoBC,EAApB,EAA6CC,OAA7C,EAA2EC,UAA3E,EAAkHC,OAAlH,EACUC,MADV,EACwB;AAAA;;AAAA;;AADJ,eAAAJ,EAAA,GAAAA,EAAA;AAAyB,eAAAC,OAAA,GAAAA,OAAA;AAA8B,eAAAC,UAAA,GAAAA,UAAA;AAAuC,eAAAC,OAAA,GAAAA,OAAA;AACxG,eAAAC,MAAA,GAAAA,MAAA;AA5BH,eAAAC,WAAA,GAAc,EAAd;AACA,eAAAC,OAAA,GAAe,EAAf;AACA,eAAAC,MAAA,GAAc,EAAd;AAMA,eAAAC,YAAA,GAAe,CAAf;AAGP,eAAAC,QAAA,GAAe,EAAf;AAEA,eAAAC,SAAA,GAAY,KAAZ;AAMA,eAAAC,GAAA,GAAU,EAAV;;AA0BO,eAAAC,gBAAA,GAAmB,UAACC,CAAD,EAAY;AACpC,mBAAOA,CAAC,CAACC,IAAF,CAAOC,MAAd;AACD,WAFM;;AAhBL,eAAKC,UAAL;AACA,eAAKC,MAAL,GAAc,CAAd;AACA,eAAKhB,OAAL,CAAaiB,qBAAb,CAAmC,KAAKhB,UAAL,CAAgBiB,UAAnD,EAA+DC,SAA/D,CACE,UAACC,IAAD,EAAsB;AACpBC,sBAAU,CAAC,YAAM;AACf,mBAAI,CAACD,IAAL,sBAAgBA,IAAhB,EADe,CACQ;AACxB,aAFS,EAEP,IAFO,CAAV;AAGD,WALH,EAME,UAACE,KAAD;AAAA,mBAAY,KAAI,CAACA,KAAL,GAAaA,KAAzB;AAAA,WANF;AAQD;;AA1C6B;AAAA;AAAA,eAwB9B,eAAa;AACX,mBAAO,KAAKC,OAAZ;AACD,WA1B6B;AAAA,eA2B9B,aAAWC,KAAX,EAA0B;AACxB,iBAAKD,OAAL,GAAeC,KAAK,IAAI,CAAxB;AACD;AA7B6B;AAAA;AAAA,iBA4CvB,eAAMC,GAAN,EAAmB;AACxB,mBAAO,CAACA,GAAR;AACD;AA9C6B;AAAA;AAAA,iBAoDvB,iBAAQC,OAAR,EAAyB;AAC9B,gBAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,OAAT,CAAb;AACA,mBAAOC,IAAI,CAACE,kBAAL,CAAwB,OAAxB,EAAiC;AACtCC,kBAAI,EAAE,SADgC;AAEtCC,mBAAK,EAAE,OAF+B;AAGtCC,iBAAG,EAAE;AAHiC,aAAjC,CAAP;AAKD;AA3D6B;AAAA;AAAA,iBA+D9B,mBAAU;AACR;AACA,iBAAKC,SAAL,GAAiB,IAAjB;AACD;AAlE6B;AAAA;AAAA,iBAoE9B,gBAAI;AAEF;AACA,iBAAKA,SAAL,GAAiB,KAAjB;AACD;AAxE6B;AAAA;AAAA,iBA0E9B,sBAAa;AACX,iBAAKC,UAAL,GAAkB,KAAKnC,EAAL,CAAQoC,KAAR,CAChB;AACEC,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,CAAL,CADP;AAEEC,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWD,QAAZ,CAAL,CAFP;AAGE3B,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW2B,QAAZ,CAAL,CAHP;AAKEE,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWF,QAAZ,CAAL,CALP;AAMEG,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWH,QAAZ,CAAL,CANP;AAOEI,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWJ,QAAZ,CAAL,CAPP;AAQEK,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWL,QAAZ,CAAL,CARP;AASEM,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWN,QAAZ,CAAL,CATP;AAUEO,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWP,QAAZ,CAAL,CAVP;AAWEQ,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWR,QAAZ,CAAL,CAXP;AAYES,iBAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWT,QAAZ,CAAL,CAZP;AAcEnB,wBAAU,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWmB,QAAZ,CAAL,CAdd;AAeEU,yBAAW,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWV,QAAZ,CAAL,CAff;AAiBEW,yBAAW,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWX,QAAZ,CAAL,CAjBf;AAkBEY,mBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWZ,QAAZ,CAAL,CAlBT;AAmBEa,mBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWb,QAAZ,CAAL,CAnBT;AAqBEc,mBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWd,QAAZ,CAAL,CArBT;AAuBEe,qBAAO,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWf,QAAZ,CAAL,CAvBX;AAyBEgB,qBAAO,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWhB,QAAZ,CAAL,CAzBX;AA0BEiB,qBAAO,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWjB,QAAZ,CAAL,CA1BX;AA4BEkB,4BAAc,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWlB,QAAZ,CAAL,CA5BlB;AA6BEmB,8BAAgB,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWnB,QAAZ,CAAL;AA7BpB,aADgB,CAAlB;AAmCD;AA9G6B;AAAA;AAAA,eAgH9B,eAAQ;AACN,mBAAO,KAAKH,UAAL,CAAgBuB,QAAvB;AACD;AAlH6B;AAAA;AAAA,iBAoH9B,mBAAU;AACR,iBAAKhD,SAAL,GAAiB,KAAjB;AACA,iBAAKyB,UAAL,CAAgBwB,KAAhB;AACD;AAvH6B;AAAA;AAAA,iBAyH9B,sBAAa;AACX,iBAAKjD,SAAL,GAAiB,IAAjB,CADW,CAGX;;AACA,mBAAO,KAAKyB,UAAL,CAAgByB,MAAhB,KAA2B,OAAlC;AACD;AA9H6B;AAAA;AAAA,iBAgI9B,oBAAW;AACT,qBADS,CAET;;AACA,gBAAI,KAAKC,UAAL,EAAJ,EAAuB;AACrBC,qBAAO,CAACC,IAAR,CAAa,KAAK5B,UAAL,CAAgBV,KAA7B;AACAuC,mBAAK,CAAC,UAAD,CAAL;AACD;AACF;AAvI6B;AAAA;AAAA,iBAyI9B,oBAAW,CAEV;AA3I6B;AAAA;AAAA,iBA6I9B,uBAAW,CACT;AACD;AA/I6B;AAAA;AAAA,iBAiJ9B,qBAAYC,OAAZ,EAAkC;AAChCH,mBAAO,CAACI,GAAR,CAAY,aAAZ,EAA2BD,OAA3B,EAAoC,KAAKhD,MAAzC;AACD;AAnJ6B;;AAAA;AAAA,S;;;;gBAtB9B;;gBASO;;gBADA;;gBAEA;;gBAKA;;;;AAOIlB,yBAAmB,6DAN/B,gEAAU;AACToE,gBAAQ,EAAE,WADD;AAETC,gBAAQ,EAAR,wEAFS;;AAAA,OAAV,CAM+B,E,+EA8BN,0D,EAA8B,iE,EAAiC,6E,EAAoC,6D,EACzG,sD,EA/BY,GAAnBrE,mBAAmB,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCzBAsE,cAAc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,iBACzB,mBAAUC,KAAV,EAAwBC,KAAxB,EAAqC;AACnC,gBAAIA,KAAJ,EAAW;AACT,qBAAO,8CAASD,KAAT,EAAgB,UAACE,GAAD;AAAA,uBAASA,GAAG,CAAC1D,IAAJ,CAAS2D,OAAT,CAAiBF,KAAjB,IAA0B,CAAC,CAApC;AAAA,eAAhB,CAAP;AACD;;AACD,mBAAOD,KAAP;AACD;AANwB;;AAAA;AAAA,S;;AAAdD,oBAAc,6DAH1B,2DAAK;AACJvD,YAAI,EAAE;AADF,OAAL,CAG0B,GAAduD,cAAc,CAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCkBAK,oBAAoB;AAAA;AAAA,O;;AAApBA,0BAAoB,6DAdhC,+DAAS;AACNC,eAAO,EAAE,CACL,4DADK,EAEL,0DAFK,EAGL,qEAHK,EAIL,6EAJK,EAKL,4EALK,EAML,0DANK,EAOL,0DAPK,EAQL,4EARK,EASL,0DATK,CADH;AAYRC,oBAAY,EAAE,CAAC,oEAAD,EAAsB,iEAAtB;AAZN,OAAT,CAcgC,GAApBF,oBAAoB,CAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBb,UAAMG,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE,oEAFb;AAGE1D,YAAI,EAAE;AACJ2D,eAAK,EAAE;AADH;AAHR,OADqB,CAAvB;;UAcaC,uBAAuB;AAAA;AAAA,O;;AAAvBA,6BAAuB,6DAJnC,+DAAS;AACRN,eAAO,EAAE,CAAC,6DAAaO,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAImC,GAAvBF,uBAAuB,CAAvB;;;;;;;;;;;;;;;;ACnBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA","file":"views-inventory-items-items-module-es5.js","sourcesContent":["import {\n  Component,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n} from '@angular/forms';\n\nimport { ITableData } from '../../tables/data-tables/data-tables.service';\nimport { CommonDataService } from '../../../Common/common-data.service';\nimport { DataService } from '../../../service/data.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n//import { ValidationFormsService } from './validation-forms.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.scss'],\n  //providers: [DataTablesService],\n})\nexport class DataTablesComponent  implements OnDestroy, OnInit, OnChanges {\n  error: any;\n  public data: ITableData;\n  public filterQuery = '';\n  public springs: any = [];\n  public levels: any = [];\n\n  public sNo;\n  public springName;\n  public availability;\n  public tempAvailability;\n  public curLoadedQty = 0;\n  public itemFromStockId;\n  showModal: boolean;\n  customer:any = {};\n  simpleForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n  msg:string;\n  registerForm: FormGroup;\n  entryForm: FormGroup;\n  bodyText: string;\n  ica:any = {};\n  private _setTab: number;\n  get setTab() {\n    return this._setTab;\n  }\n  set setTab(value: number) {\n    this._setTab = value || 0;\n  }\n  constructor(private fb: FormBuilder, private service: DataService, private commonData: CommonDataService, private spinner: NgxSpinnerService,\n    private router: Router,) {\n    this.createForm();\n    this.setTab = 0;\n    this.service.getAllItemsOfMerchant(this.commonData.merchantId).subscribe(\n      (data: ITableData) => {\n        setTimeout(() => {\n          this.data = [...data]; //Refresh\n        }, 1000);\n      }, \n      (error) => (this.error = error) \n    );\n  }\n\n  public toInt(num: string) {\n    return +num;\n  }\n\n  public sortByWordLength = (a: any) => {\n    return a.name.length;\n  }\n\n  public getDate(regDate: string) {\n    const date = new Date(regDate);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: '2-digit',\n    });\n  }\n\n\n\n  showing() { \n    debugger;\n    this.showModal = true;\n  }\n \n  hide()\n  {\n    debugger;\n    this.showModal = false;\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group(\n      {\n        cid: ['', [Validators.required]],\n        crc: ['', [Validators.required]],\n        ica: ['', [Validators.required]],\n\n        asn: ['', [Validators.required]],\n        iid: ['', [Validators.required]],\n        itp: ['', [Validators.required]],\n        spn: ['', [Validators.required]],\n        imx: ['', [Validators.required]],\n        key: ['', [Validators.required]],\n        mid: ['', [Validators.required]],\n        qmx: ['', [Validators.required]],\n\n        merchantId: ['', [Validators.required]],\n        companyName: ['', [Validators.required]],\n\n        billingPlan: ['', [Validators.required]],\n        panNo: ['', [Validators.required]],\n        gstNo: ['', [Validators.required]],\n\n        phone: ['', [Validators.required]],\n        \n        address: ['', [Validators.required]],\n\n        country: ['', [Validators.required]],\n        pincode: ['', [Validators.required]],\n        \n        primaryContact: ['', [Validators.required]],\n        secondaryContact: ['', [Validators.required]],\n        // email: ['', [Validators.required, Validators.email]],\n      },\n\n    );\n  }\n\n  get f() {\n    return this.simpleForm.controls;\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.simpleForm.reset();\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.simpleForm.status === 'VALID';\n  }\n\n  onSubmit() {\n    debugger;\n    //console.warn(this.onValidate(), this.simpleForm.value);\n    if (this.onValidate()) {\n      console.warn(this.simpleForm.value);\n      alert('SUCCESS!');\n    }\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngOnDestroy(): void {\n    // clearInterval(this.interval);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log('ngOnChanges', changes, this.setTab);\n  }\n\n}\n","import * as _ from 'lodash';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'dataFilter',\n})\nexport class DataFilterPipe implements PipeTransform {\n  transform(array: any[], query: string): any {\n    if (query) {\n      return _.filter(array, (row) => row.name.indexOf(query) > -1);\n    }\n    return array;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DataTableModule } from '@pascalhonegger/ng-datatable';\nimport { CardModule, FormModule, GridModule } from '@coreui/angular';\nimport { DataTablesComponent } from './items.component';\nimport { DataFilterPipe } from './items-filter.pipe';\nimport { DataTablesRoutingModule } from './items-routing.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        DataTablesRoutingModule,\n        DataTableModule,\n        CardModule,\n        GridModule,\n        DataTableModule,\n        FormModule,\n    ],\n  declarations: [DataTablesComponent, DataFilterPipe],\n})\nexport class DataTablesInitModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DataTablesComponent } from './items.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DataTablesComponent,\n    data: {\n      title: 'Data Table',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DataTablesRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpdGVtcy5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-header\\\">\\n      <div class=\\\"float-left\\\">\\n        <h3 class=\\\"text-info\\\">Item Master</h3>\\n      </div>\\n      <div class=\\\"float-right\\\">\\n        <a class=\\\"btn btn-success\\\" [routerLink]=\\\"['/items/addItems']\\\"><i class=\\\"fa fa-plus\\\"></i> Add Item</a>\\n      </div>\\n    </div>\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"table-responsive-sm\\\">\\n        <div class=\\\"float-right\\\">\\n          <span class=\\\"input-group-text\\\"><i class=\\\"cil-search\\\"></i></span>\\n        </div>\\n        <div class=\\\"float-right\\\">\\n          <input cInput [(ngModel)]=\\\"filterQuery\\\" placeholder=\\\"Search by name\\\" />\\n        </div>\\n\\n        <table class=\\\"table table-striped table-hover table-responsive-lg\\\" [mfData]=\\\"data | dataFilter: filterQuery\\\"\\n          #mf=\\\"mfDataTable\\\" [mfRowsOnPage]=\\\"10\\\">\\n          <thead>\\n            <tr>\\n              <th style=\\\"width: 5%;\\\">\\n                <mfDefaultSorter by=\\\"itemId\\\" #sortItemId>\\n                  ItemId\\n                  <span *ngIf=\\\"sortItemId.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortItemId.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 20%;\\\">\\n                <mfDefaultSorter by=\\\"name\\\" #sortName>\\n                  Name\\n                  <span *ngIf=\\\"sortName.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortName.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 20%;\\\">\\n                <mfDefaultSorter by=\\\"description\\\" #sortDescription>\\n                  Description\\n                  <span *ngIf=\\\"sortDescription.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortDescription.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 10%;\\\">\\n                <mfDefaultSorter by=\\\"costPrice\\\" #sortCostPrice>\\n                  CostPrice\\n                  <span *ngIf=\\\"sortCostPrice.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortCostPrice.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 10%;\\\">\\n                <mfDefaultSorter by=\\\"sellPrice\\\" #sortSellPrice>\\n                  SellPrice\\n                  <span *ngIf=\\\"sortSellPrice.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortSellPrice.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 10%;\\\">\\n                <mfDefaultSorter by=\\\"gst\\\" #sortGst>\\n                  Gst\\n                  <span *ngIf=\\\"sortGst.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortGst.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 10%;\\\">\\n                <mfDefaultSorter by=\\\"discount\\\" #sortDiscount>\\n                  Discount\\n                  <span *ngIf=\\\"sortDiscount.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortDiscount.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 10%;\\\">\\n                <mfDefaultSorter by=\\\"threshold\\\" #sortThreshold>\\n                  Threshold\\n                  <span *ngIf=\\\"sortThreshold.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortThreshold.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 10%;\\\">\\n                <mfDefaultSorter by=\\\"category\\\" #sortCategory>\\n                  Category\\n                  <span *ngIf=\\\"sortCategory.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortCategory.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n              <th style=\\\"width: 10%;\\\">\\n                <mfDefaultSorter by=\\\"active\\\" #sortActive>\\n                  Active\\n                  <span *ngIf=\\\"sortActive.isSortedByMeAsc\\\" class=\\\"cil-arrow-top\\\" aria-hidden=\\\"true\\\"></span>\\n                  <span *ngIf=\\\"sortActive.isSortedByMeDesc\\\" class=\\\"cil-arrow-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n                </mfDefaultSorter>\\n              </th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr *ngFor=\\\"let tr of mf.data\\\">\\n              <td>{{ tr.itemId }}</td>\\n              <td>{{ tr.name }}</td>\\n              <td>{{ tr.description }}</td>\\n              <td>{{ tr.costPrice }}</td>\\n              <td>{{ tr.sellPrice }}</td>\\n              <td>{{ tr.gst }}</td>\\n              <td>{{ tr.discount }}</td>\\n              <td>{{ tr.threshold }}</td>\\n              <td>{{ tr.category }}</td>\\n              <td>{{ tr.active }}</td>\\n            </tr>\\n          </tbody>\\n          <div class=\\\"card-footer\\\">\\n            <div class=\\\"float-right\\\">\\n                <mfBootstrapPaginator [rowsOnPageSet]=\\\"[5, 10, 15]\\\"></mfBootstrapPaginator>\\n          </div>\\n          </div>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n<!-- <div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\"\\n  aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">ICA</h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <form [formGroup]=\\\"simpleForm\\\" (ngSubmit)=\\\"onSubmits()\\\">\\n          <div class=\\\"row\\\">\\n              <c-row>\\n                <c-form-group cCol md=\\\"4\\\">\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"cid\\\">cid :</h6>\\n                  <input cInput id=\\\"cid\\\" formControlName=\\\"cid\\\" placeholder=\\\"cid\\\" autocomplete=\\\"given-name\\\"\\n                    required [autofocus]=\\\"true\\\"\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.cid.touched) && f.cid.invalid, 'is-valid': f.loginId.touched && f.cid.valid  }\\\" />\\n                  <div *ngIf=\\\"submitted && f['cid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['cid'].errors.required\\\">cid is required</div>\\n                  </div>\\n                </c-form-group>\\n            </c-row>\\n          </div>\\n        </form>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"icaFieldValue(simpleForm.value);hide()\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\n      </div>\\n    </div>\\n  </div>\\n</div> -->\";"]}