{"version":3,"sources":["./src/app/views/forms/validation-forms/validation-forms.component.ts","./src/app/views/forms/validation-forms/validation-forms.component.html","./src/app/views/forms/validation-forms/validation-forms.service.ts","./src/app/views/forms/validation-forms/validation-forms-routing.module.ts","./src/app/views/forms/validation-forms/validation-forms.component.scss"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAA0C;AAQlB;AAG4C;AAEpE,8CAA8C;AACvC,MAAM,wBAAwB,GAAgB,CACnD,OAAkB,EACO,EAAE;IAC3B,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC/C,OAAO,QAAQ,IAAI,OAAO,IAAI,QAAQ,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK;QAC5D,CAAC,CAAC,IAAI;QACN,CAAC,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC;AACjC,CAAC,CAAC;IAOW,wBAAwB,SAAxB,wBAAwB;IAKnC,YAAoB,EAAe,EAAS,EAA0B;QAAlD,OAAE,GAAF,EAAE,CAAa;QAAS,OAAE,GAAF,EAAE,CAAwB;QAHtE,cAAS,GAAG,KAAK,CAAC;QAIhB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAC7B;YACE,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrC,QAAQ,EAAE;gBACR,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC;oBACnD,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;iBAC/C;aACF;YACD,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;YACpD,QAAQ,EAAE;gBACR,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC;oBACnD,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC;iBACtD;aACF;YACD,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,yDAAU,CAAC,YAAY,CAAC,CAAC;SAC3C,EACD,EAAE,UAAU,EAAE,wBAAwB,EAAE,CACzC,CAAC;IACJ,CAAC;IAED,oDAAoD;IACpD,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,+BAA+B;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,OAAO,CAAC;IAC5C,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEvD,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACrB,yCAAyC;YACzC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACpC,KAAK,CAAC,UAAU,CAAC,CAAC;SACnB;IACH,CAAC;CACF;;YA3FC,0DAAW;YAQJ,gFAAsB;;AAkBlB,wBAAwB;IALpC,+DAAS,CAAC;QACT,6FAAgD;QAEhD,SAAS,EAAE,CAAC,gFAAsB,CAAC;;KACpC,CAAC;mFAMwB,0DAAW,EAAa,gFAAsB;GAL3D,wBAAwB,CAiEpC;AAjEoC;;;;;;;;;;;;;AC7BrC;AAAe,67BAA83B,gIAAgI,grBAAgrB,6HAA6H,wqBAAwqB,6HAA6H,wQAAwQ,+BAA+B,0EAA0E,6BAA6B,igBAAigB,gHAAgH,yPAAyP,wBAAwB,slBAAslB,4HAA4H,+QAA+Q,+BAA+B,4EAA4E,6BAA6B,smBAAsmB,4GAA4G,mLAAmL,6CAA6C,qcAAqc,0EAA0E,sjCAAsjC,+BAA+B,+FAA+F,2BAA2B,iGAAiG,qBAAqB,uFAAuF,4BAA4B,sFAAsF,oBAAoB,yFAAyF,uBAAuB,sOAAsO,E;;;;;;;;;;;;;;;;;ACAtuQ;IAK9B,sBAAsB,SAAtB,sBAAsB;IAqBjC;QAjBA,cAAS,GAAG;YACV,QAAQ,EAAE,oCAAoC;YAC9C,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,CAAC;YACd,eAAe,EAAE,sCAAsC;SACxD,CAAC;QAEF,eAAU,GAAG;YACX,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;YACZ,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,EAAE;YACZ,eAAe,EAAE,EAAE;YACnB,MAAM,EAAE,KAAK;SACd,CAAC;QAGA,IAAI,CAAC,aAAa,GAAG;YACnB,SAAS,EAAE;gBACT,QAAQ,EAAE,wBAAwB;aACnC;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,uBAAuB;aAClC;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,sBAAsB;gBAChC,SAAS,EAAE,qBAAqB,IAAI,CAAC,SAAS,CAAC,WAAW,qBAAqB;gBAC/E,OAAO,EAAE,yDAAyD;aACnE;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,UAAU;gBACpB,KAAK,EAAE,uBAAuB;aAC/B;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,sBAAsB;gBAChC,OAAO,EAAE,iEAAiE;gBAC1E,SAAS,EAAE,6BAA6B,IAAI,CAAC,SAAS,CAAC,WAAW,aAAa;aAChF;YACD,eAAe,EAAE;gBACf,QAAQ,EAAE,mCAAmC;gBAC7C,gBAAgB,EAAE,sBAAsB;aACzC;YACD,MAAM,EAAE;gBACN,YAAY,EAAE,6CAA6C;aAC5D;SACF,CAAC;IACJ,CAAC;CACF;;AApDY,sBAAsB;IAHlC,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;;GACW,sBAAsB,CAoDlC;AApDkC;;;;;;;;;;;;;;;;;;;;ACLM;AACc;AAEiB;AAExE,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oFAAwB;QACnC,IAAI,EAAE;YACJ,KAAK,EAAE,iBAAiB;SACzB;KACF;CACF,CAAC;IAMW,4BAA4B,SAA5B,4BAA4B;CAAG;AAA/B,4BAA4B;IAJxC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,4BAA4B,CAAG;AAAH;;;;;;;;;;;;;ACnBzC;AAAe,+EAAgB,iBAAiB,GAAG,6CAA6C,uTAAuT,E","file":"default~validation-forms-validation-forms-module~views-business-technical-business-technical-module~~fb80271e-es2015.js","sourcesContent":["import { Component } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\n\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  templateUrl: './validation-forms.component.html',\n  styleUrls: ['./validation-forms.component.scss'],\n  providers: [ValidationFormsService],\n})\nexport class ValidationFormsComponent {\n  simpleForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group(\n      {\n        firstName: ['', [Validators.required]],\n        lastName: ['', [Validators.required]],\n        username: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.usernameMin),\n            Validators.pattern(this.vf.formRules.nonEmpty),\n          ],\n        ],\n        email: ['', [Validators.required, Validators.email]],\n        password: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.passwordMin),\n            Validators.pattern(this.vf.formRules.passwordPattern),\n          ],\n        ],\n        confirmPassword: ['', [Validators.required]],\n        accept: [false, [Validators.requiredTrue]],\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.simpleForm.controls;\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.simpleForm.reset();\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.simpleForm.status === 'VALID';\n  }\n\n  onSubmit() {\n    console.warn(this.onValidate(), this.simpleForm.value);\n\n    if (this.onValidate()) {\n      // TODO: Use EventEmitter with form value\n      console.warn(this.simpleForm.value);\n      alert('SUCCESS!');\n    }\n  }\n}\n","export default \"<div class=\\\"fade-in\\\">\\n  <c-row>\\n    <c-col md=\\\"12\\\">\\n      <c-card>\\n        <c-card-header>\\n          Form Validation\\n        </c-card-header>\\n        <c-card-body>Angular Form Validation\\n          <hr>\\n          <c-row>\\n            <c-col md=\\\"6\\\" >\\n              <h6>Simple Form</h6>\\n              <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">First name</label>\\n                  <input cInput\\n                         id=\\\"firstName\\\"\\n                         formControlName=\\\"firstName\\\"\\n                         placeholder=\\\"First name\\\"\\n                         autocomplete=\\\"given-name\\\"\\n                         required\\n                         [autofocus]=\\\"true\\\"\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\n                  <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['firstName'].errors.required\\\">First Name is required</div>\\n                  </div>\\n                </c-form-group>\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Last name</label>\\n                  <input cInput\\n                         id=\\\"lastName\\\"\\n                         formControlName=\\\"lastName\\\"\\n                         placeholder=\\\"Last name\\\"\\n                         autocomplete=\\\"family-name\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid':  (submitted || f.lastName.touched) && f.lastName.invalid, 'is-valid': f.lastName.touched && f.lastName.valid }\\\" />\\n                  <div *ngIf=\\\"submitted && f['lastName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['lastName'].errors.required\\\">Last Name is required</div>\\n                  </div>\\n                </c-form-group>\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"username\\\">Username</label>\\n                  <input cInput\\n                         id=\\\"username\\\"\\n                         formControlName=\\\"username\\\"\\n                         placeholder=\\\"Username\\\"\\n                         autocomplete=\\\"username\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.username.touched) && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['username'].errors.required\\\">Username is required</div>\\n                    <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}</div>\\n                    <div *ngIf=\\\"f['username'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\n                  </div>\\n                </c-form-group>\\n                <c-form-group>\\n                  <label class=\\\"col-form-label\\\" for=\\\"email\\\">Email</label>\\n                  <input cInput\\n                         id=\\\"email\\\"\\n                         type=\\\"email\\\"\\n                         formControlName=\\\"email\\\"\\n                         placeholder=\\\"Email\\\"\\n                         autocomplete=\\\"email\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\n                  <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['email'].errors.required\\\">Email is required</div>\\n                    <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\n                  </div>\\n                </c-form-group>\\n                <c-row>\\n                  <c-form-group cCol md=\\\"6\\\" >\\n                    <label class=\\\"col-form-label\\\" for=\\\"password\\\">Password</label>\\n                    <input cInput\\n                           id=\\\"password\\\"\\n                           type=\\\"password\\\"\\n                           formControlName=\\\"password\\\"\\n                           placeholder=\\\"Password\\\"\\n                           autocomplete=\\\"new-password\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\" />\\n                    <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                      <div *ngIf=\\\"f['password'].errors.minlength\\\">{{formErrors.password.minLength}}</div>\\n                      <div *ngIf=\\\"f['password'].errors.pattern\\\">{{formErrors.password.pattern}}</div>\\n                    </div>\\n                  </c-form-group>\\n                  <c-form-group cCol md=\\\"6\\\" >\\n                    <label class=\\\"col-form-label\\\" for=\\\"confirmPassword\\\">Confirm password</label>\\n                    <input cInput\\n                           id=\\\"confirmPassword\\\"\\n                           type=\\\"password\\\"\\n                           formControlName=\\\"confirmPassword\\\"\\n                           placeholder=\\\"Confirm password\\\"\\n                           autocomplete=\\\"new-password\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && simpleForm.errors, 'is-valid': f.confirmPassword.touched && !simpleForm.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && simpleForm.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"simpleForm.errors['passwordMismatch']\\\">{{formErrors.confirmPassword.passwordMismatch}}</div>\\n                    </div>\\n                  </c-form-group>\\n                </c-row>\\n                <c-form-group>\\n                  <c-form-check variant=\\\"checkbox\\\" custom>\\n                    <input cInput custom\\n                           type=\\\"checkbox\\\"\\n                           id=\\\"accept\\\"\\n                           formControlName=\\\"accept\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && f.accept.invalid, 'is-valid': f.accept.valid }\\\" />\\n                    <label cLabel custom for=\\\"accept\\\">I accept the terms of use</label>\\n                    <c-form-feedback *ngIf=\\\"submitted && f['accept'].invalid\\\" [valid]=\\\"false\\\">\\n                      <div *ngIf=\\\"f['accept'].errors.required\\\">You have to accept our Terms and Conditions</div>\\n                    </c-form-feedback>\\n                  </c-form-check>\\n                </c-form-group>\\n                <c-form-group>\\n                  <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\" [tabindex]=\\\"'0'\\\">Submit</button>\\n                  <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                  <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Reset</button>\\n                </c-form-group>\\n              </form>\\n            </c-col>\\n            <c-col md=\\\"6\\\">\\n              <c-card class=\\\"bg-dark\\\" [ngClass]=\\\"{ 'bg-info' : simpleForm.valid }\\\">\\n                <c-card-body>\\n                  <pre class=\\\"text-white\\\">Value: <code>{{ simpleForm.value | json }}</code></pre>\\n                  <ul>\\n                    <li>\\n                      Status: {{ simpleForm.status }}\\n                    </li>\\n                    <li>\\n                      Errors: {{ simpleForm.errors | json }}\\n                    </li>\\n                    <li>\\n                      Valid: {{ simpleForm.valid }}\\n                    </li>\\n                    <li>\\n                      Pristine: {{ simpleForm.pristine }}\\n                    </li>\\n                  </ul>\\n                </c-card-body>\\n              </c-card>\\n             </c-col>\\n          </c-row>\\n        </c-card-body>\\n      </c-card>\\n    </c-col>\\n  </c-row>\\n</div>\\n\";","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ValidationFormsComponent } from './validation-forms.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ValidationFormsComponent,\n    data: {\n      title: 'Form Validation',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ValidationFormsRoutingModule {}\n","export default \".btn:disabled {\\n  cursor: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcdmFsaWRhdGlvbi1mb3Jtcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7QUFDRiIsImZpbGUiOiJ2YWxpZGF0aW9uLWZvcm1zLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ0bjpkaXNhYmxlZCB7XG4gIGN1cnNvcjogYXV0bztcbn1cbiJdfQ== */\";"],"sourceRoot":"webpack:///"}