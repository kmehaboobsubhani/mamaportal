{"version":3,"sources":["webpack:///src/app/views/tables/data-tables/data-tables.component.scss","webpack:///src/app/views/tables/data-tables/data-tables-routing.module.ts","webpack:///src/app/views/tables/data-tables/data-tables.component.html","webpack:///src/app/views/tables/data-tables/data-tables.module.ts","webpack:///src/app/views/tables/data-tables/data-tables.service.ts","webpack:///src/app/views/tables/data-tables/data-tables.component.ts","webpack:///src/app/views/tables/data-tables/data-tables-filter.pipe.ts"],"names":["routes","path","component","data","title","DataTablesRoutingModule","imports","forChild","exports","DataTablesInitModule","declarations","DataTablesService","http","dataUrl","get","pipe","handleError","error","ErrorEvent","console","message","status","DataTablesComponent","dataTableService","filterQuery","sortByWordLength","a","name","length","getData","subscribe","setTimeout","num","regDate","date","Date","toLocaleDateString","year","month","day","selector","template","providers","DataFilterPipe","array","query","row","indexOf"],"mappings":"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","file":"data-tables-data-tables-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkYXRhLXRhYmxlcy5jb21wb25lbnQuc2NzcyJ9 */\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DataTablesComponent } from './data-tables.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DataTablesComponent,\r\n    data: {\r\n      title: 'Data Table',\r\n    },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class DataTablesRoutingModule {}\r\n","export default \"<div class=\\\"fade-in\\\">\\r\\n  <c-card>\\r\\n    <c-card-header>\\r\\n      DataTable\\r\\n      <c-card-header-actions>\\r\\n        <a\\r\\n          href=\\\"https://github.com/mariuszfoltak/angular2-datatable\\\"\\r\\n          target=\\\"_blank\\\"\\r\\n          class=\\\"card-header-action\\\"\\r\\n        >\\r\\n          <small class=\\\"text-muted\\\">docs</small>\\r\\n        </a>\\r\\n      </c-card-header-actions>\\r\\n    </c-card-header>\\r\\n    <c-card-body>\\r\\n      <c-row class=\\\"mb-3\\\">\\r\\n        <c-col md=\\\"4\\\" class=\\\"offset-md-8\\\">\\r\\n          <div class=\\\"input-group\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n              <span class=\\\"input-group-text\\\"><i class=\\\"cil-search\\\"></i></span>\\r\\n            </div>\\r\\n            <input cInput\\r\\n\\r\\n              [(ngModel)]=\\\"filterQuery\\\"\\r\\n              placeholder=\\\"Search by name\\\"\\r\\n            />\\r\\n          </div>\\r\\n        </c-col>\\r\\n      </c-row>\\r\\n      <table\\r\\n        class=\\\"table table-striped table-hover table-responsive-lg\\\"\\r\\n        [mfData]=\\\"data | dataFilter: filterQuery\\\"\\r\\n        #mf=\\\"mfDataTable\\\"\\r\\n        [mfRowsOnPage]=\\\"10\\\"\\r\\n      >\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th style=\\\"width: 20%;\\\">\\r\\n              <mfDefaultSorter by=\\\"name\\\" #sortName>\\r\\n                Name\\r\\n                <span\\r\\n                  *ngIf=\\\"sortName.isSortedByMeAsc\\\"\\r\\n                  class=\\\"cil-arrow-top\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n                <span\\r\\n                  *ngIf=\\\"sortName.isSortedByMeDesc\\\"\\r\\n                  class=\\\"cil-arrow-bottom\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n              </mfDefaultSorter>\\r\\n            </th>\\r\\n            <th style=\\\"width: 35%;\\\">\\r\\n              <mfDefaultSorter by=\\\"email\\\" #sortEmail>\\r\\n                Email\\r\\n                <span\\r\\n                  *ngIf=\\\"sortEmail.isSortedByMeAsc\\\"\\r\\n                  class=\\\"cil-arrow-top\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n                <span\\r\\n                  *ngIf=\\\"sortEmail.isSortedByMeDesc\\\"\\r\\n                  class=\\\"cil-arrow-bottom\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n              </mfDefaultSorter>\\r\\n            </th>\\r\\n            <th style=\\\"width: 10%;\\\">\\r\\n              <mfDefaultSorter by=\\\"age\\\" #sortAge>\\r\\n                Age\\r\\n                <span\\r\\n                  *ngIf=\\\"sortAge.isSortedByMeAsc\\\"\\r\\n                  class=\\\"cil-arrow-top\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n                <span\\r\\n                  *ngIf=\\\"sortAge.isSortedByMeDesc\\\"\\r\\n                  class=\\\"cil-arrow-bottom\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n              </mfDefaultSorter>\\r\\n            </th>\\r\\n            <th style=\\\"width: 20%;\\\">\\r\\n              <mfDefaultSorter by=\\\"city\\\" #sortCity>\\r\\n                City\\r\\n                <span\\r\\n                  *ngIf=\\\"sortCity.isSortedByMeAsc\\\"\\r\\n                  class=\\\"cil-arrow-top\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n                <span\\r\\n                  *ngIf=\\\"sortCity.isSortedByMeDesc\\\"\\r\\n                  class=\\\"cil-arrow-bottom\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n              </mfDefaultSorter>\\r\\n            </th>\\r\\n            <th style=\\\"width: 10%;\\\">\\r\\n              <mfDefaultSorter by=\\\"regDate\\\" #sortRegDate>\\r\\n                Registered\\r\\n                <span\\r\\n                  *ngIf=\\\"sortRegDate.isSortedByMeAsc\\\"\\r\\n                  class=\\\"cil-arrow-top\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n                <span\\r\\n                  *ngIf=\\\"sortRegDate.isSortedByMeDesc\\\"\\r\\n                  class=\\\"cil-arrow-bottom\\\"\\r\\n                  aria-hidden=\\\"true\\\"\\r\\n                ></span>\\r\\n              </mfDefaultSorter>\\r\\n            </th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n          <tr *ngFor=\\\"let item of mf.data\\\">\\r\\n            <td>{{ item.name }}</td>\\r\\n            <td>{{ item.email }}</td>\\r\\n            <td class=\\\"text-left\\\">{{ item.age }}</td>\\r\\n            <td>{{ item.city | uppercase }}</td>\\r\\n            <td>{{ item.regDate | date }}</td>\\r\\n<!--            <td>{{ getDate(item.regDate) }}</td>-->\\r\\n          </tr>\\r\\n        </tbody>\\r\\n        <tfoot>\\r\\n          <tr>\\r\\n            <td colspan=\\\"5\\\">\\r\\n              <mfBootstrapPaginator\\r\\n                [rowsOnPageSet]=\\\"[5, 10, 15]\\\"\\r\\n              ></mfBootstrapPaginator>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tfoot>\\r\\n      </table>\\r\\n    </c-card-body>\\r\\n  </c-card>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n// DataTable\r\nimport { DataTableModule } from '@pascalhonegger/ng-datatable';\r\n\r\nimport { CardModule, FormModule, GridModule } from '@coreui/angular';\r\n\r\nimport { DataTablesComponent } from './data-tables.component';\r\nimport { DataFilterPipe } from './data-tables-filter.pipe';\r\n\r\n// Routing\r\nimport { DataTablesRoutingModule } from './data-tables-routing.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        DataTablesRoutingModule,\r\n        DataTableModule,\r\n        CardModule,\r\n        GridModule,\r\n        DataTableModule,\r\n        FormModule,\r\n    ],\r\n  declarations: [DataTablesComponent, DataFilterPipe],\r\n})\r\nexport class DataTablesInitModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\nexport interface IUserData {\r\n  name: string;\r\n  email: string;\r\n  regDate: string;\r\n  city: string;\r\n  age: number;\r\n}\r\n\r\nexport interface ITableData extends Array<IUserData> {\r\n  \r\n}\r\n\r\n@Injectable()\r\nexport class DataTablesService {\r\n  dataUrl = 'assets/data-tables.json';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getData() {\r\n    return this.http.get<ITableData>(this.dataUrl).pipe(\r\n      retry(3), // retry a failed request up to 3 times\r\n      catchError(this.handleError) // then handle the error\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` + `body was: ${error.error}`\r\n      );\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError('Something bad happened; please try again later.');\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { ITableData, DataTablesService } from './data-tables.service';\r\n\r\n@Component({\r\n  selector: 'app-data-tables',\r\n  templateUrl: './data-tables.component.html',\r\n  styleUrls: ['./data-tables.component.scss'],\r\n  providers: [DataTablesService],\r\n})\r\nexport class DataTablesComponent {\r\n  error: any;\r\n  public data: ITableData;\r\n  public filterQuery = '';\r\n\r\n  constructor(private dataTableService: DataTablesService) {\r\n    this.dataTableService.getData().subscribe(\r\n      (data: ITableData) => {\r\n        setTimeout(() => {\r\n          this.data = [...data];\r\n        }, 1000);\r\n      }, // success path\r\n      (error) => (this.error = error) // error path\r\n    );\r\n  }\r\n\r\n  public toInt(num: string) {\r\n    return +num;\r\n  }\r\n\r\n  public sortByWordLength = (a: any) => {\r\n    return a.name.length;\r\n  }\r\n\r\n  public getDate(regDate: string) {\r\n    const date = new Date(regDate);\r\n    return date.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: '2-digit',\r\n    });\r\n  }\r\n}\r\n","import * as _ from 'lodash';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'dataFilter',\r\n})\r\nexport class DataFilterPipe implements PipeTransform {\r\n  transform(array: any[], query: string): any {\r\n    if (query) {\r\n      return _.filter(array, (row) => row.name.indexOf(query) > -1);\r\n    }\r\n    return array;\r\n  }\r\n}\r\n"]}