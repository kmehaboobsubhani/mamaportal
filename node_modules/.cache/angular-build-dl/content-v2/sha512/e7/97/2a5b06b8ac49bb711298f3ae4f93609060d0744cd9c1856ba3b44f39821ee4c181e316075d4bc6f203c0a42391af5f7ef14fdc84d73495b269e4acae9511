{"version":3,"sources":["webpack:///src/app/views/inventory/addStocks/addStocks.component.ts","webpack:///src/app/views/inventory/addStocks/addStocks.component.html","webpack:///src/app/views/inventory/addStocks/addStocks-routing.module.ts","webpack:///src/app/views/inventory/addStocks/addStocks.component.css","webpack:///src/app/views/inventory/addStocks/validation-forms.service.ts","webpack:///src/app/views/inventory/addStocks/addStocks.module.ts"],"names":["confirmPasswordValidator","control","password","get","confirm","value","passwordMismatch","AddStocksComponent","fb","vf","service","commonData","router","addStocks","_lorem","_tabs","header","panel","lorem","icon","submitted","formErrors","errorMessages","createForm","_setTab","filter","tab","disabled","e","console","log","simpleForm","group","active","required","category","costPrice","description","discount","gst","itemId","merchantId","name","sellPrice","threshold","controls","reset","status","AddItems","subscribe","resp","JSON","stringify","statusCode","alert","onValidate","warn","selector","template","providers","routes","path","component","data","title","AddStocksRoutingModule","imports","forChild","exports","ValidationFormsService","formRules","nonEmpty","usernameMin","passwordMin","passwordPattern","firstName","lastName","username","email","confirmPassword","accept","minLength","pattern","requiredTrue","providedIn","AddStocksInitModule","declarations"],"mappings":"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","file":"views-inventory-addStocks-addStocks-module-es5.js","sourcesContent":["import {\r\n    Component,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n  } from '@angular/core';\r\n  import {\r\n    FormGroup,\r\n    FormBuilder,\r\n    Validators,\r\n    FormControl,\r\n    AbstractControl,\r\n    FormGroupName,\r\n  } from '@angular/forms';\r\n  import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n  import { ValidatorFn, ValidationErrors } from '@angular/forms';\r\n  import { ValidationFormsService } from './validation-forms.service';\r\n  import { CommonDataService } from '../../../Common/common-data.service';\r\n  import { DataService } from '../../../service/data.service';\r\n  import { Router } from '@angular/router';\r\n  import { AddStocks } from './addStock';\r\n  /** passwords must match - custom validator */\r\n  export const confirmPasswordValidator: ValidatorFn = (\r\n    control: FormGroup\r\n  ): ValidationErrors | null => {\r\n    const password = control.get('password');\r\n    const confirm = control.get('confirmPassword');\r\n    return password && confirm && password.value === confirm.value\r\n      ? null\r\n      : { passwordMismatch: true };\r\n  };\r\n  \r\n  @Component({\r\n    selector: 'app-tabs',\r\n    templateUrl: './addStocks.component.html',\r\n    styleUrls: ['./addStocks.component.css'],\r\n    providers: [ValidationFormsService],\r\n  })\r\n\r\n  export class AddStocksComponent implements OnDestroy, OnInit {\r\n    addStocks:any = {};\r\n    entryForm: FormGroup;\r\n    private _setTab: number;\r\n    get setTab() {\r\n      return this._setTab;\r\n    }\r\n    set setTab(value: number) {\r\n      this._setTab = value || 0;\r\n    }\r\n    private interval;\r\n  \r\n    private _lorem: string[] = [\r\n        ];\r\n    public get lorem() {\r\n      return [...this._lorem];\r\n    }\r\n  \r\n    private _tabs: any[] = [\r\n      { header: 'Merchant Info', panel: this.lorem[0], icon: 'cil-user' },\r\n      { header: 'Payment Info', panel: this.lorem[1], icon: 'cil-mobile' },\r\n      { header: 'Payment Gateway', panel: this.lorem[1], icon: 'cil-credit-card' },\r\n      \r\n      //{ header: 'Certificates', panel: this.lorem[3], icon: 'cil-envelope-closed' },\r\n    ];\r\n  \r\n    public get tabs() {\r\n      // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n      // console.log('tabs:', tabs);\r\n      // return tabs;\r\n      return this._tabs;\r\n    }\r\n  \r\n    public get tabs2() {\r\n      // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n      // console.log('tabs:', tabs);\r\n      // return tabs;\r\n      return this._tabs.filter((tab) => !tab.disabled);\r\n    }\r\n  \r\n    simpleForm: FormGroup;\r\n    submitted = false;\r\n    formErrors: any;\r\n  \r\n    constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\r\n      this.formErrors = this.vf.errorMessages;\r\n      this.createForm();\r\n    }\r\n  \r\n    ngOnInit() {\r\n  \r\n    }\r\n  \r\n    ngOnDestroy(): void {\r\n      // clearInterval(this.interval);\r\n    }\r\n  \r\n  \r\n  \r\n    onTabChange(e) {\r\n      console.log('onTabChange', e);\r\n    }\r\n  \r\n    createForm() {\r\n      this.simpleForm = this.fb.group(\r\n        {         \r\n          active : ['', [Validators.required]],\r\n          category : ['', [Validators.required]],\r\n          costPrice : ['', [Validators.required]],\r\n          description : ['', [Validators.required]],\r\n          discount : ['', [Validators.required]],\r\n          gst : ['', [Validators.required]],\r\n          itemId: ['', [Validators.required]],\r\n          merchantId : ['', [Validators.required]],\r\n          name : ['', [Validators.required]],\r\n          sellPrice : ['', [Validators.required]],\r\n          threshold : ['', [Validators.required]],\r\n        },\r\n      );\r\n    }\r\n  \r\n    // convenience getter for easy access to form fields\r\n    get f() {\r\n      return this.simpleForm.controls;\r\n    }\r\n  \r\n    onReset() {\r\n      this.submitted = false;\r\n      this.simpleForm.reset();\r\n    }\r\n  \r\n    onValidate() {\r\n      this.submitted = true;\r\n  \r\n      // stop here if form is invalid\r\n      return this.simpleForm.status === 'VALID';\r\n    }\r\n  \r\n    onAddItems(addStocks : AddStocks){\r\n      debugger;\r\n      this.service.AddItems(addStocks).subscribe((resp: any) => {\r\n        console.log(\"login Reponse:::\" + JSON.stringify(resp));\r\n        if(resp && resp.statusCode == 200) {\r\n            console.log(\"Sucess\")\r\n            alert('SUCCESS!');\r\n        }    \r\n      });\r\n    }\r\n  \r\n    onSubmit() {\r\n      debugger;\r\n      //console.warn(this.onValidate(), this.simpleForm.value);\r\n      if (this.onValidate()) {\r\n        console.warn(this.simpleForm.value);\r\n        alert('SUCCESS!');\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n  ","export default \"<div class=\\\"container-fluid\\\">\\r\\n    <form [formGroup]=\\\"entryForm\\\" novalidate>\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <div class=\\\"float-left\\\">\\r\\n            <h3 class=\\\"text-info\\\">Add Stock</h3>\\r\\n          </div>\\r\\n          <div class=\\\"float-right\\\">\\r\\n            <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/items']\\\"><i class=\\\"fa fa-arrow-left\\\"></i> Back to Stock List</a>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n  \\r\\n          <ng-container>\\r\\n            <c-col md=\\\"12\\\">\\r\\n              <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                <c-row>\\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"name\\\">Name :</h6>\\r\\n                    <input cInput id=\\\"name\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" autocomplete=\\\"given-name\\\" required\\r\\n                      [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.name.touched) && f.name.invalid, 'is-valid': f.category.touched && f.name.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['name'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['name'].errors.required\\\">Name is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"category\\\">category :</h6>\\r\\n                    <input cInput id=\\\"category\\\" formControlName=\\\"category\\\" placeholder=\\\"category\\\" autocomplete=\\\"given-name\\\" required\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.category.touched) && f.category.errors, 'is-valid': f.description.touched && !f.category.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['category'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['category'].errors.required\\\">category is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"description\\\">Description :</h6>\\r\\n                    <input cInput id=\\\"description\\\" formControlName=\\\"description\\\" placeholder=\\\"description\\\"\\r\\n                      autocomplete=\\\"family-name\\\" required\\r\\n                      [ngClass]=\\\"{ 'is-invalid':  (submitted || f.description.touched) && f.description.invalid, 'is-valid': f.itemId.touched && f.description.valid }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['description'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['description'].errors.required\\\">Description is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                </c-row>\\r\\n                <c-row>\\r\\n                  <c-form-group cCol md=\\\"6\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"itemId\\\">ItemId :</h6>\\r\\n                    <input cInput id=\\\"itemId\\\" formControlName=\\\"itemId\\\" placeholder=\\\"item Id\\\" autocomplete=\\\"given-name\\\"\\r\\n                      required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.itemId.touched) && f.itemId.invalid, 'is-valid': f.merchantId.touched && f.itemId.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['itemId'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['itemId'].errors.required\\\">ItemId is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                  <c-form-group cCol md=\\\"6\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"merchantId\\\">MerchantId :</h6>\\r\\n                    <input cInput id=\\\"merchantId\\\" formControlName=\\\"merchantId\\\" placeholder=\\\"merchantId\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.gst.touched && f.merchantId.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['merchantId'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['merchantId'].errors.required\\\">merchantId is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n  \\r\\n                </c-row>\\r\\n                <c-row>\\r\\n                  <c-form-group cCol md=\\\"6\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"gst\\\">Gst Number :</h6>\\r\\n                    <input cInput id=\\\"gst\\\" formControlName=\\\"gst\\\" placeholder=\\\"gstNumber\\\" autocomplete=\\\"given-name\\\"\\r\\n                      required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.gst.touched) && f.gst.invalid, 'is-valid': f.discount.touched && f.gst.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['gst'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['gst'].errors.required\\\">Gst Number is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                  <c-form-group cCol md=\\\"6\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"discount\\\">Discount :</h6>\\r\\n                    <input cInput id=\\\"discount\\\" formControlName=\\\"discount\\\" placeholder=\\\"discount\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.discount.touched) && f.discount.invalid, 'is-valid': f.costPrice.touched && f.discount.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['discount'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['discount'].errors.required\\\">Discount is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                </c-row>\\r\\n                <c-row>\\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"costPrice\\\">costPrice :</h6>\\r\\n                    <input cInput id=\\\"costPrice\\\" formControlName=\\\"costPrice\\\" placeholder=\\\"costPrice\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.costPrice.touched) && f.costPrice.invalid, 'is-valid': f.sellPrice.touched && f.costPrice.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['costPrice'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['costPrice'].errors.required\\\">costPrice is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n  \\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"sellPrice\\\">sellPrice :</h6>\\r\\n                    <input cInput id=\\\"sellPrice\\\" formControlName=\\\"sellPrice\\\" placeholder=\\\"sellPrice\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.sellPrice.touched) && f.sellPrice.invalid, 'is-valid': f.threshold.touched && f.sellPrice.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['sellPrice'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['sellPrice'].errors.required\\\">sellPrice is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n  \\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"threshold\\\">threshold :</h6>\\r\\n                    <input cInput id=\\\"threshold\\\" formControlName=\\\"threshold\\\" placeholder=\\\"threshold\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.threshold.touched) && f.threshold.invalid, 'is-valid': f.active.touched && f.threshold.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['threshold'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['threshold'].errors.required\\\">threshold is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                </c-row>\\r\\n                <c-row>\\r\\n  \\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <h6 class=\\\"col-form-label\\\" for=\\\"active\\\">active :</h6>\\r\\n                    <input cInput id=\\\"active\\\" formControlName=\\\"active\\\" placeholder=\\\"active\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.active.touched) && f.active.invalid, 'is-valid': f.active.touched && f.active.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['active'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['active'].errors.required\\\">active is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                </c-row>\\r\\n  \\r\\n                <c-form-group>\\r\\n                  <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onAddItems(simpleForm.value)\\\"\\r\\n                     >Submit</button>\\r\\n                  <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\"  (click)=\\\"onValidate()\\\"\\r\\n                    >Validate</button>\\r\\n                  <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n                </c-form-group>\\r\\n              </form>\\r\\n            </c-col>\\r\\n          </ng-container>\\r\\n  \\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AddStocksComponent } from './addStocks.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AddStocksComponent,\r\n    data: {\r\n      title: 'Add Stocks',\r\n    },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AddStocksRoutingModule {}\r\n","export default \"::ng-deep .card-body {\\r\\n    flex: 1 1 auto;\\r\\n    min-height: 1px;\\r\\n    padding: 1.25rem;\\r\\n    margin-bottom: 280px;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .nav-tabs-boxed .tab-content {\\r\\n    padding: 0.75rem 1.25rem;\\r\\n    border: 1px solid;\\r\\n    border-radius: 0 0.25rem 0.25rem 0.25rem;\\r\\n    color: #768192;\\r\\n    background-color: #fff;\\r\\n    border-color: #d8dbe0;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .card-style {\\r\\n    border: none;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZFN0b2Nrcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksY0FBYztJQUNkLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsb0JBQW9CO0VBQ3RCOztFQUVBO0lBQ0Usd0JBQXdCO0lBQ3hCLGlCQUFpQjtJQUNqQix3Q0FBd0M7SUFDeEMsY0FBYztJQUNkLHNCQUFzQjtJQUN0QixxQkFBcUI7RUFDdkI7O0VBRUE7SUFDRSxZQUFZO0VBQ2QiLCJmaWxlIjoiYWRkU3RvY2tzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XHJcbiAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgIG1pbi1oZWlnaHQ6IDFweDtcclxuICAgIHBhZGRpbmc6IDEuMjVyZW07XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyODBweDtcclxuICB9XHJcbiAgXHJcbiAgOjpuZy1kZWVwIC5uYXYtdGFicy1ib3hlZCAudGFiLWNvbnRlbnQge1xyXG4gICAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiAwIDAuMjVyZW0gMC4yNXJlbSAwLjI1cmVtO1xyXG4gICAgY29sb3I6ICM3NjgxOTI7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjZDhkYmUwO1xyXG4gIH1cclxuICBcclxuICA6Om5nLWRlZXAgLmNhcmQtc3R5bGUge1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gIH0iXX0= */\";","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DataTableModule } from '@pascalhonegger/ng-datatable';\r\nimport { AddStocksComponent } from './addStocks.component';\r\nimport { AddStocksRoutingModule } from './addStocks-routing.module';\r\n\r\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\r\nimport { IconModule } from '@coreui/icons-angular';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ValidationFormsRoutingModule } from '../../forms/validation-forms/validation-forms-routing.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        AddStocksRoutingModule,\r\n        DataTableModule,\r\n        CardModule,\r\n        GridModule,\r\n        DataTableModule,\r\n        FormModule,\r\n        CommonModule,\r\n        AddStocksRoutingModule,\r\n        IconModule,\r\n        SwitchModule,\r\n        PaginationModule,\r\n        FormsModule,\r\n        TabsetModule,\r\n        BadgeModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        ValidationFormsRoutingModule,\r\n        GridModule,\r\n        CardModule,\r\n        ButtonModule,\r\n        BadgeModule,\r\n        FormModule,\r\n    ],\r\n  declarations: [AddStocksComponent],\r\n})\r\nexport class AddStocksInitModule {}\r\n"]}