{"version":3,"sources":["./src/app/views/business-technical/validation-forms.service.ts","./src/app/views/business-technical/business-technical-routing.module.ts","./src/app/views/business-technical/business-technical.component.css","./src/app/views/business-technical/business-technical-module.ts","./src/app/views/business-technical/business-technical.component.ts","./src/app/views/business-technical/business-technical.component.html"],"names":[],"mappings":";;;;;;;;;;;;;;;AAA2C;IAK9B,sBAAsB,SAAtB,sBAAsB;IAqBjC;QAjBA,cAAS,GAAG;YACV,QAAQ,EAAE,oCAAoC;YAC9C,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,CAAC;YACd,eAAe,EAAE,sCAAsC;SACxD,CAAC;QAEF,eAAU,GAAG;YACX,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;YACZ,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,EAAE;YACZ,eAAe,EAAE,EAAE;YACnB,MAAM,EAAE,KAAK;SACd,CAAC;QAGA,IAAI,CAAC,aAAa,GAAG;YACnB,SAAS,EAAE;gBACT,QAAQ,EAAE,wBAAwB;aACnC;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,uBAAuB;aAClC;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,sBAAsB;gBAChC,SAAS,EAAE,qBAAqB,IAAI,CAAC,SAAS,CAAC,WAAW,qBAAqB;gBAC/E,OAAO,EAAE,yDAAyD;aACnE;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,UAAU;gBACpB,KAAK,EAAE,uBAAuB;aAC/B;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,sBAAsB;gBAChC,OAAO,EAAE,iEAAiE;gBAC1E,SAAS,EAAE,6BAA6B,IAAI,CAAC,SAAS,CAAC,WAAW,aAAa;aAChF;YACD,eAAe,EAAE;gBACf,QAAQ,EAAE,mCAAmC;gBAC7C,gBAAgB,EAAE,sBAAsB;aACzC;YACD,MAAM,EAAE;gBACN,YAAY,EAAE,6CAA6C;aAC5D;SACF,CAAC;IACJ,CAAC;CACF;;AApDY,sBAAsB;IAHlC,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;;GACW,sBAAsB,CAoDlC;AApDkC;;;;;;;;;;;;;;;;;;;;ACLM;AACc;AACqB;AAE5E,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wFAA0B;QACrC,IAAI,EAAE;YACJ,KAAK,EAAE,mBAAmB;SAC3B;KACF;CACF,CAAC;IAMW,8BAA8B,SAA9B,8BAA8B;CAAG;AAAjC,8BAA8B;IAJ1C,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,8BAA8B,CAAG;AAAH;;;;;;;;;;;;;AClB3C;AAAe,sFAAuB,uBAAuB,wBAAwB,yBAAyB,6BAA6B,OAAO,oDAAoD,iCAAiC,0BAA0B,iDAAiD,uBAAuB,+BAA+B,8BAA8B,OAAO,mCAAmC,qBAAqB,OAAO,+CAA+C,2/BAA2/B,E;;;;;;;;;;;;;;;;;;;;;;;;;ACAv8C;AACN;AAEmF;AACzE;AACkC;AACT;AAChB;AACM;AACuC;IA0B5F,uBAAuB,SAAvB,uBAAuB;CAAG;AAA1B,uBAAuB;IAxBnC,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YAChB,iGAA8B;YAC1B,0DAAU;YACV,0DAAU;YACV,gEAAU;YACV,4DAAY;YACZ,yEAAgB;YAChB,0DAAW;YACX,4DAAY;YACZ,2DAAW;YACX,0DAAW;YACX,4DAAY;YACZ,kEAAmB;YACnB,oHAA4B;YAC5B,0DAAU;YACV,0DAAU;YACV,4DAAY;YACZ,2DAAW;YACX,0DAAU;SACX;QACD,YAAY,EAAE,CAAC,wFAA0B,CAAC;KAC3C,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACnCM;AAQlB;AAG4C;AAMpE,8CAA8C;AACvC,MAAM,wBAAwB,GAAgB,CACnD,OAAkB,EACO,EAAE;IAC3B,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC/C,OAAO,QAAQ,IAAI,OAAO,IAAI,QAAQ,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK;QAC5D,CAAC,CAAC,IAAI;QACN,CAAC,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC;AACjC,CAAC,CAAC;IAQW,0BAA0B,SAA1B,0BAA0B;IA0BrC,YAAoB,EAAe,EAAS,EAA0B;QAAlD,OAAE,GAAF,EAAE,CAAa;QAAS,OAAE,GAAF,EAAE,CAAwB;QAxBtE,cAAS,GAAG,KAAK,CAAC;QAKV,UAAK,GAAU;QAErB,gFAAgF;SACjF,CAAC;QAiBA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAjBD,IAAW,IAAI;QACb,mFAAmF;QACnF,8BAA8B;QAC9B,eAAe;QACf,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAW,KAAK;QACd,mFAAmF;QACnF,8BAA8B;QAC9B,eAAe;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAOD,OAAO;QACL,QAAQ,CAAC;QACT,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,IAAI;QAEF,QAAQ,CAAC;QACT,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAC7B;YACE,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrC,QAAQ,EAAE;gBACR,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC;oBACnD,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;iBAC/C;aACF;YACD,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;YACpD,QAAQ,EAAE;gBACR,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC;oBACnD,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC;iBACtD;aACF;YACD,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,yDAAU,CAAC,YAAY,CAAC,CAAC;SAC3C,EACD,EAAE,UAAU,EAAE,wBAAwB,EAAE,CACzC,CAAC;IACJ,CAAC;IAED,oDAAoD;IACpD,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,+BAA+B;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,OAAO,CAAC;IAC5C,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEvD,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACrB,yCAAyC;YACzC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACpC,KAAK,CAAC,UAAU,CAAC,CAAC;SACnB;IACH,CAAC;IAED,SAAS;QACP,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEvD,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACrB,yCAAyC;YACzC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACpC,KAAK,CAAC,UAAU,CAAC,CAAC;SACnB;IACH,CAAC;CACF;;YA1IC,0DAAW;YAQJ,gFAAsB;;AAuBlB,0BAA0B;IANtC,+DAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,+FAAkD;QAElD,SAAS,EAAE,CAAC,gFAAsB,CAAC;;KACpC,CAAC;mFA2BwB,0DAAW,EAAa,gFAAsB;GA1B3D,0BAA0B,CA2GtC;AA3GsC;;;;;;;;;;;;;AClCvC;AAAe,itBAAkpB,YAAY,6IAA6I,u+BAAu+B,gIAAgI,gvBAAgvB,6HAA6H,0uBAA0uB,6HAA6H,qUAAqU,+BAA+B,wIAAwI,6BAA6B,ygBAAygB,gHAAgH,yTAAyT,wBAAwB,siBAAsiB,gIAAgI,00BAA00B,4HAA4H,2UAA2U,+BAA+B,4IAA4I,6BAA6B,soBAAsoB,4GAA4G,yQAAyQ,6CAA6C,4dAA4d,0EAA0E,woFAAwoF,gIAAgI,+vBAA+vB,6HAA6H,uuBAAuuB,6HAA6H,+TAA+T,+BAA+B,wIAAwI,6BAA6B,uqEAAuqE,gDAAgD,+fAA+f,4CAA4C,wlBAAwlB,6CAA6C,ohBAAohB,+CAA+C,6sBAA6sB,E","file":"views-business-technical-business-technical-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidationFormsService {\r\n\r\n  errorMessages: any;\r\n\r\n  formRules = {\r\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\r\n    usernameMin: 5,\r\n    passwordMin: 6,\r\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\r\n  };\r\n\r\n  formErrors = {\r\n    firstName: '',\r\n    lastName: '',\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    accept: false,\r\n  };\r\n\r\n  constructor() {\r\n    this.errorMessages = {\r\n      firstName: {\r\n        required: 'First name is required',\r\n      },\r\n      lastName: {\r\n        required: 'Last name is required',\r\n      },\r\n      username: {\r\n        required: 'Username is required',\r\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\r\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\r\n      },\r\n      email: {\r\n        required: 'required',\r\n        email: 'Invalid email address',\r\n      },\r\n      password: {\r\n        required: 'Password is required',\r\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\r\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\r\n      },\r\n      confirmPassword: {\r\n        required: 'Password confirmation is required',\r\n        passwordMismatch: 'Passwords must match'\r\n      },\r\n      accept: {\r\n        requiredTrue: 'You have to accept our Terms and Conditions'\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BusinessTechnicalComponent } from './business-technical.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BusinessTechnicalComponent,\r\n    data: {\r\n      title: 'BusinessTechnical',\r\n    }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class BusinessTechnicalRoutingModule {}\r\n","export default \"::ng-deep .card-body {\\r\\n    flex: 1 1 auto;\\r\\n    min-height: 1px;\\r\\n    padding: 1.25rem;\\r\\n    margin-bottom: 280px;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .nav-tabs-boxed .tab-content {\\r\\n    padding: 0.75rem 1.25rem;\\r\\n    border: 1px solid;\\r\\n    border-radius: 0 0.25rem 0.25rem 0.25rem;\\r\\n    color: #768192;\\r\\n    background-color: #fff;\\r\\n    border-color: #d8dbe0;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .card-style {\\r\\n    border: none;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1c2luZXNzLXRlY2huaWNhbC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksY0FBYztJQUNkLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsb0JBQW9CO0VBQ3RCOztFQUVBO0lBQ0Usd0JBQXdCO0lBQ3hCLGlCQUFpQjtJQUNqQix3Q0FBd0M7SUFDeEMsY0FBYztJQUNkLHNCQUFzQjtJQUN0QixxQkFBcUI7RUFDdkI7O0VBRUE7SUFDRSxZQUFZO0VBQ2QiLCJmaWxlIjoiYnVzaW5lc3MtdGVjaG5pY2FsLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XHJcbiAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgIG1pbi1oZWlnaHQ6IDFweDtcclxuICAgIHBhZGRpbmc6IDEuMjVyZW07XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyODBweDtcclxuICB9XHJcbiAgXHJcbiAgOjpuZy1kZWVwIC5uYXYtdGFicy1ib3hlZCAudGFiLWNvbnRlbnQge1xyXG4gICAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiAwIDAuMjVyZW0gMC4yNXJlbSAwLjI1cmVtO1xyXG4gICAgY29sb3I6ICM3NjgxOTI7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjZDhkYmUwO1xyXG4gIH1cclxuICBcclxuICA6Om5nLWRlZXAgLmNhcmQtc3R5bGUge1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gIH0iXX0= */\";","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\r\nimport { IconModule } from '@coreui/icons-angular';\r\nimport { BusinessTechnicalRoutingModule } from './business-technical-routing.module';\r\nimport { BusinessTechnicalComponent } from './business-technical.component';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\nBusinessTechnicalRoutingModule,\r\n    CardModule,\r\n    GridModule,\r\n    IconModule,\r\n    SwitchModule,\r\n    PaginationModule,\r\n    FormsModule,\r\n    TabsetModule,\r\n    BadgeModule,\r\n    FormsModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ValidationFormsRoutingModule,\r\n    GridModule,\r\n    CardModule,\r\n    ButtonModule,\r\n    BadgeModule,\r\n    FormModule,\r\n  ],\r\n  declarations: [BusinessTechnicalComponent],\r\n})\r\nexport class BusinessTechnicalModule {}\r\n","import { Component } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  FormControl,\r\n  AbstractControl,\r\n  FormGroupName,\r\n} from '@angular/forms';\r\n\r\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\r\nimport { ValidationFormsService } from './validation-forms.service';\r\nimport { CommonDataService } from '../../Common/common-data.service';\r\nimport { DataService } from '../../service/data.service';\r\nimport { Router } from '@angular/router';\r\nimport { Business } from './business';\r\n\r\n/** passwords must match - custom validator */\r\nexport const confirmPasswordValidator: ValidatorFn = (\r\n  control: FormGroup\r\n): ValidationErrors | null => {\r\n  const password = control.get('password');\r\n  const confirm = control.get('confirmPassword');\r\n  return password && confirm && password.value === confirm.value\r\n    ? null\r\n    : { passwordMismatch: true };\r\n};\r\n\r\n@Component({\r\n  selector: 'app-business-technical',\r\n  templateUrl: './business-technical.component.html',\r\n  styleUrls: ['./business-technical.component.css'],\r\n  providers: [ValidationFormsService],\r\n})\r\nexport class BusinessTechnicalComponent {\r\n  simpleForm: FormGroup;\r\n  submitted = false;\r\n  formErrors: any;\r\n  showModal: boolean;\r\n  registerForm: FormGroup;\r\n  entryForm: FormGroup;\r\n  private _tabs: any[] = [\r\n    \r\n    //{ header: 'Certificates', panel: this.lorem[3], icon: 'cil-envelope-closed' },\r\n  ];\r\n\r\n  public get tabs() {\r\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n    // console.log('tabs:', tabs);\r\n    // return tabs;\r\n    return this._tabs;\r\n  }\r\n\r\n  public get tabs2() {\r\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n    // console.log('tabs:', tabs);\r\n    // return tabs;\r\n    return this._tabs.filter((tab) => !tab.disabled);\r\n  }\r\n\r\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService) {\r\n    this.formErrors = this.vf.errorMessages;\r\n    this.createForm();\r\n  }\r\n\r\n  showing() { \r\n    debugger;\r\n    this.showModal = true;\r\n  }\r\n \r\n  hide()\r\n  {\r\n    debugger;\r\n    this.showModal = false;\r\n  }\r\n\r\n  createForm() {\r\n    this.simpleForm = this.fb.group(\r\n      {\r\n        firstName: ['', [Validators.required]],\r\n        lastName: ['', [Validators.required]],\r\n        username: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(this.vf.formRules.usernameMin),\r\n            Validators.pattern(this.vf.formRules.nonEmpty),\r\n          ],\r\n        ],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(this.vf.formRules.passwordMin),\r\n            Validators.pattern(this.vf.formRules.passwordPattern),\r\n          ],\r\n        ],\r\n        confirmPassword: ['', [Validators.required]],\r\n        accept: [false, [Validators.requiredTrue]],\r\n      },\r\n      { validators: confirmPasswordValidator }\r\n    );\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.simpleForm.controls;\r\n  }\r\n\r\n  onReset() {\r\n    this.submitted = false;\r\n    this.simpleForm.reset();\r\n  }\r\n\r\n  onValidate() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    return this.simpleForm.status === 'VALID';\r\n  }\r\n\r\n  onSubmit() {\r\n    console.warn(this.onValidate(), this.simpleForm.value);\r\n\r\n    if (this.onValidate()) {\r\n      // TODO: Use EventEmitter with form value\r\n      console.warn(this.simpleForm.value);\r\n      alert('SUCCESS!');\r\n    }\r\n  }\r\n\r\n  onSubmits() {\r\n    console.warn(this.onValidate(), this.simpleForm.value);\r\n\r\n    if (this.onValidate()) {\r\n      // TODO: Use EventEmitter with form value\r\n      console.warn(this.simpleForm.value);\r\n      alert('SUCCESS!');\r\n    }\r\n  }\r\n}\r\n","export default \"<div class=\\\"fade-in\\\">\\r\\n  <c-row>\\r\\n    <c-col md=\\\"100\\\">\\r\\n      <c-card>\\r\\n        <c-card-body>\\r\\n          <!--          <c-tabset [activeTab]=\\\"setTab\\\" (activeTabChange)=\\\"setTab=$event\\\" boxed=\\\"true\\\" [variant]=\\\"'pills'\\\">-->\\r\\n          <!--          <c-tabset [(activeTab)]=\\\"setTab\\\" (activeTabChange)=\\\"onTabChange($event)\\\">-->\\r\\n          <!--          <c-tabset variant=\\\"pills\\\" boxed=\\\"true\\\">-->\\r\\n          <c-tabset boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\r\\n            <c-tablist>\\r\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\r\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\r\\n                {{tab.header}}\\r\\n              </c-tab>\\r\\n            </c-tablist>\\r\\n            <c-tab-content>\\r\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\r\\n                <ng-container *ngIf=\\\"i===0\\\">\\r\\n                  <div class=\\\"fade-in\\\">\\r\\n                    <c-row>\\r\\n                      <c-col md=\\\"12\\\">\\r\\n                        <c-card class=\\\"card-style\\\">\\r\\n\\r\\n                          <c-card-body>\\r\\n\\r\\n                            <c-row>\\r\\n                              <c-col md=\\\"16\\\">\\r\\n                                <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\"\\r\\n                                  class=\\\"needs-validation\\\">\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">Machine Type</label>\\r\\n                                    <input cInput id=\\\"firstName\\\" formControlName=\\\"firstName\\\" placeholder=\\\"Machine Type\\\"\\r\\n                                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['firstName'].errors.required\\\">Machine Type is required</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Address</label>\\r\\n                                    <input cInput id=\\\"lastName\\\" formControlName=\\\"lastName\\\" placeholder=\\\"Address\\\"\\r\\n                                      autocomplete=\\\"family-name\\\" required\\r\\n                                      [ngClass]=\\\"{ 'is-invalid':  (submitted || f.lastName.touched) && f.lastName.invalid, 'is-valid': f.lastName.touched && f.lastName.valid }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['lastName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['lastName'].errors.required\\\">Address is required</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"username\\\">Lattitude</label>\\r\\n                                    <input cInput id=\\\"username\\\" formControlName=\\\"username\\\" placeholder=\\\"Lattitude\\\"\\r\\n                                      autocomplete=\\\"username\\\" required\\r\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.username.touched) && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['username'].errors.required\\\">Lattitude is required</div>\\r\\n                                      <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}\\r\\n                                      </div>\\r\\n                                      <div *ngIf=\\\"f['username'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"email\\\">Longitude</label>\\r\\n                                    <input cInput id=\\\"email\\\" type=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"Longitude\\\"\\r\\n                                      autocomplete=\\\"email\\\" required\\r\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['email'].errors.required\\\">Longitude is required</div>\\r\\n                                      <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">Phone number</label>\\r\\n                                    <input cInput id=\\\"firstName\\\" formControlName=\\\"firstName\\\" placeholder=\\\"Phone number\\\"\\r\\n                                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['firstName'].errors.required\\\">Phone number is required</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n                                  <c-row>\\r\\n                                    <c-form-group cCol md=\\\"6\\\">\\r\\n                                      <label class=\\\"col-form-label\\\" for=\\\"password\\\">Password</label>\\r\\n                                      <input cInput id=\\\"password\\\" type=\\\"password\\\" formControlName=\\\"password\\\"\\r\\n                                        placeholder=\\\"Password\\\" autocomplete=\\\"new-password\\\" required\\r\\n                                        [ngClass]=\\\"{ 'is-invalid': (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\" />\\r\\n                                      <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                        <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\r\\n                                        <div *ngIf=\\\"f['password'].errors.minlength\\\">{{formErrors.password.minLength}}\\r\\n                                        </div>\\r\\n                                        <div *ngIf=\\\"f['password'].errors.pattern\\\">{{formErrors.password.pattern}}</div>\\r\\n                                      </div>\\r\\n                                    </c-form-group>\\r\\n                                    <c-form-group cCol md=\\\"6\\\">\\r\\n                                      <label class=\\\"col-form-label\\\" for=\\\"confirmPassword\\\">Confirm password</label>\\r\\n                                      <input cInput id=\\\"confirmPassword\\\" type=\\\"password\\\"\\r\\n                                        formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm password\\\"\\r\\n                                        autocomplete=\\\"new-password\\\" required\\r\\n                                        [ngClass]=\\\"{ 'is-invalid': submitted && simpleForm.errors, 'is-valid': f.confirmPassword.touched && !simpleForm.errors }\\\" />\\r\\n                                      <div *ngIf=\\\"submitted && simpleForm.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                        <div *ngIf=\\\"simpleForm.errors['passwordMismatch']\\\">\\r\\n                                          {{formErrors.confirmPassword.passwordMismatch}}</div>\\r\\n                                      </div>\\r\\n                                    </c-form-group>\\r\\n                                  </c-row>\\r\\n                                  <c-form-group>\\r\\n                                    <c-form-check variant=\\\"checkbox\\\" custom>\\r\\n                                      <input cInput custom type=\\\"checkbox\\\" id=\\\"accept\\\" formControlName=\\\"accept\\\" required\\r\\n                                        [ngClass]=\\\"{ 'is-invalid': submitted && f.accept.invalid, 'is-valid': f.accept.valid }\\\" />\\r\\n                                      <label cLabel custom for=\\\"accept\\\">I accept the terms of use</label>\\r\\n                                      <c-form-feedback *ngIf=\\\"submitted && f['accept'].invalid\\\" [valid]=\\\"false\\\">\\r\\n                                        <div *ngIf=\\\"f['accept'].errors.required\\\">You have to accept our Terms and\\r\\n                                          Conditions</div>\\r\\n                                      </c-form-feedback>\\r\\n                                    </c-form-check>\\r\\n                                  </c-form-group>\\r\\n                                  <c-form-group>\\r\\n                                    <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\r\\n                                      [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\"\\r\\n                                      [tabindex]=\\\"'0'\\\">Submit</button>\\r\\n                                    <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                                      (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                                    <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\"\\r\\n                                      [tabindex]=\\\"'0'\\\">Reset</button>\\r\\n                                  </c-form-group>\\r\\n                                </form>\\r\\n                              </c-col>\\r\\n\\r\\n                            </c-row>\\r\\n                          </c-card-body>\\r\\n                        </c-card>\\r\\n                      </c-col>\\r\\n                    </c-row>\\r\\n                  </div>\\r\\n\\r\\n                </ng-container>\\r\\n                <ng-container *ngIf=\\\"i===1\\\">\\r\\n                  <div class=\\\"fade-in\\\">\\r\\n                    <c-row>\\r\\n                      <c-col md=\\\"12\\\">\\r\\n                        <c-card class=\\\"card-style\\\">\\r\\n\\r\\n                          <c-card-body>\\r\\n\\r\\n                            <c-row>\\r\\n                              <c-col md=\\\"16\\\">\\r\\n                                <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\"\\r\\n                                  class=\\\"needs-validation\\\">\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">Wifi Name</label>\\r\\n                                    <input cInput id=\\\"firstName\\\" formControlName=\\\"firstName\\\" placeholder=\\\"Wifi Name\\\"\\r\\n                                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['firstName'].errors.required\\\">Wifi name is required</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Controller board</label>\\r\\n                                    <input cInput id=\\\"lastName\\\" formControlName=\\\"lastName\\\"\\r\\n                                      placeholder=\\\"Controller board\\\" autocomplete=\\\"family-name\\\" required\\r\\n                                      [ngClass]=\\\"{ 'is-invalid':  (submitted || f.lastName.touched) && f.lastName.invalid, 'is-valid': f.lastName.touched && f.lastName.valid }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['lastName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['lastName'].errors.required\\\">Controller board is required</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n                                  <c-form-group>\\r\\n                                    <label class=\\\"col-form-label\\\" for=\\\"username\\\">UPI</label>\\r\\n                                    <input cInput id=\\\"username\\\" formControlName=\\\"username\\\" placeholder=\\\"UPI\\\"\\r\\n                                      autocomplete=\\\"username\\\" required\\r\\n                                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.username.touched) && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\r\\n                                    <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                      <div *ngIf=\\\"f['username'].errors.required\\\">UPI is required</div>\\r\\n                                      <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}\\r\\n                                      </div>\\r\\n                                      <div *ngIf=\\\"f['username'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\r\\n                                    </div>\\r\\n                                  </c-form-group>\\r\\n\\r\\n\\r\\n                                  <c-form-group>\\r\\n                                    <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\r\\n                                      [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\"\\r\\n                                      [tabindex]=\\\"'0'\\\">Submit</button>\\r\\n                                    <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                                      (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                                    <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\"\\r\\n                                      [tabindex]=\\\"'0'\\\">Reset</button>\\r\\n                                  </c-form-group>\\r\\n\\r\\n                                </form>\\r\\n                              </c-col>\\r\\n\\r\\n                            </c-row>\\r\\n                          </c-card-body>\\r\\n                        </c-card>\\r\\n                      </c-col>\\r\\n                    </c-row>\\r\\n                  </div>\\r\\n\\r\\n                </ng-container>\\r\\n              </c-tab-pane>\\r\\n            </c-tab-content>\\r\\n          </c-tabset>\\r\\n        </c-card-body>\\r\\n      </c-card>\\r\\n    </c-col>\\r\\n  </c-row>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n<div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\"\\r\\n  aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">Register</h4>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmits()\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>FirstName</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"firstname\\\" class=\\\"form-control\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.firstname.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.firstname.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.firstname.errors.required\\\">FirstName is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Email</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Mobile</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"mobile\\\" class=\\\"form-control\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.mobile.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.mobile.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.mobile.errors\\\">Mobile must be Valid and at least 10 digits</div>\\r\\n\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Password</label>\\r\\n                <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\r\\n        </form>\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";"],"sourceRoot":"webpack:///"}