{"version":3,"sources":["./src/app/views/configuration/Configuration-routing.module.ts","./src/app/views/configuration/configuration.component.html","./src/app/views/configuration/configuration.component.css","./src/app/views/configuration/Configuration.component.ts","./src/app/views/configuration/configuration.module.ts","./src/app/views/configuration/validation-forms.service.ts"],"names":[],"mappings":"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AAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACjC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CA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","file":"views-configuration-configuration-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ConfigurationComponent } from './Configuration.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ConfigurationComponent,\r\n    data: {\r\n      title: 'Configuration',\r\n    }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ConfigurationRoutingModule {}\r\n","export default \"<div class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">\\r\\n      <c-col md=\\\"12\\\">\\r\\n        <c-row>\\r\\n    <c-form-group cCol md=\\\"6\\\">\\r\\n      <div >\\r\\n        <h3 class=\\\"text-success\\\">Configuration</h3>\\r\\n      </div>\\r\\n    </c-form-group>\\r\\n    \\r\\n    <c-form-group cCol md=\\\"6\\\">\\r\\n      <div class=\\\"float-right\\\">\\r\\n        <a style=\\\"color: #FFFFFF;\\\" class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/machines']\\\"><i class=\\\"fa fa-arrow-left\\\"></i> Go Back</a>\\r\\n      </div>\\r\\n    </c-form-group>\\r\\n\\r\\n    </c-row>\\r\\n    </c-col>\\r\\n</div>\\r\\n<div class=\\\"fade-in\\\">\\r\\n  <c-row>\\r\\n    <c-col>\\r\\n      <c-card>\\r\\n        <c-card-body>\\r\\n          <c-tabset  fill=\\\"fill\\\" variant=\\\"pills\\\" boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\r\\n            <c-tablist>\\r\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\r\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\r\\n                {{tab.header}}\\r\\n              </c-tab>\\r\\n            </c-tablist>\\r\\n            <c-tab-content>\\r\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\r\\n\\r\\n                <ng-container *ngIf=\\\"i===0\\\">\\r\\n                  <c-col>\\r\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                     \\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"cid\\\">Cid :</h4>\\r\\n                          <input cInput id=\\\"cid\\\" formControlName=\\\"cid\\\" placeholder=\\\"cid\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.cid.touched) && f.cid.invalid, 'is-valid': f.loginId.touched && f.cid.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['cid'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['cid'].errors.required\\\">cid is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"crc\\\">Crc :</h4>\\r\\n                          <input cInput id=\\\"crc\\\" formControlName=\\\"crc\\\" placeholder=\\\"crc\\\" autocomplete=\\\"crc\\\" required\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.crc.touched) && f.crc.errors, 'is-valid': f.merchantId.touched && !f.crc.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['crc'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['crc'].errors.required\\\">crc is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" >Ica :</h4>\\r\\n                          <button cButton color=\\\"btn btn-primary\\\" type=\\\"submit\\\" (click)=\\\"showing()\\\" [tabindex]=\\\"'0'\\\"\\r\\n                            >Add (ICA)\\r\\n                          </button>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"imx\\\">Imx :</h4>\\r\\n                          <input cInput id=\\\"imx\\\" formControlName=\\\"imx\\\" placeholder=\\\"imx\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.imx.touched) && f.imx.invalid, 'is-valid': f.gstNo.touched && f.imx.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['imx'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['imx'].errors.required\\\">imx is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"key\\\">Key :</h4>\\r\\n                          <input cInput id=\\\"key\\\" formControlName=\\\"key\\\" placeholder=\\\"key\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.key.touched) && f.key.invalid, 'is-valid': f.billingPlan.touched && f.key.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['key'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['key'].errors.required\\\">key is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"men\\\">Men :</h4>\\r\\n                          <input cInput id=\\\"men\\\" formControlName=\\\"men\\\" placeholder=\\\"men\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.men.touched) && f.men.invalid, 'is-valid': f.phone.touched && f.men.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['men'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['men'].errors.required\\\">men Plan is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mid\\\">Mid :</h4>\\r\\n                          <input cInput id=\\\"mid\\\" formControlName=\\\"mid\\\" placeholder=\\\"mid\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mid.touched) && f.mid.invalid, 'is-valid': f.phone.touched && f.mid.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mid'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mid'].errors.required\\\">mid Plan is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"qmx\\\">Qmx :</h4>\\r\\n                          <input cInput id=\\\"qmx\\\" formControlName=\\\"qmx\\\" placeholder=\\\"qmx\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.qmx.touched) && f.qmx.invalid, 'is-valid': f.address.touched && f.qmx.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['qmx'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['qmx'].errors.required\\\">qmx is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-form-group>\\r\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\r\\n                          (click)=\\\"onSaveBusiness(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                          [tabindex]=\\\"'0'\\\">Submit</button>\\r\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                          (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n                      </c-form-group>\\r\\n                    </form>\\r\\n                \\r\\n                  </c-col>\\r\\n                </ng-container>\\r\\n                <ng-container *ngIf=\\\"i===1\\\">\\r\\n                  \\r\\n                  <c-col md=\\\"12\\\">\\r\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                      <c-card-header>Toaster\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"keys\\\">Key :</h4>\\r\\n                          <input cInput id=\\\"keys\\\" formControlName=\\\"keys\\\" placeholder=\\\"keys\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.keys.touched) && f.keys.invalid, 'is-valid': f.mids.touched && f.keys.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['keys'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['keys'].errors.required\\\">Key is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mids\\\">Machine ID :</h4>\\r\\n                          <input cInput id=\\\"mids\\\" formControlName=\\\"mids\\\" placeholder=\\\"mids\\\"\\r\\n                            autocomplete=\\\"mids\\\" required\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mids.touched) && f.mids.errors, 'is-valid': f.merchantId.touched && !f.mids.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mids'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mids'].errors.required\\\">Machine ID is required</div>\\r\\n\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"nss\\\">No of spring supported in machine:</h4>\\r\\n                          <input cInput id=\\\"nss\\\" formControlName=\\\"nss\\\" placeholder=\\\"nss\\\"\\r\\n                            autocomplete=\\\"family-name\\\" required\\r\\n                            [ngClass]=\\\"{ 'is-invalid':  (submitted || f.nss.touched) && f.nss.invalid, 'is-valid': f.panNo.touched && f.nss.valid }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['nss'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['nss'].errors.required\\\">No of spring supported in machine is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"nse\\\">No of spring enabled in machine :</h4>\\r\\n                          <input cInput id=\\\"nse\\\" formControlName=\\\"nse\\\" placeholder=\\\"nse\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.nse.touched) && f.nse.invalid, 'is-valid': f.gstNo.touched && f.nse.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['nse'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['nse'].errors.required\\\">No of spring enabled in machine is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      </c-card-header>\\r\\n                      <c-row>\\r\\n                        \\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spring number :</h4>\\r\\n                          <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.primaryContact.touched && f.spn.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['spn'].errors.required\\\">Spring number is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"ssc\\\">Spring slot Count :</h4>\\r\\n                          <input cInput id=\\\"ssc\\\" formControlName=\\\"ssc\\\" placeholder=\\\"ssc\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.ssc.touched) && f.ssc.invalid, 'is-valid': f.pincode.touched && f.ssc.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['ssc'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['ssc'].errors.required\\\">Spring slot Count is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                   \\r\\n                    \\r\\n                      <c-row>\\r\\n                      \\r\\n                      <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"cdf\\\" class=\\\"custom-control-input\\\" id=\\\"cdf\\\">\\r\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"cdf\\\">Coin device</label>                     \\r\\n                     </c-form-check>\\r\\n\\r\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"bdf\\\" class=\\\"custom-control-input\\\" id=\\\"bdf\\\">\\r\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"bdf\\\">Bill device</label>                     \\r\\n                     </c-form-check>\\r\\n\\r\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"dsc\\\" class=\\\"custom-control-input\\\" id=\\\"dsc\\\">\\r\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"dsc\\\">Drop sensor self check</label>                     \\r\\n                     </c-form-check>\\r\\n\\r\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"gps\\\" class=\\\"custom-control-input\\\" id=\\\"gps\\\">\\r\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"gps\\\">GPS</label>                     \\r\\n                     </c-form-check>\\r\\n\\r\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"gsm\\\" class=\\\"custom-control-input\\\" id=\\\"gsm\\\">\\r\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"gsm\\\">GSM</label>                     \\r\\n                     </c-form-check>\\r\\n                     \\r\\n                     \\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n\\r\\n                        <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                          <input cInput type=\\\"checkbox\\\" formControlName=\\\"wfi\\\" class=\\\"custom-control-input\\\" id=\\\"wfi\\\">\\r\\n                          <label cLabel class=\\\"custom-control-label\\\" for=\\\"wfi\\\">Wifi</label>                     \\r\\n                         </c-form-check>\\r\\n\\r\\n                         <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                          <input cInput type=\\\"checkbox\\\" formControlName=\\\"tsf\\\" class=\\\"custom-control-input\\\" id=\\\"tsf\\\">\\r\\n                          <label cLabel class=\\\"custom-control-label\\\" for=\\\"tsf\\\">Temperature Sensor</label>                     \\r\\n                         </c-form-check>\\r\\n\\r\\n                         <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\r\\n                          <input cInput type=\\\"checkbox\\\" formControlName=\\\"psf\\\" class=\\\"custom-control-input\\\" id=\\\"psf\\\">\\r\\n                          <label cLabel class=\\\"custom-control-label\\\" for=\\\"psf\\\">Paired Spring flag</label>                     \\r\\n                         </c-form-check>\\r\\n\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mff\\\">Motor Running Feedback :</h4>\\r\\n                          <input cInput id=\\\"mff\\\" formControlName=\\\"mff\\\" placeholder=\\\"mff\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mff.touched) && f.mff.invalid, 'is-valid': f.address.touched && f.mff.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mff'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mff'].errors.required\\\">Motor Running Feedback  is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mcf\\\">Motor current measurement :</h4>\\r\\n                          <input cInput id=\\\"mcf\\\" formControlName=\\\"mcf\\\" placeholder=\\\"mcf\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mcf.touched) && f.mcf.invalid, 'is-valid': f.country.touched && f.mcf.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mcf'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mcf'].errors.required\\\">Motor current measurement is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mtp\\\">Motor Type :</h4>\\r\\n                          <input cInput id=\\\"mtp\\\" formControlName=\\\"mtp\\\" placeholder=\\\"mtp\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mtp.touched) && f.mtp.invalid, 'is-valid': f.pincode.touched && f.mtp.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mtp'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mtp'].errors.required\\\">Motor Type is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mlc\\\">Motor Low current(10mA precision) :</h4>\\r\\n                          <input cInput id=\\\"mlc\\\" formControlName=\\\"mlc\\\" placeholder=\\\"mlc\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mlc.touched) && f.mlc.invalid, 'is-valid': f.primaryContact.touched && f.mlc.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mlc'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mlc'].errors.required\\\">Motor Low current(10mA precision) is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>                   \\r\\n                      <c-row>\\r\\n                        \\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mhc\\\">Motor High current(10mA precision) :</h4>\\r\\n                          <input cInput id=\\\"mhc\\\" formControlName=\\\"mhc\\\"\\r\\n                            placeholder=\\\"mhc\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mhc.touched) && f.mhc.invalid, 'is-valid': f.secondaryContact.touched && f.mhc.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mhc'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mhc'].errors.required\\\">Motor High current(10mA precision) is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"nmc\\\">No of connected motor in paired :</h4>\\r\\n                          <input cInput id=\\\"nmc\\\" formControlName=\\\"nmc\\\"\\r\\n                            placeholder=\\\"nmc\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.nmc.touched) && f.nmc.invalid, 'is-valid': f.nmc.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['nmc'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['nmc'].errors.required\\\">No of connected motor in paired  is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>                        \\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mrp\\\">Motor Rotations Per Pay :</h4>\\r\\n                          <input cInput id=\\\"mrp\\\" formControlName=\\\"mrp\\\" placeholder=\\\"mrp\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mrp.touched) && f.mrp.invalid, 'is-valid': f.primaryContact.touched && f.mrp.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mrp'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mrp'].errors.required\\\">Motor Rotations Per Pay is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"asl\\\">Alternate spring Limit:</h4>\\r\\n                          <input cInput id=\\\"asl\\\" formControlName=\\\"asl\\\"\\r\\n                            placeholder=\\\"asl\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.asl.touched) && f.asl.invalid, 'is-valid': f.asl.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['asl'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['asl'].errors.required\\\">Alternate spring Limit is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                    \\r\\n                   \\r\\n                      <c-row>                       \\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"dfc\\\">Dispense fail safe rotation count :</h4>\\r\\n                          <input cInput id=\\\"dfc\\\" formControlName=\\\"dfc\\\" placeholder=\\\"dfc\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.dfc.touched) && f.dfc.invalid, 'is-valid': f.primaryContact.touched && f.dfc.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['dfc'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['dfc'].errors.required\\\">Dispense fail safe rotation count is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"wsn\\\">WiFi SSID name :</h4>\\r\\n                          <input cInput id=\\\"wsn\\\" formControlName=\\\"wsn\\\"\\r\\n                            placeholder=\\\"wsn\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.wsn.touched) && f.wsn.invalid, 'is-valid': f.secondaryContact.touched && f.wsn.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['wsn'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['wsn'].errors.required\\\">WiFi SSID name is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"wpd\\\">WiFi Password:</h4>\\r\\n                          <input cInput id=\\\"wpd\\\" formControlName=\\\"wpd\\\"\\r\\n                            placeholder=\\\"wpd\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.wpd.touched) && f.wpd.invalid, 'is-valid': f.wpd.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['wpd'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['wpd'].errors.required\\\">WiFi Password is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"3\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mid\\\">New Master Locker ID :</h4>\\r\\n                          <input cInput id=\\\"mid\\\" formControlName=\\\"mid\\\" placeholder=\\\"mid\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mid.touched) && f.mid.invalid, 'is-valid': f.pincode.touched && f.mid.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mid'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mid'].errors.required\\\">New Master Locker ID is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                        <c-form-group cCol md=\\\"3\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"pid\\\">New POS ID :</h4>\\r\\n                          <input cInput id=\\\"pid\\\" formControlName=\\\"pid\\\" placeholder=\\\"pid\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.pid.touched) && f.pid.invalid, 'is-valid': f.primaryContact.touched && f.pid.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['pid'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['pid'].errors.required\\\">New POS ID is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                        <c-form-group cCol md=\\\"3\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mac\\\">Mac Address :</h4>\\r\\n                          <input cInput id=\\\"mac\\\" formControlName=\\\"mac\\\"\\r\\n                            placeholder=\\\"mac\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mac.touched) && f.mac.invalid, 'is-valid': f.secondaryContact.touched && f.mac.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['mac'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['mac'].errors.required\\\">Mac Address is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                    \\r\\n\\r\\n                      <c-form-group>\\r\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\r\\n                          (click)=\\\"onSaveTech(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                          [tabindex]=\\\"'0'\\\">Submit</button>\\r\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                          (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n                      </c-form-group>\\r\\n                    </form>\\r\\n                  </c-col>\\r\\n                </ng-container>\\r\\n                <ng-container *ngIf=\\\"i===2\\\">\\r\\n                  <c-col md=\\\"12\\\">\\r\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"cid\\\">Cid :</h4>\\r\\n                          <input cInput id=\\\"cid\\\" formControlName=\\\"cid\\\" placeholder=\\\"cid\\\" autocomplete=\\\"given-name\\\"\\r\\n                            required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.cid.touched) && f.cid.invalid, 'is-valid': f.loginId.touched && f.cid.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['cid'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['cid'].errors.required\\\">Merchant Short Name is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"loginId\\\">LoginId :</h4>\\r\\n                          <input cInput id=\\\"loginId\\\" formControlName=\\\"loginId\\\" placeholder=\\\"loginId\\\"\\r\\n                            autocomplete=\\\"loginId\\\" required\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.loginId.touched) && f.loginId.errors, 'is-valid': f.merchantId.touched && !f.loginId.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['loginId'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['loginId'].errors.required\\\">LoginId is required</div>\\r\\n                            <div *ngIf=\\\"f['loginId'].errors.minlength\\\">{{formErrors.username.minLength}}</div>\\r\\n                            <div *ngIf=\\\"f['loginId'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"merchantId\\\">MerchantId :</h4>\\r\\n                          <input cInput id=\\\"merchantId\\\" formControlName=\\\"merchantId\\\" placeholder=\\\"merchantId\\\"\\r\\n                            autocomplete=\\\"family-name\\\" required\\r\\n                            [ngClass]=\\\"{ 'is-invalid':  (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.panNo.touched && f.merchantId.valid }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['merchantId'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['merchantId'].errors.required\\\">MerchantId is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"panNo\\\">Pan Number :</h4>\\r\\n                          <input cInput id=\\\"panNo\\\" formControlName=\\\"panNo\\\" placeholder=\\\"Pan Number\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.panNo.touched) && f.panNo.invalid, 'is-valid': f.gstNo.touched && f.panNo.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['panNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['panNo'].errors.required\\\">Pan Number is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"gstNo\\\">Gst Number :</h4>\\r\\n                          <input cInput id=\\\"gstNo\\\" formControlName=\\\"gstNo\\\" placeholder=\\\"Gst Number\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.gstNo.touched) && f.gstNo.invalid, 'is-valid': f.billingPlan.touched && f.gstNo.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['gstNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['gstNo'].errors.required\\\">Gst Number is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"billingPlan\\\">Billing Plan :</h4>\\r\\n                          <input cInput id=\\\"billingPlan\\\" formControlName=\\\"billingPlan\\\" placeholder=\\\"Billing Plan\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.billingPlan.touched) && f.billingPlan.invalid, 'is-valid': f.phone.touched && f.billingPlan.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['billingPlan'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['billingPlan'].errors.required\\\">Billing Plan is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"6\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"phone\\\">Phone Number :</h4>\\r\\n                          <input cInput id=\\\"phone\\\" formControlName=\\\"phone\\\" placeholder=\\\"Phone Number\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.phone.touched) && f.phone.invalid, 'is-valid': f.address.touched && f.phone.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['phone'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['phone'].errors.required\\\">Phone Number is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"12\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"address\\\">Address :</h4>\\r\\n                          <input cInput id=\\\"address\\\" formControlName=\\\"address\\\" placeholder=\\\"address\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.address.touched) && f.address.invalid, 'is-valid': f.country.touched && f.address.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['address'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['address'].errors.required\\\">Address is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"3\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"country\\\">Country :</h4>\\r\\n                          <input cInput id=\\\"country\\\" formControlName=\\\"country\\\" placeholder=\\\"country\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.country.touched) && f.country.invalid, 'is-valid': f.pincode.touched && f.country.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['country'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['country'].errors.required\\\">Country is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                        <c-form-group cCol md=\\\"3\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"pincode\\\">Pincode :</h4>\\r\\n                          <input cInput id=\\\"pincode\\\" formControlName=\\\"pincode\\\" placeholder=\\\"pincode\\\"\\r\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.pincode.touched) && f.pincode.invalid, 'is-valid': f.primaryContact.touched && f.pincode.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['pincode'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['pincode'].errors.required\\\">Pincode is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                        <c-form-group cCol md=\\\"3\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"primaryContact\\\">PrimaryContact :</h4>\\r\\n                          <input cInput id=\\\"primaryContact\\\" formControlName=\\\"primaryContact\\\"\\r\\n                            placeholder=\\\"primaryContact\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryContact.touched) && f.primaryContact.invalid, 'is-valid': f.secondaryContact.touched && f.primaryContact.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['primaryContact'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['primaryContact'].errors.required\\\">PrimaryContact is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n\\r\\n                        <c-form-group cCol md=\\\"3\\\">\\r\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"secondaryContact\\\">SecondaryContact:</h4>\\r\\n                          <input cInput id=\\\"secondaryContact\\\" formControlName=\\\"secondaryContact\\\"\\r\\n                            placeholder=\\\"secondaryContact\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryContact.touched) && f.secondaryContact.invalid, 'is-valid': f.secondaryContact.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['secondaryContact'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['secondaryContact'].errors.required\\\">SecondaryContactis required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n\\r\\n                      <c-form-group>\\r\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\r\\n                          (click)=\\\"onSaveTech(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                          [tabindex]=\\\"'0'\\\">Submit</button>\\r\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\r\\n                          (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n                      </c-form-group>\\r\\n                    </form>\\r\\n                  </c-col>\\r\\n                </ng-container>\\r\\n                                \\r\\n              </c-tab-pane>\\r\\n            </c-tab-content>\\r\\n          </c-tabset>\\r\\n        </c-card-body>\\r\\n      </c-card>\\r\\n    </c-col>\\r\\n  </c-row>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n <div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">Add ICA</h4>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"add-lessons-form\\\" [formGroup]=\\\"form\\\" class=\\\"needs-validation\\\">\\r\\n          <ng-container formArrayName=\\\"lessons\\\">\\r\\n            <ng-container *ngFor=\\\"let lessonForm of lessons.controls; let i = index\\\">\\r\\n              <form class=\\\"lesson-form-row\\\" [formGroup]=\\\"lessonForm\\\">\\r\\n                <c-row>\\r\\n                  \\r\\n                  <div cCol md=\\\"2\\\">\\r\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"asn\\\">Asn :</h4>\\r\\n                    <input cInput id=\\\"asn\\\" formControlName=\\\"asn\\\" placeholder=\\\"asn\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.asn.touched) && f.asn.invalid, 'is-valid': f.itp.touched && f.asn.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['asn'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['asn'].errors.required\\\">asn is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n\\r\\n                  <div cCol md=\\\"2\\\">\\r\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"iid\\\">Iid :</h4>\\r\\n                    <input cInput id=\\\"iid\\\" formControlName=\\\"iid\\\" placeholder=\\\"iid\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['iid'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['iid'].errors.required\\\">iid is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                \\r\\n                  <div cCol md=\\\"2\\\">\\r\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"itp\\\">Itp :</h4>\\r\\n                    <input cInput id=\\\"itp\\\" formControlName=\\\"itp\\\" placeholder=\\\"itp\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['itp'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['itp'].errors.required\\\">itp is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <c-form-group cCol md=\\\"2\\\">\\r\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spn:</h4>\\r\\n                    <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\"\\r\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['spn'].errors.required\\\">spn is required</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n\\r\\n                  <c-form-group cCol md=\\\"4\\\">\\r\\n                    <a (click)=\\\"deleteLesson(i)\\\" style=\\\"text-align:left; color: rgb(207, 18, 18);cursor: pointer;\\\">\\r\\n                      <div>&nbsp;&nbsp;<i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i> Delete</div>\\r\\n                    </a>\\r\\n                  </c-form-group>\\r\\n                </c-row>\\r\\n              </form>\\r\\n            </ng-container>\\r\\n          </ng-container>\\r\\n          <div style=\\\"position: center;\\\">\\r\\n            <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\"\\r\\n              (click)=\\\"addLesson()\\\">Add</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"icaFieldValue(lessonForm.value);hide()\\\">Submit</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>  \\r\\n \\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- <div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">ICA</h4>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <form [formGroup]=\\\"simpleForm\\\" (ngSubmit)=\\\"onSubmits()\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <c-row>\\r\\n              <c-form-group cCol md=\\\"12\\\">\\r\\n                <table>\\r\\n                  <thead>\\r\\n                    <tr>\\r\\n                      <th>Asn</th>\\r\\n                      <th>Action</th>\\r\\n                    </tr>\\r\\n                  </thead>\\r\\n                  <tbody>\\r\\n                    <tr *ngFor=\\\"let field of fieldArray; let i = index\\\">\\r\\n\\r\\n                      <td>\\r\\n                        <input cInput [(ngModel)]=\\\"field.price\\\" class=\\\"form-control\\\" type=\\\"text\\\"\\r\\n                          name=\\\"{{field.price}}\\\" />\\r\\n                      </td>\\r\\n                      <td>\\r\\n                        <a (click)=\\\"deleteFieldValue(i)\\\" style=\\\"text-align:left; color: #000;cursor: pointer;\\\"><div>&nbsp;&nbsp;<i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i> Delete</div></a>                        \\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                      <td>\\r\\n                        <input cInput class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"newAttributePrice\\\"\\r\\n                          [(ngModel)]=\\\"newAttribute.price\\\" name=\\\"newAttributePrice\\\" />\\r\\n                      </td>\\r\\n                      <td>\\r\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\"\\r\\n                          (click)=\\\"addFieldValue()\\\">Add</button>\\r\\n                      </td>\\r\\n                    </tr>\\r\\n                  </tbody>\\r\\n                </table>\\r\\n\\r\\n              </c-form-group>\\r\\n            </c-row>\\r\\n            <c-row>\\r\\n              <c-form-group cCol md=\\\"4\\\">\\r\\n                <h4 class=\\\"col-form-label\\\" for=\\\"iid\\\">Iid :</h4>\\r\\n                <input cInput id=\\\"iid\\\" formControlName=\\\"iid\\\" placeholder=\\\"iid\\\" autocomplete=\\\"given-name\\\" required\\r\\n                  [autofocus]=\\\"true\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f['iid'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f['iid'].errors.required\\\">iid is required</div>\\r\\n                </div>\\r\\n              </c-form-group>\\r\\n              <c-form-group cCol md=\\\"4\\\">\\r\\n                <h4 class=\\\"col-form-label\\\" for=\\\"itp\\\">Itp :</h4>\\r\\n                <input cInput id=\\\"itp\\\" formControlName=\\\"itp\\\" placeholder=\\\"itp\\\" autocomplete=\\\"given-name\\\" required\\r\\n                  [autofocus]=\\\"true\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f['itp'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f['itp'].errors.required\\\">itp is required</div>\\r\\n                </div>\\r\\n              </c-form-group>\\r\\n              <c-form-group cCol md=\\\"4\\\">\\r\\n                <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spn:</h4>\\r\\n                <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\" autocomplete=\\\"given-name\\\" required\\r\\n                  [autofocus]=\\\"true\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f['spn'].errors.required\\\">spn is required</div>\\r\\n                </div>\\r\\n              </c-form-group>\\r\\n            </c-row>\\r\\n            <c-row>\\r\\n            </c-row>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"icaFieldValue(simpleForm.value);hide()\\\">Submit</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>  -->\";","export default \"::ng-deep .card-body {\\r\\n  flex: 1 1 auto;\\r\\n  min-height: 1px;\\r\\n  padding: 1.25rem;\\r\\n  margin-bottom: 280px;\\r\\n}\\r\\n\\r\\n::ng-deep .nav-tabs-boxed .tab-content {\\r\\n  padding: 0.75rem 1.25rem;\\r\\n  border: 1px solid;\\r\\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\\r\\n  color: #768192;\\r\\n  background-color: #fff;\\r\\n  border-color: #d8dbe0;\\r\\n}\\r\\n\\r\\n::ng-deep .card-style {\\r\\n  border: none;\\r\\n}\\r\\n\\r\\n.modal-dialog {\\r\\n    max-width: 740px;\\r\\n    margin: 1.75rem auto;\\r\\n  }\\r\\n\\r\\np.ridge {border-style: ridge;border-color: rgb(10, 14, 10);}\\r\\n\\r\\ninput.largerCheckbox {\\r\\n    width: 20px;\\r\\n    height: 40px;\\r\\n    margin-top: -7px;\\r\\n    margin-left: revert;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixpQkFBaUI7RUFDakIsd0NBQXdDO0VBQ3hDLGNBQWM7RUFDZCxzQkFBc0I7RUFDdEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUdFO0lBQ0UsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtFQUN0Qjs7QUFFQSxTQUFTLG1CQUFtQixDQUFDLDZCQUE2QixDQUFDOztBQUUzRDtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2QiIsImZpbGUiOiJjb25maWd1cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XHJcbiAgZmxleDogMSAxIGF1dG87XHJcbiAgbWluLWhlaWdodDogMXB4O1xyXG4gIHBhZGRpbmc6IDEuMjVyZW07XHJcbiAgbWFyZ2luLWJvdHRvbTogMjgwcHg7XHJcbn1cclxuXHJcbjo6bmctZGVlcCAubmF2LXRhYnMtYm94ZWQgLnRhYi1jb250ZW50IHtcclxuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XHJcbiAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgYm9yZGVyLXJhZGl1czogMCAwLjI1cmVtIDAuMjVyZW0gMC4yNXJlbTtcclxuICBjb2xvcjogIzc2ODE5MjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gIGJvcmRlci1jb2xvcjogI2Q4ZGJlMDtcclxufVxyXG5cclxuOjpuZy1kZWVwIC5jYXJkLXN0eWxlIHtcclxuICBib3JkZXI6IG5vbmU7XHJcbn1cclxuXHJcblxyXG4gIC5tb2RhbC1kaWFsb2cge1xyXG4gICAgbWF4LXdpZHRoOiA3NDBweDtcclxuICAgIG1hcmdpbjogMS43NXJlbSBhdXRvO1xyXG4gIH1cclxuXHJcbiAgcC5yaWRnZSB7Ym9yZGVyLXN0eWxlOiByaWRnZTtib3JkZXItY29sb3I6IHJnYigxMCwgMTQsIDEwKTt9XHJcbiAgXHJcbiAgaW5wdXQubGFyZ2VyQ2hlY2tib3gge1xyXG4gICAgd2lkdGg6IDIwcHg7XHJcbiAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAtN3B4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IHJldmVydDtcclxufSJdfQ== */\";","import {\r\n  Component,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  FormControl,\r\n  AbstractControl,\r\n  FormGroupName,\r\n  FormArray\r\n} from '@angular/forms';\r\n\r\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\r\nimport { ValidationFormsService } from './validation-forms.service';\r\nimport { CommonDataService } from '../../Common/common-data.service';\r\nimport { DataService } from '../../service/data.service';\r\nimport { Router } from '@angular/router';\r\nimport { Business } from './business';\r\n/** passwords must match - custom validator */\r\nexport const confirmPasswordValidator: ValidatorFn = (\r\n  control: FormGroup\r\n): ValidationErrors | null => {\r\n  const password = control.get('password');\r\n  const confirm = control.get('confirmPassword');\r\n  return password && confirm && password.value === confirm.value\r\n    ? null\r\n    : { passwordMismatch: true };\r\n};\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  templateUrl: './configuration.component.html',\r\n  styleUrls: ['./configuration.component.css'],\r\n  //providers: [ValidationFormsService],\r\n})\r\nexport class ConfigurationComponent implements OnDestroy, OnInit, OnChanges \r\n{\r\n  customer:any = {};\r\n  simpleForm: FormGroup;\r\n  lessonForm: FormGroup;\r\n  businessForm: FormGroup;\r\n  submitted = false;\r\n  formErrors: any;\r\n  msg:string;\r\n  showModal: boolean;\r\n  registerForm: FormGroup;\r\n  bodyText: string;\r\n  ica:any = {};\r\n  myObjArray: Array<any> = [];\r\n  ObjArray: Array<any> = [];\r\n  mybusinessArray: any;\r\n  private fieldArray: Array<any> = [];\r\n  private newAttribute: any = {};\r\n  private icaArray: Array<any> = [];\r\n  private newicaAttribute: any = {};\r\n  myInstance:Business[] = [];\r\n  private _setTab: number;\r\n  get setTab() {\r\n    return this._setTab;\r\n  }\r\n  set setTab(value: number) {\r\n    this._setTab = value || 0;\r\n  }\r\n  private interval;\r\n\r\n  private _lorem: string[] = [\r\n      ];\r\n  public get lorem() {\r\n    return [...this._lorem];\r\n  }\r\n  private _tabs: any[] = [\r\n    { header: 'Technical Configuration', panel: this.lorem[0], icon: 'cil-user' },\r\n    { header: 'Business Configuration', panel: this.lorem[1], icon: 'cil-home' },\r\n    { header: 'General Configuration', panel: this.lorem[2], icon: 'cil-mobile' }\r\n    \r\n    ,\r\n  ];\r\n  public get tabs() {\r\n    return this._tabs;\r\n  }\r\n  public get tabs2() {\r\n    return this._tabs.filter((tab) => !tab.disabled);\r\n  }\r\n\r\n  //FormArray\r\n\r\n  form = this.fb.group({\r\n    lessons: this.fb.array([])\r\n});\r\n\r\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\r\n    this.formErrors = this.vf.errorMessages;\r\n    this.createForm();\r\n    this.addLesson();\r\n    this.setTab = 0;\r\n  }\r\n\r\n  //FormArray\r\n\r\n  get lessons() {\r\n    return this.form.controls[\"lessons\"] as FormArray;\r\n  }\r\n\r\n  addLesson() {\r\n      this.lessonForm = this.fb.group({\r\n        asn: ['', [Validators.required]],\r\n        iid: ['', [Validators.required]],\r\n        itp: ['', [Validators.required]],\r\n        spn: ['', [Validators.required]],\r\n      });\r\n      this.lessons.push(this.lessonForm);\r\n    }\r\n\r\n    deleteLesson(lessonIndex: number) {\r\n      this.lessons.removeAt(lessonIndex);\r\n    }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    console.log('ngOnChanges', changes, this.setTab);\r\n  }\r\n\r\n  onTabChange(e) {\r\n    console.log('onTabChange', e);\r\n  }\r\n\r\n  createForm() {\r\n    this.simpleForm = this.fb.group(\r\n      {\r\n        cid: ['', [Validators.required]],\r\n        crc: ['', [Validators.required]],\r\n        ica: ['', [Validators.required]],\r\n        asn: ['', [Validators.required]],\r\n        iid: ['', [Validators.required]],\r\n        itp: ['', [Validators.required]],\r\n        spn: ['', [Validators.required]],\r\n        imx: ['', [Validators.required]],\r\n        key: ['', [Validators.required]],\r\n        men: ['', [Validators.required]],\r\n        mid: ['', [Validators.required]],\r\n        qmx: ['', [Validators.required]],\r\n     \r\n        loginId: [\r\n        '',\r\n        [\r\n        Validators.required,\r\n        Validators.minLength(this.vf.formRules.usernameMin),\r\n        Validators.pattern(this.vf.formRules.nonEmpty),\r\n        ],\r\n        ],\r\n        merchantId: ['', [Validators.required]],\r\n        companyName: ['', [Validators.required]],\r\n        billingPlan: ['', [Validators.required]],\r\n        panNo: ['', [Validators.required]],\r\n        gstNo: ['', [Validators.required]],\r\n        phone: ['', [Validators.required]],       \r\n        address: ['', [Validators.required]],\r\n        country: ['', [Validators.required]],\r\n        pincode: ['', [Validators.required]],        \r\n        primaryContact: ['', [Validators.required]],\r\n        secondaryContact: ['', [Validators.required]],\r\n     // email: ['', [Validators.required, Validators.email]],\r\n        keys: ['', [Validators.required]],\r\n        mids: ['', [Validators.required]],\r\n        nss: ['', [Validators.required]],\r\n        nse: ['', [Validators.required]],\r\n        cdf: ['', [Validators.required]],\r\n        bdf: ['', [Validators.required]],\r\n        mff: ['', [Validators.required]],\r\n        mcf: ['', [Validators.required]],\r\n        mtp: ['', [Validators.required]],\r\n        mlc: ['', [Validators.required]],\r\n        mhc: ['', [Validators.required]],\r\n        dsf: ['', [Validators.required]],\r\n        dsc: ['', [Validators.required]],\r\n        gps: ['', [Validators.required]],\r\n        gsm: ['', [Validators.required]],\r\n        wfi: ['', [Validators.required]],\r\n        psf: ['', [Validators.required]],\r\n        nmc: ['', [Validators.required]],\r\n        ssc: ['', [Validators.required]],\r\n        mrp: ['', [Validators.required]],\r\n        sec: ['', [Validators.required]],\r\n        dec: ['', [Validators.required]],\r\n        mec: ['', [Validators.required]],\r\n        tsf: ['', [Validators.required]],\r\n        asl: ['', [Validators.required]],\r\n        bst: ['', [Validators.required]],\r\n        dfc: ['', [Validators.required]],\r\n        wsn: ['', [Validators.required]],\r\n        wpd: ['', [Validators.required]],\r\n        pid: ['', [Validators.required]],\r\n        mac: ['', [Validators.required]],\r\n\r\n      },\r\n      { validators: confirmPasswordValidator }\r\n    );\r\n  }\r\n\r\n  get f() {\r\n    return this.simpleForm.controls;\r\n    return this.businessForm.controls;\r\n    \r\n  }\r\n\r\n  onReset() {\r\n    this.submitted = false;\r\n    this.simpleForm.reset();\r\n    this.businessForm.reset();\r\n  }\r\n\r\n  onValidate() {\r\n    this.submitted = true;\r\n    return this.simpleForm.status === 'VALID';\r\n    return this.businessForm.status === 'VALID';\r\n  }\r\n\r\n  onSaveBusiness(business : Business){\r\n\r\n    this.mybusinessArray = (\r\n      {\r\n        \"cid\": business.cid ,\r\n        \"crc\": parseInt(business.crc + \"\"),\r\n        \"ica\": this.ObjArray,\r\n        \"imx\": parseInt(business.imx + \"\") ,\r\n        \"key\": business.key,\r\n        \"men\": parseInt(business.men + \"\"),\r\n        \"mid\": business.mid,\r\n        \"qmx\": parseInt(business.qmx+ \"\"),\r\n    }\r\n      \r\n    )\r\n\r\n    console.log( this.mybusinessArray);\r\n    // this.myObjArray.push({\"ica\": {\"asn\": business.asn, \"iid\": business.iid,\"itp\": business.itp,\"spn\": business.spn}});\r\n    debugger;\r\n    console.log(\"testforbug\" +  JSON.stringify(this.mybusinessArray));\r\n    this.service.saveBusiness(this.mybusinessArray).subscribe((resp: any) => {\r\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\r\n      if(resp && resp.statusCode == 200) {\r\n          console.log(\"Sucess\")\r\n          alert('SUCCESS!');\r\n      }    \r\n    });\r\n  }\r\n\r\n  onSaveTech(business : Business){\r\n    debugger;\r\n    this.service.saveTech(business).subscribe((resp: any) => {\r\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\r\n      if(resp && resp.statusCode == 200) {\r\n          console.log(\"Sucess\")\r\n          alert('SUCCESS!');\r\n      }    \r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    debugger;\r\n    if (this.onValidate()) {\r\n      console.warn(this.simpleForm.value);\r\n\r\n      alert('SUCCESS!');\r\n    }\r\n  }\r\n\r\n  onBusinessSubmit() {\r\n    debugger;\r\n    if (this.onValidate()) {\r\n      console.warn(this.businessForm.value);\r\n      alert('SUCCESS!');\r\n    }\r\n  }\r\n\r\n  showing() { \r\n    debugger;\r\n    this.showModal = true;\r\n  }\r\n \r\n  hide()\r\n  {\r\n    debugger;\r\n    this.showModal = false;\r\n  }\r\n\r\n    addFieldValue() {\r\n      debugger;\r\n        this.fieldArray.push(this.newAttribute)\r\n        console.log( this.fieldArray)\r\n        this.newAttribute = {};\r\n        console.log( this.fieldArray)\r\n    }\r\n\r\n    deleteFieldValue(index) {\r\n        this.fieldArray.splice(index, 1);\r\n    }\r\n\r\n\r\n    icaFieldValue(icaArray) {\r\n      debugger;\r\n      this.myObjArray.push({\"asn\":[parseInt(icaArray.asn)], \"iid\": parseInt(icaArray.iid),\"itp\": parseInt(icaArray.itp),\"spn\": parseInt(icaArray.spn)});\r\n      this.newicaAttribute =JSON.parse(JSON.stringify( this.myObjArray));\r\n      this.ObjArray = Object.assign(this.newicaAttribute);\r\n      this.icaArray.push(this.newicaAttribute)     \r\n  }\r\n}\r\n\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\r\nimport { IconModule } from '@coreui/icons-angular';\r\nimport { ConfigurationRoutingModule } from './Configuration-routing.module';\r\nimport { ConfigurationComponent } from './Configuration.component';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ConfigurationRoutingModule,\r\n    CardModule,\r\n    GridModule,\r\n    IconModule,\r\n    SwitchModule,\r\n    PaginationModule,\r\n    FormsModule,\r\n    TabsetModule,\r\n    BadgeModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ValidationFormsRoutingModule,\r\n    GridModule,\r\n    CardModule,\r\n    ButtonModule,\r\n    BadgeModule,\r\n    FormModule,\r\n  \r\n  ],\r\n  declarations: [ConfigurationComponent],\r\n})\r\nexport class ConfigurationModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidationFormsService {\r\n\r\n  errorMessages: any;\r\n\r\n  formRules = {\r\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\r\n    usernameMin: 5,\r\n    passwordMin: 6,\r\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\r\n  };\r\n\r\n  formErrors = {\r\n    firstName: '',\r\n    lastName: '',\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    accept: false,\r\n  };\r\n\r\n  constructor() {\r\n    this.errorMessages = {\r\n      firstName: {\r\n        required: 'First name is required',\r\n      },\r\n      lastName: {\r\n        required: 'Last name is required',\r\n      },\r\n      username: {\r\n        required: 'Username is required',\r\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\r\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\r\n      },\r\n      email: {\r\n        required: 'required',\r\n        email: 'Invalid email address',\r\n      },\r\n      password: {\r\n        required: 'Password is required',\r\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\r\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\r\n      },\r\n      confirmPassword: {\r\n        required: 'Password confirmation is required',\r\n        passwordMismatch: 'Passwords must match'\r\n      },\r\n      accept: {\r\n        requiredTrue: 'You have to accept our Terms and Conditions'\r\n      },\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}