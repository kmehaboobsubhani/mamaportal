{"version":3,"sources":["webpack:///src/app/views/configuration/Configuration-routing.module.ts","webpack:///src/app/views/configuration/configuration.component.html","webpack:///src/app/views/configuration/configuration.component.css","webpack:///src/app/views/configuration/Configuration.component.ts","webpack:///src/app/views/configuration/configuration.module.ts","webpack:///src/app/views/configuration/validation-forms.service.ts"],"names":["routes","path","component","data","title","ConfigurationRoutingModule","imports","forChild","exports","confirmPasswordValidator","control","password","get","confirm","value","passwordMismatch","ConfigurationComponent","fb","vf","service","commonData","router","businessform","fullname","username","email","confirmPassword","acceptTerms","customer","submitted","ica","fieldArray","newAttribute","icaArray","newicaAttribute","myInstance","_lorem","_tabs","header","panel","lorem","icon","form","group","lessons","array","formErrors","errorMessages","createForm","addLesson","setTab","_setTab","filter","tab","disabled","controls","lessonForm","asn","required","iid","itp","spn","push","lessonIndex","removeAt","invalid","console","log","JSON","stringify","reset","changes","e","minLength","maxLength","requiredTrue","simpleForm","status","businessForm","business","saveBusiness","subscribe","resp","statusCode","alert","saveTech","onValidate","warn","showModal","index","splice","selector","template","ConfigurationModule","declarations","ValidationFormsService","formRules","nonEmpty","usernameMin","passwordMin","passwordPattern","firstName","lastName","accept","pattern","providedIn"],"mappings":"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","file":"views-configuration-configuration-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ConfigurationComponent } from './Configuration.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ConfigurationComponent,\n    data: {\n      title: 'Configuration',\n    }\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ConfigurationRoutingModule {}\n","export default \"<div class=\\\"fade-in\\\">\\n  <c-row>\\n    <c-col>\\n      <c-card>\\n        <c-card-body>\\n          <c-tabset  fill=\\\"fill\\\" variant=\\\"pills\\\" boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\n            <c-tablist>\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\n                {{tab.header}}\\n              </c-tab>\\n            </c-tablist>\\n            <c-tab-content>\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\n\\n                <ng-container *ngIf=\\\"i===0\\\">\\n                  <c-col>\\n                    <div class=\\\"register-form\\\">\\n                      <form [formGroup]=\\\"businessform\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                        <div class=\\\"form-group\\\">\\n                          <label>Full Name</label>\\n                          <input\\n                            type=\\\"text\\\"\\n                            formControlName=\\\"fullname\\\"\\n                            class=\\\"form-control\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': submitted && f['fullname'].errors }\\\"\\n                          />\\n                          <div *ngIf=\\\"submitted && f['fullname'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['fullname'].errors['required']\\\">Fullname is required</div>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                          <label>Username</label>\\n                          <input\\n                            type=\\\"text\\\"\\n                            formControlName=\\\"username\\\"\\n                            class=\\\"form-control\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': submitted && f['username'].errors }\\\"\\n                          />\\n                          <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['username'].errors['required']\\\">Username is required</div>\\n                            <div *ngIf=\\\"f['username'].errors['minlength']\\\">\\n                              Username must be at least 6 characters\\n                            </div>\\n                            <div *ngIf=\\\"f['username'].errors['maxlength']\\\">\\n                              Username must not exceed 20 characters\\n                            </div>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                          <label>Email</label>\\n                          <input\\n                            type=\\\"text\\\"\\n                            formControlName=\\\"email\\\"\\n                            class=\\\"form-control\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': submitted && f['email'].errors }\\\"\\n                          />\\n                          <div *ngIf=\\\"submitted && f['email'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['email'].errors['required']\\\">Email is required</div>\\n                            <div *ngIf=\\\"f['email'].errors['email']\\\">Email is invalid</div>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                          <label>Password</label>\\n                          <input\\n                            type=\\\"password\\\"\\n                            formControlName=\\\"password\\\"\\n                            class=\\\"form-control\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': submitted && f['password'].errors }\\\"\\n                          />\\n                          <div *ngIf=\\\"submitted && f['password'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['password'].errors['required']\\\">Password is required</div>\\n                            <div *ngIf=\\\"f['password'].errors['minlength']\\\">\\n                              Password must be at least 6 characters\\n                            </div>\\n                            <div *ngIf=\\\"f['password'].errors['maxlength']\\\">\\n                              Username must not exceed 40 characters\\n                            </div>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                          <label>Confirm Password</label>\\n                          <input\\n                            type=\\\"password\\\"\\n                            formControlName=\\\"confirmPassword\\\"\\n                            class=\\\"form-control\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': submitted && f['confirmPassword'].errors }\\\"\\n                          />\\n                          <div\\n                            *ngIf=\\\"submitted && f['confirmPassword'].errors\\\"\\n                            class=\\\"invalid-feedback\\\"\\n                          >\\n                            <div *ngIf=\\\"f['confirmPassword'].errors['required']\\\">\\n                              Confirm Password is required\\n                            </div>\\n                            <div *ngIf=\\\"f['confirmPassword'].errors['matching']\\\">\\n                              Confirm Password does not match\\n                            </div>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"form-group form-check\\\">\\n                          <input\\n                            type=\\\"checkbox\\\"\\n                            formControlName=\\\"acceptTerms\\\"\\n                            class=\\\"form-check-input\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': submitted && f['acceptTerms'].errors }\\\"\\n                          />\\n                          <label for=\\\"acceptTerms\\\" class=\\\"form-check-label\\\"\\n                            >I have read and agree to the Terms</label\\n                          >\\n                          <div *ngIf=\\\"submitted && f['acceptTerms'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            Accept Terms is required\\n                          </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Register</button>\\n                          <button\\n                            type=\\\"button\\\"\\n                            (click)=\\\"onReset()\\\"\\n                            class=\\\"btn btn-warning float-right\\\"\\n                          >\\n                            Reset\\n                          </button>\\n                        </div>\\n                      </form>\\n                    </div>\\n                  </c-col>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"i===1\\\">\\n                  \\n                  <c-col md=\\\"12\\\">\\n                    \\n                  </c-col>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"i===2\\\">\\n                  <c-col md=\\\"12\\\">\\n                    \\n                  </c-col>\\n                </ng-container>\\n                                \\n              </c-tab-pane>\\n            </c-tab-content>\\n          </c-tabset>\\n        </c-card-body>\\n      </c-card>\\n    </c-col>\\n  </c-row>\\n</div>\\n\\n\\n\\n <div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">Add ICA</h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <div class=\\\"add-lessons-form\\\" [formGroup]=\\\"form\\\" class=\\\"needs-validation\\\">\\n          <ng-container formArrayName=\\\"lessons\\\">\\n            <ng-container *ngFor=\\\"let lessonForm of lessons.controls; let i = index\\\">\\n              <form class=\\\"lesson-form-row\\\" [formGroup]=\\\"lessonForm\\\">\\n                <c-row>\\n                  \\n                  <div cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"asn\\\">Asn :</h4>\\n                    <input cInput id=\\\"asn\\\" formControlName=\\\"asn\\\" placeholder=\\\"asn\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.asn.touched) && f.asn.invalid, 'is-valid': f.itp.touched && f.asn.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['asn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['asn'].errors.required\\\">asn is required</div>\\n                    </div>\\n                  </div>\\n\\n\\n                  <div cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"iid\\\">Iid :</h4>\\n                    <input cInput id=\\\"iid\\\" formControlName=\\\"iid\\\" placeholder=\\\"iid\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['iid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['iid'].errors.required\\\">iid is required</div>\\n                    </div>\\n                  </div>\\n                \\n                  <div cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"itp\\\">Itp :</h4>\\n                    <input cInput id=\\\"itp\\\" formControlName=\\\"itp\\\" placeholder=\\\"itp\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['itp'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['itp'].errors.required\\\">itp is required</div>\\n                    </div>\\n                  </div>\\n\\n                  <c-form-group cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spn:</h4>\\n                    <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['spn'].errors.required\\\">spn is required</div>\\n                    </div>\\n                  </c-form-group>\\n\\n                  <c-form-group cCol md=\\\"4\\\">\\n                    <a (click)=\\\"deleteLesson(i)\\\" style=\\\"text-align:left; color: rgb(207, 18, 18);cursor: pointer;\\\">\\n                      <div>&nbsp;&nbsp;<i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i> Delete</div>\\n                    </a>\\n                  </c-form-group>\\n                </c-row>\\n              </form>\\n            </ng-container>\\n          </ng-container>\\n          <div style=\\\"position: center;\\\">\\n            <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\"\\n              (click)=\\\"addLesson()\\\">Add</button>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"icaFieldValue(lessonForm.value);hide()\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>  \\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n<!-- <div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">ICA</h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <form [formGroup]=\\\"simpleForm\\\" (ngSubmit)=\\\"onSubmits()\\\">\\n          <div class=\\\"row\\\">\\n            <c-row>\\n              <c-form-group cCol md=\\\"12\\\">\\n                <table>\\n                  <thead>\\n                    <tr>\\n                      <th>Asn</th>\\n                      <th>Action</th>\\n                    </tr>\\n                  </thead>\\n                  <tbody>\\n                    <tr *ngFor=\\\"let field of fieldArray; let i = index\\\">\\n\\n                      <td>\\n                        <input cInput [(ngModel)]=\\\"field.price\\\" class=\\\"form-control\\\" type=\\\"text\\\"\\n                          name=\\\"{{field.price}}\\\" />\\n                      </td>\\n                      <td>\\n                        <a (click)=\\\"deleteFieldValue(i)\\\" style=\\\"text-align:left; color: #000;cursor: pointer;\\\"><div>&nbsp;&nbsp;<i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i> Delete</div></a>                        \\n                    </tr>\\n                    <tr>\\n                      <td>\\n                        <input cInput class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"newAttributePrice\\\"\\n                          [(ngModel)]=\\\"newAttribute.price\\\" name=\\\"newAttributePrice\\\" />\\n                      </td>\\n                      <td>\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\"\\n                          (click)=\\\"addFieldValue()\\\">Add</button>\\n                      </td>\\n                    </tr>\\n                  </tbody>\\n                </table>\\n\\n              </c-form-group>\\n            </c-row>\\n            <c-row>\\n              <c-form-group cCol md=\\\"4\\\">\\n                <h4 class=\\\"col-form-label\\\" for=\\\"iid\\\">Iid :</h4>\\n                <input cInput id=\\\"iid\\\" formControlName=\\\"iid\\\" placeholder=\\\"iid\\\" autocomplete=\\\"given-name\\\" required\\n                  [autofocus]=\\\"true\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\\\" />\\n                <div *ngIf=\\\"submitted && f['iid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['iid'].errors.required\\\">iid is required</div>\\n                </div>\\n              </c-form-group>\\n              <c-form-group cCol md=\\\"4\\\">\\n                <h4 class=\\\"col-form-label\\\" for=\\\"itp\\\">Itp :</h4>\\n                <input cInput id=\\\"itp\\\" formControlName=\\\"itp\\\" placeholder=\\\"itp\\\" autocomplete=\\\"given-name\\\" required\\n                  [autofocus]=\\\"true\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\\\" />\\n                <div *ngIf=\\\"submitted && f['itp'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['itp'].errors.required\\\">itp is required</div>\\n                </div>\\n              </c-form-group>\\n              <c-form-group cCol md=\\\"4\\\">\\n                <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spn:</h4>\\n                <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\" autocomplete=\\\"given-name\\\" required\\n                  [autofocus]=\\\"true\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\\\" />\\n                <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['spn'].errors.required\\\">spn is required</div>\\n                </div>\\n              </c-form-group>\\n            </c-row>\\n            <c-row>\\n            </c-row>\\n          </div>\\n        </form>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"icaFieldValue(simpleForm.value);hide()\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>  -->\";","export default \"::ng-deep .card-body {\\n  flex: 1 1 auto;\\n  min-height: 1px;\\n  padding: 1.25rem;\\n  margin-bottom: 280px;\\n}\\n\\n::ng-deep .nav-tabs-boxed .tab-content {\\n  padding: 0.75rem 1.25rem;\\n  border: 1px solid;\\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\\n  color: #768192;\\n  background-color: #fff;\\n  border-color: #d8dbe0;\\n}\\n\\n::ng-deep .card-style {\\n  border: none;\\n}\\n\\n.modal-dialog {\\n    max-width: 740px;\\n    margin: 1.75rem auto;\\n  }\\n\\np.ridge {border-style: ridge;border-color: rgb(10, 14, 10);}\\n\\ninput.largerCheckbox {\\n    width: 20px;\\n    height: 40px;\\n    margin-top: -7px;\\n    margin-left: revert;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixpQkFBaUI7RUFDakIsd0NBQXdDO0VBQ3hDLGNBQWM7RUFDZCxzQkFBc0I7RUFDdEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUdFO0lBQ0UsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtFQUN0Qjs7QUFFQSxTQUFTLG1CQUFtQixDQUFDLDZCQUE2QixDQUFDOztBQUUzRDtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2QiIsImZpbGUiOiJjb25maWd1cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XG4gIGZsZXg6IDEgMSBhdXRvO1xuICBtaW4taGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmc6IDEuMjVyZW07XG4gIG1hcmdpbi1ib3R0b206IDI4MHB4O1xufVxuXG46Om5nLWRlZXAgLm5hdi10YWJzLWJveGVkIC50YWItY29udGVudCB7XG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDAgMC4yNXJlbSAwLjI1cmVtIDAuMjVyZW07XG4gIGNvbG9yOiAjNzY4MTkyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBib3JkZXItY29sb3I6ICNkOGRiZTA7XG59XG5cbjo6bmctZGVlcCAuY2FyZC1zdHlsZSB7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuXG4gIC5tb2RhbC1kaWFsb2cge1xuICAgIG1heC13aWR0aDogNzQwcHg7XG4gICAgbWFyZ2luOiAxLjc1cmVtIGF1dG87XG4gIH1cblxuICBwLnJpZGdlIHtib3JkZXItc3R5bGU6IHJpZGdlO2JvcmRlci1jb2xvcjogcmdiKDEwLCAxNCwgMTApO31cbiAgXG4gIGlucHV0LmxhcmdlckNoZWNrYm94IHtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgbWFyZ2luLXRvcDogLTdweDtcbiAgICBtYXJnaW4tbGVmdDogcmV2ZXJ0O1xufSJdfQ== */\";","import {\n  Component,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n  FormArray\n} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\nimport { CommonDataService } from '../../Common/common-data.service';\nimport { DataService } from '../../service/data.service';\nimport { Router } from '@angular/router';\nimport { Business } from './business';\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  selector: 'app-tabs',\n  templateUrl: './configuration.component.html',\n  styleUrls: ['./configuration.component.css'],\n  //providers: [ValidationFormsService],\n})\nexport class ConfigurationComponent implements OnDestroy, OnInit, OnChanges \n{\n\n  businessform: FormGroup = new FormGroup({\n    fullname: new FormControl(''),\n    username: new FormControl(''),\n    email: new FormControl(''),\n    password: new FormControl(''),\n    confirmPassword: new FormControl(''),\n    acceptTerms: new FormControl(false),\n  });\n\n\n\n\n\n\n\n  customer:any = {};\n  simpleForm: FormGroup;\n  lessonForm: FormGroup;\n  businessForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n  msg:string;\n  showModal: boolean;\n  registerForm: FormGroup;\n  bodyText: string;\n  ica:any = {};\n  private fieldArray: Array<any> = [];\n  private newAttribute: any = {};\n  private icaArray: Array<any> = [];\n  private newicaAttribute: any = {};\n  myInstance:Business[] = [];\n  private _setTab: number;\n  get setTab() {\n    return this._setTab;\n  }\n  set setTab(value: number) {\n    this._setTab = value || 0;\n  }\n  private interval;\n\n  private _lorem: string[] = [\n      ];\n  public get lorem() {\n    return [...this._lorem];\n  }\n  private _tabs: any[] = [\n    { header: 'Technical Configuration', panel: this.lorem[0], icon: 'cil-user' },\n    { header: 'Business Configuration', panel: this.lorem[1], icon: 'cil-home' },\n    { header: 'General Configuration', panel: this.lorem[2], icon: 'cil-mobile' }\n    \n    ,\n  ];\n  public get tabs() {\n    return this._tabs;\n  }\n  public get tabs2() {\n    return this._tabs.filter((tab) => !tab.disabled);\n  }\n\n  //FormArray\n\n  form = this.fb.group({\n    lessons: this.fb.array([])\n});\n\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n    this.addLesson();\n    this.setTab = 0;\n  }\n\n  //FormArray\n\n  get lessons() {\n    return this.form.controls[\"lessons\"] as FormArray;\n  }\n\n  addLesson() {\n      this.lessonForm = this.fb.group({\n        asn: ['', [Validators.required]],\n        iid: ['', [Validators.required]],\n        itp: ['', [Validators.required]],\n        spn: ['', [Validators.required]],\n      });\n      this.lessons.push(this.lessonForm);\n    }\n\n    deleteLesson(lessonIndex: number) {\n      this.lessons.removeAt(lessonIndex);\n    }\n\n    ngOnInit(): void {\n      \n  }\n\n  get f(): { [key: string]: AbstractControl } {\n    return this.businessform.controls;\n  }\n  onSubmit(): void {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n    console.log(JSON.stringify(this.form.value, null, 2));\n  }\n  onReset(): void {\n    this.submitted = false;\n    this.form.reset();\n  }\n\n\n\n  ngOnDestroy(): void {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log('ngOnChanges', changes, this.setTab);\n  }\n\n  onTabChange(e) {\n    console.log('onTabChange', e);\n  }\n\n  createForm() {\n    this.businessform = this.fb.group(\n      {\n        fullname: ['', Validators.required],\n        username: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(6),\n            Validators.maxLength(20)\n          ]\n        ],\n        email: ['', [Validators.required, Validators.email]],\n        password: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(6),\n            Validators.maxLength(40)\n          ]\n        ],\n        confirmPassword: ['', Validators.required],\n        acceptTerms: [false, Validators.requiredTrue]\n      },\n      \n    );\n  }\n\n  // get f() {\n  //   return this.simpleForm.controls;\n  //   return this.businessForm.controls;\n    \n  // }\n\n  // onReset() {\n  //   this.submitted = false;\n  //   this.simpleForm.reset();\n  //   this.businessForm.reset();\n  // }\n\n  onValidate() {\n    this.submitted = true;\n    return this.simpleForm.status === 'VALID';\n    return this.businessForm.status === 'VALID';\n  }\n\n  onSaveBusiness(business : Business){\n    console.log(business);\n    debugger;\n    this.service.saveBusiness(business).subscribe((resp: any) => {\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\n      if(resp && resp.statusCode == 200) {\n          console.log(\"Sucess\")\n          alert('SUCCESS!');\n      }    \n    });\n  }\n\n  onSaveTech(business : Business){\n    debugger;\n    this.service.saveTech(business).subscribe((resp: any) => {\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\n      if(resp && resp.statusCode == 200) {\n          console.log(\"Sucess\")\n          alert('SUCCESS!');\n      }    \n    });\n  }\n\n  // onSubmit() {\n  //   debugger;\n  //   if (this.onValidate()) {\n  //     console.warn(this.simpleForm.value);\n\n  //     alert('SUCCESS!');\n  //   }\n  // }\n\n  onBusinessSubmit() {\n    debugger;\n    if (this.onValidate()) {\n      console.warn(this.businessForm.value);\n      alert('SUCCESS!');\n    }\n  }\n\n  showing() { \n    debugger;\n    this.showModal = true;\n  }\n \n  hide()\n  {\n    debugger;\n    this.showModal = false;\n  }\n\n    addFieldValue() {\n      debugger;\n        this.fieldArray.push(this.newAttribute)\n        console.log( this.fieldArray)\n        this.newAttribute = {};\n        console.log( this.fieldArray)\n    }\n\n    deleteFieldValue(index) {\n        this.fieldArray.splice(index, 1);\n    }\n\n\n    icaFieldValue(icaArray) {\n      debugger;\n      this.myInstance.push(...icaArray) \n      this.icaArray.push(this.newicaAttribute)\n      this.newicaAttribute = {};\n  }\n\n\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\nimport { IconModule } from '@coreui/icons-angular';\nimport { ConfigurationRoutingModule } from './Configuration-routing.module';\nimport { ConfigurationComponent } from './Configuration.component';\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigurationRoutingModule,\n    CardModule,\n    GridModule,\n    IconModule,\n    SwitchModule,\n    PaginationModule,\n    FormsModule,\n    TabsetModule,\n    BadgeModule,\n    CommonModule,\n    ReactiveFormsModule,\n    ValidationFormsRoutingModule,\n    GridModule,\n    CardModule,\n    ButtonModule,\n    BadgeModule,\n    FormModule,\n  \n  ],\n  declarations: [ConfigurationComponent],\n})\nexport class ConfigurationModule {}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n"]}