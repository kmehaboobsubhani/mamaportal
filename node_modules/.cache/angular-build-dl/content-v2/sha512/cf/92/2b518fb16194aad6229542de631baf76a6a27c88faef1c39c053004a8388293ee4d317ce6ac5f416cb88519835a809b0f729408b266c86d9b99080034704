{"version":3,"sources":["webpack:///src/app/views/configuration/Configuration-routing.module.ts","webpack:///src/app/views/configuration/configuration.component.html","webpack:///src/app/views/configuration/configuration.component.css","webpack:///src/app/views/configuration/Configuration.component.ts","webpack:///src/app/views/configuration/configuration.module.ts","webpack:///src/app/views/configuration/validation-forms.service.ts"],"names":["routes","path","component","data","title","ConfigurationRoutingModule","imports","forChild","exports","confirmPasswordValidator","control","password","get","confirm","value","passwordMismatch","ConfigurationComponent","fb","vf","service","commonData","router","customer","submitted","ica","myObjArray","ObjArray","fieldArray","newAttribute","icaArray","newicaAttribute","myInstance","_lorem","_tabs","header","panel","lorem","icon","form","group","lessons","array","formErrors","errorMessages","createForm","addLesson","setTab","_setTab","filter","tab","disabled","controls","lessonForm","asn","required","iid","itp","spn","push","lessonIndex","removeAt","changes","console","log","e","simpleForm","cid","crc","imx","key","men","mid","qmx","loginId","minLength","formRules","usernameMin","pattern","nonEmpty","merchantId","companyName","billingPlan","panNo","gstNo","phone","address","country","pincode","primaryContact","secondaryContact","keys","mids","nss","nse","cdf","bdf","mff","mcf","mtp","mlc","mhc","dsf","dsc","gps","gsm","wfi","psf","nmc","ssc","mrp","sec","dec","mec","tsf","asl","bst","dfc","wsn","wpd","pid","mac","validators","businessForm","reset","status","business","mybusinessArray","parseInt","JSON","stringify","saveBusiness","subscribe","resp","statusCode","alert","saveTech","onValidate","warn","showModal","index","splice","parse","Object","assign","selector","template","ConfigurationModule","declarations","ValidationFormsService","passwordMin","passwordPattern","firstName","lastName","username","email","confirmPassword","accept","requiredTrue","providedIn"],"mappings":"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","file":"views-configuration-configuration-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ConfigurationComponent } from './Configuration.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ConfigurationComponent,\n    data: {\n      title: 'Configuration',\n    }\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ConfigurationRoutingModule {}\n","export default \"<div class=\\\"card\\\">\\n  <div class=\\\"card-header\\\">\\n      <c-col md=\\\"12\\\">\\n        <c-row>\\n    <c-form-group cCol md=\\\"6\\\">\\n      <div >\\n        <h3 class=\\\"text-success\\\">Configuration</h3>\\n      </div>\\n    </c-form-group>\\n    \\n    <c-form-group cCol md=\\\"6\\\">\\n      <div class=\\\"float-right\\\">\\n        <a style=\\\"color: #FFFFFF;\\\" class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/machines']\\\"><i class=\\\"fa fa-arrow-left\\\"></i> Go Back</a>\\n      </div>\\n    </c-form-group>\\n\\n    </c-row>\\n    </c-col>\\n</div>\\n<div class=\\\"fade-in\\\">\\n  <c-row>\\n    <c-col>\\n      <c-card>\\n        <c-card-body>\\n          <c-tabset  fill=\\\"fill\\\" variant=\\\"pills\\\" boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\n            <c-tablist>\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\n                {{tab.header}}\\n              </c-tab>\\n            </c-tablist>\\n            <c-tab-content>\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\n\\n                <ng-container *ngIf=\\\"i===0\\\">\\n                  <c-col>\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                     \\n                      <c-row>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"cid\\\">Cid :</h4>\\n                          <input cInput id=\\\"cid\\\" formControlName=\\\"cid\\\" placeholder=\\\"cid\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.cid.touched) && f.cid.invalid, 'is-valid': f.loginId.touched && f.cid.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['cid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['cid'].errors.required\\\">cid is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"crc\\\">Crc :</h4>\\n                          <input cInput id=\\\"crc\\\" formControlName=\\\"crc\\\" placeholder=\\\"crc\\\" autocomplete=\\\"crc\\\" required\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.crc.touched) && f.crc.errors, 'is-valid': f.merchantId.touched && !f.crc.errors }\\\" />\\n                          <div *ngIf=\\\"submitted && f['crc'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['crc'].errors.required\\\">crc is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" >Ica :</h4>\\n                          <button cButton color=\\\"btn btn-primary\\\" type=\\\"submit\\\" (click)=\\\"showing()\\\" [tabindex]=\\\"'0'\\\"\\n                            >Add (ICA)\\n                          </button>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"imx\\\">Imx :</h4>\\n                          <input cInput id=\\\"imx\\\" formControlName=\\\"imx\\\" placeholder=\\\"imx\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.imx.touched) && f.imx.invalid, 'is-valid': f.gstNo.touched && f.imx.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['imx'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['imx'].errors.required\\\">imx is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"key\\\">Key :</h4>\\n                          <input cInput id=\\\"key\\\" formControlName=\\\"key\\\" placeholder=\\\"key\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.key.touched) && f.key.invalid, 'is-valid': f.billingPlan.touched && f.key.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['key'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['key'].errors.required\\\">key is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"men\\\">Men :</h4>\\n                          <input cInput id=\\\"men\\\" formControlName=\\\"men\\\" placeholder=\\\"men\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.men.touched) && f.men.invalid, 'is-valid': f.phone.touched && f.men.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['men'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['men'].errors.required\\\">men Plan is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mid\\\">Mid :</h4>\\n                          <input cInput id=\\\"mid\\\" formControlName=\\\"mid\\\" placeholder=\\\"mid\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mid.touched) && f.mid.invalid, 'is-valid': f.phone.touched && f.mid.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mid'].errors.required\\\">mid Plan is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"qmx\\\">Qmx :</h4>\\n                          <input cInput id=\\\"qmx\\\" formControlName=\\\"qmx\\\" placeholder=\\\"qmx\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.qmx.touched) && f.qmx.invalid, 'is-valid': f.address.touched && f.qmx.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['qmx'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['qmx'].errors.required\\\">qmx is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-form-group>\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\n                          (click)=\\\"onSaveBusiness(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                          [tabindex]=\\\"'0'\\\">Submit</button>\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                          (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                      </c-form-group>\\n                    </form>\\n                \\n                  </c-col>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"i===1\\\">\\n                  \\n                  <c-col md=\\\"12\\\">\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                      <c-card-header>Toaster\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"keys\\\">Key :</h4>\\n                          <input cInput id=\\\"keys\\\" formControlName=\\\"keys\\\" placeholder=\\\"keys\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.keys.touched) && f.keys.invalid, 'is-valid': f.mids.touched && f.keys.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['keys'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['keys'].errors.required\\\">Key is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mids\\\">Machine ID :</h4>\\n                          <input cInput id=\\\"mids\\\" formControlName=\\\"mids\\\" placeholder=\\\"mids\\\"\\n                            autocomplete=\\\"mids\\\" required\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mids.touched) && f.mids.errors, 'is-valid': f.merchantId.touched && !f.mids.errors }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mids'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mids'].errors.required\\\">Machine ID is required</div>\\n\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"nss\\\">No of spring supported in machine:</h4>\\n                          <input cInput id=\\\"nss\\\" formControlName=\\\"nss\\\" placeholder=\\\"nss\\\"\\n                            autocomplete=\\\"family-name\\\" required\\n                            [ngClass]=\\\"{ 'is-invalid':  (submitted || f.nss.touched) && f.nss.invalid, 'is-valid': f.panNo.touched && f.nss.valid }\\\" />\\n                          <div *ngIf=\\\"submitted && f['nss'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['nss'].errors.required\\\">No of spring supported in machine is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"nse\\\">No of spring enabled in machine :</h4>\\n                          <input cInput id=\\\"nse\\\" formControlName=\\\"nse\\\" placeholder=\\\"nse\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.nse.touched) && f.nse.invalid, 'is-valid': f.gstNo.touched && f.nse.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['nse'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['nse'].errors.required\\\">No of spring enabled in machine is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      </c-card-header>\\n                      <c-row>\\n                        \\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spring number :</h4>\\n                          <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.primaryContact.touched && f.spn.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['spn'].errors.required\\\">Spring number is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"ssc\\\">Spring slot Count :</h4>\\n                          <input cInput id=\\\"ssc\\\" formControlName=\\\"ssc\\\" placeholder=\\\"ssc\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.ssc.touched) && f.ssc.invalid, 'is-valid': f.pincode.touched && f.ssc.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['ssc'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['ssc'].errors.required\\\">Spring slot Count is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                   \\n                    \\n                      <c-row>\\n                      \\n                      <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"cdf\\\" class=\\\"custom-control-input\\\" id=\\\"cdf\\\">\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"cdf\\\">Coin device</label>                     \\n                     </c-form-check>\\n\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"bdf\\\" class=\\\"custom-control-input\\\" id=\\\"bdf\\\">\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"bdf\\\">Bill device</label>                     \\n                     </c-form-check>\\n\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"dsc\\\" class=\\\"custom-control-input\\\" id=\\\"dsc\\\">\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"dsc\\\">Drop sensor self check</label>                     \\n                     </c-form-check>\\n\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"gps\\\" class=\\\"custom-control-input\\\" id=\\\"gps\\\">\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"gps\\\">GPS</label>                     \\n                     </c-form-check>\\n\\n                     <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                      <input cInput type=\\\"checkbox\\\" formControlName=\\\"gsm\\\" class=\\\"custom-control-input\\\" id=\\\"gsm\\\">\\n                      <label cLabel class=\\\"custom-control-label\\\" for=\\\"gsm\\\">GSM</label>                     \\n                     </c-form-check>\\n                     \\n                     \\n                      </c-row>\\n                      <c-row>\\n\\n                        <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                          <input cInput type=\\\"checkbox\\\" formControlName=\\\"wfi\\\" class=\\\"custom-control-input\\\" id=\\\"wfi\\\">\\n                          <label cLabel class=\\\"custom-control-label\\\" for=\\\"wfi\\\">Wifi</label>                     \\n                         </c-form-check>\\n\\n                         <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                          <input cInput type=\\\"checkbox\\\" formControlName=\\\"tsf\\\" class=\\\"custom-control-input\\\" id=\\\"tsf\\\">\\n                          <label cLabel class=\\\"custom-control-label\\\" for=\\\"tsf\\\">Temperature Sensor</label>                     \\n                         </c-form-check>\\n\\n                         <c-form-check cCol md=\\\"2\\\" custom variant=\\\"checkbox\\\" class=\\\"my-2\\\">\\n                          <input cInput type=\\\"checkbox\\\" formControlName=\\\"psf\\\" class=\\\"custom-control-input\\\" id=\\\"psf\\\">\\n                          <label cLabel class=\\\"custom-control-label\\\" for=\\\"psf\\\">Paired Spring flag</label>                     \\n                         </c-form-check>\\n\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mff\\\">Motor Running Feedback :</h4>\\n                          <input cInput id=\\\"mff\\\" formControlName=\\\"mff\\\" placeholder=\\\"mff\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mff.touched) && f.mff.invalid, 'is-valid': f.address.touched && f.mff.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mff'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mff'].errors.required\\\">Motor Running Feedback  is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mcf\\\">Motor current measurement :</h4>\\n                          <input cInput id=\\\"mcf\\\" formControlName=\\\"mcf\\\" placeholder=\\\"mcf\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mcf.touched) && f.mcf.invalid, 'is-valid': f.country.touched && f.mcf.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mcf'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mcf'].errors.required\\\">Motor current measurement is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mtp\\\">Motor Type :</h4>\\n                          <input cInput id=\\\"mtp\\\" formControlName=\\\"mtp\\\" placeholder=\\\"mtp\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mtp.touched) && f.mtp.invalid, 'is-valid': f.pincode.touched && f.mtp.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mtp'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mtp'].errors.required\\\">Motor Type is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mlc\\\">Motor Low current(10mA precision) :</h4>\\n                          <input cInput id=\\\"mlc\\\" formControlName=\\\"mlc\\\" placeholder=\\\"mlc\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mlc.touched) && f.mlc.invalid, 'is-valid': f.primaryContact.touched && f.mlc.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mlc'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mlc'].errors.required\\\">Motor Low current(10mA precision) is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>                   \\n                      <c-row>\\n                        \\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mhc\\\">Motor High current(10mA precision) :</h4>\\n                          <input cInput id=\\\"mhc\\\" formControlName=\\\"mhc\\\"\\n                            placeholder=\\\"mhc\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mhc.touched) && f.mhc.invalid, 'is-valid': f.secondaryContact.touched && f.mhc.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mhc'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mhc'].errors.required\\\">Motor High current(10mA precision) is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"nmc\\\">No of connected motor in paired :</h4>\\n                          <input cInput id=\\\"nmc\\\" formControlName=\\\"nmc\\\"\\n                            placeholder=\\\"nmc\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.nmc.touched) && f.nmc.invalid, 'is-valid': f.nmc.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['nmc'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['nmc'].errors.required\\\">No of connected motor in paired  is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>                        \\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mrp\\\">Motor Rotations Per Pay :</h4>\\n                          <input cInput id=\\\"mrp\\\" formControlName=\\\"mrp\\\" placeholder=\\\"mrp\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mrp.touched) && f.mrp.invalid, 'is-valid': f.primaryContact.touched && f.mrp.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mrp'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mrp'].errors.required\\\">Motor Rotations Per Pay is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"asl\\\">Alternate spring Limit:</h4>\\n                          <input cInput id=\\\"asl\\\" formControlName=\\\"asl\\\"\\n                            placeholder=\\\"asl\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.asl.touched) && f.asl.invalid, 'is-valid': f.asl.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['asl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['asl'].errors.required\\\">Alternate spring Limit is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                    \\n                   \\n                      <c-row>                       \\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"dfc\\\">Dispense fail safe rotation count :</h4>\\n                          <input cInput id=\\\"dfc\\\" formControlName=\\\"dfc\\\" placeholder=\\\"dfc\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.dfc.touched) && f.dfc.invalid, 'is-valid': f.primaryContact.touched && f.dfc.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['dfc'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['dfc'].errors.required\\\">Dispense fail safe rotation count is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"wsn\\\">WiFi SSID name :</h4>\\n                          <input cInput id=\\\"wsn\\\" formControlName=\\\"wsn\\\"\\n                            placeholder=\\\"wsn\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.wsn.touched) && f.wsn.invalid, 'is-valid': f.secondaryContact.touched && f.wsn.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['wsn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['wsn'].errors.required\\\">WiFi SSID name is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"wpd\\\">WiFi Password:</h4>\\n                          <input cInput id=\\\"wpd\\\" formControlName=\\\"wpd\\\"\\n                            placeholder=\\\"wpd\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.wpd.touched) && f.wpd.invalid, 'is-valid': f.wpd.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['wpd'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['wpd'].errors.required\\\">WiFi Password is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"3\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mid\\\">New Master Locker ID :</h4>\\n                          <input cInput id=\\\"mid\\\" formControlName=\\\"mid\\\" placeholder=\\\"mid\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mid.touched) && f.mid.invalid, 'is-valid': f.pincode.touched && f.mid.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mid'].errors.required\\\">New Master Locker ID is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                        <c-form-group cCol md=\\\"3\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"pid\\\">New POS ID :</h4>\\n                          <input cInput id=\\\"pid\\\" formControlName=\\\"pid\\\" placeholder=\\\"pid\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.pid.touched) && f.pid.invalid, 'is-valid': f.primaryContact.touched && f.pid.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['pid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['pid'].errors.required\\\">New POS ID is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                        <c-form-group cCol md=\\\"3\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"mac\\\">Mac Address :</h4>\\n                          <input cInput id=\\\"mac\\\" formControlName=\\\"mac\\\"\\n                            placeholder=\\\"mac\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.mac.touched) && f.mac.invalid, 'is-valid': f.secondaryContact.touched && f.mac.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['mac'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['mac'].errors.required\\\">Mac Address is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                    \\n\\n                      <c-form-group>\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\n                          (click)=\\\"onSaveTech(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                          [tabindex]=\\\"'0'\\\">Submit</button>\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                          (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                      </c-form-group>\\n                    </form>\\n                  </c-col>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"i===2\\\">\\n                  <c-col md=\\\"12\\\">\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"cid\\\">Cid :</h4>\\n                          <input cInput id=\\\"cid\\\" formControlName=\\\"cid\\\" placeholder=\\\"cid\\\" autocomplete=\\\"given-name\\\"\\n                            required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.cid.touched) && f.cid.invalid, 'is-valid': f.loginId.touched && f.cid.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['cid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['cid'].errors.required\\\">Merchant Short Name is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"loginId\\\">LoginId :</h4>\\n                          <input cInput id=\\\"loginId\\\" formControlName=\\\"loginId\\\" placeholder=\\\"loginId\\\"\\n                            autocomplete=\\\"loginId\\\" required\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.loginId.touched) && f.loginId.errors, 'is-valid': f.merchantId.touched && !f.loginId.errors }\\\" />\\n                          <div *ngIf=\\\"submitted && f['loginId'].errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['loginId'].errors.required\\\">LoginId is required</div>\\n                            <div *ngIf=\\\"f['loginId'].errors.minlength\\\">{{formErrors.username.minLength}}</div>\\n                            <div *ngIf=\\\"f['loginId'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"merchantId\\\">MerchantId :</h4>\\n                          <input cInput id=\\\"merchantId\\\" formControlName=\\\"merchantId\\\" placeholder=\\\"merchantId\\\"\\n                            autocomplete=\\\"family-name\\\" required\\n                            [ngClass]=\\\"{ 'is-invalid':  (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.panNo.touched && f.merchantId.valid }\\\" />\\n                          <div *ngIf=\\\"submitted && f['merchantId'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['merchantId'].errors.required\\\">MerchantId is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"panNo\\\">Pan Number :</h4>\\n                          <input cInput id=\\\"panNo\\\" formControlName=\\\"panNo\\\" placeholder=\\\"Pan Number\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.panNo.touched) && f.panNo.invalid, 'is-valid': f.gstNo.touched && f.panNo.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['panNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['panNo'].errors.required\\\">Pan Number is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"gstNo\\\">Gst Number :</h4>\\n                          <input cInput id=\\\"gstNo\\\" formControlName=\\\"gstNo\\\" placeholder=\\\"Gst Number\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.gstNo.touched) && f.gstNo.invalid, 'is-valid': f.billingPlan.touched && f.gstNo.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['gstNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['gstNo'].errors.required\\\">Gst Number is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"billingPlan\\\">Billing Plan :</h4>\\n                          <input cInput id=\\\"billingPlan\\\" formControlName=\\\"billingPlan\\\" placeholder=\\\"Billing Plan\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.billingPlan.touched) && f.billingPlan.invalid, 'is-valid': f.phone.touched && f.billingPlan.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['billingPlan'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['billingPlan'].errors.required\\\">Billing Plan is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        <c-form-group cCol md=\\\"6\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"phone\\\">Phone Number :</h4>\\n                          <input cInput id=\\\"phone\\\" formControlName=\\\"phone\\\" placeholder=\\\"Phone Number\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.phone.touched) && f.phone.invalid, 'is-valid': f.address.touched && f.phone.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['phone'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['phone'].errors.required\\\">Phone Number is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"12\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"address\\\">Address :</h4>\\n                          <input cInput id=\\\"address\\\" formControlName=\\\"address\\\" placeholder=\\\"address\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.address.touched) && f.address.invalid, 'is-valid': f.country.touched && f.address.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['address'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['address'].errors.required\\\">Address is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"3\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"country\\\">Country :</h4>\\n                          <input cInput id=\\\"country\\\" formControlName=\\\"country\\\" placeholder=\\\"country\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.country.touched) && f.country.invalid, 'is-valid': f.pincode.touched && f.country.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['country'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['country'].errors.required\\\">Country is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                        <c-form-group cCol md=\\\"3\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"pincode\\\">Pincode :</h4>\\n                          <input cInput id=\\\"pincode\\\" formControlName=\\\"pincode\\\" placeholder=\\\"pincode\\\"\\n                            autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.pincode.touched) && f.pincode.invalid, 'is-valid': f.primaryContact.touched && f.pincode.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['pincode'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['pincode'].errors.required\\\">Pincode is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                        <c-form-group cCol md=\\\"3\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"primaryContact\\\">PrimaryContact :</h4>\\n                          <input cInput id=\\\"primaryContact\\\" formControlName=\\\"primaryContact\\\"\\n                            placeholder=\\\"primaryContact\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryContact.touched) && f.primaryContact.invalid, 'is-valid': f.secondaryContact.touched && f.primaryContact.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['primaryContact'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['primaryContact'].errors.required\\\">PrimaryContact is required</div>\\n                          </div>\\n                        </c-form-group>\\n\\n                        <c-form-group cCol md=\\\"3\\\">\\n                          <h4 class=\\\"col-form-label\\\" for=\\\"secondaryContact\\\">SecondaryContact:</h4>\\n                          <input cInput id=\\\"secondaryContact\\\" formControlName=\\\"secondaryContact\\\"\\n                            placeholder=\\\"secondaryContact\\\" autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryContact.touched) && f.secondaryContact.invalid, 'is-valid': f.secondaryContact.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['secondaryContact'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['secondaryContact'].errors.required\\\">SecondaryContactis required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n\\n                      <c-form-group>\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\"\\n                          (click)=\\\"onSaveTech(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                          [tabindex]=\\\"'0'\\\">Submit</button>\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\"\\n                          (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                      </c-form-group>\\n                    </form>\\n                  </c-col>\\n                </ng-container>\\n                                \\n              </c-tab-pane>\\n            </c-tab-content>\\n          </c-tabset>\\n        </c-card-body>\\n      </c-card>\\n    </c-col>\\n  </c-row>\\n</div>\\n\\n\\n\\n <div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">Add ICA</h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <div class=\\\"add-lessons-form\\\" [formGroup]=\\\"form\\\" class=\\\"needs-validation\\\">\\n          <ng-container formArrayName=\\\"lessons\\\">\\n            <ng-container *ngFor=\\\"let lessonForm of lessons.controls; let i = index\\\">\\n              <form class=\\\"lesson-form-row\\\" [formGroup]=\\\"lessonForm\\\">\\n                <c-row>\\n                  \\n                  <div cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"asn\\\">Asn :</h4>\\n                    <input cInput id=\\\"asn\\\" formControlName=\\\"asn\\\" placeholder=\\\"asn\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.asn.touched) && f.asn.invalid, 'is-valid': f.itp.touched && f.asn.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['asn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['asn'].errors.required\\\">asn is required</div>\\n                    </div>\\n                  </div>\\n\\n\\n                  <div cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"iid\\\">Iid :</h4>\\n                    <input cInput id=\\\"iid\\\" formControlName=\\\"iid\\\" placeholder=\\\"iid\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['iid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['iid'].errors.required\\\">iid is required</div>\\n                    </div>\\n                  </div>\\n                \\n                  <div cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"itp\\\">Itp :</h4>\\n                    <input cInput id=\\\"itp\\\" formControlName=\\\"itp\\\" placeholder=\\\"itp\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['itp'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['itp'].errors.required\\\">itp is required</div>\\n                    </div>\\n                  </div>\\n\\n                  <c-form-group cCol md=\\\"2\\\">\\n                    <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spn:</h4>\\n                    <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\"\\n                      autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\n                      [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\\\" />\\n                    <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['spn'].errors.required\\\">spn is required</div>\\n                    </div>\\n                  </c-form-group>\\n\\n                  <c-form-group cCol md=\\\"4\\\">\\n                    <a (click)=\\\"deleteLesson(i)\\\" style=\\\"text-align:left; color: rgb(207, 18, 18);cursor: pointer;\\\">\\n                      <div>&nbsp;&nbsp;<i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i> Delete</div>\\n                    </a>\\n                  </c-form-group>\\n                </c-row>\\n              </form>\\n            </ng-container>\\n          </ng-container>\\n          <div style=\\\"position: center;\\\">\\n            <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\"\\n              (click)=\\\"addLesson()\\\">Add</button>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"icaFieldValue(lessonForm.value);hide()\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>  \\n \\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n<!-- <div [style.display]=\\\"showModal ? 'block' : 'none'\\\" class=\\\"modal\\\" id=\\\"imagemodal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">ICA</h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <form [formGroup]=\\\"simpleForm\\\" (ngSubmit)=\\\"onSubmits()\\\">\\n          <div class=\\\"row\\\">\\n            <c-row>\\n              <c-form-group cCol md=\\\"12\\\">\\n                <table>\\n                  <thead>\\n                    <tr>\\n                      <th>Asn</th>\\n                      <th>Action</th>\\n                    </tr>\\n                  </thead>\\n                  <tbody>\\n                    <tr *ngFor=\\\"let field of fieldArray; let i = index\\\">\\n\\n                      <td>\\n                        <input cInput [(ngModel)]=\\\"field.price\\\" class=\\\"form-control\\\" type=\\\"text\\\"\\n                          name=\\\"{{field.price}}\\\" />\\n                      </td>\\n                      <td>\\n                        <a (click)=\\\"deleteFieldValue(i)\\\" style=\\\"text-align:left; color: #000;cursor: pointer;\\\"><div>&nbsp;&nbsp;<i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i> Delete</div></a>                        \\n                    </tr>\\n                    <tr>\\n                      <td>\\n                        <input cInput class=\\\"form-control\\\" type=\\\"text\\\" id=\\\"newAttributePrice\\\"\\n                          [(ngModel)]=\\\"newAttribute.price\\\" name=\\\"newAttributePrice\\\" />\\n                      </td>\\n                      <td>\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\"\\n                          (click)=\\\"addFieldValue()\\\">Add</button>\\n                      </td>\\n                    </tr>\\n                  </tbody>\\n                </table>\\n\\n              </c-form-group>\\n            </c-row>\\n            <c-row>\\n              <c-form-group cCol md=\\\"4\\\">\\n                <h4 class=\\\"col-form-label\\\" for=\\\"iid\\\">Iid :</h4>\\n                <input cInput id=\\\"iid\\\" formControlName=\\\"iid\\\" placeholder=\\\"iid\\\" autocomplete=\\\"given-name\\\" required\\n                  [autofocus]=\\\"true\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\\\" />\\n                <div *ngIf=\\\"submitted && f['iid'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['iid'].errors.required\\\">iid is required</div>\\n                </div>\\n              </c-form-group>\\n              <c-form-group cCol md=\\\"4\\\">\\n                <h4 class=\\\"col-form-label\\\" for=\\\"itp\\\">Itp :</h4>\\n                <input cInput id=\\\"itp\\\" formControlName=\\\"itp\\\" placeholder=\\\"itp\\\" autocomplete=\\\"given-name\\\" required\\n                  [autofocus]=\\\"true\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\\\" />\\n                <div *ngIf=\\\"submitted && f['itp'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['itp'].errors.required\\\">itp is required</div>\\n                </div>\\n              </c-form-group>\\n              <c-form-group cCol md=\\\"4\\\">\\n                <h4 class=\\\"col-form-label\\\" for=\\\"spn\\\">Spn:</h4>\\n                <input cInput id=\\\"spn\\\" formControlName=\\\"spn\\\" placeholder=\\\"spn\\\" autocomplete=\\\"given-name\\\" required\\n                  [autofocus]=\\\"true\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\\\" />\\n                <div *ngIf=\\\"submitted && f['spn'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['spn'].errors.required\\\">spn is required</div>\\n                </div>\\n              </c-form-group>\\n            </c-row>\\n            <c-row>\\n            </c-row>\\n          </div>\\n        </form>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"icaFieldValue(simpleForm.value);hide()\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"hide()\\\">Close</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>  -->\";","export default \"::ng-deep .card-body {\\n  flex: 1 1 auto;\\n  min-height: 1px;\\n  padding: 1.25rem;\\n  margin-bottom: 280px;\\n}\\n\\n::ng-deep .nav-tabs-boxed .tab-content {\\n  padding: 0.75rem 1.25rem;\\n  border: 1px solid;\\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\\n  color: #768192;\\n  background-color: #fff;\\n  border-color: #d8dbe0;\\n}\\n\\n::ng-deep .card-style {\\n  border: none;\\n}\\n\\n.modal-dialog {\\n    max-width: 740px;\\n    margin: 1.75rem auto;\\n  }\\n\\np.ridge {border-style: ridge;border-color: rgb(10, 14, 10);}\\n\\ninput.largerCheckbox {\\n    width: 20px;\\n    height: 40px;\\n    margin-top: -7px;\\n    margin-left: revert;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixpQkFBaUI7RUFDakIsd0NBQXdDO0VBQ3hDLGNBQWM7RUFDZCxzQkFBc0I7RUFDdEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUdFO0lBQ0UsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtFQUN0Qjs7QUFFQSxTQUFTLG1CQUFtQixDQUFDLDZCQUE2QixDQUFDOztBQUUzRDtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2QiIsImZpbGUiOiJjb25maWd1cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XG4gIGZsZXg6IDEgMSBhdXRvO1xuICBtaW4taGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmc6IDEuMjVyZW07XG4gIG1hcmdpbi1ib3R0b206IDI4MHB4O1xufVxuXG46Om5nLWRlZXAgLm5hdi10YWJzLWJveGVkIC50YWItY29udGVudCB7XG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDAgMC4yNXJlbSAwLjI1cmVtIDAuMjVyZW07XG4gIGNvbG9yOiAjNzY4MTkyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBib3JkZXItY29sb3I6ICNkOGRiZTA7XG59XG5cbjo6bmctZGVlcCAuY2FyZC1zdHlsZSB7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuXG4gIC5tb2RhbC1kaWFsb2cge1xuICAgIG1heC13aWR0aDogNzQwcHg7XG4gICAgbWFyZ2luOiAxLjc1cmVtIGF1dG87XG4gIH1cblxuICBwLnJpZGdlIHtib3JkZXItc3R5bGU6IHJpZGdlO2JvcmRlci1jb2xvcjogcmdiKDEwLCAxNCwgMTApO31cbiAgXG4gIGlucHV0LmxhcmdlckNoZWNrYm94IHtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgbWFyZ2luLXRvcDogLTdweDtcbiAgICBtYXJnaW4tbGVmdDogcmV2ZXJ0O1xufSJdfQ== */\";","import {\n  Component,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n  FormArray\n} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\nimport { CommonDataService } from '../../Common/common-data.service';\nimport { DataService } from '../../service/data.service';\nimport { Router } from '@angular/router';\nimport { Business } from './business';\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  selector: 'app-tabs',\n  templateUrl: './configuration.component.html',\n  styleUrls: ['./configuration.component.css'],\n  //providers: [ValidationFormsService],\n})\nexport class ConfigurationComponent implements OnDestroy, OnInit, OnChanges \n{\n  customer:any = {};\n  simpleForm: FormGroup;\n  lessonForm: FormGroup;\n  businessForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n  msg:string;\n  showModal: boolean;\n  registerForm: FormGroup;\n  bodyText: string;\n  ica:any = {};\n  myObjArray: Array<any> = [];\n  ObjArray: Array<any> = [];\n  mybusinessArray: any;\n  private fieldArray: Array<any> = [];\n  private newAttribute: any = {};\n  private icaArray: Array<any> = [];\n  private newicaAttribute: any = {};\n  myInstance:Business[] = [];\n  private _setTab: number;\n  get setTab() {\n    return this._setTab;\n  }\n  set setTab(value: number) {\n    this._setTab = value || 0;\n  }\n  private interval;\n\n  private _lorem: string[] = [\n      ];\n  public get lorem() {\n    return [...this._lorem];\n  }\n  private _tabs: any[] = [\n    { header: 'Technical Configuration', panel: this.lorem[0], icon: 'cil-user' },\n    { header: 'Business Configuration', panel: this.lorem[1], icon: 'cil-home' },\n    { header: 'General Configuration', panel: this.lorem[2], icon: 'cil-mobile' }\n    \n    ,\n  ];\n  public get tabs() {\n    return this._tabs;\n  }\n  public get tabs2() {\n    return this._tabs.filter((tab) => !tab.disabled);\n  }\n\n  //FormArray\n\n  form = this.fb.group({\n    lessons: this.fb.array([])\n});\n\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n    this.addLesson();\n    this.setTab = 0;\n  }\n\n  //FormArray\n\n  get lessons() {\n    return this.form.controls[\"lessons\"] as FormArray;\n  }\n\n  addLesson() {\n      this.lessonForm = this.fb.group({\n        asn: ['', [Validators.required]],\n        iid: ['', [Validators.required]],\n        itp: ['', [Validators.required]],\n        spn: ['', [Validators.required]],\n      });\n      this.lessons.push(this.lessonForm);\n    }\n\n    deleteLesson(lessonIndex: number) {\n      this.lessons.removeAt(lessonIndex);\n    }\n\n  ngOnInit() {\n\n  }\n\n  ngOnDestroy(): void {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log('ngOnChanges', changes, this.setTab);\n  }\n\n  onTabChange(e) {\n    console.log('onTabChange', e);\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group(\n      {\n        cid: ['', [Validators.required]],\n        crc: ['', [Validators.required]],\n        ica: ['', [Validators.required]],\n        asn: ['', [Validators.required]],\n        iid: ['', [Validators.required]],\n        itp: ['', [Validators.required]],\n        spn: ['', [Validators.required]],\n        imx: ['', [Validators.required]],\n        key: ['', [Validators.required]],\n        men: ['', [Validators.required]],\n        mid: ['', [Validators.required]],\n        qmx: ['', [Validators.required]],\n     \n        loginId: [\n        '',\n        [\n        Validators.required,\n        Validators.minLength(this.vf.formRules.usernameMin),\n        Validators.pattern(this.vf.formRules.nonEmpty),\n        ],\n        ],\n        merchantId: ['', [Validators.required]],\n        companyName: ['', [Validators.required]],\n        billingPlan: ['', [Validators.required]],\n        panNo: ['', [Validators.required]],\n        gstNo: ['', [Validators.required]],\n        phone: ['', [Validators.required]],       \n        address: ['', [Validators.required]],\n        country: ['', [Validators.required]],\n        pincode: ['', [Validators.required]],        \n        primaryContact: ['', [Validators.required]],\n        secondaryContact: ['', [Validators.required]],\n     // email: ['', [Validators.required, Validators.email]],\n        keys: ['', [Validators.required]],\n        mids: ['', [Validators.required]],\n        nss: ['', [Validators.required]],\n        nse: ['', [Validators.required]],\n        cdf: ['', [Validators.required]],\n        bdf: ['', [Validators.required]],\n        mff: ['', [Validators.required]],\n        mcf: ['', [Validators.required]],\n        mtp: ['', [Validators.required]],\n        mlc: ['', [Validators.required]],\n        mhc: ['', [Validators.required]],\n        dsf: ['', [Validators.required]],\n        dsc: ['', [Validators.required]],\n        gps: ['', [Validators.required]],\n        gsm: ['', [Validators.required]],\n        wfi: ['', [Validators.required]],\n        psf: ['', [Validators.required]],\n        nmc: ['', [Validators.required]],\n        ssc: ['', [Validators.required]],\n        mrp: ['', [Validators.required]],\n        sec: ['', [Validators.required]],\n        dec: ['', [Validators.required]],\n        mec: ['', [Validators.required]],\n        tsf: ['', [Validators.required]],\n        asl: ['', [Validators.required]],\n        bst: ['', [Validators.required]],\n        dfc: ['', [Validators.required]],\n        wsn: ['', [Validators.required]],\n        wpd: ['', [Validators.required]],\n        pid: ['', [Validators.required]],\n        mac: ['', [Validators.required]],\n\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n\n  get f() {\n    return this.simpleForm.controls;\n    return this.businessForm.controls;\n    \n  }\n\n  onReset() {\n    this.submitted = false;\n    this.simpleForm.reset();\n    this.businessForm.reset();\n  }\n\n  onValidate() {\n    this.submitted = true;\n    return this.simpleForm.status === 'VALID';\n    return this.businessForm.status === 'VALID';\n  }\n\n  onSaveBusiness(business : Business){\n\n    this.mybusinessArray = (\n      {\n        \"cid\": business.cid ,\n        \"crc\": parseInt(business.crc + \"\"),\n        \"ica\": this.ObjArray,\n        \"imx\": parseInt(business.imx + \"\") ,\n        \"key\": business.key,\n        \"men\": parseInt(business.men + \"\"),\n        \"mid\": business.mid,\n        \"qmx\": parseInt(business.qmx+ \"\"),\n    }\n      \n    )\n\n    console.log( this.mybusinessArray);\n    // this.myObjArray.push({\"ica\": {\"asn\": business.asn, \"iid\": business.iid,\"itp\": business.itp,\"spn\": business.spn}});\n    debugger;\n    console.log(\"testforbug\" +  JSON.stringify(this.mybusinessArray));\n    this.service.saveBusiness(this.mybusinessArray).subscribe((resp: any) => {\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\n      if(resp && resp.statusCode == 200) {\n          console.log(\"Sucess\")\n          alert('SUCCESS!');\n      }    \n    });\n  }\n\n  onSaveTech(business : Business){\n    debugger;\n    this.service.saveTech(business).subscribe((resp: any) => {\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\n      if(resp && resp.statusCode == 200) {\n          console.log(\"Sucess\")\n          alert('SUCCESS!');\n      }    \n    });\n  }\n\n  onSubmit() {\n    debugger;\n    if (this.onValidate()) {\n      console.warn(this.simpleForm.value);\n\n      alert('SUCCESS!');\n    }\n  }\n\n  onBusinessSubmit() {\n    debugger;\n    if (this.onValidate()) {\n      console.warn(this.businessForm.value);\n      alert('SUCCESS!');\n    }\n  }\n\n  showing() { \n    debugger;\n    this.showModal = true;\n  }\n \n  hide()\n  {\n    debugger;\n    this.showModal = false;\n  }\n\n    addFieldValue() {\n      debugger;\n        this.fieldArray.push(this.newAttribute)\n        console.log( this.fieldArray)\n        this.newAttribute = {};\n        console.log( this.fieldArray)\n    }\n\n    deleteFieldValue(index) {\n        this.fieldArray.splice(index, 1);\n    }\n\n\n    icaFieldValue(icaArray) {\n      debugger;\n      this.myObjArray.push({\"asn\":[parseInt(icaArray.asn)], \"iid\": parseInt(icaArray.iid),\"itp\": parseInt(icaArray.itp),\"spn\": parseInt(icaArray.spn)});\n      this.newicaAttribute =JSON.parse(JSON.stringify( this.myObjArray));\n      this.ObjArray = Object.assign(this.newicaAttribute);\n      this.icaArray.push(this.newicaAttribute)     \n  }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\nimport { IconModule } from '@coreui/icons-angular';\nimport { ConfigurationRoutingModule } from './Configuration-routing.module';\nimport { ConfigurationComponent } from './Configuration.component';\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigurationRoutingModule,\n    CardModule,\n    GridModule,\n    IconModule,\n    SwitchModule,\n    PaginationModule,\n    FormsModule,\n    TabsetModule,\n    BadgeModule,\n    CommonModule,\n    ReactiveFormsModule,\n    ValidationFormsRoutingModule,\n    GridModule,\n    CardModule,\n    ButtonModule,\n    BadgeModule,\n    FormModule,\n  \n  ],\n  declarations: [ConfigurationComponent],\n})\nexport class ConfigurationModule {}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n"]}