{"version":3,"sources":["./src/app/views/merchant/merchant.component.ts","./src/app/views/merchant/validation-forms.service.ts","./src/app/views/merchant/merchant.component.css","./src/app/views/merchant/merchant.component.html","./src/app/views/merchant/merchant-routing.module.ts","./src/app/views/merchant/merchant.module.ts"],"names":[],"mappings":"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","file":"views-merchant-merchant-module-es2015.js","sourcesContent":["import {\n  Component,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\nimport { CommonDataService } from '../../Common/common-data.service';\nimport { DataService } from '../../service/data.service';\nimport { Router } from '@angular/router';\nimport { Customer } from './customer';\nimport { ViewEncapsulation } from '@angular/core';\nimport { createAutoCorrectedDatePipe } from 'text-mask-addons';\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n  \n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n    \n};\n\n@Component({\n  selector: 'app-tabs',\n  templateUrl: './merchant.component.html',\n  styleUrls: ['./merchant.component.css'],\n  providers: [ValidationFormsService],\n})\nexport class MerchantComponent implements OnDestroy, OnInit, OnChanges {\n\n  public dateModel = '';\n  public dateMask = {\n    mask: [/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/],\n    pipe: createAutoCorrectedDatePipe('mm/dd/yyyy'),\n    placeholder: 'Please enter a date',\n    keepCharPositions: true,\n  };\n\n  minDate = new Date(2017, 5, 10);\n  maxDate = new Date(2022, 9, 15);\n\n  bsValue: Date = new Date();\n  bsRangeValue: any = [new Date(2020, 7, 4), new Date(2020, 7, 20)];\n\n  customer:any = {};\n  private _setTab: number;\n  get setTab() {\n    return this._setTab;\n  }\n  set setTab(value: number) {\n    this._setTab = value || 0;\n  }\n  private interval;\n\n  private _lorem: string[] = [\n      ];\n  public get lorem() {\n    return [...this._lorem];\n  }\n\n  private _tabs: any[] = [\n    { header: 'Merchant Info', panel: this.lorem[0], icon: 'cil-user' },\n    { header: 'Payment Info', panel: this.lorem[1], icon: 'cil-mobile' },\n    { header: 'Payment Gateway', panel: this.lorem[2], icon: 'cil-credit-card' },\n    \n    //{ header: 'Certificates', panel: this.lorem[3], icon: 'cil-envelope-closed' },\n  ];\n\n  public get tabs() {\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\n    // console.log('tabs:', tabs);\n    // return tabs;\n    return this._tabs;\n  }\n\n  public get tabs2() {\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\n    // console.log('tabs:', tabs);\n    // return tabs;\n    return this._tabs.filter((tab) => !tab.disabled);\n  }\n\n  simpleForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n    this.setTab = 0;\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngOnDestroy(): void {\n    // clearInterval(this.interval);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log('ngOnChanges', changes, this.setTab);\n  }\n\n  onTabChange(e) {\n    console.log('onTabChange', e);\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group(\n      {\n        merchantName: ['', [Validators.required]],\n        loginId: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.loginIdMin),\n            Validators.pattern(this.vf.formRules.nonEmpty),\n          ],\n        ],\n        merchantId: ['', [Validators.required]],\n        companyName: ['', [Validators.required]],\n\n        billingPlan: ['', [Validators.required]],\n        panNo: ['', [Validators.required]],\n        gstNo: ['', [Validators.required]],\n\n        phone: ['', [Validators.required]],\n        \n        address: ['', [Validators.required]],\n\n        country: ['', [Validators.required]],\n        pincode: ['', [Validators.required]],\n\n        primaryContact: ['', [Validators.required]],\n        primaryName: ['', [Validators.required]],\n        primaryPhone: ['', [Validators.required]],\n        primaryEmail: ['', [Validators.required]],\n        \n        secondaryContact: ['', [Validators.required]],\n        secondaryName: ['', [Validators.required]],\n        secondaryPhone: ['', [Validators.required]],\n        secondaryEmail: ['', [Validators.required]],\n        city: ['', [Validators.required]],\n        state: ['', [Validators.required]],\n        email: ['', [Validators.required, Validators.email]],\n\n\n        date:['', [Validators.required]],\n        modeofPayment:['', [Validators.required]],\n        details:['', [Validators.required]],\n        amount:['', [Validators.required]],\n\n\n        paymentgateway:['', [Validators.required]],\n        user:['', [Validators.required]],\n        password:['', [Validators.required]],\n        testapikey:['', [Validators.required]],\n        productionapikey:['', [Validators.required]],\n        callbackUrl:['', [Validators.required]],\n        paymentNotificationUrl:['', [Validators.required]],\n        successNotificationUrl:['', [Validators.required]],\n        acceptNotificationUrl:['', [Validators.required]],\n        remarksNotificationUrl:['', [Validators.required]],\n\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.simpleForm.controls;\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.simpleForm.reset();\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.simpleForm.status === 'VALID';\n  }\n\n  onSaveMerchant(customer : Customer){\n    debugger;\n    this.service.saveCustomers(customer).subscribe((resp: any) => {\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\n      if(resp && resp.statusCode == 200) {\n          console.log(\"Sucess\")\n          alert('SUCCESS!');\n      }    \n    });\n  }\n\n  onSubmit() {\n    debugger;\n    //console.warn(this.onValidate(), this.simpleForm.value);\n    if (this.onValidate()) {\n      console.warn(this.simpleForm.value);\n      alert('SUCCESS!');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    loginIdMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    loginId: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      loginId: {\n        required: 'loginId is required',\n        minLength: `'loginId must be ${this.formRules.loginIdMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n","export default \"::ng-deep .card-body {\\n  flex: 1 1 auto;\\n  min-height: 1px;\\n  padding: 1.25rem;\\n  margin-bottom: 280px;\\n}\\n\\n::ng-deep .nav-tabs-boxed .tab-content {\\n  padding: 0.75rem 1.25rem;\\n  border: 1px solid;\\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\\n  color: #768192;\\n  background-color: #fff;\\n  border-color: #d8dbe0;\\n}\\n\\n::ng-deep .card-style {\\n  border: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmNoYW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsaUJBQWlCO0VBQ2pCLHdDQUF3QztFQUN4QyxjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLFlBQVk7QUFDZCIsImZpbGUiOiJtZXJjaGFudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOjpuZy1kZWVwIC5jYXJkLWJvZHkge1xuICBmbGV4OiAxIDEgYXV0bztcbiAgbWluLWhlaWdodDogMXB4O1xuICBwYWRkaW5nOiAxLjI1cmVtO1xuICBtYXJnaW4tYm90dG9tOiAyODBweDtcbn1cblxuOjpuZy1kZWVwIC5uYXYtdGFicy1ib3hlZCAudGFiLWNvbnRlbnQge1xuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiAwIDAuMjVyZW0gMC4yNXJlbSAwLjI1cmVtO1xuICBjb2xvcjogIzc2ODE5MjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyLWNvbG9yOiAjZDhkYmUwO1xufVxuXG46Om5nLWRlZXAgLmNhcmQtc3R5bGUge1xuICBib3JkZXI6IG5vbmU7XG59Il19 */\";","export default \"<div class=\\\"fade-in\\\">\\n  <c-row>\\n    <c-col>\\n      <c-card>\\n        <c-card-body>\\n          <c-tabset  fill=\\\"fill\\\" variant=\\\"pills\\\" boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\n            <c-tablist>\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\n                {{tab.header}}\\n              </c-tab>\\n            </c-tablist>\\n            <c-tab-content>\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\n\\n                <ng-container *ngIf=\\\"i===0\\\">\\n                  <c-col md=\\\"12\\\" >\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                      <c-row>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"merchantName\\\">Merchant Name :</h6>\\n                        <input cInput\\n                               id=\\\"merchantName\\\"\\n                               formControlName=\\\"merchantName\\\"\\n                               placeholder=\\\"Merchant name\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.merchantName.touched) && f.merchantName.invalid, 'is-valid': f.loginId.touched && f.merchantName.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['merchantName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['merchantName'].errors.required\\\">Merchant Short Name is required</div>\\n                        </div>\\n                      </c-form-group>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"loginId\\\">loginId :</h6>\\n                        <input cInput\\n                               id=\\\"loginId\\\"\\n                               formControlName=\\\"loginId\\\"\\n                               placeholder=\\\"loginId\\\"\\n                               autocomplete=\\\"loginId\\\"\\n                               required\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.loginId.touched) && f.loginId.errors, 'is-valid': f.merchantId.touched && !f.loginId.errors }\\\" />\\n                          <div *ngIf=\\\"submitted && f['loginId'].errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['loginId'].errors.required\\\">LoginId is required</div>\\n                          <div *ngIf=\\\"f['loginId'].errors.minlength\\\">{{formErrors.loginId.minLength}}</div>\\n                          <div *ngIf=\\\"f['loginId'].errors.pattern\\\">{{formErrors.loginId.pattern}}</div>\\n                        </div>\\n                      </c-form-group>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">company Reg Certificate Attachment :</h6>\\n                        <c-col md=\\\"9\\\">\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" accept=\\\"pdf\\\" name=\\\"file-input\\\">\\n                        </c-col>\\n                      </c-form-group>\\n                      <!-- <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"merchantId\\\">merchantId :</h6>\\n                        <input cInput\\n                               id=\\\"merchantId\\\"\\n                               formControlName=\\\"merchantId\\\"\\n                               placeholder=\\\"merchantId\\\"\\n                               autocomplete=\\\"family-name\\\"\\n                               required\\n                               [ngClass]=\\\"{ 'is-invalid':  (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.panNo.touched && f.merchantId.valid }\\\" />\\n                        <div *ngIf=\\\"submitted && f['merchantId'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['merchantId'].errors.required\\\">MerchantId is required</div>\\n                        </div>\\n                      </c-form-group> -->\\n                    </c-row>\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"panNo\\\">Pan Number :</h6>\\n                        <input cInput\\n                               id=\\\"panNo\\\"\\n                               formControlName=\\\"panNo\\\"\\n                               placeholder=\\\"Pan Number\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.panNo.touched) && f.panNo.invalid, 'is-valid': f.gstNo.touched && f.panNo.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['panNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['panNo'].errors.required\\\">Pan Number is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">Pan File Attachment :</h6>\\n                        <c-col md=\\\"9\\\">\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" accept=\\\"pdf\\\" name=\\\"file-input\\\">\\n                        </c-col>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"gstNo\\\">Gst Number :</h6>\\n                        <input cInput\\n                               id=\\\"gstNo\\\"\\n                               formControlName=\\\"gstNo\\\"\\n                               placeholder=\\\"Gst Number\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.gstNo.touched) && f.gstNo.invalid, 'is-valid': f.billingPlan.touched && f.gstNo.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['gstNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['gstNo'].errors.required\\\">Gst Number is required</div>\\n                        </div>\\n                      </c-form-group>\\n      \\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">Gst File Attachment :</h6>\\n                        <c-col md=\\\"9\\\">\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" name=\\\"file-input\\\">\\n                        </c-col>\\n                      </c-form-group>\\n                    </c-row>\\n                    <c-row>\\n                      \\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"billingPlan\\\">Billing Plan :</h6>\\n                               <select  cSelect name=\\\"billingPlan\\\"\\n                               id=\\\"billingPlan\\\"\\n                               formControlName=\\\"billingPlan\\\"\\n                               placeholder=\\\"Billing Plan\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.billingPlan.touched) && f.billingPlan.invalid, 'is-valid': f.phone.touched && f.billingPlan.valid  }\\\"                              \\n                               >\\n                                <option value=\\\"1\\\">Basic</option>\\n                                <option value=\\\"2\\\">Standard</option>\\n                                <option value=\\\"3\\\">Enterprise</option>\\n                                <option value=\\\"3\\\">custom</option>\\n                              </select>\\n                               <div *ngIf=\\\"submitted && f['billingPlan'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['billingPlan'].errors.required\\\">Billing Plan is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"phone\\\">Merchant Phone Number :</h6>\\n                        <input cInput\\n                              id=\\\"phone\\\"\\n                              formControlName=\\\"phone\\\"\\n                              placeholder=\\\"Phone Number\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.phone.touched) && f.phone.invalid, 'is-valid': f.address.touched && f.phone.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['phone'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['phone'].errors.required\\\">Merchant Phone Number is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                       <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"phone\\\">Merchant Email :</h6>\\n                        <input cInput\\n                               id=\\\"email\\\"\\n                               type=\\\"email\\\"\\n                               formControlName=\\\"email\\\"\\n                               placeholder=\\\"Email\\\"\\n                               autocomplete=\\\"email\\\"\\n                               required\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\n                        <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['email'].errors.required\\\">Merchant Email is required</div>\\n                          <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\n                        </div>\\n                      </c-form-group> \\n\\n                    </c-row>\\n                    <c-row>\\n                    <c-form-group cCol md=\\\"4\\\">\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"address\\\">Address :</h6>\\n                      <input cInput\\n                            id=\\\"address\\\"\\n                            formControlName=\\\"address\\\"\\n                            placeholder=\\\"enter street name\\\"\\n                            autocomplete=\\\"given-name\\\"\\n                            required\\n                            [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.address.touched) && f.address.invalid, 'is-valid': f.country.touched && f.address.valid  }\\\" />\\n                      <div *ngIf=\\\"submitted && f['address'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f['address'].errors.required\\\">Address is required</div>\\n                      </div>\\n                    </c-form-group>\\n\\n                    <c-form-group cCol md=\\\"4\\\">\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"city\\\">City :</h6>\\n                      <input cInput\\n                            id=\\\"city\\\"\\n                            formControlName=\\\"city\\\"\\n                            placeholder=\\\"city\\\"\\n                            autocomplete=\\\"given-name\\\"\\n                            required\\n                            [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.city.touched) && f.city.invalid, 'is-valid': f.country.touched && f.city.valid  }\\\" />\\n                      <div *ngIf=\\\"submitted && f['city'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f['city'].errors.required\\\">city is required</div>\\n                      </div>\\n                    </c-form-group>\\n\\n                    <c-form-group cCol md=\\\"4\\\">\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"state\\\">State :</h6>\\n                      <input cInput\\n                            id=\\\"state\\\"\\n                            formControlName=\\\"state\\\"\\n                            placeholder=\\\"state\\\"\\n                            autocomplete=\\\"given-name\\\"\\n                            required\\n                            [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.state.touched) && f.state.invalid, 'is-valid': f.country.touched && f.state.valid  }\\\" />\\n                      <div *ngIf=\\\"submitted && f['state'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f['state'].errors.required\\\">state is required</div>\\n                      </div>\\n                    </c-form-group>\\n\\n                    </c-row>\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"country\\\">country :</h6>\\n                        <input cInput\\n                               id=\\\"country\\\"\\n                               formControlName=\\\"country\\\"\\n                               placeholder=\\\"country\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.country.touched) && f.country.invalid, 'is-valid': f.pincode.touched && f.country.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['country'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['country'].errors.required\\\">country is required</div>\\n                        </div>\\n                      </c-form-group>\\n      \\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"pincode\\\">pincode :</h6>\\n                        <input cInput\\n                               id=\\\"pincode\\\"\\n                               formControlName=\\\"pincode\\\"\\n                               placeholder=\\\"pincode\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.pincode.touched) && f.pincode.invalid, 'is-valid': f.primaryContact.touched && f.pincode.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['pincode'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['pincode'].errors.required\\\">pincode is required</div>\\n                        </div>\\n                      </c-form-group>\\n                    </c-row>\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryName\\\">primaryName :</h6>\\n                        <input cInput\\n                              id=\\\"primaryName\\\"\\n                              formControlName=\\\"primaryName\\\"\\n                              placeholder=\\\"primaryName\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryName.touched) && f.primaryName.invalid, 'is-valid': f.primaryPhone.touched && f.primaryName.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['primaryName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['primaryName'].errors.required\\\">primaryName is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryPhone\\\">primaryPhone :</h6>\\n                        <input cInput\\n                              id=\\\"primaryPhone\\\"\\n                              formControlName=\\\"primaryPhone\\\"\\n                              placeholder=\\\"primaryPhone\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryPhone.touched) && f.primaryPhone.invalid, 'is-valid': f.primaryEmail.touched && f.primaryPhone.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['primaryPhone'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['primaryPhone'].errors.required\\\">primaryPhone is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryEmail\\\">primaryEmail :</h6>\\n                        <input cInput\\n                              id=\\\"primaryEmail\\\"\\n                              formControlName=\\\"primaryEmail\\\"\\n                              placeholder=\\\"primaryEmail\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryEmail.touched) && f.primaryEmail.invalid, 'is-valid': f.secondaryContact.touched && f.primaryEmail.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['primaryEmail'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['primaryEmail'].errors.required\\\">primaryEmail is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                    </c-row>\\n\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryName\\\">secondaryName:</h6>\\n                        <input cInput\\n                               id=\\\"secondaryName\\\"\\n                               formControlName=\\\"secondaryName\\\"\\n                               placeholder=\\\"secondaryName\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryName.touched) && f.secondaryName.invalid, 'is-valid': f.secondaryName.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['secondaryName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['secondaryName'].errors.required\\\">secondaryName is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryPhone\\\">secondaryPhone:</h6>\\n                        <input cInput\\n                               id=\\\"secondaryPhone\\\"\\n                               formControlName=\\\"secondaryPhone\\\"\\n                               placeholder=\\\"secondaryPhone\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryPhone.touched) && f.secondaryPhone.invalid, 'is-valid': f.secondaryPhone.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['secondaryPhone'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['secondaryPhone'].errors.required\\\">secondaryPhone is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryEmail\\\">secondaryEmail:</h6>\\n                        <input cInput\\n                               id=\\\"secondaryEmail\\\"\\n                               formControlName=\\\"secondaryEmail\\\"\\n                               placeholder=\\\"secondaryEmail\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryEmail.touched) && f.secondaryEmail.invalid, 'is-valid': f.secondaryEmail.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['secondaryEmail'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['secondaryEmail'].errors.required\\\">secondaryEmail is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                    </c-row>\\n\\n                      <c-form-group>\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Submit</button>\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                      </c-form-group>\\n                    </form>\\n                  </c-col>\\n                  </ng-container>\\n      \\n                  <ng-container *ngIf=\\\"i===1\\\">\\n                    <c-col md=\\\"12\\\" >\\n                      <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                        <c-row>                         \\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"date\\\">Date :</h6>\\n                            <input cInput\\n                                   id=\\\"date-input\\\" \\n                                   type=\\\"date\\\" \\n                                   name=\\\"date-input\\\" \\n                                   placeholder=\\\"date\\\"\\n                                   formControlName=\\\"date\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.date.touched) && f.date.invalid, 'is-valid': f.loginId.touched && f.date.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['date'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['date'].errors.required\\\">date is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"modeofPayment\\\">mode of Payment :</h6>\\n                                   <select  cSelect name=\\\"modeofPayment\\\"\\n                                   id=\\\"modeofPayment\\\"\\n                                   formControlName=\\\"modeofPayment\\\"\\n                                   placeholder=\\\"Billing Plan\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.modeofPayment.touched) && f.modeofPayment.invalid, 'is-valid': f.phone.touched && f.modeofPayment.valid  }\\\"                              \\n                                   >\\n                                    <option value=\\\"1\\\">Card</option>\\n                                    <option value=\\\"2\\\">OnlineTransfer</option>\\n                                    <option value=\\\"3\\\">Cash</option>\\n                                  </select>\\n                                   <div *ngIf=\\\"submitted && f['modeofPayment'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['modeofPayment'].errors.required\\\">ModeofPayment is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"details\\\">Details :</h6>\\n                          <input cInput\\n                                 id=\\\"details\\\"\\n                                 formControlName=\\\"details\\\"\\n                                 placeholder=\\\"details\\\"\\n                                 autocomplete=\\\"family-name\\\"\\n                                 required\\n                                 [ngClass]=\\\"{ 'is-invalid':  (submitted || f.details.touched) && f.details.invalid, 'is-valid': f.panNo.touched && f.details.valid }\\\" />\\n                          <div *ngIf=\\\"submitted && f['details'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['details'].errors.required\\\">details is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"amount\\\">Amount :</h6>\\n                          <input cInput\\n                                 id=\\\"amount\\\"\\n                                 formControlName=\\\"amount\\\"\\n                                 placeholder=\\\"amount\\\"\\n                                 autocomplete=\\\"given-name\\\"\\n                                 required\\n                                 [autofocus]=\\\"true\\\"\\n                                 [ngClass]=\\\"{ 'is-invalid': (submitted || f.amount.touched) && f.amount.invalid, 'is-valid': f.gstNo.touched && f.amount.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['amount'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['amount'].errors.required\\\">Billing Plan is required</div>\\n                          </div>\\n                        </c-form-group>                                \\n                      </c-row>\\n                        <c-form-group>\\n                          <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Save</button>\\n                          <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                          <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                        </c-form-group>\\n                      </form>\\n                    </c-col>\\n                    </ng-container>\\n      \\n                    <ng-container *ngIf=\\\"i===2\\\">\\n                      <c-col md=\\\"12\\\" >\\n                        <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                          <c-row>\\n                            <c-form-group cCol md=\\\"4\\\">\\n                              <h6 class=\\\"col-form-label\\\" for=\\\"paymentgateway\\\">Payment Gateway :</h6>\\n                                     <select  cSelect name=\\\"paymentgateway\\\"\\n                                     id=\\\"paymentgateway\\\"\\n                                     formControlName=\\\"paymentgateway\\\"\\n                                     placeholder=\\\"paymentgateway\\\"\\n                                     autocomplete=\\\"given-name\\\"\\n                                     required\\n                                     [autofocus]=\\\"true\\\"\\n                                     [ngClass]=\\\"{ 'is-invalid': (submitted || f.paymentgateway.touched) && f.paymentgateway.invalid, 'is-valid': f.phone.touched && f.paymentgateway.valid  }\\\">\\n                                      <option value=\\\"1\\\">Paytm</option>\\n                                      <option value=\\\"2\\\">RazorPay</option>\\n                                      <option value=\\\"3\\\">PayU</option>\\n                                    </select>\\n                                     <div *ngIf=\\\"submitted && f['paymentgateway'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"f['paymentgateway'].errors.required\\\">paymentgateway is required</div>\\n                              </div>\\n                            </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"user\\\">User :</h6>\\n                            <input cInput\\n                                   id=\\\"user\\\"\\n                                   formControlName=\\\"user\\\"\\n                                   placeholder=\\\"user\\\"\\n                                   autocomplete=\\\"user\\\"\\n                                   required\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.user.touched) && f.user.errors, 'is-valid': f.merchantId.touched && !f.user.errors }\\\" />\\n                              <div *ngIf=\\\"submitted && f['user'].errors\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['user'].errors.required\\\">User is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"password\\\">Password :</h6>\\n                            <input cInput\\n                                  type=\\\"password\\\"\\n                                  placeholder=\\\"Password\\\"\\n                                  autocomplete=\\\"current-password\\\"\\n                                  required\\n                                   id=\\\"password\\\"\\n                                   autocomplete=\\\"family-name\\\"\\n                                   required\\n                                   [ngClass]=\\\"{ 'is-invalid':  (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.panNo.touched && f.password.valid }\\\" />\\n                            <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        </c-row>\\n                        <c-row>\\n                          <c-form-group cCol md=\\\"6\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"testapikey\\\">TestApikey :</h6>\\n                            <input cInput\\n                                   id=\\\"testapikey\\\"\\n                                   formControlName=\\\"testapikey\\\"\\n                                   placeholder=\\\"testapikey\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.testapikey.touched) && f.testapikey.invalid, 'is-valid': f.gstNo.touched && f.testapikey.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['testapikey'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['testapikey'].errors.required\\\">TestApikey is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"6\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"productionapikey\\\">ProductionApikey :</h6>\\n                            <input cInput\\n                                   id=\\\"productionapikey\\\"\\n                                   formControlName=\\\"productionapikey\\\"\\n                                   placeholder=\\\"productionapikey\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.productionapikey.touched) && f.productionapikey.invalid, 'is-valid': f.billingPlan.touched && f.productionapikey.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['productionapikey'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['productionapikey'].errors.required\\\">productionapikey is required</div>\\n                            </div>\\n                          </c-form-group>\\n          \\n                        </c-row>\\n                        <c-row>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"callbackUrl\\\">CallbackUrl :</h6>\\n                            <input cInput\\n                                   id=\\\"callbackUrl\\\"\\n                                   formControlName=\\\"callbackUrl\\\"\\n                                   placeholder=\\\"callbackUrl\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.callbackUrl.touched) && f.callbackUrl.invalid, 'is-valid': f.phone.touched && f.callbackUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['callbackUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['callbackUrl'].errors.required\\\">CallbackUrl is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"paymentNotificationUrl\\\">paymentNotificationUrl :</h6>\\n                            <input cInput\\n                                  id=\\\"paymentNotificationUrl\\\"\\n                                  formControlName=\\\"paymentNotificationUrl\\\"\\n                                  placeholder=\\\"paymentNotificationUrl\\\"\\n                                  autocomplete=\\\"given-name\\\"\\n                                  required\\n                                  [autofocus]=\\\"true\\\"\\n                                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.paymentNotificationUrl.touched) && f.paymentNotificationUrl.invalid, 'is-valid': f.address.touched && f.paymentNotificationUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['paymentNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['paymentNotificationUrl'].errors.required\\\">paymentNotificationUrl is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        </c-row>\\n                        <c-row>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"successNotificationUrl\\\">SuccessNotificationUrl :</h6>\\n                          <input cInput\\n                                id=\\\"successNotificationUrl\\\"\\n                                formControlName=\\\"successNotificationUrl\\\"\\n                                placeholder=\\\"successNotificationUrl\\\"\\n                                autocomplete=\\\"given-name\\\"\\n                                required\\n                                [autofocus]=\\\"true\\\"\\n                                [ngClass]=\\\"{ 'is-invalid': (submitted || f.successNotificationUrl.touched) && f.successNotificationUrl.invalid, 'is-valid': f.country.touched && f.successNotificationUrl.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['successNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['successNotificationUrl'].errors.required\\\">successNotificationUrl is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        \\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"acceptNotificationUrl\\\">AcceptNotificationUrl :</h6>\\n                            <input cInput\\n                                   id=\\\"acceptNotificationUrl\\\"\\n                                   formControlName=\\\"acceptNotificationUrl\\\"\\n                                   placeholder=\\\"acceptNotificationUrl\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.acceptNotificationUrl.touched) && f.acceptNotificationUrl.invalid, 'is-valid': f.pincode.touched && f.acceptNotificationUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['acceptNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['acceptNotificationUrl'].errors.required\\\">acceptNotificationUrl is required</div>\\n                            </div>\\n                          </c-form-group>          \\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"remarksNotificationUrl\\\">RemarksNotificationUrl :</h6>\\n                            <input cInput\\n                                   id=\\\"remarksNotificationUrl\\\"\\n                                   formControlName=\\\"remarksNotificationUrl\\\"\\n                                   placeholder=\\\"remarksNotificationUrl\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.remarksNotificationUrl.touched) && f.remarksNotificationUrl.invalid, 'is-valid': f.primaryContact.touched && f.remarksNotificationUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['remarksNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['remarksNotificationUrl'].errors.required\\\">remarksNotificationUrl is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        </c-row> \\n                          <c-form-group>\\n                            <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Submit</button>\\n                            <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                            <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                          </c-form-group>\\n                        </form>\\n                      </c-col>\\n                      </ng-container>\\n\\n              </c-tab-pane>\\n            </c-tab-content>\\n          </c-tabset>\\n        </c-card-body>\\n      </c-card>\\n    </c-col>\\n  </c-row>\\n</div>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MerchantComponent } from './merchant.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MerchantComponent,\n    data: {\n      title: 'Merchant',\n    }\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MerchantRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\nimport { IconModule } from '@coreui/icons-angular';\nimport { MerchantRoutingModule } from './merchant-routing.module';\nimport { MerchantComponent } from './merchant.component';\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\n// Timepicker\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\n\n// Datepicker\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\n\n// Ng2-select\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n// CoreUI\nimport { AlertModule, TextMaskModule } from '@coreui/angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MerchantRoutingModule,\n    CardModule,\n    GridModule,\n    IconModule,\n    SwitchModule,\n    PaginationModule,\n    FormsModule,\n    TabsetModule,\n    BadgeModule,\n    FormsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    ValidationFormsRoutingModule,\n    GridModule,\n    CardModule,\n    ButtonModule,\n    BadgeModule,\n    FormModule,\n    CommonModule,\n    FormsModule,\n    TimepickerModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    NgSelectModule,\n    CardModule,\n    GridModule,\n    ButtonModule,\n    FormModule,\n    IconModule,\n    AlertModule,\n    TextMaskModule,\n  ],\n  declarations: [MerchantComponent],\n})\nexport class MerchantModule {}\n"],"sourceRoot":"webpack:///"}