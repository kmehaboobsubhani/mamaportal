(function () {
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["views-merchant-merchant-module"], {
    /***/
    "/0Kx":
    /*!******************************************************!*\
      !*** ./src/app/views/merchant/merchant.component.ts ***!
      \******************************************************/

    /*! exports provided: confirmPasswordValidator, MerchantComponent */

    /***/
    function Kx(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "confirmPasswordValidator", function () {
        return confirmPasswordValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MerchantComponent", function () {
        return MerchantComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_merchant_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./merchant.component.html */
      "TCTB");
      /* harmony import */


      var _merchant_component_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./merchant.component.css */
      "MGyX");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./validation-forms.service */
      "GqoY");
      /* harmony import */


      var _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../Common/common-data.service */
      "4qVP");
      /* harmony import */


      var _service_data_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../service/data.service */
      "AwSQ");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var text_mask_addons__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! text-mask-addons */
      "l+2V");
      /* harmony import */


      var text_mask_addons__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(text_mask_addons__WEBPACK_IMPORTED_MODULE_9__);
      /** passwords must match - custom validator */


      var confirmPasswordValidator = function confirmPasswordValidator(control) {
        var password = control.get('password');
        var confirm = control.get('confirmPassword');
        return password && confirm && password.value === confirm.value ? null : {
          passwordMismatch: true
        };
      };

      var MerchantComponent = /*#__PURE__*/function () {
        function MerchantComponent(fb, vf, service, commonData, router) {
          _classCallCheck(this, MerchantComponent);

          this.fb = fb;
          this.vf = vf;
          this.service = service;
          this.commonData = commonData;
          this.router = router;
          this.dateModel = '';
          this.dateMask = {
            mask: [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/],
            pipe: Object(text_mask_addons__WEBPACK_IMPORTED_MODULE_9__["createAutoCorrectedDatePipe"])('mm/dd/yyyy'),
            placeholder: 'Please enter a date',
            keepCharPositions: true
          };
          this.minDate = new Date(2017, 5, 10);
          this.maxDate = new Date(2022, 9, 15);
          this.bsValue = new Date();
          this.bsRangeValue = [new Date(2020, 7, 4), new Date(2020, 7, 20)];
          this.customer = {};
          this._lorem = [];
          this._tabs = [{
            header: 'Merchant Info',
            panel: this.lorem[0],
            icon: 'cil-user'
          }, {
            header: 'Payment Info',
            panel: this.lorem[1],
            icon: 'cil-mobile'
          }, {
            header: 'Payment Gateway',
            panel: this.lorem[2],
            icon: 'cil-credit-card'
          }];
          this.submitted = false;
          this.formErrors = this.vf.errorMessages;
          this.createForm();
          this.setTab = 0;
        }

        _createClass(MerchantComponent, [{
          key: "setTab",
          get: function get() {
            return this._setTab;
          },
          set: function set(value) {
            this._setTab = value || 0;
          }
        }, {
          key: "lorem",
          get: function get() {
            return _toConsumableArray(this._lorem);
          }
        }, {
          key: "tabs",
          get: function get() {
            // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));
            // console.log('tabs:', tabs);
            // return tabs;
            return this._tabs;
          }
        }, {
          key: "tabs2",
          get: function get() {
            // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));
            // console.log('tabs:', tabs);
            // return tabs;
            return this._tabs.filter(function (tab) {
              return !tab.disabled;
            });
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {// clearInterval(this.interval);
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            console.log('ngOnChanges', changes, this.setTab);
          }
        }, {
          key: "onTabChange",
          value: function onTabChange(e) {
            console.log('onTabChange', e);
          }
        }, {
          key: "createForm",
          value: function createForm() {
            this.simpleForm = this.fb.group({
              merchantName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              loginId: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].minLength(this.vf.formRules.loginIdMin), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern(this.vf.formRules.nonEmpty)]],
              merchantId: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              companyName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              billingPlan: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              panNo: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              gstNo: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              phone: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              address: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              country: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              pincode: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              primaryContact: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              primaryName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              primaryPhone: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              primaryEmail: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              secondaryContact: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              secondaryName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              secondaryPhone: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              secondaryEmail: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              city: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              state: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              email: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].email]],
              date: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              modeofPayment: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              details: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              amount: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              paymentgateway: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              user: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              password: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              testapikey: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              productionapikey: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              callbackUrl: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              paymentNotificationUrl: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              successNotificationUrl: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              acceptNotificationUrl: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
              remarksNotificationUrl: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]]
            }, {
              validators: confirmPasswordValidator
            });
          } // convenience getter for easy access to form fields

        }, {
          key: "f",
          get: function get() {
            return this.simpleForm.controls;
          }
        }, {
          key: "onReset",
          value: function onReset() {
            this.submitted = false;
            this.simpleForm.reset();
          }
        }, {
          key: "onValidate",
          value: function onValidate() {
            this.submitted = true; // stop here if form is invalid

            return this.simpleForm.status === 'VALID';
          }
        }, {
          key: "onSaveMerchant",
          value: function onSaveMerchant(customer) {
            debugger;
            this.service.saveCustomers(customer).subscribe(function (resp) {
              console.log("login Reponse:::" + JSON.stringify(resp));

              if (resp && resp.statusCode == 200) {
                console.log("Sucess");
                alert('SUCCESS!');
              }
            });
          }
        }, {
          key: "onSubmit",
          value: function onSubmit() {
            debugger; //console.warn(this.onValidate(), this.simpleForm.value);

            if (this.onValidate()) {
              console.warn(this.simpleForm.value);
              alert('SUCCESS!');
            }
          }
        }]);

        return MerchantComponent;
      }();

      MerchantComponent.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]
        }, {
          type: _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__["ValidationFormsService"]
        }, {
          type: _service_data_service__WEBPACK_IMPORTED_MODULE_7__["DataService"]
        }, {
          type: _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__["CommonDataService"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]
        }];
      };

      MerchantComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-tabs',
        template: _raw_loader_merchant_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        providers: [_validation_forms_service__WEBPACK_IMPORTED_MODULE_5__["ValidationFormsService"]],
        styles: [_merchant_component_css__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__["ValidationFormsService"], _service_data_service__WEBPACK_IMPORTED_MODULE_7__["DataService"], _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__["CommonDataService"], _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]])], MerchantComponent);
      /***/
    },

    /***/
    "GqoY":
    /*!************************************************************!*\
      !*** ./src/app/views/merchant/validation-forms.service.ts ***!
      \************************************************************/

    /*! exports provided: ValidationFormsService */

    /***/
    function GqoY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationFormsService", function () {
        return ValidationFormsService;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var ValidationFormsService = function ValidationFormsService() {
        _classCallCheck(this, ValidationFormsService);

        this.formRules = {
          nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',
          loginIdMin: 5,
          passwordMin: 6,
          passwordPattern: '(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'
        };
        this.formErrors = {
          firstName: '',
          lastName: '',
          loginId: '',
          email: '',
          password: '',
          confirmPassword: '',
          accept: false
        };
        this.errorMessages = {
          firstName: {
            required: 'First name is required'
          },
          lastName: {
            required: 'Last name is required'
          },
          loginId: {
            required: 'loginId is required',
            minLength: "'loginId must be ".concat(this.formRules.loginIdMin, " characters or more"),
            pattern: 'Must contain letters and/or numbers, no trailing spaces'
          },
          email: {
            required: 'required',
            email: 'Invalid email address'
          },
          password: {
            required: 'Password is required',
            pattern: 'Password must contain: numbers, uppercase and lowercase letters',
            minLength: "Password must be at least ".concat(this.formRules.passwordMin, " characters")
          },
          confirmPassword: {
            required: 'Password confirmation is required',
            passwordMismatch: 'Passwords must match'
          },
          accept: {
            requiredTrue: 'You have to accept our Terms and Conditions'
          }
        };
      };

      ValidationFormsService.ctorParameters = function () {
        return [];
      };

      ValidationFormsService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [])], ValidationFormsService);
      /***/
    },

    /***/
    "MGyX":
    /*!*******************************************************!*\
      !*** ./src/app/views/merchant/merchant.component.css ***!
      \*******************************************************/

    /*! exports provided: default */

    /***/
    function MGyX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "::ng-deep .card-body {\n  flex: 1 1 auto;\n  min-height: 1px;\n  padding: 1.25rem;\n  margin-bottom: 280px;\n}\n\n::ng-deep .nav-tabs-boxed .tab-content {\n  padding: 0.75rem 1.25rem;\n  border: 1px solid;\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\n  color: #768192;\n  background-color: #fff;\n  border-color: #d8dbe0;\n}\n\n::ng-deep .card-style {\n  border: none;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmNoYW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsaUJBQWlCO0VBQ2pCLHdDQUF3QztFQUN4QyxjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLFlBQVk7QUFDZCIsImZpbGUiOiJtZXJjaGFudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOjpuZy1kZWVwIC5jYXJkLWJvZHkge1xuICBmbGV4OiAxIDEgYXV0bztcbiAgbWluLWhlaWdodDogMXB4O1xuICBwYWRkaW5nOiAxLjI1cmVtO1xuICBtYXJnaW4tYm90dG9tOiAyODBweDtcbn1cblxuOjpuZy1kZWVwIC5uYXYtdGFicy1ib3hlZCAudGFiLWNvbnRlbnQge1xuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiAwIDAuMjVyZW0gMC4yNXJlbSAwLjI1cmVtO1xuICBjb2xvcjogIzc2ODE5MjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyLWNvbG9yOiAjZDhkYmUwO1xufVxuXG46Om5nLWRlZXAgLmNhcmQtc3R5bGUge1xuICBib3JkZXI6IG5vbmU7XG59Il19 */";
      /***/
    },

    /***/
    "TCTB":
    /*!**********************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/merchant/merchant.component.html ***!
      \**********************************************************************************************/

    /*! exports provided: default */

    /***/
    function TCTB(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"fade-in\">\n  <c-row>\n    <c-col>\n      <c-card>\n        <c-card-body>\n          <c-tabset  fill=\"fill\" variant=\"pills\" boxed=\"true\" [activeTab]=\"'0'\">\n            <c-tablist>\n              <c-tab *ngFor=\"let tab of tabs2\">\n                <c-icon [name]=\"tab.icon\" class=\"pb-1\"></c-icon>\n                {{tab.header}}\n              </c-tab>\n            </c-tablist>\n            <c-tab-content>\n              <c-tab-pane *ngFor=\"let tab of tabs2; let i = index\">\n\n                <ng-container *ngIf=\"i===0\">\n                  <c-col md=\"12\" >\n                    <form [formGroup]=\"simpleForm\" novalidate (ngSubmit)=\"onSubmit()\" class=\"needs-validation\">\n                      <c-row>\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"merchantName\">Merchant Name :</h6>\n                        <input cInput\n                               id=\"merchantName\"\n                               formControlName=\"merchantName\"\n                               placeholder=\"Merchant name\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.merchantName.touched) && f.merchantName.invalid, 'is-valid': f.loginId.touched && f.merchantName.valid  }\" />\n                        <div *ngIf=\"submitted && f['merchantName'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['merchantName'].errors.required\">Merchant Short Name is required</div>\n                        </div>\n                      </c-form-group>\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"loginId\">loginId :</h6>\n                        <input cInput\n                               id=\"loginId\"\n                               formControlName=\"loginId\"\n                               placeholder=\"loginId\"\n                               autocomplete=\"loginId\"\n                               required\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.loginId.touched) && f.loginId.errors, 'is-valid': f.merchantId.touched && !f.loginId.errors }\" />\n                          <div *ngIf=\"submitted && f['loginId'].errors\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['loginId'].errors.required\">LoginId is required</div>\n                          <div *ngIf=\"f['loginId'].errors.minlength\">{{formErrors.loginId.minLength}}</div>\n                          <div *ngIf=\"f['loginId'].errors.pattern\">{{formErrors.loginId.pattern}}</div>\n                        </div>\n                      </c-form-group>\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"file-input\">company Reg Certificate Attachment :</h6>\n                        <c-col md=\"9\">\n                          <input cInput type=\"file\" id=\"file-input\" accept=\"pdf\" name=\"file-input\">\n                        </c-col>\n                      </c-form-group>\n                      <!-- <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"merchantId\">merchantId :</h6>\n                        <input cInput\n                               id=\"merchantId\"\n                               formControlName=\"merchantId\"\n                               placeholder=\"merchantId\"\n                               autocomplete=\"family-name\"\n                               required\n                               [ngClass]=\"{ 'is-invalid':  (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.panNo.touched && f.merchantId.valid }\" />\n                        <div *ngIf=\"submitted && f['merchantId'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['merchantId'].errors.required\">MerchantId is required</div>\n                        </div>\n                      </c-form-group> -->\n                    </c-row>\n                    <c-row>\n                      <c-form-group cCol md=\"3\">\n                        <h6 class=\"col-form-label\" for=\"panNo\">Pan Number :</h6>\n                        <input cInput\n                               id=\"panNo\"\n                               formControlName=\"panNo\"\n                               placeholder=\"Pan Number\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.panNo.touched) && f.panNo.invalid, 'is-valid': f.gstNo.touched && f.panNo.valid  }\" />\n                        <div *ngIf=\"submitted && f['panNo'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['panNo'].errors.required\">Pan Number is required</div>\n                        </div>\n                      </c-form-group>\n\n                      <c-form-group cCol md=\"3\">\n                        <h6 class=\"col-form-label\" for=\"file-input\">Pan File Attachment :</h6>\n                        <c-col md=\"9\">\n                          <input cInput type=\"file\" id=\"file-input\" accept=\"pdf\" name=\"file-input\">\n                        </c-col>\n                      </c-form-group>\n\n                      <c-form-group cCol md=\"3\">\n                        <h6 class=\"col-form-label\" for=\"gstNo\">Gst Number :</h6>\n                        <input cInput\n                               id=\"gstNo\"\n                               formControlName=\"gstNo\"\n                               placeholder=\"Gst Number\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.gstNo.touched) && f.gstNo.invalid, 'is-valid': f.billingPlan.touched && f.gstNo.valid  }\" />\n                        <div *ngIf=\"submitted && f['gstNo'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['gstNo'].errors.required\">Gst Number is required</div>\n                        </div>\n                      </c-form-group>\n      \n                      <c-form-group cCol md=\"3\">\n                        <h6 class=\"col-form-label\" for=\"file-input\">Gst File Attachment :</h6>\n                        <c-col md=\"9\">\n                          <input cInput type=\"file\" id=\"file-input\" name=\"file-input\">\n                        </c-col>\n                      </c-form-group>\n                    </c-row>\n                    <c-row>\n                      \n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"billingPlan\">Billing Plan :</h6>\n                               <select  cSelect name=\"billingPlan\"\n                               id=\"billingPlan\"\n                               formControlName=\"billingPlan\"\n                               placeholder=\"Billing Plan\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.billingPlan.touched) && f.billingPlan.invalid, 'is-valid': f.phone.touched && f.billingPlan.valid  }\"                              \n                               >\n                                <option value=\"1\">Basic</option>\n                                <option value=\"2\">Standard</option>\n                                <option value=\"3\">Enterprise</option>\n                                <option value=\"3\">custom</option>\n                              </select>\n                               <div *ngIf=\"submitted && f['billingPlan'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['billingPlan'].errors.required\">Billing Plan is required</div>\n                        </div>\n                      </c-form-group>\n\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"phone\">Merchant Phone Number :</h6>\n                        <input cInput\n                              id=\"phone\"\n                              formControlName=\"phone\"\n                              placeholder=\"Phone Number\"\n                              autocomplete=\"given-name\"\n                              required\n                              [autofocus]=\"true\"\n                              [ngClass]=\"{ 'is-invalid': (submitted || f.phone.touched) && f.phone.invalid, 'is-valid': f.address.touched && f.phone.valid  }\" />\n                        <div *ngIf=\"submitted && f['phone'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['phone'].errors.required\">Merchant Phone Number is required</div>\n                        </div>\n                      </c-form-group>\n\n                       <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"phone\">Merchant Email :</h6>\n                        <input cInput\n                               id=\"email\"\n                               type=\"email\"\n                               formControlName=\"email\"\n                               placeholder=\"Email\"\n                               autocomplete=\"email\"\n                               required\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\" />\n                        <div *ngIf=\"submitted && f['email'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['email'].errors.required\">Merchant Email is required</div>\n                          <div *ngIf=\"f['email'].errors.email\">{{formErrors.email.email}}</div>\n                        </div>\n                      </c-form-group> \n\n                    </c-row>\n                    <c-row>\n                    <c-form-group cCol md=\"4\">\n                      <h6 class=\"col-form-label\" for=\"address\">Address :</h6>\n                      <input cInput\n                            id=\"address\"\n                            formControlName=\"address\"\n                            placeholder=\"enter street name\"\n                            autocomplete=\"given-name\"\n                            required\n                            [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.address.touched) && f.address.invalid, 'is-valid': f.country.touched && f.address.valid  }\" />\n                      <div *ngIf=\"submitted && f['address'].invalid\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f['address'].errors.required\">Address is required</div>\n                      </div>\n                    </c-form-group>\n\n                    <c-form-group cCol md=\"4\">\n                      <h6 class=\"col-form-label\" for=\"city\">City :</h6>\n                      <input cInput\n                            id=\"city\"\n                            formControlName=\"city\"\n                            placeholder=\"city\"\n                            autocomplete=\"given-name\"\n                            required\n                            [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.city.touched) && f.city.invalid, 'is-valid': f.country.touched && f.city.valid  }\" />\n                      <div *ngIf=\"submitted && f['city'].invalid\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f['city'].errors.required\">city is required</div>\n                      </div>\n                    </c-form-group>\n\n                    <c-form-group cCol md=\"4\">\n                      <h6 class=\"col-form-label\" for=\"state\">State :</h6>\n                      <input cInput\n                            id=\"state\"\n                            formControlName=\"state\"\n                            placeholder=\"state\"\n                            autocomplete=\"given-name\"\n                            required\n                            [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.state.touched) && f.state.invalid, 'is-valid': f.country.touched && f.state.valid  }\" />\n                      <div *ngIf=\"submitted && f['state'].invalid\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f['state'].errors.required\">state is required</div>\n                      </div>\n                    </c-form-group>\n\n                    </c-row>\n                    <c-row>\n                      <c-form-group cCol md=\"3\">\n                        <h6 class=\"col-form-label\" for=\"country\">country :</h6>\n                        <input cInput\n                               id=\"country\"\n                               formControlName=\"country\"\n                               placeholder=\"country\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.country.touched) && f.country.invalid, 'is-valid': f.pincode.touched && f.country.valid  }\" />\n                        <div *ngIf=\"submitted && f['country'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['country'].errors.required\">country is required</div>\n                        </div>\n                      </c-form-group>\n      \n                      <c-form-group cCol md=\"3\">\n                        <h6 class=\"col-form-label\" for=\"pincode\">pincode :</h6>\n                        <input cInput\n                               id=\"pincode\"\n                               formControlName=\"pincode\"\n                               placeholder=\"pincode\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.pincode.touched) && f.pincode.invalid, 'is-valid': f.primaryContact.touched && f.pincode.valid  }\" />\n                        <div *ngIf=\"submitted && f['pincode'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['pincode'].errors.required\">pincode is required</div>\n                        </div>\n                      </c-form-group>\n                    </c-row>\n                    <c-row>\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"primaryName\">primaryName :</h6>\n                        <input cInput\n                              id=\"primaryName\"\n                              formControlName=\"primaryName\"\n                              placeholder=\"primaryName\"\n                              autocomplete=\"given-name\"\n                              required\n                              [autofocus]=\"true\"\n                              [ngClass]=\"{ 'is-invalid': (submitted || f.primaryName.touched) && f.primaryName.invalid, 'is-valid': f.primaryPhone.touched && f.primaryName.valid  }\" />\n                        <div *ngIf=\"submitted && f['primaryName'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['primaryName'].errors.required\">primaryName is required</div>\n                        </div>\n                      </c-form-group>\n\n\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"primaryPhone\">primaryPhone :</h6>\n                        <input cInput\n                              id=\"primaryPhone\"\n                              formControlName=\"primaryPhone\"\n                              placeholder=\"primaryPhone\"\n                              autocomplete=\"given-name\"\n                              required\n                              [autofocus]=\"true\"\n                              [ngClass]=\"{ 'is-invalid': (submitted || f.primaryPhone.touched) && f.primaryPhone.invalid, 'is-valid': f.primaryEmail.touched && f.primaryPhone.valid  }\" />\n                        <div *ngIf=\"submitted && f['primaryPhone'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['primaryPhone'].errors.required\">primaryPhone is required</div>\n                        </div>\n                      </c-form-group>\n\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"primaryEmail\">primaryEmail :</h6>\n                        <input cInput\n                              id=\"primaryEmail\"\n                              formControlName=\"primaryEmail\"\n                              placeholder=\"primaryEmail\"\n                              autocomplete=\"given-name\"\n                              required\n                              [autofocus]=\"true\"\n                              [ngClass]=\"{ 'is-invalid': (submitted || f.primaryEmail.touched) && f.primaryEmail.invalid, 'is-valid': f.secondaryContact.touched && f.primaryEmail.valid  }\" />\n                        <div *ngIf=\"submitted && f['primaryEmail'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['primaryEmail'].errors.required\">primaryEmail is required</div>\n                        </div>\n                      </c-form-group>\n\n                    </c-row>\n\n                    <c-row>\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"secondaryName\">secondaryName:</h6>\n                        <input cInput\n                               id=\"secondaryName\"\n                               formControlName=\"secondaryName\"\n                               placeholder=\"secondaryName\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.secondaryName.touched) && f.secondaryName.invalid, 'is-valid': f.secondaryName.valid  }\" />\n                        <div *ngIf=\"submitted && f['secondaryName'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['secondaryName'].errors.required\">secondaryName is required</div>\n                        </div>\n                      </c-form-group>\n\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"secondaryPhone\">secondaryPhone:</h6>\n                        <input cInput\n                               id=\"secondaryPhone\"\n                               formControlName=\"secondaryPhone\"\n                               placeholder=\"secondaryPhone\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.secondaryPhone.touched) && f.secondaryPhone.invalid, 'is-valid': f.secondaryPhone.valid  }\" />\n                        <div *ngIf=\"submitted && f['secondaryPhone'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['secondaryPhone'].errors.required\">secondaryPhone is required</div>\n                        </div>\n                      </c-form-group>\n\n                      <c-form-group cCol md=\"4\">\n                        <h6 class=\"col-form-label\" for=\"secondaryEmail\">secondaryEmail:</h6>\n                        <input cInput\n                               id=\"secondaryEmail\"\n                               formControlName=\"secondaryEmail\"\n                               placeholder=\"secondaryEmail\"\n                               autocomplete=\"given-name\"\n                               required\n                               [autofocus]=\"true\"\n                               [ngClass]=\"{ 'is-invalid': (submitted || f.secondaryEmail.touched) && f.secondaryEmail.invalid, 'is-valid': f.secondaryEmail.valid  }\" />\n                        <div *ngIf=\"submitted && f['secondaryEmail'].invalid\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f['secondaryEmail'].errors.required\">secondaryEmail is required</div>\n                        </div>\n                      </c-form-group>\n\n                    </c-row>\n\n                      <c-form-group>\n                        <button cButton color=\"primary\" class=\"mfe-1\" type=\"submit\" (click)=\"onSaveMerchant(simpleForm.value)\" [disabled]=\"simpleForm.valid\" [tabindex]=\"'0'\" >Submit</button>\n                        <button cButton color=\"success\" class=\"mfe-1\" [disabled]=\"simpleForm.valid\" (click)=\"onValidate()\" [tabindex]=\"'0'\">Validate</button>\n                        <button cButton color=\"danger\" type=\"reset\" (click)=\"onReset()\" [tabindex]=\"'0'\">Clear</button>\n                      </c-form-group>\n                    </form>\n                  </c-col>\n                  </ng-container>\n      \n                  <ng-container *ngIf=\"i===1\">\n                    <c-col md=\"12\" >\n                      <form [formGroup]=\"simpleForm\" novalidate (ngSubmit)=\"onSubmit()\" class=\"needs-validation\">\n                        <c-row>                         \n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"date\">Date :</h6>\n                            <input cInput\n                                   id=\"date-input\" \n                                   type=\"date\" \n                                   name=\"date-input\" \n                                   placeholder=\"date\"\n                                   formControlName=\"date\"\n                                   autocomplete=\"given-name\"\n                                   required\n                                   [autofocus]=\"true\"\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.date.touched) && f.date.invalid, 'is-valid': f.loginId.touched && f.date.valid  }\" />\n                            <div *ngIf=\"submitted && f['date'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['date'].errors.required\">date is required</div>\n                            </div>\n                          </c-form-group>\n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"modeofPayment\">mode of Payment :</h6>\n                                   <select  cSelect name=\"modeofPayment\"\n                                   id=\"modeofPayment\"\n                                   formControlName=\"modeofPayment\"\n                                   placeholder=\"Billing Plan\"\n                                   autocomplete=\"given-name\"\n                                   required\n                                   [autofocus]=\"true\"\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.modeofPayment.touched) && f.modeofPayment.invalid, 'is-valid': f.phone.touched && f.modeofPayment.valid  }\"                              \n                                   >\n                                    <option value=\"1\">Card</option>\n                                    <option value=\"2\">OnlineTransfer</option>\n                                    <option value=\"3\">Cash</option>\n                                  </select>\n                                   <div *ngIf=\"submitted && f['modeofPayment'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['modeofPayment'].errors.required\">ModeofPayment is required</div>\n                            </div>\n                          </c-form-group>\n                        <c-form-group cCol md=\"4\">\n                          <h6 class=\"col-form-label\" for=\"details\">Details :</h6>\n                          <input cInput\n                                 id=\"details\"\n                                 formControlName=\"details\"\n                                 placeholder=\"details\"\n                                 autocomplete=\"family-name\"\n                                 required\n                                 [ngClass]=\"{ 'is-invalid':  (submitted || f.details.touched) && f.details.invalid, 'is-valid': f.panNo.touched && f.details.valid }\" />\n                          <div *ngIf=\"submitted && f['details'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['details'].errors.required\">details is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"4\">\n                          <h6 class=\"col-form-label\" for=\"amount\">Amount :</h6>\n                          <input cInput\n                                 id=\"amount\"\n                                 formControlName=\"amount\"\n                                 placeholder=\"amount\"\n                                 autocomplete=\"given-name\"\n                                 required\n                                 [autofocus]=\"true\"\n                                 [ngClass]=\"{ 'is-invalid': (submitted || f.amount.touched) && f.amount.invalid, 'is-valid': f.gstNo.touched && f.amount.valid  }\" />\n                          <div *ngIf=\"submitted && f['amount'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['amount'].errors.required\">Billing Plan is required</div>\n                          </div>\n                        </c-form-group>                                \n                      </c-row>\n                        <c-form-group>\n                          <button cButton color=\"primary\" class=\"mfe-1\" type=\"submit\" (click)=\"onSaveMerchant(simpleForm.value)\" [disabled]=\"simpleForm.valid\" [tabindex]=\"'0'\" >Save</button>\n                          <button cButton color=\"success\" class=\"mfe-1\" [disabled]=\"simpleForm.valid\" (click)=\"onValidate()\" [tabindex]=\"'0'\">Validate</button>\n                          <button cButton color=\"danger\" type=\"reset\" (click)=\"onReset()\" [tabindex]=\"'0'\">Clear</button>\n                        </c-form-group>\n                      </form>\n                    </c-col>\n                    </ng-container>\n      \n                    <ng-container *ngIf=\"i===2\">\n                      <c-col md=\"12\" >\n                        <form [formGroup]=\"simpleForm\" novalidate (ngSubmit)=\"onSubmit()\" class=\"needs-validation\">\n                          <c-row>\n                            <c-form-group cCol md=\"4\">\n                              <h6 class=\"col-form-label\" for=\"paymentgateway\">Payment Gateway :</h6>\n                                     <select  cSelect name=\"paymentgateway\"\n                                     id=\"paymentgateway\"\n                                     formControlName=\"paymentgateway\"\n                                     placeholder=\"paymentgateway\"\n                                     autocomplete=\"given-name\"\n                                     required\n                                     [autofocus]=\"true\"\n                                     [ngClass]=\"{ 'is-invalid': (submitted || f.paymentgateway.touched) && f.paymentgateway.invalid, 'is-valid': f.phone.touched && f.paymentgateway.valid  }\">\n                                      <option value=\"1\">Paytm</option>\n                                      <option value=\"2\">RazorPay</option>\n                                      <option value=\"3\">PayU</option>\n                                    </select>\n                                     <div *ngIf=\"submitted && f['paymentgateway'].invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f['paymentgateway'].errors.required\">paymentgateway is required</div>\n                              </div>\n                            </c-form-group>\n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"user\">User :</h6>\n                            <input cInput\n                                   id=\"user\"\n                                   formControlName=\"user\"\n                                   placeholder=\"user\"\n                                   autocomplete=\"user\"\n                                   required\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.user.touched) && f.user.errors, 'is-valid': f.merchantId.touched && !f.user.errors }\" />\n                              <div *ngIf=\"submitted && f['user'].errors\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['user'].errors.required\">User is required</div>\n                            </div>\n                          </c-form-group>\n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"password\">Password :</h6>\n                            <input cInput\n                                  type=\"password\"\n                                  placeholder=\"Password\"\n                                  autocomplete=\"current-password\"\n                                  required\n                                   id=\"password\"\n                                   autocomplete=\"family-name\"\n                                   required\n                                   [ngClass]=\"{ 'is-invalid':  (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.panNo.touched && f.password.valid }\" />\n                            <div *ngIf=\"submitted && f['password'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['password'].errors.required\">Password is required</div>\n                            </div>\n                          </c-form-group>\n                        </c-row>\n                        <c-row>\n                          <c-form-group cCol md=\"6\">\n                            <h6 class=\"col-form-label\" for=\"testapikey\">TestApikey :</h6>\n                            <input cInput\n                                   id=\"testapikey\"\n                                   formControlName=\"testapikey\"\n                                   placeholder=\"testapikey\"\n                                   autocomplete=\"given-name\"\n                                   required\n                                   [autofocus]=\"true\"\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.testapikey.touched) && f.testapikey.invalid, 'is-valid': f.gstNo.touched && f.testapikey.valid  }\" />\n                            <div *ngIf=\"submitted && f['testapikey'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['testapikey'].errors.required\">TestApikey is required</div>\n                            </div>\n                          </c-form-group>\n                          <c-form-group cCol md=\"6\">\n                            <h6 class=\"col-form-label\" for=\"productionapikey\">ProductionApikey :</h6>\n                            <input cInput\n                                   id=\"productionapikey\"\n                                   formControlName=\"productionapikey\"\n                                   placeholder=\"productionapikey\"\n                                   autocomplete=\"given-name\"\n                                   required\n                                   [autofocus]=\"true\"\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.productionapikey.touched) && f.productionapikey.invalid, 'is-valid': f.billingPlan.touched && f.productionapikey.valid  }\" />\n                            <div *ngIf=\"submitted && f['productionapikey'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['productionapikey'].errors.required\">productionapikey is required</div>\n                            </div>\n                          </c-form-group>\n          \n                        </c-row>\n                        <c-row>\n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"callbackUrl\">CallbackUrl :</h6>\n                            <input cInput\n                                   id=\"callbackUrl\"\n                                   formControlName=\"callbackUrl\"\n                                   placeholder=\"callbackUrl\"\n                                   autocomplete=\"given-name\"\n                                   required\n                                   [autofocus]=\"true\"\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.callbackUrl.touched) && f.callbackUrl.invalid, 'is-valid': f.phone.touched && f.callbackUrl.valid  }\" />\n                            <div *ngIf=\"submitted && f['callbackUrl'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['callbackUrl'].errors.required\">CallbackUrl is required</div>\n                            </div>\n                          </c-form-group>\n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"paymentNotificationUrl\">paymentNotificationUrl :</h6>\n                            <input cInput\n                                  id=\"paymentNotificationUrl\"\n                                  formControlName=\"paymentNotificationUrl\"\n                                  placeholder=\"paymentNotificationUrl\"\n                                  autocomplete=\"given-name\"\n                                  required\n                                  [autofocus]=\"true\"\n                                  [ngClass]=\"{ 'is-invalid': (submitted || f.paymentNotificationUrl.touched) && f.paymentNotificationUrl.invalid, 'is-valid': f.address.touched && f.paymentNotificationUrl.valid  }\" />\n                            <div *ngIf=\"submitted && f['paymentNotificationUrl'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['paymentNotificationUrl'].errors.required\">paymentNotificationUrl is required</div>\n                            </div>\n                          </c-form-group>\n                        </c-row>\n                        <c-row>\n                        <c-form-group cCol md=\"4\">\n                          <h6 class=\"col-form-label\" for=\"successNotificationUrl\">SuccessNotificationUrl :</h6>\n                          <input cInput\n                                id=\"successNotificationUrl\"\n                                formControlName=\"successNotificationUrl\"\n                                placeholder=\"successNotificationUrl\"\n                                autocomplete=\"given-name\"\n                                required\n                                [autofocus]=\"true\"\n                                [ngClass]=\"{ 'is-invalid': (submitted || f.successNotificationUrl.touched) && f.successNotificationUrl.invalid, 'is-valid': f.country.touched && f.successNotificationUrl.valid  }\" />\n                          <div *ngIf=\"submitted && f['successNotificationUrl'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['successNotificationUrl'].errors.required\">successNotificationUrl is required</div>\n                          </div>\n                        </c-form-group>\n                        \n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"acceptNotificationUrl\">AcceptNotificationUrl :</h6>\n                            <input cInput\n                                   id=\"acceptNotificationUrl\"\n                                   formControlName=\"acceptNotificationUrl\"\n                                   placeholder=\"acceptNotificationUrl\"\n                                   autocomplete=\"given-name\"\n                                   required\n                                   [autofocus]=\"true\"\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.acceptNotificationUrl.touched) && f.acceptNotificationUrl.invalid, 'is-valid': f.pincode.touched && f.acceptNotificationUrl.valid  }\" />\n                            <div *ngIf=\"submitted && f['acceptNotificationUrl'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['acceptNotificationUrl'].errors.required\">acceptNotificationUrl is required</div>\n                            </div>\n                          </c-form-group>          \n                          <c-form-group cCol md=\"4\">\n                            <h6 class=\"col-form-label\" for=\"remarksNotificationUrl\">RemarksNotificationUrl :</h6>\n                            <input cInput\n                                   id=\"remarksNotificationUrl\"\n                                   formControlName=\"remarksNotificationUrl\"\n                                   placeholder=\"remarksNotificationUrl\"\n                                   autocomplete=\"given-name\"\n                                   required\n                                   [autofocus]=\"true\"\n                                   [ngClass]=\"{ 'is-invalid': (submitted || f.remarksNotificationUrl.touched) && f.remarksNotificationUrl.invalid, 'is-valid': f.primaryContact.touched && f.remarksNotificationUrl.valid  }\" />\n                            <div *ngIf=\"submitted && f['remarksNotificationUrl'].invalid\" class=\"invalid-feedback\">\n                              <div *ngIf=\"f['remarksNotificationUrl'].errors.required\">remarksNotificationUrl is required</div>\n                            </div>\n                          </c-form-group>\n                        </c-row> \n                          <c-form-group>\n                            <button cButton color=\"primary\" class=\"mfe-1\" type=\"submit\" (click)=\"onSaveMerchant(simpleForm.value)\" [disabled]=\"simpleForm.valid\" [tabindex]=\"'0'\" >Submit</button>\n                            <button cButton color=\"success\" class=\"mfe-1\" [disabled]=\"simpleForm.valid\" (click)=\"onValidate()\" [tabindex]=\"'0'\">Validate</button>\n                            <button cButton color=\"danger\" type=\"reset\" (click)=\"onReset()\" [tabindex]=\"'0'\">Clear</button>\n                          </c-form-group>\n                        </form>\n                      </c-col>\n                      </ng-container>\n\n              </c-tab-pane>\n            </c-tab-content>\n          </c-tabset>\n        </c-card-body>\n      </c-card>\n    </c-col>\n  </c-row>\n</div>\n";
      /***/
    },

    /***/
    "l95u":
    /*!***********************************************************!*\
      !*** ./src/app/views/merchant/merchant-routing.module.ts ***!
      \***********************************************************/

    /*! exports provided: MerchantRoutingModule */

    /***/
    function l95u(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MerchantRoutingModule", function () {
        return MerchantRoutingModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _merchant_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./merchant.component */
      "/0Kx");

      var routes = [{
        path: '',
        component: _merchant_component__WEBPACK_IMPORTED_MODULE_3__["MerchantComponent"],
        data: {
          title: 'Merchant'
        }
      }];

      var MerchantRoutingModule = function MerchantRoutingModule() {
        _classCallCheck(this, MerchantRoutingModule);
      };

      MerchantRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
      })], MerchantRoutingModule);
      /***/
    },

    /***/
    "uGy2":
    /*!***************************************************!*\
      !*** ./src/app/views/merchant/merchant.module.ts ***!
      \***************************************************/

    /*! exports provided: MerchantModule */

    /***/
    function uGy2(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MerchantModule", function () {
        return MerchantModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _coreui_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @coreui/angular */
      "Iluq");
      /* harmony import */


      var _coreui_icons_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @coreui/icons-angular */
      "rVqu");
      /* harmony import */


      var _merchant_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./merchant-routing.module */
      "l95u");
      /* harmony import */


      var _merchant_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./merchant.component */
      "/0Kx");
      /* harmony import */


      var ngx_bootstrap_pagination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ngx-bootstrap/pagination */
      "6No5");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _forms_validation_forms_validation_forms_routing_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../forms/validation-forms/validation-forms-routing.module */
      "jloh");
      /* harmony import */


      var ngx_bootstrap_timepicker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ngx-bootstrap/timepicker */
      "M3cK");
      /* harmony import */


      var ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ngx-bootstrap/datepicker */
      "ienR");
      /* harmony import */


      var _ng_select_ng_select__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @ng-select/ng-select */
      "wTG2"); // Timepicker
      // Datepicker
      // Ng2-select
      // CoreUI


      var MerchantModule = function MerchantModule() {
        _classCallCheck(this, MerchantModule);
      };

      MerchantModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _merchant_routing_module__WEBPACK_IMPORTED_MODULE_5__["MerchantRoutingModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["CardModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["GridModule"], _coreui_icons_angular__WEBPACK_IMPORTED_MODULE_4__["IconModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["SwitchModule"], ngx_bootstrap_pagination__WEBPACK_IMPORTED_MODULE_7__["PaginationModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["TabsetModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["BadgeModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"], _forms_validation_forms_validation_forms_routing_module__WEBPACK_IMPORTED_MODULE_9__["ValidationFormsRoutingModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["GridModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["CardModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["ButtonModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["BadgeModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["FormModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"], ngx_bootstrap_timepicker__WEBPACK_IMPORTED_MODULE_10__["TimepickerModule"].forRoot(), ngx_bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_11__["BsDatepickerModule"].forRoot(), _ng_select_ng_select__WEBPACK_IMPORTED_MODULE_12__["NgSelectModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["CardModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["GridModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["ButtonModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["FormModule"], _coreui_icons_angular__WEBPACK_IMPORTED_MODULE_4__["IconModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["AlertModule"], _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["TextMaskModule"]],
        declarations: [_merchant_component__WEBPACK_IMPORTED_MODULE_6__["MerchantComponent"]]
      })], MerchantModule);
      /***/
    }
  }]);
})();
//# sourceMappingURL=views-merchant-merchant-module-es5.js.map