{"version":3,"sources":["webpack:///src/app/views/merchant/merchant.component.ts","webpack:///src/app/views/merchant/validation-forms.service.ts","webpack:///src/app/views/merchant/merchant.component.css","webpack:///src/app/views/merchant/merchant.component.html","webpack:///src/app/views/merchant/merchant-routing.module.ts","webpack:///src/app/views/merchant/merchant.module.ts"],"names":["confirmPasswordValidator","control","password","get","confirm","value","passwordMismatch","MerchantComponent","fb","vf","service","commonData","router","dateModel","dateMask","mask","pipe","placeholder","keepCharPositions","minDate","Date","maxDate","bsValue","bsRangeValue","customer","_lorem","_tabs","header","panel","lorem","icon","submitted","formErrors","errorMessages","createForm","setTab","_setTab","filter","tab","disabled","changes","console","log","e","simpleForm","group","merchantName","required","loginId","minLength","formRules","loginIdMin","pattern","nonEmpty","merchantId","companyName","billingPlan","panNo","gstNo","phone","address","country","pincode","primaryContact","primaryName","primaryPhone","primaryEmail","secondaryContact","secondaryName","secondaryPhone","secondaryEmail","city","state","email","date","modeofPayment","details","amount","paymentgateway","user","testapikey","productionapikey","callbackUrl","paymentNotificationUrl","successNotificationUrl","acceptNotificationUrl","remarksNotificationUrl","validators","controls","reset","status","saveCustomers","subscribe","resp","JSON","stringify","statusCode","alert","onValidate","warn","selector","template","providers","ValidationFormsService","passwordMin","passwordPattern","firstName","lastName","confirmPassword","accept","requiredTrue","providedIn","routes","path","component","data","title","MerchantRoutingModule","imports","forChild","exports","MerchantModule","forRoot","declarations"],"mappings":"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","file":"views-merchant-merchant-module-es5.js","sourcesContent":["import {\n  Component,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  AbstractControl,\n  FormGroupName,\n} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\nimport { CommonDataService } from '../../Common/common-data.service';\nimport { DataService } from '../../service/data.service';\nimport { Router } from '@angular/router';\nimport { Customer } from './customer';\nimport { ViewEncapsulation } from '@angular/core';\nimport { createAutoCorrectedDatePipe } from 'text-mask-addons';\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n  \n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n    \n};\n\n@Component({\n  selector: 'app-tabs',\n  templateUrl: './merchant.component.html',\n  styleUrls: ['./merchant.component.css'],\n  providers: [ValidationFormsService],\n})\nexport class MerchantComponent implements OnDestroy, OnInit, OnChanges {\n\n  public dateModel = '';\n  public dateMask = {\n    mask: [/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/],\n    pipe: createAutoCorrectedDatePipe('mm/dd/yyyy'),\n    placeholder: 'Please enter a date',\n    keepCharPositions: true,\n  };\n\n  minDate = new Date(2017, 5, 10);\n  maxDate = new Date(2022, 9, 15);\n\n  bsValue: Date = new Date();\n  bsRangeValue: any = [new Date(2020, 7, 4), new Date(2020, 7, 20)];\n\n  customer:any = {};\n  private _setTab: number;\n  get setTab() {\n    return this._setTab;\n  }\n  set setTab(value: number) {\n    this._setTab = value || 0;\n  }\n  private interval;\n\n  private _lorem: string[] = [\n      ];\n  public get lorem() {\n    return [...this._lorem];\n  }\n\n  private _tabs: any[] = [\n    { header: 'Merchant Info', panel: this.lorem[0], icon: 'cil-user' },\n    { header: 'Payment Info', panel: this.lorem[1], icon: 'cil-mobile' },\n    { header: 'Payment Gateway', panel: this.lorem[2], icon: 'cil-credit-card' },\n    \n    //{ header: 'Certificates', panel: this.lorem[3], icon: 'cil-envelope-closed' },\n  ];\n\n  public get tabs() {\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\n    // console.log('tabs:', tabs);\n    // return tabs;\n    return this._tabs;\n  }\n\n  public get tabs2() {\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\n    // console.log('tabs:', tabs);\n    // return tabs;\n    return this._tabs.filter((tab) => !tab.disabled);\n  }\n\n  simpleForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n    this.setTab = 0;\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngOnDestroy(): void {\n    // clearInterval(this.interval);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log('ngOnChanges', changes, this.setTab);\n  }\n\n  onTabChange(e) {\n    console.log('onTabChange', e);\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group(\n      {\n        merchantName: ['', [Validators.required]],\n        loginId: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.loginIdMin),\n            Validators.pattern(this.vf.formRules.nonEmpty),\n          ],\n        ],\n        merchantId: ['', [Validators.required]],\n        companyName: ['', [Validators.required]],\n\n        billingPlan: ['', [Validators.required]],\n        panNo: ['', [Validators.required]],\n        gstNo: ['', [Validators.required]],\n\n        phone: ['', [Validators.required]],\n        \n        address: ['', [Validators.required]],\n\n        country: ['', [Validators.required]],\n        pincode: ['', [Validators.required]],\n\n        primaryContact: ['', [Validators.required]],\n        primaryName: ['', [Validators.required]],\n        primaryPhone: ['', [Validators.required]],\n        primaryEmail: ['', [Validators.required]],\n        \n        secondaryContact: ['', [Validators.required]],\n        secondaryName: ['', [Validators.required]],\n        secondaryPhone: ['', [Validators.required]],\n        secondaryEmail: ['', [Validators.required]],\n        city: ['', [Validators.required]],\n        state: ['', [Validators.required]],\n        email: ['', [Validators.required, Validators.email]],\n\n\n        date:['', [Validators.required]],\n        modeofPayment:['', [Validators.required]],\n        details:['', [Validators.required]],\n        amount:['', [Validators.required]],\n\n\n        paymentgateway:['', [Validators.required]],\n        user:['', [Validators.required]],\n        password:['', [Validators.required]],\n        testapikey:['', [Validators.required]],\n        productionapikey:['', [Validators.required]],\n        callbackUrl:['', [Validators.required]],\n        paymentNotificationUrl:['', [Validators.required]],\n        successNotificationUrl:['', [Validators.required]],\n        acceptNotificationUrl:['', [Validators.required]],\n        remarksNotificationUrl:['', [Validators.required]],\n\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.simpleForm.controls;\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.simpleForm.reset();\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.simpleForm.status === 'VALID';\n  }\n\n  onSaveMerchant(customer : Customer){\n    debugger;\n    this.service.saveCustomers(customer).subscribe((resp: any) => {\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\n      if(resp && resp.statusCode == 200) {\n          console.log(\"Sucess\")\n          alert('SUCCESS!');\n      }    \n    });\n  }\n\n  onSubmit() {\n    debugger;\n    //console.warn(this.onValidate(), this.simpleForm.value);\n    if (this.onValidate()) {\n      console.warn(this.simpleForm.value);\n      alert('SUCCESS!');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    loginIdMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    loginId: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      loginId: {\n        required: 'loginId is required',\n        minLength: `'loginId must be ${this.formRules.loginIdMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n","export default \"::ng-deep .card-body {\\n  flex: 1 1 auto;\\n  min-height: 1px;\\n  padding: 1.25rem;\\n  margin-bottom: 280px;\\n}\\n\\n::ng-deep .nav-tabs-boxed .tab-content {\\n  padding: 0.75rem 1.25rem;\\n  border: 1px solid;\\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\\n  color: #768192;\\n  background-color: #fff;\\n  border-color: #d8dbe0;\\n}\\n\\n::ng-deep .card-style {\\n  border: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmNoYW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsaUJBQWlCO0VBQ2pCLHdDQUF3QztFQUN4QyxjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLFlBQVk7QUFDZCIsImZpbGUiOiJtZXJjaGFudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOjpuZy1kZWVwIC5jYXJkLWJvZHkge1xuICBmbGV4OiAxIDEgYXV0bztcbiAgbWluLWhlaWdodDogMXB4O1xuICBwYWRkaW5nOiAxLjI1cmVtO1xuICBtYXJnaW4tYm90dG9tOiAyODBweDtcbn1cblxuOjpuZy1kZWVwIC5uYXYtdGFicy1ib3hlZCAudGFiLWNvbnRlbnQge1xuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiAwIDAuMjVyZW0gMC4yNXJlbSAwLjI1cmVtO1xuICBjb2xvcjogIzc2ODE5MjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyLWNvbG9yOiAjZDhkYmUwO1xufVxuXG46Om5nLWRlZXAgLmNhcmQtc3R5bGUge1xuICBib3JkZXI6IG5vbmU7XG59Il19 */\";","export default \"<div class=\\\"fade-in\\\">\\n  <c-row>\\n    <c-col>\\n      <c-card>\\n        <c-card-body>\\n          <c-tabset  fill=\\\"fill\\\" variant=\\\"pills\\\" boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\n            <c-tablist>\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\n                {{tab.header}}\\n              </c-tab>\\n            </c-tablist>\\n            <c-tab-content>\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\n\\n                <ng-container *ngIf=\\\"i===0\\\">\\n                  <c-col md=\\\"12\\\" >\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                      <c-row>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"merchantName\\\">Merchant Name :</h6>\\n                        <input cInput\\n                               id=\\\"merchantName\\\"\\n                               formControlName=\\\"merchantName\\\"\\n                               placeholder=\\\"Merchant name\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.merchantName.touched) && f.merchantName.invalid, 'is-valid': f.loginId.touched && f.merchantName.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['merchantName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['merchantName'].errors.required\\\">Merchant Short Name is required</div>\\n                        </div>\\n                      </c-form-group>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"loginId\\\">loginId :</h6>\\n                        <input cInput\\n                               id=\\\"loginId\\\"\\n                               formControlName=\\\"loginId\\\"\\n                               placeholder=\\\"loginId\\\"\\n                               autocomplete=\\\"loginId\\\"\\n                               required\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.loginId.touched) && f.loginId.errors, 'is-valid': f.merchantId.touched && !f.loginId.errors }\\\" />\\n                          <div *ngIf=\\\"submitted && f['loginId'].errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['loginId'].errors.required\\\">LoginId is required</div>\\n                          <div *ngIf=\\\"f['loginId'].errors.minlength\\\">{{formErrors.loginId.minLength}}</div>\\n                          <div *ngIf=\\\"f['loginId'].errors.pattern\\\">{{formErrors.loginId.pattern}}</div>\\n                        </div>\\n                      </c-form-group>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">company Reg Certificate Attachment :</h6>\\n                        <c-col md=\\\"9\\\">\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" accept=\\\"pdf\\\" name=\\\"file-input\\\">\\n                        </c-col>\\n                      </c-form-group>\\n                      <!-- <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"merchantId\\\">merchantId :</h6>\\n                        <input cInput\\n                               id=\\\"merchantId\\\"\\n                               formControlName=\\\"merchantId\\\"\\n                               placeholder=\\\"merchantId\\\"\\n                               autocomplete=\\\"family-name\\\"\\n                               required\\n                               [ngClass]=\\\"{ 'is-invalid':  (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.panNo.touched && f.merchantId.valid }\\\" />\\n                        <div *ngIf=\\\"submitted && f['merchantId'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['merchantId'].errors.required\\\">MerchantId is required</div>\\n                        </div>\\n                      </c-form-group> -->\\n                    </c-row>\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"panNo\\\">Pan Number :</h6>\\n                        <input cInput\\n                               id=\\\"panNo\\\"\\n                               formControlName=\\\"panNo\\\"\\n                               placeholder=\\\"Pan Number\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.panNo.touched) && f.panNo.invalid, 'is-valid': f.gstNo.touched && f.panNo.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['panNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['panNo'].errors.required\\\">Pan Number is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">Pan File Attachment :</h6>\\n                        <c-col md=\\\"9\\\">\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" accept=\\\"pdf\\\" name=\\\"file-input\\\">\\n                        </c-col>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"gstNo\\\">Gst Number :</h6>\\n                        <input cInput\\n                               id=\\\"gstNo\\\"\\n                               formControlName=\\\"gstNo\\\"\\n                               placeholder=\\\"Gst Number\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.gstNo.touched) && f.gstNo.invalid, 'is-valid': f.billingPlan.touched && f.gstNo.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['gstNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['gstNo'].errors.required\\\">Gst Number is required</div>\\n                        </div>\\n                      </c-form-group>\\n      \\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">Gst File Attachment :</h6>\\n                        <c-col md=\\\"9\\\">\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" name=\\\"file-input\\\">\\n                        </c-col>\\n                      </c-form-group>\\n                    </c-row>\\n                    <c-row>\\n                      \\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"billingPlan\\\">Billing Plan :</h6>\\n                               <select  cSelect name=\\\"billingPlan\\\"\\n                               id=\\\"billingPlan\\\"\\n                               formControlName=\\\"billingPlan\\\"\\n                               placeholder=\\\"Billing Plan\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.billingPlan.touched) && f.billingPlan.invalid, 'is-valid': f.phone.touched && f.billingPlan.valid  }\\\"                              \\n                               >\\n                                <option value=\\\"1\\\">Basic</option>\\n                                <option value=\\\"2\\\">Standard</option>\\n                                <option value=\\\"3\\\">Enterprise</option>\\n                                <option value=\\\"3\\\">custom</option>\\n                              </select>\\n                               <div *ngIf=\\\"submitted && f['billingPlan'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['billingPlan'].errors.required\\\">Billing Plan is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"phone\\\">Merchant Phone Number :</h6>\\n                        <input cInput\\n                              id=\\\"phone\\\"\\n                              formControlName=\\\"phone\\\"\\n                              placeholder=\\\"Phone Number\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.phone.touched) && f.phone.invalid, 'is-valid': f.address.touched && f.phone.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['phone'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['phone'].errors.required\\\">Merchant Phone Number is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                       <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"phone\\\">Merchant Email :</h6>\\n                        <input cInput\\n                               id=\\\"email\\\"\\n                               type=\\\"email\\\"\\n                               formControlName=\\\"email\\\"\\n                               placeholder=\\\"Email\\\"\\n                               autocomplete=\\\"email\\\"\\n                               required\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\n                        <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['email'].errors.required\\\">Merchant Email is required</div>\\n                          <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\n                        </div>\\n                      </c-form-group> \\n\\n                    </c-row>\\n                    <c-row>\\n                    <c-form-group cCol md=\\\"4\\\">\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"address\\\">Address :</h6>\\n                      <input cInput\\n                            id=\\\"address\\\"\\n                            formControlName=\\\"address\\\"\\n                            placeholder=\\\"enter street name\\\"\\n                            autocomplete=\\\"given-name\\\"\\n                            required\\n                            [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.address.touched) && f.address.invalid, 'is-valid': f.country.touched && f.address.valid  }\\\" />\\n                      <div *ngIf=\\\"submitted && f['address'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f['address'].errors.required\\\">Address is required</div>\\n                      </div>\\n                    </c-form-group>\\n\\n                    <c-form-group cCol md=\\\"4\\\">\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"city\\\">City :</h6>\\n                      <input cInput\\n                            id=\\\"city\\\"\\n                            formControlName=\\\"city\\\"\\n                            placeholder=\\\"city\\\"\\n                            autocomplete=\\\"given-name\\\"\\n                            required\\n                            [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.city.touched) && f.city.invalid, 'is-valid': f.country.touched && f.city.valid  }\\\" />\\n                      <div *ngIf=\\\"submitted && f['city'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f['city'].errors.required\\\">city is required</div>\\n                      </div>\\n                    </c-form-group>\\n\\n                    <c-form-group cCol md=\\\"4\\\">\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"state\\\">State :</h6>\\n                      <input cInput\\n                            id=\\\"state\\\"\\n                            formControlName=\\\"state\\\"\\n                            placeholder=\\\"state\\\"\\n                            autocomplete=\\\"given-name\\\"\\n                            required\\n                            [autofocus]=\\\"true\\\"\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.state.touched) && f.state.invalid, 'is-valid': f.country.touched && f.state.valid  }\\\" />\\n                      <div *ngIf=\\\"submitted && f['state'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f['state'].errors.required\\\">state is required</div>\\n                      </div>\\n                    </c-form-group>\\n\\n                    </c-row>\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"country\\\">country :</h6>\\n                        <input cInput\\n                               id=\\\"country\\\"\\n                               formControlName=\\\"country\\\"\\n                               placeholder=\\\"country\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.country.touched) && f.country.invalid, 'is-valid': f.pincode.touched && f.country.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['country'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['country'].errors.required\\\">country is required</div>\\n                        </div>\\n                      </c-form-group>\\n      \\n                      <c-form-group cCol md=\\\"3\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"pincode\\\">pincode :</h6>\\n                        <input cInput\\n                               id=\\\"pincode\\\"\\n                               formControlName=\\\"pincode\\\"\\n                               placeholder=\\\"pincode\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.pincode.touched) && f.pincode.invalid, 'is-valid': f.primaryContact.touched && f.pincode.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['pincode'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['pincode'].errors.required\\\">pincode is required</div>\\n                        </div>\\n                      </c-form-group>\\n                    </c-row>\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryName\\\">primaryName :</h6>\\n                        <input cInput\\n                              id=\\\"primaryName\\\"\\n                              formControlName=\\\"primaryName\\\"\\n                              placeholder=\\\"primaryName\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryName.touched) && f.primaryName.invalid, 'is-valid': f.primaryPhone.touched && f.primaryName.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['primaryName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['primaryName'].errors.required\\\">primaryName is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryPhone\\\">primaryPhone :</h6>\\n                        <input cInput\\n                              id=\\\"primaryPhone\\\"\\n                              formControlName=\\\"primaryPhone\\\"\\n                              placeholder=\\\"primaryPhone\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryPhone.touched) && f.primaryPhone.invalid, 'is-valid': f.primaryEmail.touched && f.primaryPhone.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['primaryPhone'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['primaryPhone'].errors.required\\\">primaryPhone is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryEmail\\\">primaryEmail :</h6>\\n                        <input cInput\\n                              id=\\\"primaryEmail\\\"\\n                              formControlName=\\\"primaryEmail\\\"\\n                              placeholder=\\\"primaryEmail\\\"\\n                              autocomplete=\\\"given-name\\\"\\n                              required\\n                              [autofocus]=\\\"true\\\"\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryEmail.touched) && f.primaryEmail.invalid, 'is-valid': f.secondaryContact.touched && f.primaryEmail.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['primaryEmail'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['primaryEmail'].errors.required\\\">primaryEmail is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                    </c-row>\\n\\n                    <c-row>\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryName\\\">secondaryName:</h6>\\n                        <input cInput\\n                               id=\\\"secondaryName\\\"\\n                               formControlName=\\\"secondaryName\\\"\\n                               placeholder=\\\"secondaryName\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryName.touched) && f.secondaryName.invalid, 'is-valid': f.secondaryName.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['secondaryName'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['secondaryName'].errors.required\\\">secondaryName is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryPhone\\\">secondaryPhone:</h6>\\n                        <input cInput\\n                               id=\\\"secondaryPhone\\\"\\n                               formControlName=\\\"secondaryPhone\\\"\\n                               placeholder=\\\"secondaryPhone\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryPhone.touched) && f.secondaryPhone.invalid, 'is-valid': f.secondaryPhone.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['secondaryPhone'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['secondaryPhone'].errors.required\\\">secondaryPhone is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                      <c-form-group cCol md=\\\"4\\\">\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryEmail\\\">secondaryEmail:</h6>\\n                        <input cInput\\n                               id=\\\"secondaryEmail\\\"\\n                               formControlName=\\\"secondaryEmail\\\"\\n                               placeholder=\\\"secondaryEmail\\\"\\n                               autocomplete=\\\"given-name\\\"\\n                               required\\n                               [autofocus]=\\\"true\\\"\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryEmail.touched) && f.secondaryEmail.invalid, 'is-valid': f.secondaryEmail.valid  }\\\" />\\n                        <div *ngIf=\\\"submitted && f['secondaryEmail'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f['secondaryEmail'].errors.required\\\">secondaryEmail is required</div>\\n                        </div>\\n                      </c-form-group>\\n\\n                    </c-row>\\n\\n                      <c-form-group>\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Submit</button>\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                      </c-form-group>\\n                    </form>\\n                  </c-col>\\n                  </ng-container>\\n      \\n                  <ng-container *ngIf=\\\"i===1\\\">\\n                    <c-col md=\\\"12\\\" >\\n                      <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                        <c-row>                         \\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"date\\\">Date :</h6>\\n                            <input cInput\\n                                   id=\\\"date-input\\\" \\n                                   type=\\\"date\\\" \\n                                   name=\\\"date-input\\\" \\n                                   placeholder=\\\"date\\\"\\n                                   formControlName=\\\"date\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.date.touched) && f.date.invalid, 'is-valid': f.loginId.touched && f.date.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['date'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['date'].errors.required\\\">date is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"modeofPayment\\\">mode of Payment :</h6>\\n                                   <select  cSelect name=\\\"modeofPayment\\\"\\n                                   id=\\\"modeofPayment\\\"\\n                                   formControlName=\\\"modeofPayment\\\"\\n                                   placeholder=\\\"Billing Plan\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.modeofPayment.touched) && f.modeofPayment.invalid, 'is-valid': f.phone.touched && f.modeofPayment.valid  }\\\"                              \\n                                   >\\n                                    <option value=\\\"1\\\">Card</option>\\n                                    <option value=\\\"2\\\">OnlineTransfer</option>\\n                                    <option value=\\\"3\\\">Cash</option>\\n                                  </select>\\n                                   <div *ngIf=\\\"submitted && f['modeofPayment'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['modeofPayment'].errors.required\\\">ModeofPayment is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"details\\\">Details :</h6>\\n                          <input cInput\\n                                 id=\\\"details\\\"\\n                                 formControlName=\\\"details\\\"\\n                                 placeholder=\\\"details\\\"\\n                                 autocomplete=\\\"family-name\\\"\\n                                 required\\n                                 [ngClass]=\\\"{ 'is-invalid':  (submitted || f.details.touched) && f.details.invalid, 'is-valid': f.panNo.touched && f.details.valid }\\\" />\\n                          <div *ngIf=\\\"submitted && f['details'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['details'].errors.required\\\">details is required</div>\\n                          </div>\\n                        </c-form-group>\\n                      </c-row>\\n                      <c-row>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"amount\\\">Amount :</h6>\\n                          <input cInput\\n                                 id=\\\"amount\\\"\\n                                 formControlName=\\\"amount\\\"\\n                                 placeholder=\\\"amount\\\"\\n                                 autocomplete=\\\"given-name\\\"\\n                                 required\\n                                 [autofocus]=\\\"true\\\"\\n                                 [ngClass]=\\\"{ 'is-invalid': (submitted || f.amount.touched) && f.amount.invalid, 'is-valid': f.gstNo.touched && f.amount.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['amount'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['amount'].errors.required\\\">Billing Plan is required</div>\\n                          </div>\\n                        </c-form-group>                                \\n                      </c-row>\\n                        <c-form-group>\\n                          <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Save</button>\\n                          <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                          <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                        </c-form-group>\\n                      </form>\\n                    </c-col>\\n                    </ng-container>\\n      \\n                    <ng-container *ngIf=\\\"i===2\\\">\\n                      <c-col md=\\\"12\\\" >\\n                        <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                          <c-row>\\n                            <c-form-group cCol md=\\\"4\\\">\\n                              <h6 class=\\\"col-form-label\\\" for=\\\"paymentgateway\\\">Payment Gateway :</h6>\\n                                     <select  cSelect name=\\\"paymentgateway\\\"\\n                                     id=\\\"paymentgateway\\\"\\n                                     formControlName=\\\"paymentgateway\\\"\\n                                     placeholder=\\\"paymentgateway\\\"\\n                                     autocomplete=\\\"given-name\\\"\\n                                     required\\n                                     [autofocus]=\\\"true\\\"\\n                                     [ngClass]=\\\"{ 'is-invalid': (submitted || f.paymentgateway.touched) && f.paymentgateway.invalid, 'is-valid': f.phone.touched && f.paymentgateway.valid  }\\\">\\n                                      <option value=\\\"1\\\">Paytm</option>\\n                                      <option value=\\\"2\\\">RazorPay</option>\\n                                      <option value=\\\"3\\\">PayU</option>\\n                                    </select>\\n                                     <div *ngIf=\\\"submitted && f['paymentgateway'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"f['paymentgateway'].errors.required\\\">paymentgateway is required</div>\\n                              </div>\\n                            </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"user\\\">User :</h6>\\n                            <input cInput\\n                                   id=\\\"user\\\"\\n                                   formControlName=\\\"user\\\"\\n                                   placeholder=\\\"user\\\"\\n                                   autocomplete=\\\"user\\\"\\n                                   required\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.user.touched) && f.user.errors, 'is-valid': f.merchantId.touched && !f.user.errors }\\\" />\\n                              <div *ngIf=\\\"submitted && f['user'].errors\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['user'].errors.required\\\">User is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"password\\\">Password :</h6>\\n                            <input cInput\\n                                  type=\\\"password\\\"\\n                                  placeholder=\\\"Password\\\"\\n                                  autocomplete=\\\"current-password\\\"\\n                                  required\\n                                   id=\\\"password\\\"\\n                                   autocomplete=\\\"family-name\\\"\\n                                   required\\n                                   [ngClass]=\\\"{ 'is-invalid':  (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.panNo.touched && f.password.valid }\\\" />\\n                            <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        </c-row>\\n                        <c-row>\\n                          <c-form-group cCol md=\\\"6\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"testapikey\\\">TestApikey :</h6>\\n                            <input cInput\\n                                   id=\\\"testapikey\\\"\\n                                   formControlName=\\\"testapikey\\\"\\n                                   placeholder=\\\"testapikey\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.testapikey.touched) && f.testapikey.invalid, 'is-valid': f.gstNo.touched && f.testapikey.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['testapikey'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['testapikey'].errors.required\\\">TestApikey is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"6\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"productionapikey\\\">ProductionApikey :</h6>\\n                            <input cInput\\n                                   id=\\\"productionapikey\\\"\\n                                   formControlName=\\\"productionapikey\\\"\\n                                   placeholder=\\\"productionapikey\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.productionapikey.touched) && f.productionapikey.invalid, 'is-valid': f.billingPlan.touched && f.productionapikey.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['productionapikey'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['productionapikey'].errors.required\\\">productionapikey is required</div>\\n                            </div>\\n                          </c-form-group>\\n          \\n                        </c-row>\\n                        <c-row>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"callbackUrl\\\">CallbackUrl :</h6>\\n                            <input cInput\\n                                   id=\\\"callbackUrl\\\"\\n                                   formControlName=\\\"callbackUrl\\\"\\n                                   placeholder=\\\"callbackUrl\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.callbackUrl.touched) && f.callbackUrl.invalid, 'is-valid': f.phone.touched && f.callbackUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['callbackUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['callbackUrl'].errors.required\\\">CallbackUrl is required</div>\\n                            </div>\\n                          </c-form-group>\\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"paymentNotificationUrl\\\">paymentNotificationUrl :</h6>\\n                            <input cInput\\n                                  id=\\\"paymentNotificationUrl\\\"\\n                                  formControlName=\\\"paymentNotificationUrl\\\"\\n                                  placeholder=\\\"paymentNotificationUrl\\\"\\n                                  autocomplete=\\\"given-name\\\"\\n                                  required\\n                                  [autofocus]=\\\"true\\\"\\n                                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.paymentNotificationUrl.touched) && f.paymentNotificationUrl.invalid, 'is-valid': f.address.touched && f.paymentNotificationUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['paymentNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['paymentNotificationUrl'].errors.required\\\">paymentNotificationUrl is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        </c-row>\\n                        <c-row>\\n                        <c-form-group cCol md=\\\"4\\\">\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"successNotificationUrl\\\">SuccessNotificationUrl :</h6>\\n                          <input cInput\\n                                id=\\\"successNotificationUrl\\\"\\n                                formControlName=\\\"successNotificationUrl\\\"\\n                                placeholder=\\\"successNotificationUrl\\\"\\n                                autocomplete=\\\"given-name\\\"\\n                                required\\n                                [autofocus]=\\\"true\\\"\\n                                [ngClass]=\\\"{ 'is-invalid': (submitted || f.successNotificationUrl.touched) && f.successNotificationUrl.invalid, 'is-valid': f.country.touched && f.successNotificationUrl.valid  }\\\" />\\n                          <div *ngIf=\\\"submitted && f['successNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f['successNotificationUrl'].errors.required\\\">successNotificationUrl is required</div>\\n                          </div>\\n                        </c-form-group>\\n                        \\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"acceptNotificationUrl\\\">AcceptNotificationUrl :</h6>\\n                            <input cInput\\n                                   id=\\\"acceptNotificationUrl\\\"\\n                                   formControlName=\\\"acceptNotificationUrl\\\"\\n                                   placeholder=\\\"acceptNotificationUrl\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.acceptNotificationUrl.touched) && f.acceptNotificationUrl.invalid, 'is-valid': f.pincode.touched && f.acceptNotificationUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['acceptNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['acceptNotificationUrl'].errors.required\\\">acceptNotificationUrl is required</div>\\n                            </div>\\n                          </c-form-group>          \\n                          <c-form-group cCol md=\\\"4\\\">\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"remarksNotificationUrl\\\">RemarksNotificationUrl :</h6>\\n                            <input cInput\\n                                   id=\\\"remarksNotificationUrl\\\"\\n                                   formControlName=\\\"remarksNotificationUrl\\\"\\n                                   placeholder=\\\"remarksNotificationUrl\\\"\\n                                   autocomplete=\\\"given-name\\\"\\n                                   required\\n                                   [autofocus]=\\\"true\\\"\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.remarksNotificationUrl.touched) && f.remarksNotificationUrl.invalid, 'is-valid': f.primaryContact.touched && f.remarksNotificationUrl.valid  }\\\" />\\n                            <div *ngIf=\\\"submitted && f['remarksNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                              <div *ngIf=\\\"f['remarksNotificationUrl'].errors.required\\\">remarksNotificationUrl is required</div>\\n                            </div>\\n                          </c-form-group>\\n                        </c-row> \\n                          <c-form-group>\\n                            <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Submit</button>\\n                            <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\n                            <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\n                          </c-form-group>\\n                        </form>\\n                      </c-col>\\n                      </ng-container>\\n\\n              </c-tab-pane>\\n            </c-tab-content>\\n          </c-tabset>\\n        </c-card-body>\\n      </c-card>\\n    </c-col>\\n  </c-row>\\n</div>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MerchantComponent } from './merchant.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MerchantComponent,\n    data: {\n      title: 'Merchant',\n    }\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MerchantRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\nimport { IconModule } from '@coreui/icons-angular';\nimport { MerchantRoutingModule } from './merchant-routing.module';\nimport { MerchantComponent } from './merchant.component';\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\n// Timepicker\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\n\n// Datepicker\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\n\n// Ng2-select\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n// CoreUI\nimport { AlertModule, TextMaskModule } from '@coreui/angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MerchantRoutingModule,\n    CardModule,\n    GridModule,\n    IconModule,\n    SwitchModule,\n    PaginationModule,\n    FormsModule,\n    TabsetModule,\n    BadgeModule,\n    FormsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    ValidationFormsRoutingModule,\n    GridModule,\n    CardModule,\n    ButtonModule,\n    BadgeModule,\n    FormModule,\n    CommonModule,\n    FormsModule,\n    TimepickerModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    NgSelectModule,\n    CardModule,\n    GridModule,\n    ButtonModule,\n    FormModule,\n    IconModule,\n    AlertModule,\n    TextMaskModule,\n  ],\n  declarations: [MerchantComponent],\n})\nexport class MerchantModule {}\n"]}