(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["views-configuration-configuration-module"],{

/***/ "FQ0u":
/*!*********************************************************************!*\
  !*** ./src/app/views/configuration/Configuration-routing.module.ts ***!
  \*********************************************************************/
/*! exports provided: ConfigurationRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationRoutingModule", function() { return ConfigurationRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _Configuration_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Configuration.component */ "ek0A");




const routes = [
    {
        path: '',
        component: _Configuration_component__WEBPACK_IMPORTED_MODULE_3__["ConfigurationComponent"],
        data: {
            title: 'Configuration',
        }
    },
];
let ConfigurationRoutingModule = class ConfigurationRoutingModule {
};
ConfigurationRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]],
    })
], ConfigurationRoutingModule);



/***/ }),

/***/ "N30Y":
/*!********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/configuration/configuration.component.html ***!
  \********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"card\">\n  <div class=\"card-header\">\n      <c-col md=\"12\">\n        <c-row>\n    <c-form-group cCol md=\"6\">\n      <div >\n        <h3 class=\"text-success\">Configuration</h3>\n      </div>\n    </c-form-group>\n    \n    <c-form-group cCol md=\"6\">\n      <div class=\"float-right\">\n        <a style=\"color: #FFFFFF;\" class=\"btn btn-primary\" [routerLink]=\"['/machines']\"><i class=\"fa fa-arrow-left\"></i> Go Back</a>\n      </div>\n    </c-form-group>\n\n    </c-row>\n    </c-col>\n</div>\n<div class=\"fade-in\">\n  <c-row>\n    <c-col>\n      <c-card>\n        <c-card-body>\n          <c-tabset  fill=\"fill\" variant=\"pills\" boxed=\"true\" [activeTab]=\"'0'\">\n            <c-tablist>\n              <c-tab *ngFor=\"let tab of tabs2\">\n                <c-icon [name]=\"tab.icon\" class=\"pb-1\"></c-icon>\n                {{tab.header}}\n              </c-tab>\n            </c-tablist>\n            <c-tab-content>\n              <c-tab-pane *ngFor=\"let tab of tabs2; let i = index\">\n\n                <ng-container *ngIf=\"i===0\">\n                  <c-col>\n                    <form [formGroup]=\"simpleForm\" novalidate (ngSubmit)=\"onSubmit()\" class=\"needs-validation\">\n                     \n                      <c-row>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"cid\">Cid :</h4>\n                          <input cInput id=\"cid\" formControlName=\"cid\" placeholder=\"cid\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.cid.touched) && f.cid.invalid, 'is-valid': f.loginId.touched && f.cid.valid  }\" />\n                          <div *ngIf=\"submitted && f['cid'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['cid'].errors.required\">cid is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"crc\">Crc :</h4>\n                          <input cInput id=\"crc\" formControlName=\"crc\" placeholder=\"crc\" autocomplete=\"crc\" required\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.crc.touched) && f.crc.errors, 'is-valid': f.merchantId.touched && !f.crc.errors }\" />\n                          <div *ngIf=\"submitted && f['crc'].errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['crc'].errors.required\">crc is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" >Ica :</h4>\n                          <button cButton color=\"btn btn-primary\" type=\"submit\" (click)=\"showing()\" [tabindex]=\"'0'\"\n                            >Add (ICA)\n                          </button>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"imx\">Imx :</h4>\n                          <input cInput id=\"imx\" formControlName=\"imx\" placeholder=\"imx\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.imx.touched) && f.imx.invalid, 'is-valid': f.gstNo.touched && f.imx.valid  }\" />\n                          <div *ngIf=\"submitted && f['imx'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['imx'].errors.required\">imx is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"key\">Key :</h4>\n                          <input cInput id=\"key\" formControlName=\"key\" placeholder=\"key\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.key.touched) && f.key.invalid, 'is-valid': f.billingPlan.touched && f.key.valid  }\" />\n                          <div *ngIf=\"submitted && f['key'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['key'].errors.required\">key is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"men\">Men :</h4>\n                          <input cInput id=\"men\" formControlName=\"men\" placeholder=\"men\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.men.touched) && f.men.invalid, 'is-valid': f.phone.touched && f.men.valid  }\" />\n                          <div *ngIf=\"submitted && f['men'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['men'].errors.required\">men Plan is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"mid\">Mid :</h4>\n                          <input cInput id=\"mid\" formControlName=\"mid\" placeholder=\"mid\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mid.touched) && f.mid.invalid, 'is-valid': f.phone.touched && f.mid.valid  }\" />\n                          <div *ngIf=\"submitted && f['mid'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mid'].errors.required\">mid Plan is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"qmx\">Qmx :</h4>\n                          <input cInput id=\"qmx\" formControlName=\"qmx\" placeholder=\"qmx\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.qmx.touched) && f.qmx.invalid, 'is-valid': f.address.touched && f.qmx.valid  }\" />\n                          <div *ngIf=\"submitted && f['qmx'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['qmx'].errors.required\">qmx is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-form-group>\n                        <button cButton color=\"primary\" class=\"mfe-1\" type=\"submit\"\n                          (click)=\"onSaveBusiness(simpleForm.value)\" [disabled]=\"simpleForm.valid\"\n                          [tabindex]=\"'0'\">Submit</button>\n                        <button cButton color=\"success\" class=\"mfe-1\" [disabled]=\"simpleForm.valid\"\n                          (click)=\"onValidate()\" [tabindex]=\"'0'\">Validate</button>\n                        <button cButton color=\"danger\" type=\"reset\" (click)=\"onReset()\" [tabindex]=\"'0'\">Clear</button>\n                      </c-form-group>\n                    </form>\n                \n                  </c-col>\n                </ng-container>\n                <ng-container *ngIf=\"i===1\">\n                  \n                  <c-col md=\"12\">\n                    <form [formGroup]=\"simpleForm\" novalidate (ngSubmit)=\"onSubmit()\" class=\"needs-validation\">\n                      <c-card-header>Toaster\n                      <c-row>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"keys\">Key :</h4>\n                          <input cInput id=\"keys\" formControlName=\"keys\" placeholder=\"keys\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.keys.touched) && f.keys.invalid, 'is-valid': f.mids.touched && f.keys.valid  }\" />\n                          <div *ngIf=\"submitted && f['keys'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['keys'].errors.required\">Key is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"mids\">Machine ID :</h4>\n                          <input cInput id=\"mids\" formControlName=\"mids\" placeholder=\"mids\"\n                            autocomplete=\"mids\" required\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mids.touched) && f.mids.errors, 'is-valid': f.merchantId.touched && !f.mids.errors }\" />\n                          <div *ngIf=\"submitted && f['mids'].errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mids'].errors.required\">Machine ID is required</div>\n\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"nss\">No of spring supported in machine:</h4>\n                          <input cInput id=\"nss\" formControlName=\"nss\" placeholder=\"nss\"\n                            autocomplete=\"family-name\" required\n                            [ngClass]=\"{ 'is-invalid':  (submitted || f.nss.touched) && f.nss.invalid, 'is-valid': f.panNo.touched && f.nss.valid }\" />\n                          <div *ngIf=\"submitted && f['nss'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['nss'].errors.required\">No of spring supported in machine is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"nse\">No of spring enabled in machine :</h4>\n                          <input cInput id=\"nse\" formControlName=\"nse\" placeholder=\"nse\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.nse.touched) && f.nse.invalid, 'is-valid': f.gstNo.touched && f.nse.valid  }\" />\n                          <div *ngIf=\"submitted && f['nse'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['nse'].errors.required\">No of spring enabled in machine is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      </c-card-header>\n                      <c-row>\n                        \n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"spn\">Spring number :</h4>\n                          <input cInput id=\"spn\" formControlName=\"spn\" placeholder=\"spn\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.primaryContact.touched && f.spn.valid  }\" />\n                          <div *ngIf=\"submitted && f['spn'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['spn'].errors.required\">Spring number is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"ssc\">Spring slot Count :</h4>\n                          <input cInput id=\"ssc\" formControlName=\"ssc\" placeholder=\"ssc\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.ssc.touched) && f.ssc.invalid, 'is-valid': f.pincode.touched && f.ssc.valid  }\" />\n                          <div *ngIf=\"submitted && f['ssc'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['ssc'].errors.required\">Spring slot Count is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                   \n                    \n                      <c-row>\n                      \n                      <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                      <input cInput type=\"checkbox\" formControlName=\"cdf\" class=\"custom-control-input\" id=\"cdf\">\n                      <label cLabel class=\"custom-control-label\" for=\"cdf\">Coin device</label>                     \n                     </c-form-check>\n\n                     <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                      <input cInput type=\"checkbox\" formControlName=\"bdf\" class=\"custom-control-input\" id=\"bdf\">\n                      <label cLabel class=\"custom-control-label\" for=\"bdf\">Bill device</label>                     \n                     </c-form-check>\n\n                     <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                      <input cInput type=\"checkbox\" formControlName=\"dsc\" class=\"custom-control-input\" id=\"dsc\">\n                      <label cLabel class=\"custom-control-label\" for=\"dsc\">Drop sensor self check</label>                     \n                     </c-form-check>\n\n                     <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                      <input cInput type=\"checkbox\" formControlName=\"gps\" class=\"custom-control-input\" id=\"gps\">\n                      <label cLabel class=\"custom-control-label\" for=\"gps\">GPS</label>                     \n                     </c-form-check>\n\n                     <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                      <input cInput type=\"checkbox\" formControlName=\"gsm\" class=\"custom-control-input\" id=\"gsm\">\n                      <label cLabel class=\"custom-control-label\" for=\"gsm\">GSM</label>                     \n                     </c-form-check>\n                     \n                     \n                      </c-row>\n                      <c-row>\n\n                        <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                          <input cInput type=\"checkbox\" formControlName=\"wfi\" class=\"custom-control-input\" id=\"wfi\">\n                          <label cLabel class=\"custom-control-label\" for=\"wfi\">Wifi</label>                     \n                         </c-form-check>\n\n                         <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                          <input cInput type=\"checkbox\" formControlName=\"tsf\" class=\"custom-control-input\" id=\"tsf\">\n                          <label cLabel class=\"custom-control-label\" for=\"tsf\">Temperature Sensor</label>                     \n                         </c-form-check>\n\n                         <c-form-check cCol md=\"2\" custom variant=\"checkbox\" class=\"my-2\">\n                          <input cInput type=\"checkbox\" formControlName=\"psf\" class=\"custom-control-input\" id=\"psf\">\n                          <label cLabel class=\"custom-control-label\" for=\"psf\">Paired Spring flag</label>                     \n                         </c-form-check>\n\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"mff\">Motor Running Feedback :</h4>\n                          <input cInput id=\"mff\" formControlName=\"mff\" placeholder=\"mff\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mff.touched) && f.mff.invalid, 'is-valid': f.address.touched && f.mff.valid  }\" />\n                          <div *ngIf=\"submitted && f['mff'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mff'].errors.required\">Motor Running Feedback  is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"mcf\">Motor current measurement :</h4>\n                          <input cInput id=\"mcf\" formControlName=\"mcf\" placeholder=\"mcf\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mcf.touched) && f.mcf.invalid, 'is-valid': f.country.touched && f.mcf.valid  }\" />\n                          <div *ngIf=\"submitted && f['mcf'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mcf'].errors.required\">Motor current measurement is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"mtp\">Motor Type :</h4>\n                          <input cInput id=\"mtp\" formControlName=\"mtp\" placeholder=\"mtp\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mtp.touched) && f.mtp.invalid, 'is-valid': f.pincode.touched && f.mtp.valid  }\" />\n                          <div *ngIf=\"submitted && f['mtp'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mtp'].errors.required\">Motor Type is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"mlc\">Motor Low current(10mA precision) :</h4>\n                          <input cInput id=\"mlc\" formControlName=\"mlc\" placeholder=\"mlc\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mlc.touched) && f.mlc.invalid, 'is-valid': f.primaryContact.touched && f.mlc.valid  }\" />\n                          <div *ngIf=\"submitted && f['mlc'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mlc'].errors.required\">Motor Low current(10mA precision) is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>                   \n                      <c-row>\n                        \n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"mhc\">Motor High current(10mA precision) :</h4>\n                          <input cInput id=\"mhc\" formControlName=\"mhc\"\n                            placeholder=\"mhc\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mhc.touched) && f.mhc.invalid, 'is-valid': f.secondaryContact.touched && f.mhc.valid  }\" />\n                          <div *ngIf=\"submitted && f['mhc'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mhc'].errors.required\">Motor High current(10mA precision) is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"nmc\">No of connected motor in paired :</h4>\n                          <input cInput id=\"nmc\" formControlName=\"nmc\"\n                            placeholder=\"nmc\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.nmc.touched) && f.nmc.invalid, 'is-valid': f.nmc.valid  }\" />\n                          <div *ngIf=\"submitted && f['nmc'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['nmc'].errors.required\">No of connected motor in paired  is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>                        \n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"mrp\">Motor Rotations Per Pay :</h4>\n                          <input cInput id=\"mrp\" formControlName=\"mrp\" placeholder=\"mrp\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mrp.touched) && f.mrp.invalid, 'is-valid': f.primaryContact.touched && f.mrp.valid  }\" />\n                          <div *ngIf=\"submitted && f['mrp'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mrp'].errors.required\">Motor Rotations Per Pay is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"asl\">Alternate spring Limit:</h4>\n                          <input cInput id=\"asl\" formControlName=\"asl\"\n                            placeholder=\"asl\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.asl.touched) && f.asl.invalid, 'is-valid': f.asl.valid  }\" />\n                          <div *ngIf=\"submitted && f['asl'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['asl'].errors.required\">Alternate spring Limit is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                    \n                   \n                      <c-row>                       \n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"dfc\">Dispense fail safe rotation count :</h4>\n                          <input cInput id=\"dfc\" formControlName=\"dfc\" placeholder=\"dfc\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.dfc.touched) && f.dfc.invalid, 'is-valid': f.primaryContact.touched && f.dfc.valid  }\" />\n                          <div *ngIf=\"submitted && f['dfc'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['dfc'].errors.required\">Dispense fail safe rotation count is required</div>\n                          </div>\n                        </c-form-group>\n\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"wsn\">WiFi SSID name :</h4>\n                          <input cInput id=\"wsn\" formControlName=\"wsn\"\n                            placeholder=\"wsn\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.wsn.touched) && f.wsn.invalid, 'is-valid': f.secondaryContact.touched && f.wsn.valid  }\" />\n                          <div *ngIf=\"submitted && f['wsn'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['wsn'].errors.required\">WiFi SSID name is required</div>\n                          </div>\n                        </c-form-group>\n\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"wpd\">WiFi Password:</h4>\n                          <input cInput id=\"wpd\" formControlName=\"wpd\"\n                            placeholder=\"wpd\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.wpd.touched) && f.wpd.invalid, 'is-valid': f.wpd.valid  }\" />\n                          <div *ngIf=\"submitted && f['wpd'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['wpd'].errors.required\">WiFi Password is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"3\">\n                          <h4 class=\"col-form-label\" for=\"mid\">New Master Locker ID :</h4>\n                          <input cInput id=\"mid\" formControlName=\"mid\" placeholder=\"mid\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mid.touched) && f.mid.invalid, 'is-valid': f.pincode.touched && f.mid.valid  }\" />\n                          <div *ngIf=\"submitted && f['mid'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mid'].errors.required\">New Master Locker ID is required</div>\n                          </div>\n                        </c-form-group>\n\n                        <c-form-group cCol md=\"3\">\n                          <h4 class=\"col-form-label\" for=\"pid\">New POS ID :</h4>\n                          <input cInput id=\"pid\" formControlName=\"pid\" placeholder=\"pid\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.pid.touched) && f.pid.invalid, 'is-valid': f.primaryContact.touched && f.pid.valid  }\" />\n                          <div *ngIf=\"submitted && f['pid'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['pid'].errors.required\">New POS ID is required</div>\n                          </div>\n                        </c-form-group>\n\n                        <c-form-group cCol md=\"3\">\n                          <h4 class=\"col-form-label\" for=\"mac\">Mac Address :</h4>\n                          <input cInput id=\"mac\" formControlName=\"mac\"\n                            placeholder=\"mac\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.mac.touched) && f.mac.invalid, 'is-valid': f.secondaryContact.touched && f.mac.valid  }\" />\n                          <div *ngIf=\"submitted && f['mac'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['mac'].errors.required\">Mac Address is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                    \n\n                      <c-form-group>\n                        <button cButton color=\"primary\" class=\"mfe-1\" type=\"submit\"\n                          (click)=\"onSaveTech(simpleForm.value)\" [disabled]=\"simpleForm.valid\"\n                          [tabindex]=\"'0'\">Submit</button>\n                        <button cButton color=\"success\" class=\"mfe-1\" [disabled]=\"simpleForm.valid\"\n                          (click)=\"onValidate()\" [tabindex]=\"'0'\">Validate</button>\n                        <button cButton color=\"danger\" type=\"reset\" (click)=\"onReset()\" [tabindex]=\"'0'\">Clear</button>\n                      </c-form-group>\n                    </form>\n                  </c-col>\n                </ng-container>\n                <ng-container *ngIf=\"i===2\">\n                  <c-col md=\"12\">\n                    <form [formGroup]=\"simpleForm\" novalidate (ngSubmit)=\"onSubmit()\" class=\"needs-validation\">\n                      <c-row>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"cid\">Cid :</h4>\n                          <input cInput id=\"cid\" formControlName=\"cid\" placeholder=\"cid\" autocomplete=\"given-name\"\n                            required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.cid.touched) && f.cid.invalid, 'is-valid': f.loginId.touched && f.cid.valid  }\" />\n                          <div *ngIf=\"submitted && f['cid'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['cid'].errors.required\">Merchant Short Name is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"loginId\">LoginId :</h4>\n                          <input cInput id=\"loginId\" formControlName=\"loginId\" placeholder=\"loginId\"\n                            autocomplete=\"loginId\" required\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.loginId.touched) && f.loginId.errors, 'is-valid': f.merchantId.touched && !f.loginId.errors }\" />\n                          <div *ngIf=\"submitted && f['loginId'].errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['loginId'].errors.required\">LoginId is required</div>\n                            <div *ngIf=\"f['loginId'].errors.minlength\">{{formErrors.username.minLength}}</div>\n                            <div *ngIf=\"f['loginId'].errors.pattern\">{{formErrors.username.pattern}}</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"4\">\n                          <h4 class=\"col-form-label\" for=\"merchantId\">MerchantId :</h4>\n                          <input cInput id=\"merchantId\" formControlName=\"merchantId\" placeholder=\"merchantId\"\n                            autocomplete=\"family-name\" required\n                            [ngClass]=\"{ 'is-invalid':  (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.panNo.touched && f.merchantId.valid }\" />\n                          <div *ngIf=\"submitted && f['merchantId'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['merchantId'].errors.required\">MerchantId is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"panNo\">Pan Number :</h4>\n                          <input cInput id=\"panNo\" formControlName=\"panNo\" placeholder=\"Pan Number\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.panNo.touched) && f.panNo.invalid, 'is-valid': f.gstNo.touched && f.panNo.valid  }\" />\n                          <div *ngIf=\"submitted && f['panNo'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['panNo'].errors.required\">Pan Number is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"gstNo\">Gst Number :</h4>\n                          <input cInput id=\"gstNo\" formControlName=\"gstNo\" placeholder=\"Gst Number\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.gstNo.touched) && f.gstNo.invalid, 'is-valid': f.billingPlan.touched && f.gstNo.valid  }\" />\n                          <div *ngIf=\"submitted && f['gstNo'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['gstNo'].errors.required\">Gst Number is required</div>\n                          </div>\n                        </c-form-group>\n\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"billingPlan\">Billing Plan :</h4>\n                          <input cInput id=\"billingPlan\" formControlName=\"billingPlan\" placeholder=\"Billing Plan\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.billingPlan.touched) && f.billingPlan.invalid, 'is-valid': f.phone.touched && f.billingPlan.valid  }\" />\n                          <div *ngIf=\"submitted && f['billingPlan'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['billingPlan'].errors.required\">Billing Plan is required</div>\n                          </div>\n                        </c-form-group>\n                        <c-form-group cCol md=\"6\">\n                          <h4 class=\"col-form-label\" for=\"phone\">Phone Number :</h4>\n                          <input cInput id=\"phone\" formControlName=\"phone\" placeholder=\"Phone Number\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.phone.touched) && f.phone.invalid, 'is-valid': f.address.touched && f.phone.valid  }\" />\n                          <div *ngIf=\"submitted && f['phone'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['phone'].errors.required\">Phone Number is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"12\">\n                          <h4 class=\"col-form-label\" for=\"address\">Address :</h4>\n                          <input cInput id=\"address\" formControlName=\"address\" placeholder=\"address\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.address.touched) && f.address.invalid, 'is-valid': f.country.touched && f.address.valid  }\" />\n                          <div *ngIf=\"submitted && f['address'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['address'].errors.required\">Address is required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n                      <c-row>\n                        <c-form-group cCol md=\"3\">\n                          <h4 class=\"col-form-label\" for=\"country\">Country :</h4>\n                          <input cInput id=\"country\" formControlName=\"country\" placeholder=\"country\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.country.touched) && f.country.invalid, 'is-valid': f.pincode.touched && f.country.valid  }\" />\n                          <div *ngIf=\"submitted && f['country'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['country'].errors.required\">Country is required</div>\n                          </div>\n                        </c-form-group>\n\n                        <c-form-group cCol md=\"3\">\n                          <h4 class=\"col-form-label\" for=\"pincode\">Pincode :</h4>\n                          <input cInput id=\"pincode\" formControlName=\"pincode\" placeholder=\"pincode\"\n                            autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.pincode.touched) && f.pincode.invalid, 'is-valid': f.primaryContact.touched && f.pincode.valid  }\" />\n                          <div *ngIf=\"submitted && f['pincode'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['pincode'].errors.required\">Pincode is required</div>\n                          </div>\n                        </c-form-group>\n\n                        <c-form-group cCol md=\"3\">\n                          <h4 class=\"col-form-label\" for=\"primaryContact\">PrimaryContact :</h4>\n                          <input cInput id=\"primaryContact\" formControlName=\"primaryContact\"\n                            placeholder=\"primaryContact\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.primaryContact.touched) && f.primaryContact.invalid, 'is-valid': f.secondaryContact.touched && f.primaryContact.valid  }\" />\n                          <div *ngIf=\"submitted && f['primaryContact'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['primaryContact'].errors.required\">PrimaryContact is required</div>\n                          </div>\n                        </c-form-group>\n\n                        <c-form-group cCol md=\"3\">\n                          <h4 class=\"col-form-label\" for=\"secondaryContact\">SecondaryContact:</h4>\n                          <input cInput id=\"secondaryContact\" formControlName=\"secondaryContact\"\n                            placeholder=\"secondaryContact\" autocomplete=\"given-name\" required [autofocus]=\"true\"\n                            [ngClass]=\"{ 'is-invalid': (submitted || f.secondaryContact.touched) && f.secondaryContact.invalid, 'is-valid': f.secondaryContact.valid  }\" />\n                          <div *ngIf=\"submitted && f['secondaryContact'].invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['secondaryContact'].errors.required\">SecondaryContactis required</div>\n                          </div>\n                        </c-form-group>\n                      </c-row>\n\n                      <c-form-group>\n                        <button cButton color=\"primary\" class=\"mfe-1\" type=\"submit\"\n                          (click)=\"onSaveTech(simpleForm.value)\" [disabled]=\"simpleForm.valid\"\n                          [tabindex]=\"'0'\">Submit</button>\n                        <button cButton color=\"success\" class=\"mfe-1\" [disabled]=\"simpleForm.valid\"\n                          (click)=\"onValidate()\" [tabindex]=\"'0'\">Validate</button>\n                        <button cButton color=\"danger\" type=\"reset\" (click)=\"onReset()\" [tabindex]=\"'0'\">Clear</button>\n                      </c-form-group>\n                    </form>\n                  </c-col>\n                </ng-container>\n                                \n              </c-tab-pane>\n            </c-tab-content>\n          </c-tabset>\n        </c-card-body>\n      </c-card>\n    </c-col>\n  </c-row>\n</div>\n\n\n\n <div [style.display]=\"showModal ? 'block' : 'none'\" class=\"modal\" id=\"imagemodal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\" id=\"myModalLabel\">Add ICA</h4>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"add-lessons-form\" [formGroup]=\"form\" class=\"needs-validation\">\n          <ng-container formArrayName=\"lessons\">\n            <ng-container *ngFor=\"let lessonForm of lessons.controls; let i = index\">\n              <form class=\"lesson-form-row\" [formGroup]=\"lessonForm\">\n                <c-row>\n                  \n                  <div cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"asn\">Asn :</h4>\n                    <input cInput id=\"asn\" formControlName=\"asn\" placeholder=\"asn\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.asn.touched) && f.asn.invalid, 'is-valid': f.itp.touched && f.asn.valid  }\" />\n                    <div *ngIf=\"submitted && f['asn'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['asn'].errors.required\">asn is required</div>\n                    </div>\n                  </div>\n\n\n                  <div cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"iid\">Iid :</h4>\n                    <input cInput id=\"iid\" formControlName=\"iid\" placeholder=\"iid\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\" />\n                    <div *ngIf=\"submitted && f['iid'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['iid'].errors.required\">iid is required</div>\n                    </div>\n                  </div>\n                \n                  <div cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"itp\">Itp :</h4>\n                    <input cInput id=\"itp\" formControlName=\"itp\" placeholder=\"itp\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\" />\n                    <div *ngIf=\"submitted && f['itp'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['itp'].errors.required\">itp is required</div>\n                    </div>\n                  </div>\n\n                  <c-form-group cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"spn\">Spn:</h4>\n                    <input cInput id=\"spn\" formControlName=\"spn\" placeholder=\"spn\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\" />\n                    <div *ngIf=\"submitted && f['spn'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['spn'].errors.required\">spn is required</div>\n                    </div>\n                  </c-form-group>\n\n                  <c-form-group cCol md=\"4\">\n                    <a (click)=\"deleteLesson(i)\" style=\"text-align:left; color: rgb(207, 18, 18);cursor: pointer;\">\n                      <div>&nbsp;&nbsp;<i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete</div>\n                    </a>\n                  </c-form-group>\n                </c-row>\n              </form>\n            </ng-container>\n          </ng-container>\n          <div style=\"position: center;\">\n            <button cButton color=\"success\" class=\"mfe-1\" class=\"btn btn-default\" type=\"button\"\n              (click)=\"addLesson()\">Add</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"icaFieldValue(lessonForm.value);hide()\">Submit</button>\n        <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" (click)=\"hide()\">Close</button>\n      </div>\n    </div>\n  </div>\n</div>  \n \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- <div [style.display]=\"showModal ? 'block' : 'none'\" class=\"modal\" id=\"imagemodal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\" id=\"myModalLabel\">ICA</h4>\n      </div>\n      <div class=\"modal-body\">\n        <form [formGroup]=\"simpleForm\" (ngSubmit)=\"onSubmits()\">\n          <div class=\"row\">\n            <c-row>\n              <c-form-group cCol md=\"12\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Asn</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let field of fieldArray; let i = index\">\n\n                      <td>\n                        <input cInput [(ngModel)]=\"field.price\" class=\"form-control\" type=\"text\"\n                          name=\"{{field.price}}\" />\n                      </td>\n                      <td>\n                        <a (click)=\"deleteFieldValue(i)\" style=\"text-align:left; color: #000;cursor: pointer;\"><div>&nbsp;&nbsp;<i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete</div></a>                        \n                    </tr>\n                    <tr>\n                      <td>\n                        <input cInput class=\"form-control\" type=\"text\" id=\"newAttributePrice\"\n                          [(ngModel)]=\"newAttribute.price\" name=\"newAttributePrice\" />\n                      </td>\n                      <td>\n                        <button cButton color=\"success\" class=\"mfe-1\" class=\"btn btn-default\" type=\"button\"\n                          (click)=\"addFieldValue()\">Add</button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n              </c-form-group>\n            </c-row>\n            <c-row>\n              <c-form-group cCol md=\"4\">\n                <h4 class=\"col-form-label\" for=\"iid\">Iid :</h4>\n                <input cInput id=\"iid\" formControlName=\"iid\" placeholder=\"iid\" autocomplete=\"given-name\" required\n                  [autofocus]=\"true\"\n                  [ngClass]=\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\" />\n                <div *ngIf=\"submitted && f['iid'].invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f['iid'].errors.required\">iid is required</div>\n                </div>\n              </c-form-group>\n              <c-form-group cCol md=\"4\">\n                <h4 class=\"col-form-label\" for=\"itp\">Itp :</h4>\n                <input cInput id=\"itp\" formControlName=\"itp\" placeholder=\"itp\" autocomplete=\"given-name\" required\n                  [autofocus]=\"true\"\n                  [ngClass]=\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\" />\n                <div *ngIf=\"submitted && f['itp'].invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f['itp'].errors.required\">itp is required</div>\n                </div>\n              </c-form-group>\n              <c-form-group cCol md=\"4\">\n                <h4 class=\"col-form-label\" for=\"spn\">Spn:</h4>\n                <input cInput id=\"spn\" formControlName=\"spn\" placeholder=\"spn\" autocomplete=\"given-name\" required\n                  [autofocus]=\"true\"\n                  [ngClass]=\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\" />\n                <div *ngIf=\"submitted && f['spn'].invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f['spn'].errors.required\">spn is required</div>\n                </div>\n              </c-form-group>\n            </c-row>\n            <c-row>\n            </c-row>\n          </div>\n        </form>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"icaFieldValue(simpleForm.value);hide()\">Submit</button>\n        <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" (click)=\"hide()\">Close</button>\n      </div>\n    </div>\n  </div>\n</div>  -->");

/***/ }),

/***/ "ZWvG":
/*!*****************************************************************!*\
  !*** ./src/app/views/configuration/configuration.component.css ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("::ng-deep .card-body {\n  flex: 1 1 auto;\n  min-height: 1px;\n  padding: 1.25rem;\n  margin-bottom: 280px;\n}\n\n::ng-deep .nav-tabs-boxed .tab-content {\n  padding: 0.75rem 1.25rem;\n  border: 1px solid;\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\n  color: #768192;\n  background-color: #fff;\n  border-color: #d8dbe0;\n}\n\n::ng-deep .card-style {\n  border: none;\n}\n\n.modal-dialog {\n    max-width: 740px;\n    margin: 1.75rem auto;\n  }\n\np.ridge {border-style: ridge;border-color: rgb(10, 14, 10);}\n\ninput.largerCheckbox {\n    width: 20px;\n    height: 40px;\n    margin-top: -7px;\n    margin-left: revert;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixpQkFBaUI7RUFDakIsd0NBQXdDO0VBQ3hDLGNBQWM7RUFDZCxzQkFBc0I7RUFDdEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUdFO0lBQ0UsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtFQUN0Qjs7QUFFQSxTQUFTLG1CQUFtQixDQUFDLDZCQUE2QixDQUFDOztBQUUzRDtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2QiIsImZpbGUiOiJjb25maWd1cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XG4gIGZsZXg6IDEgMSBhdXRvO1xuICBtaW4taGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmc6IDEuMjVyZW07XG4gIG1hcmdpbi1ib3R0b206IDI4MHB4O1xufVxuXG46Om5nLWRlZXAgLm5hdi10YWJzLWJveGVkIC50YWItY29udGVudCB7XG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDAgMC4yNXJlbSAwLjI1cmVtIDAuMjVyZW07XG4gIGNvbG9yOiAjNzY4MTkyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBib3JkZXItY29sb3I6ICNkOGRiZTA7XG59XG5cbjo6bmctZGVlcCAuY2FyZC1zdHlsZSB7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuXG4gIC5tb2RhbC1kaWFsb2cge1xuICAgIG1heC13aWR0aDogNzQwcHg7XG4gICAgbWFyZ2luOiAxLjc1cmVtIGF1dG87XG4gIH1cblxuICBwLnJpZGdlIHtib3JkZXItc3R5bGU6IHJpZGdlO2JvcmRlci1jb2xvcjogcmdiKDEwLCAxNCwgMTApO31cbiAgXG4gIGlucHV0LmxhcmdlckNoZWNrYm94IHtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgbWFyZ2luLXRvcDogLTdweDtcbiAgICBtYXJnaW4tbGVmdDogcmV2ZXJ0O1xufSJdfQ== */");

/***/ }),

/***/ "ek0A":
/*!****************************************************************!*\
  !*** ./src/app/views/configuration/Configuration.component.ts ***!
  \****************************************************************/
/*! exports provided: confirmPasswordValidator, ConfigurationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirmPasswordValidator", function() { return confirmPasswordValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationComponent", function() { return ConfigurationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_configuration_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./configuration.component.html */ "N30Y");
/* harmony import */ var _configuration_component_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./configuration.component.css */ "ZWvG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./validation-forms.service */ "udCq");
/* harmony import */ var _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Common/common-data.service */ "4qVP");
/* harmony import */ var _service_data_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../service/data.service */ "AwSQ");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ "iInd");









/** passwords must match - custom validator */
const confirmPasswordValidator = (control) => {
    const password = control.get('password');
    const confirm = control.get('confirmPassword');
    return password && confirm && password.value === confirm.value
        ? null
        : { passwordMismatch: true };
};
let ConfigurationComponent = class ConfigurationComponent {
    constructor(fb, vf, service, commonData, router) {
        this.fb = fb;
        this.vf = vf;
        this.service = service;
        this.commonData = commonData;
        this.router = router;
        this.customer = {};
        this.submitted = false;
        this.ica = {};
        this.myObjArray = [];
        this.ObjArray = [];
        this.fieldArray = [];
        this.newAttribute = {};
        this.icaArray = [];
        this.newicaAttribute = {};
        this.myInstance = [];
        this._lorem = [];
        this._tabs = [
            { header: 'Technical Configuration', panel: this.lorem[0], icon: 'cil-user' },
            { header: 'Business Configuration', panel: this.lorem[1], icon: 'cil-home' },
            { header: 'General Configuration', panel: this.lorem[2], icon: 'cil-mobile' },
        ];
        //FormArray
        this.form = this.fb.group({
            lessons: this.fb.array([])
        });
        this.formErrors = this.vf.errorMessages;
        this.createForm();
        this.addLesson();
        this.setTab = 0;
    }
    get setTab() {
        return this._setTab;
    }
    set setTab(value) {
        this._setTab = value || 0;
    }
    get lorem() {
        return [...this._lorem];
    }
    get tabs() {
        return this._tabs;
    }
    get tabs2() {
        return this._tabs.filter((tab) => !tab.disabled);
    }
    //FormArray
    get lessons() {
        return this.form.controls["lessons"];
    }
    addLesson() {
        this.lessonForm = this.fb.group({
            asn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            iid: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            itp: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            spn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
        });
        this.lessons.push(this.lessonForm);
    }
    deleteLesson(lessonIndex) {
        this.lessons.removeAt(lessonIndex);
    }
    ngOnInit() {
    }
    ngOnDestroy() {
    }
    ngOnChanges(changes) {
        console.log('ngOnChanges', changes, this.setTab);
    }
    onTabChange(e) {
        console.log('onTabChange', e);
    }
    createForm() {
        this.simpleForm = this.fb.group({
            cid: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            crc: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            ica: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            asn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            iid: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            itp: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            spn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            imx: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            key: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            men: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mid: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            qmx: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            loginId: [
                '',
                [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required,
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].minLength(this.vf.formRules.usernameMin),
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern(this.vf.formRules.nonEmpty),
                ],
            ],
            merchantId: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            companyName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            billingPlan: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            panNo: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            gstNo: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            phone: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            address: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            country: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            pincode: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            primaryContact: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            secondaryContact: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            // email: ['', [Validators.required, Validators.email]],
            keys: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mids: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            nss: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            nse: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            cdf: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            bdf: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mff: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mcf: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mtp: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mlc: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mhc: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            dsf: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            dsc: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            gps: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            gsm: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            wfi: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            psf: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            nmc: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            ssc: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mrp: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            sec: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            dec: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mec: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            tsf: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            asl: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            bst: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            dfc: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            wsn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            wpd: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            pid: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            mac: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
        }, { validators: confirmPasswordValidator });
    }
    get f() {
        return this.simpleForm.controls;
        return this.businessForm.controls;
    }
    onReset() {
        this.submitted = false;
        this.simpleForm.reset();
        this.businessForm.reset();
    }
    onValidate() {
        this.submitted = true;
        return this.simpleForm.status === 'VALID';
        return this.businessForm.status === 'VALID';
    }
    onSaveBusiness(business) {
        this.mybusinessArray = ({
            "cid": business.cid,
            "crc": parseInt(business.crc + ""),
            "ica": this.ObjArray,
            "imx": parseInt(business.imx + ""),
            "key": business.key,
            "men": parseInt(business.men + ""),
            "mid": business.mid,
            "qmx": parseInt(business.qmx + ""),
        });
        console.log(this.mybusinessArray);
        // this.myObjArray.push({"ica": {"asn": business.asn, "iid": business.iid,"itp": business.itp,"spn": business.spn}});
        debugger;
        console.log("testforbug" + JSON.stringify(this.mybusinessArray));
        this.service.saveBusiness(this.mybusinessArray).subscribe((resp) => {
            console.log("login Reponse:::" + JSON.stringify(resp));
            if (resp && resp.statusCode == 200) {
                console.log("Sucess");
                alert('SUCCESS!');
            }
        });
    }
    onSaveTech(business) {
        debugger;
        this.service.saveTech(business).subscribe((resp) => {
            console.log("login Reponse:::" + JSON.stringify(resp));
            if (resp && resp.statusCode == 200) {
                console.log("Sucess");
                alert('SUCCESS!');
            }
        });
    }
    onSubmit() {
        debugger;
        if (this.onValidate()) {
            console.warn(this.simpleForm.value);
            alert('SUCCESS!');
        }
    }
    onBusinessSubmit() {
        debugger;
        if (this.onValidate()) {
            console.warn(this.businessForm.value);
            alert('SUCCESS!');
        }
    }
    showing() {
        debugger;
        this.showModal = true;
    }
    hide() {
        debugger;
        this.showModal = false;
    }
    addFieldValue() {
        debugger;
        this.fieldArray.push(this.newAttribute);
        console.log(this.fieldArray);
        this.newAttribute = {};
        console.log(this.fieldArray);
    }
    deleteFieldValue(index) {
        this.fieldArray.splice(index, 1);
    }
    icaFieldValue(icaArray) {
        debugger;
        this.myObjArray.push({ "asn": [parseInt(icaArray.asn)], "iid": parseInt(icaArray.iid), "itp": parseInt(icaArray.itp), "spn": parseInt(icaArray.spn) });
        this.newicaAttribute = JSON.parse(JSON.stringify(this.myObjArray));
        this.ObjArray = Object.assign(this.newicaAttribute);
        this.icaArray.push(this.newicaAttribute);
    }
};
ConfigurationComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__["ValidationFormsService"] },
    { type: _service_data_service__WEBPACK_IMPORTED_MODULE_7__["DataService"] },
    { type: _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__["CommonDataService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"] }
];
ConfigurationComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-tabs',
        template: _raw_loader_configuration_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_configuration_component_css__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__["ValidationFormsService"], _service_data_service__WEBPACK_IMPORTED_MODULE_7__["DataService"], _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__["CommonDataService"], _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]])
], ConfigurationComponent);



/***/ }),

/***/ "l/9y":
/*!*************************************************************!*\
  !*** ./src/app/views/configuration/configuration.module.ts ***!
  \*************************************************************/
/*! exports provided: ConfigurationModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationModule", function() { return ConfigurationModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _coreui_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @coreui/angular */ "Iluq");
/* harmony import */ var _coreui_icons_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @coreui/icons-angular */ "rVqu");
/* harmony import */ var _Configuration_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Configuration-routing.module */ "FQ0u");
/* harmony import */ var _Configuration_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Configuration.component */ "ek0A");
/* harmony import */ var ngx_bootstrap_pagination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ngx-bootstrap/pagination */ "6No5");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _forms_validation_forms_validation_forms_routing_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../forms/validation-forms/validation-forms-routing.module */ "jloh");










let ConfigurationModule = class ConfigurationModule {
};
ConfigurationModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
            _Configuration_routing_module__WEBPACK_IMPORTED_MODULE_5__["ConfigurationRoutingModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["CardModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["GridModule"],
            _coreui_icons_angular__WEBPACK_IMPORTED_MODULE_4__["IconModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["SwitchModule"],
            ngx_bootstrap_pagination__WEBPACK_IMPORTED_MODULE_7__["PaginationModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["TabsetModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["BadgeModule"],
            _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"],
            _forms_validation_forms_validation_forms_routing_module__WEBPACK_IMPORTED_MODULE_9__["ValidationFormsRoutingModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["GridModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["CardModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["ButtonModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["BadgeModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["FormModule"],
        ],
        declarations: [_Configuration_component__WEBPACK_IMPORTED_MODULE_6__["ConfigurationComponent"]],
    })
], ConfigurationModule);



/***/ }),

/***/ "udCq":
/*!*****************************************************************!*\
  !*** ./src/app/views/configuration/validation-forms.service.ts ***!
  \*****************************************************************/
/*! exports provided: ValidationFormsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationFormsService", function() { return ValidationFormsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");


let ValidationFormsService = class ValidationFormsService {
    constructor() {
        this.formRules = {
            nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',
            usernameMin: 5,
            passwordMin: 6,
            passwordPattern: '(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'
        };
        this.formErrors = {
            firstName: '',
            lastName: '',
            username: '',
            email: '',
            password: '',
            confirmPassword: '',
            accept: false,
        };
        this.errorMessages = {
            firstName: {
                required: 'First name is required',
            },
            lastName: {
                required: 'Last name is required',
            },
            username: {
                required: 'Username is required',
                minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,
                pattern: 'Must contain letters and/or numbers, no trailing spaces'
            },
            email: {
                required: 'required',
                email: 'Invalid email address',
            },
            password: {
                required: 'Password is required',
                pattern: 'Password must contain: numbers, uppercase and lowercase letters',
                minLength: `Password must be at least ${this.formRules.passwordMin} characters`
            },
            confirmPassword: {
                required: 'Password confirmation is required',
                passwordMismatch: 'Passwords must match'
            },
            accept: {
                requiredTrue: 'You have to accept our Terms and Conditions'
            },
        };
    }
};
ValidationFormsService.ctorParameters = () => [];
ValidationFormsService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [])
], ValidationFormsService);



/***/ })

}]);
//# sourceMappingURL=views-configuration-configuration-module-es2015.js.map