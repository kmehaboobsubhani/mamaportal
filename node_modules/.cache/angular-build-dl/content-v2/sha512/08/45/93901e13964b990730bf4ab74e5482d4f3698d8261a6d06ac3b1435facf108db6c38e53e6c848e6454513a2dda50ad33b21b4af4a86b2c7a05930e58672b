{"version":3,"sources":["webpack:///src/app/views/inventory/addItems/addItems-routing.module.ts","webpack:///src/app/views/inventory/addItems/validation-forms.service.ts","webpack:///src/app/views/inventory/addItems/addItems.module.ts","webpack:///src/app/views/inventory/addItems/addItems.component.ts","webpack:///src/app/views/inventory/addItems/addItems.component.css","webpack:///src/app/views/inventory/addItems/addItems.component.html"],"names":["routes","path","component","data","title","AddItemsRoutingModule","imports","forChild","exports","ValidationFormsService","formRules","nonEmpty","usernameMin","passwordMin","passwordPattern","formErrors","firstName","lastName","username","email","password","confirmPassword","accept","errorMessages","required","minLength","pattern","passwordMismatch","requiredTrue","providedIn","AddItemsInitModule","declarations","confirmPasswordValidator","control","get","confirm","value","AddItemsComponent","fb","vf","service","commonData","router","addItems","_lorem","_tabs","header","panel","lorem","icon","submitted","createForm","_setTab","filter","tab","disabled","e","console","log","simpleForm","group","active","category","costPrice","description","discount","gst","itemId","merchantId","name","sellPrice","threshold","controls","reset","status","AddItems","subscribe","resp","JSON","stringify","statusCode","alert","onValidate","warn","selector","template","providers"],"mappings":"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","file":"views-inventory-addItems-addItems-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AddItemsComponent } from './addItems.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AddItemsComponent,\r\n    data: {\r\n      title: 'Add Items',\r\n    },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AddItemsRoutingModule {}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DataTableModule } from '@pascalhonegger/ng-datatable';\r\nimport { AddItemsComponent } from './addItems.component';\r\nimport { AddItemsRoutingModule } from './addItems-routing.module';\r\n\r\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\r\nimport { IconModule } from '@coreui/icons-angular';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ValidationFormsRoutingModule } from '../../forms/validation-forms/validation-forms-routing.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        AddItemsRoutingModule,\r\n        DataTableModule,\r\n        CardModule,\r\n        GridModule,\r\n        DataTableModule,\r\n        FormModule,\r\n        CommonModule,\r\n        AddItemsRoutingModule,\r\n        IconModule,\r\n        SwitchModule,\r\n        PaginationModule,\r\n        FormsModule,\r\n        TabsetModule,\r\n        BadgeModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        ValidationFormsRoutingModule,\r\n        GridModule,\r\n        CardModule,\r\n        ButtonModule,\r\n        BadgeModule,\r\n        FormModule,\r\n    ],\r\n  declarations: [AddItemsComponent],\r\n})\r\nexport class AddItemsInitModule {}\r\n","  import {\r\n    Component,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n  } from '@angular/core';\r\n  import {\r\n    FormGroup,\r\n    FormBuilder,\r\n    Validators,\r\n    FormControl,\r\n    AbstractControl,\r\n    FormGroupName,\r\n  } from '@angular/forms';\r\n  import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n  import { ValidatorFn, ValidationErrors } from '@angular/forms';\r\n  import { ValidationFormsService } from './validation-forms.service';\r\n  import { CommonDataService } from '../../../Common/common-data.service';\r\n  import { DataService } from '../../../service/data.service';\r\n  import { Router } from '@angular/router';\r\n  import { AddItems } from './addItem';\r\n  /** passwords must match - custom validator */\r\n  export const confirmPasswordValidator: ValidatorFn = (\r\n    control: FormGroup\r\n  ): ValidationErrors | null => {\r\n    const password = control.get('password');\r\n    const confirm = control.get('confirmPassword');\r\n    return password && confirm && password.value === confirm.value\r\n      ? null\r\n      : { passwordMismatch: true };\r\n  };\r\n  \r\n  @Component({\r\n    selector: 'app-tabs',\r\n    templateUrl: './addItems.component.html',\r\n    styleUrls: ['./addItems.component.css'],\r\n    providers: [ValidationFormsService],\r\n  })\r\n\r\n  export class AddItemsComponent implements OnDestroy, OnInit {\r\n    addItems:any = {};\r\n    entryForm: FormGroup;\r\n    private _setTab: number;\r\n    get setTab() {\r\n      return this._setTab;\r\n    }\r\n    set setTab(value: number) {\r\n      this._setTab = value || 0;\r\n    }\r\n    private interval;\r\n  \r\n    private _lorem: string[] = [\r\n        ];\r\n    public get lorem() {\r\n      return [...this._lorem];\r\n    }\r\n  \r\n    private _tabs: any[] = [\r\n      { header: 'Merchant Info', panel: this.lorem[0], icon: 'cil-user' },\r\n      { header: 'Payment Info', panel: this.lorem[1], icon: 'cil-mobile' },\r\n      { header: 'Payment Gateway', panel: this.lorem[1], icon: 'cil-credit-card' },\r\n      \r\n      //{ header: 'Certificates', panel: this.lorem[3], icon: 'cil-envelope-closed' },\r\n    ];\r\n  \r\n    public get tabs() {\r\n      // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n      // console.log('tabs:', tabs);\r\n      // return tabs;\r\n      return this._tabs;\r\n    }\r\n  \r\n    public get tabs2() {\r\n      // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n      // console.log('tabs:', tabs);\r\n      // return tabs;\r\n      return this._tabs.filter((tab) => !tab.disabled);\r\n    }\r\n  \r\n    simpleForm: FormGroup;\r\n    submitted = false;\r\n    formErrors: any;\r\n  \r\n    constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\r\n      this.formErrors = this.vf.errorMessages;\r\n      this.createForm();\r\n    }\r\n  \r\n    ngOnInit() {\r\n  \r\n    }\r\n  \r\n    ngOnDestroy(): void {\r\n      // clearInterval(this.interval);\r\n    }\r\n  \r\n  \r\n  \r\n    onTabChange(e) {\r\n      console.log('onTabChange', e);\r\n    }\r\n  \r\n    createForm() {\r\n      this.simpleForm = this.fb.group(\r\n        {         \r\n          active : ['', [Validators.required]],\r\n          category : ['', [Validators.required]],\r\n          costPrice : ['', [Validators.required]],\r\n          description : ['', [Validators.required]],\r\n          discount : ['', [Validators.required]],\r\n          gst : ['', [Validators.required]],\r\n          itemId: ['', [Validators.required]],\r\n          merchantId : ['', [Validators.required]],\r\n          name : ['', [Validators.required]],\r\n          sellPrice : ['', [Validators.required]],\r\n          threshold : ['', [Validators.required]],\r\n        },\r\n      );\r\n    }\r\n  \r\n    // convenience getter for easy access to form fields\r\n    get f() {\r\n      return this.simpleForm.controls;\r\n    }\r\n  \r\n    onReset() {\r\n      this.submitted = false;\r\n      this.simpleForm.reset();\r\n    }\r\n  \r\n    onValidate() {\r\n      this.submitted = true;\r\n  \r\n      // stop here if form is invalid\r\n      return this.simpleForm.status === 'VALID';\r\n    }\r\n  \r\n    onAddItems(addItems : AddItems){\r\n      debugger;\r\n      this.service.AddItems(addItems).subscribe((resp: any) => {\r\n        console.log(\"login Reponse:::\" + JSON.stringify(resp));\r\n        if(resp && resp.statusCode == 200) {\r\n            console.log(\"Sucess\")\r\n            alert('SUCCESS!');\r\n        }    \r\n      });\r\n    }\r\n  \r\n    onSubmit() {\r\n      debugger;\r\n      //console.warn(this.onValidate(), this.simpleForm.value);\r\n      if (this.onValidate()) {\r\n        console.warn(this.simpleForm.value);\r\n        alert('SUCCESS!');\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n  ","export default \"::ng-deep .card-body {\\r\\n    flex: 1 1 auto;\\r\\n    min-height: 1px;\\r\\n    padding: 1.25rem;\\r\\n    margin-bottom: 280px;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .nav-tabs-boxed .tab-content {\\r\\n    padding: 0.75rem 1.25rem;\\r\\n    border: 1px solid;\\r\\n    border-radius: 0 0.25rem 0.25rem 0.25rem;\\r\\n    color: #768192;\\r\\n    background-color: #fff;\\r\\n    border-color: #d8dbe0;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .card-style {\\r\\n    border: none;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZEl0ZW1zLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixvQkFBb0I7RUFDdEI7O0VBRUE7SUFDRSx3QkFBd0I7SUFDeEIsaUJBQWlCO0lBQ2pCLHdDQUF3QztJQUN4QyxjQUFjO0lBQ2Qsc0JBQXNCO0lBQ3RCLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLFlBQVk7RUFDZCIsImZpbGUiOiJhZGRJdGVtcy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOjpuZy1kZWVwIC5jYXJkLWJvZHkge1xyXG4gICAgZmxleDogMSAxIGF1dG87XHJcbiAgICBtaW4taGVpZ2h0OiAxcHg7XHJcbiAgICBwYWRkaW5nOiAxLjI1cmVtO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjgwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIDo6bmctZGVlcCAubmF2LXRhYnMtYm94ZWQgLnRhYi1jb250ZW50IHtcclxuICAgIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMCAwLjI1cmVtIDAuMjVyZW0gMC4yNXJlbTtcclxuICAgIGNvbG9yOiAjNzY4MTkyO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGJvcmRlci1jb2xvcjogI2Q4ZGJlMDtcclxuICB9XHJcbiAgXHJcbiAgOjpuZy1kZWVwIC5jYXJkLXN0eWxlIHtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICB9Il19 */\";","export default \"<div class=\\\"container-fluid\\\">\\r\\n  <form [formGroup]=\\\"entryForm\\\" novalidate>\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-header\\\">\\r\\n        <div class=\\\"float-left\\\">\\r\\n          <h3 class=\\\"text-info\\\">Add Item</h3>\\r\\n        </div>\\r\\n        <div class=\\\"float-right\\\">\\r\\n          <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/items']\\\"><i class=\\\"fa fa-arrow-left\\\"></i> Back to Item List</a>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"card-body\\\">\\r\\n\\r\\n        <ng-container>\\r\\n          <c-col md=\\\"12\\\">\\r\\n            <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n              <c-row>\\r\\n                <c-form-group cCol md=\\\"4\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"name\\\">Name :</h6>\\r\\n                  <input cInput id=\\\"name\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" autocomplete=\\\"given-name\\\" required\\r\\n                    [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.name.touched) && f.name.invalid, 'is-valid': f.category.touched && f.name.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['name'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['name'].errors.required\\\">Name is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-form-group cCol md=\\\"4\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"category\\\">category :</h6>\\r\\n                  <input cInput id=\\\"category\\\" formControlName=\\\"category\\\" placeholder=\\\"category\\\" autocomplete=\\\"given-name\\\" required\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.category.touched) && f.category.errors, 'is-valid': f.description.touched && !f.category.errors }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['category'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['category'].errors.required\\\">category is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-form-group cCol md=\\\"4\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"description\\\">Description :</h6>\\r\\n                  <input cInput id=\\\"description\\\" formControlName=\\\"description\\\" placeholder=\\\"description\\\"\\r\\n                    autocomplete=\\\"family-name\\\" required\\r\\n                    [ngClass]=\\\"{ 'is-invalid':  (submitted || f.description.touched) && f.description.invalid, 'is-valid': f.itemId.touched && f.description.valid }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['description'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['description'].errors.required\\\">Description is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n              </c-row>\\r\\n              <c-row>\\r\\n                <c-form-group cCol md=\\\"6\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"itemId\\\">ItemId :</h6>\\r\\n                  <input cInput id=\\\"itemId\\\" formControlName=\\\"itemId\\\" placeholder=\\\"item Id\\\" autocomplete=\\\"given-name\\\"\\r\\n                    required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.itemId.touched) && f.itemId.invalid, 'is-valid': f.merchantId.touched && f.itemId.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['itemId'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['itemId'].errors.required\\\">ItemId is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-form-group cCol md=\\\"6\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"merchantId\\\">MerchantId :</h6>\\r\\n                  <input cInput id=\\\"merchantId\\\" formControlName=\\\"merchantId\\\" placeholder=\\\"merchantId\\\"\\r\\n                    autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.gst.touched && f.merchantId.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['merchantId'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['merchantId'].errors.required\\\">merchantId is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n\\r\\n              </c-row>\\r\\n              <c-row>\\r\\n                <c-form-group cCol md=\\\"6\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"gst\\\">Gst Number :</h6>\\r\\n                  <input cInput id=\\\"gst\\\" formControlName=\\\"gst\\\" placeholder=\\\"gstNumber\\\" autocomplete=\\\"given-name\\\"\\r\\n                    required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.gst.touched) && f.gst.invalid, 'is-valid': f.discount.touched && f.gst.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['gst'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['gst'].errors.required\\\">Gst Number is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-form-group cCol md=\\\"6\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"discount\\\">Discount :</h6>\\r\\n                  <input cInput id=\\\"discount\\\" formControlName=\\\"discount\\\" placeholder=\\\"discount\\\"\\r\\n                    autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.discount.touched) && f.discount.invalid, 'is-valid': f.costPrice.touched && f.discount.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['discount'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['discount'].errors.required\\\">Discount is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n              </c-row>\\r\\n              <c-row>\\r\\n                <c-form-group cCol md=\\\"4\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"costPrice\\\">costPrice :</h6>\\r\\n                  <input cInput id=\\\"costPrice\\\" formControlName=\\\"costPrice\\\" placeholder=\\\"costPrice\\\"\\r\\n                    autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.costPrice.touched) && f.costPrice.invalid, 'is-valid': f.sellPrice.touched && f.costPrice.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['costPrice'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['costPrice'].errors.required\\\">costPrice is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n\\r\\n                <c-form-group cCol md=\\\"4\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"sellPrice\\\">sellPrice :</h6>\\r\\n                  <input cInput id=\\\"sellPrice\\\" formControlName=\\\"sellPrice\\\" placeholder=\\\"sellPrice\\\"\\r\\n                    autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.sellPrice.touched) && f.sellPrice.invalid, 'is-valid': f.threshold.touched && f.sellPrice.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['sellPrice'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['sellPrice'].errors.required\\\">sellPrice is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n\\r\\n                <c-form-group cCol md=\\\"4\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"threshold\\\">threshold :</h6>\\r\\n                  <input cInput id=\\\"threshold\\\" formControlName=\\\"threshold\\\" placeholder=\\\"threshold\\\"\\r\\n                    autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.threshold.touched) && f.threshold.invalid, 'is-valid': f.active.touched && f.threshold.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['threshold'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['threshold'].errors.required\\\">threshold is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n              </c-row>\\r\\n              <c-row>\\r\\n\\r\\n                <c-form-group cCol md=\\\"4\\\">\\r\\n                  <h6 class=\\\"col-form-label\\\" for=\\\"active\\\">active :</h6>\\r\\n                  <input cInput id=\\\"active\\\" formControlName=\\\"active\\\" placeholder=\\\"active\\\"\\r\\n                    autocomplete=\\\"given-name\\\" required [autofocus]=\\\"true\\\"\\r\\n                    [ngClass]=\\\"{ 'is-invalid': (submitted || f.active.touched) && f.active.invalid, 'is-valid': f.active.touched && f.active.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['active'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['active'].errors.required\\\">active is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n              </c-row>\\r\\n\\r\\n              <c-form-group>\\r\\n                <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onAddItems(simpleForm.value)\\\"\\r\\n                   >Submit</button>\\r\\n                <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\"  (click)=\\\"onValidate()\\\"\\r\\n                  >Validate</button>\\r\\n                <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n              </c-form-group>\\r\\n            </form>\\r\\n          </c-col>\\r\\n        </ng-container>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\";"]}