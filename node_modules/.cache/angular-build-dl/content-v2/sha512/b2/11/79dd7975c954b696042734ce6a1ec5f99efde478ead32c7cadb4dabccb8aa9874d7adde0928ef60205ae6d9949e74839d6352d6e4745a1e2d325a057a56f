(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["views-configuration-configuration-module"],{

/***/ "FQ0u":
/*!*********************************************************************!*\
  !*** ./src/app/views/configuration/Configuration-routing.module.ts ***!
  \*********************************************************************/
/*! exports provided: ConfigurationRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationRoutingModule", function() { return ConfigurationRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _Configuration_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Configuration.component */ "ek0A");




const routes = [
    {
        path: '',
        component: _Configuration_component__WEBPACK_IMPORTED_MODULE_3__["ConfigurationComponent"],
        data: {
            title: 'Configuration',
        }
    },
];
let ConfigurationRoutingModule = class ConfigurationRoutingModule {
};
ConfigurationRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]],
    })
], ConfigurationRoutingModule);



/***/ }),

/***/ "N30Y":
/*!********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/configuration/configuration.component.html ***!
  \********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"fade-in\">\n  <c-row>\n    <c-col>\n      <c-card>\n        <c-card-body>\n          <c-tabset  fill=\"fill\" variant=\"pills\" boxed=\"true\" [activeTab]=\"'0'\">\n            <c-tablist>\n              <c-tab *ngFor=\"let tab of tabs2\">\n                <c-icon [name]=\"tab.icon\" class=\"pb-1\"></c-icon>\n                {{tab.header}}\n              </c-tab>\n            </c-tablist>\n            <c-tab-content>\n              <c-tab-pane *ngFor=\"let tab of tabs2; let i = index\">\n\n                <ng-container *ngIf=\"i===0\">\n                  <c-col>\n                    <div class=\"register-form\">\n                      <form [formGroup]=\"businessform\" (ngSubmit)=\"onSubmit()\">\n                        <div class=\"form-group\">\n                          <label>Full Name</label>\n                          <input\n                            type=\"text\"\n                            formControlName=\"fullname\"\n                            class=\"form-control\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f['fullname'].errors }\"\n                          />\n                          <div *ngIf=\"submitted && f['fullname'].errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['fullname'].errors['required']\">Fullname is required</div>\n                          </div>\n                        </div>\n                        <div class=\"form-group\">\n                          <label>Username</label>\n                          <input\n                            type=\"text\"\n                            formControlName=\"username\"\n                            class=\"form-control\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f['username'].errors }\"\n                          />\n                          <div *ngIf=\"submitted && f['username'].errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['username'].errors['required']\">Username is required</div>\n                            <div *ngIf=\"f['username'].errors['minlength']\">\n                              Username must be at least 6 characters\n                            </div>\n                            <div *ngIf=\"f['username'].errors['maxlength']\">\n                              Username must not exceed 20 characters\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"form-group\">\n                          <label>Email</label>\n                          <input\n                            type=\"text\"\n                            formControlName=\"email\"\n                            class=\"form-control\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f['email'].errors }\"\n                          />\n                          <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\n                            <div *ngIf=\"f['email'].errors['email']\">Email is invalid</div>\n                          </div>\n                        </div>\n                        <div class=\"form-group\">\n                          <label>Password</label>\n                          <input\n                            type=\"password\"\n                            formControlName=\"password\"\n                            class=\"form-control\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f['password'].errors }\"\n                          />\n                          <div *ngIf=\"submitted && f['password'].errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\n                            <div *ngIf=\"f['password'].errors['minlength']\">\n                              Password must be at least 6 characters\n                            </div>\n                            <div *ngIf=\"f['password'].errors['maxlength']\">\n                              Username must not exceed 40 characters\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"form-group\">\n                          <label>Confirm Password</label>\n                          <input\n                            type=\"password\"\n                            formControlName=\"confirmPassword\"\n                            class=\"form-control\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f['confirmPassword'].errors }\"\n                          />\n                          <div\n                            *ngIf=\"submitted && f['confirmPassword'].errors\"\n                            class=\"invalid-feedback\"\n                          >\n                            <div *ngIf=\"f['confirmPassword'].errors['required']\">\n                              Confirm Password is required\n                            </div>\n                            <div *ngIf=\"f['confirmPassword'].errors['matching']\">\n                              Confirm Password does not match\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"form-group form-check\">\n                          <input\n                            type=\"checkbox\"\n                            formControlName=\"acceptTerms\"\n                            class=\"form-check-input\"\n                            [ngClass]=\"{ 'is-invalid': submitted && f['acceptTerms'].errors }\"\n                          />\n                          <label for=\"acceptTerms\" class=\"form-check-label\"\n                            >I have read and agree to the Terms</label\n                          >\n                          <div *ngIf=\"submitted && f['acceptTerms'].errors\" class=\"invalid-feedback\">\n                            Accept Terms is required\n                          </div>\n                        </div>\n                        <div class=\"form-group\">\n                          <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n                          <button\n                            type=\"button\"\n                            (click)=\"onReset()\"\n                            class=\"btn btn-warning float-right\"\n                          >\n                            Reset\n                          </button>\n                        </div>\n                      </form>\n                    </div>\n                  </c-col>\n                </ng-container>\n                <ng-container *ngIf=\"i===1\">\n                  \n                  <c-col md=\"12\">\n                    \n                  </c-col>\n                </ng-container>\n                <ng-container *ngIf=\"i===2\">\n                  <c-col md=\"12\">\n                    \n                  </c-col>\n                </ng-container>\n                                \n              </c-tab-pane>\n            </c-tab-content>\n          </c-tabset>\n        </c-card-body>\n      </c-card>\n    </c-col>\n  </c-row>\n</div>\n\n\n\n <div [style.display]=\"showModal ? 'block' : 'none'\" class=\"modal\" id=\"imagemodal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\" id=\"myModalLabel\">Add ICA</h4>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"add-lessons-form\" [formGroup]=\"form\" class=\"needs-validation\">\n          <ng-container formArrayName=\"lessons\">\n            <ng-container *ngFor=\"let lessonForm of lessons.controls; let i = index\">\n              <form class=\"lesson-form-row\" [formGroup]=\"lessonForm\">\n                <c-row>\n                  \n                  <div cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"asn\">Asn :</h4>\n                    <input cInput id=\"asn\" formControlName=\"asn\" placeholder=\"asn\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.asn.touched) && f.asn.invalid, 'is-valid': f.itp.touched && f.asn.valid  }\" />\n                    <div *ngIf=\"submitted && f['asn'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['asn'].errors.required\">asn is required</div>\n                    </div>\n                  </div>\n\n\n                  <div cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"iid\">Iid :</h4>\n                    <input cInput id=\"iid\" formControlName=\"iid\" placeholder=\"iid\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\" />\n                    <div *ngIf=\"submitted && f['iid'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['iid'].errors.required\">iid is required</div>\n                    </div>\n                  </div>\n                \n                  <div cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"itp\">Itp :</h4>\n                    <input cInput id=\"itp\" formControlName=\"itp\" placeholder=\"itp\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\" />\n                    <div *ngIf=\"submitted && f['itp'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['itp'].errors.required\">itp is required</div>\n                    </div>\n                  </div>\n\n                  <c-form-group cCol md=\"2\">\n                    <h4 class=\"col-form-label\" for=\"spn\">Spn:</h4>\n                    <input cInput id=\"spn\" formControlName=\"spn\" placeholder=\"spn\"\n                      autocomplete=\"given-name\" required [autofocus]=\"true\"\n                      [ngClass]=\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\" />\n                    <div *ngIf=\"submitted && f['spn'].invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"f['spn'].errors.required\">spn is required</div>\n                    </div>\n                  </c-form-group>\n\n                  <c-form-group cCol md=\"4\">\n                    <a (click)=\"deleteLesson(i)\" style=\"text-align:left; color: rgb(207, 18, 18);cursor: pointer;\">\n                      <div>&nbsp;&nbsp;<i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete</div>\n                    </a>\n                  </c-form-group>\n                </c-row>\n              </form>\n            </ng-container>\n          </ng-container>\n          <div style=\"position: center;\">\n            <button cButton color=\"success\" class=\"mfe-1\" class=\"btn btn-default\" type=\"button\"\n              (click)=\"addLesson()\">Add</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"icaFieldValue(lessonForm.value);hide()\">Submit</button>\n        <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" (click)=\"hide()\">Close</button>\n      </div>\n    </div>\n  </div>\n</div>  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- <div [style.display]=\"showModal ? 'block' : 'none'\" class=\"modal\" id=\"imagemodal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\" id=\"myModalLabel\">ICA</h4>\n      </div>\n      <div class=\"modal-body\">\n        <form [formGroup]=\"simpleForm\" (ngSubmit)=\"onSubmits()\">\n          <div class=\"row\">\n            <c-row>\n              <c-form-group cCol md=\"12\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Asn</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let field of fieldArray; let i = index\">\n\n                      <td>\n                        <input cInput [(ngModel)]=\"field.price\" class=\"form-control\" type=\"text\"\n                          name=\"{{field.price}}\" />\n                      </td>\n                      <td>\n                        <a (click)=\"deleteFieldValue(i)\" style=\"text-align:left; color: #000;cursor: pointer;\"><div>&nbsp;&nbsp;<i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete</div></a>                        \n                    </tr>\n                    <tr>\n                      <td>\n                        <input cInput class=\"form-control\" type=\"text\" id=\"newAttributePrice\"\n                          [(ngModel)]=\"newAttribute.price\" name=\"newAttributePrice\" />\n                      </td>\n                      <td>\n                        <button cButton color=\"success\" class=\"mfe-1\" class=\"btn btn-default\" type=\"button\"\n                          (click)=\"addFieldValue()\">Add</button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n              </c-form-group>\n            </c-row>\n            <c-row>\n              <c-form-group cCol md=\"4\">\n                <h4 class=\"col-form-label\" for=\"iid\">Iid :</h4>\n                <input cInput id=\"iid\" formControlName=\"iid\" placeholder=\"iid\" autocomplete=\"given-name\" required\n                  [autofocus]=\"true\"\n                  [ngClass]=\"{ 'is-invalid': (submitted || f.iid.touched) && f.iid.invalid, 'is-valid': f.itp.touched && f.iid.valid  }\" />\n                <div *ngIf=\"submitted && f['iid'].invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f['iid'].errors.required\">iid is required</div>\n                </div>\n              </c-form-group>\n              <c-form-group cCol md=\"4\">\n                <h4 class=\"col-form-label\" for=\"itp\">Itp :</h4>\n                <input cInput id=\"itp\" formControlName=\"itp\" placeholder=\"itp\" autocomplete=\"given-name\" required\n                  [autofocus]=\"true\"\n                  [ngClass]=\"{ 'is-invalid': (submitted || f.itp.touched) && f.itp.invalid, 'is-valid': f.spn.touched && f.itp.valid  }\" />\n                <div *ngIf=\"submitted && f['itp'].invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f['itp'].errors.required\">itp is required</div>\n                </div>\n              </c-form-group>\n              <c-form-group cCol md=\"4\">\n                <h4 class=\"col-form-label\" for=\"spn\">Spn:</h4>\n                <input cInput id=\"spn\" formControlName=\"spn\" placeholder=\"spn\" autocomplete=\"given-name\" required\n                  [autofocus]=\"true\"\n                  [ngClass]=\"{ 'is-invalid': (submitted || f.spn.touched) && f.spn.invalid, 'is-valid': f.spn.valid  }\" />\n                <div *ngIf=\"submitted && f['spn'].invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f['spn'].errors.required\">spn is required</div>\n                </div>\n              </c-form-group>\n            </c-row>\n            <c-row>\n            </c-row>\n          </div>\n        </form>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"icaFieldValue(simpleForm.value);hide()\">Submit</button>\n        <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" (click)=\"hide()\">Close</button>\n      </div>\n    </div>\n  </div>\n</div>  -->");

/***/ }),

/***/ "ZWvG":
/*!*****************************************************************!*\
  !*** ./src/app/views/configuration/configuration.component.css ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("::ng-deep .card-body {\n  flex: 1 1 auto;\n  min-height: 1px;\n  padding: 1.25rem;\n  margin-bottom: 280px;\n}\n\n::ng-deep .nav-tabs-boxed .tab-content {\n  padding: 0.75rem 1.25rem;\n  border: 1px solid;\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\n  color: #768192;\n  background-color: #fff;\n  border-color: #d8dbe0;\n}\n\n::ng-deep .card-style {\n  border: none;\n}\n\n.modal-dialog {\n    max-width: 740px;\n    margin: 1.75rem auto;\n  }\n\np.ridge {border-style: ridge;border-color: rgb(10, 14, 10);}\n\ninput.largerCheckbox {\n    width: 20px;\n    height: 40px;\n    margin-top: -7px;\n    margin-left: revert;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixpQkFBaUI7RUFDakIsd0NBQXdDO0VBQ3hDLGNBQWM7RUFDZCxzQkFBc0I7RUFDdEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUdFO0lBQ0UsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtFQUN0Qjs7QUFFQSxTQUFTLG1CQUFtQixDQUFDLDZCQUE2QixDQUFDOztBQUUzRDtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2QiIsImZpbGUiOiJjb25maWd1cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgLmNhcmQtYm9keSB7XG4gIGZsZXg6IDEgMSBhdXRvO1xuICBtaW4taGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmc6IDEuMjVyZW07XG4gIG1hcmdpbi1ib3R0b206IDI4MHB4O1xufVxuXG46Om5nLWRlZXAgLm5hdi10YWJzLWJveGVkIC50YWItY29udGVudCB7XG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDAgMC4yNXJlbSAwLjI1cmVtIDAuMjVyZW07XG4gIGNvbG9yOiAjNzY4MTkyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBib3JkZXItY29sb3I6ICNkOGRiZTA7XG59XG5cbjo6bmctZGVlcCAuY2FyZC1zdHlsZSB7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuXG4gIC5tb2RhbC1kaWFsb2cge1xuICAgIG1heC13aWR0aDogNzQwcHg7XG4gICAgbWFyZ2luOiAxLjc1cmVtIGF1dG87XG4gIH1cblxuICBwLnJpZGdlIHtib3JkZXItc3R5bGU6IHJpZGdlO2JvcmRlci1jb2xvcjogcmdiKDEwLCAxNCwgMTApO31cbiAgXG4gIGlucHV0LmxhcmdlckNoZWNrYm94IHtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgbWFyZ2luLXRvcDogLTdweDtcbiAgICBtYXJnaW4tbGVmdDogcmV2ZXJ0O1xufSJdfQ== */");

/***/ }),

/***/ "ek0A":
/*!****************************************************************!*\
  !*** ./src/app/views/configuration/Configuration.component.ts ***!
  \****************************************************************/
/*! exports provided: confirmPasswordValidator, ConfigurationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirmPasswordValidator", function() { return confirmPasswordValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationComponent", function() { return ConfigurationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_configuration_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./configuration.component.html */ "N30Y");
/* harmony import */ var _configuration_component_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./configuration.component.css */ "ZWvG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./validation-forms.service */ "udCq");
/* harmony import */ var _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Common/common-data.service */ "4qVP");
/* harmony import */ var _service_data_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../service/data.service */ "AwSQ");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ "iInd");









/** passwords must match - custom validator */
const confirmPasswordValidator = (control) => {
    const password = control.get('password');
    const confirm = control.get('confirmPassword');
    return password && confirm && password.value === confirm.value
        ? null
        : { passwordMismatch: true };
};
let ConfigurationComponent = class ConfigurationComponent {
    constructor(fb, vf, service, commonData, router) {
        this.fb = fb;
        this.vf = vf;
        this.service = service;
        this.commonData = commonData;
        this.router = router;
        this.businessform = new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormGroup"]({
            fullname: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            username: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            confirmPassword: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            acceptTerms: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](false),
        });
        this.customer = {};
        this.submitted = false;
        this.ica = {};
        this.fieldArray = [];
        this.newAttribute = {};
        this.icaArray = [];
        this.newicaAttribute = {};
        this.myInstance = [];
        this._lorem = [];
        this._tabs = [
            { header: 'Technical Configuration', panel: this.lorem[0], icon: 'cil-user' },
            { header: 'Business Configuration', panel: this.lorem[1], icon: 'cil-home' },
            { header: 'General Configuration', panel: this.lorem[2], icon: 'cil-mobile' },
        ];
        //FormArray
        this.form = this.fb.group({
            lessons: this.fb.array([])
        });
        this.formErrors = this.vf.errorMessages;
        this.createForm();
        this.addLesson();
        this.setTab = 0;
    }
    get setTab() {
        return this._setTab;
    }
    set setTab(value) {
        this._setTab = value || 0;
    }
    get lorem() {
        return [...this._lorem];
    }
    get tabs() {
        return this._tabs;
    }
    get tabs2() {
        return this._tabs.filter((tab) => !tab.disabled);
    }
    //FormArray
    get lessons() {
        return this.form.controls["lessons"];
    }
    addLesson() {
        this.lessonForm = this.fb.group({
            asn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            iid: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            itp: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
            spn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
        });
        this.lessons.push(this.lessonForm);
    }
    deleteLesson(lessonIndex) {
        this.lessons.removeAt(lessonIndex);
    }
    ngOnInit() {
    }
    get f() {
        return this.businessform.controls;
    }
    onSubmit() {
        this.submitted = true;
        if (this.form.invalid) {
            return;
        }
        console.log(JSON.stringify(this.form.value, null, 2));
    }
    onReset() {
        this.submitted = false;
        this.form.reset();
    }
    ngOnDestroy() {
    }
    ngOnChanges(changes) {
        console.log('ngOnChanges', changes, this.setTab);
    }
    onTabChange(e) {
        console.log('onTabChange', e);
    }
    createForm() {
        this.businessform = this.fb.group({
            fullname: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            username: [
                '',
                [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required,
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].minLength(6),
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].maxLength(20)
                ]
            ],
            email: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].email]],
            password: [
                '',
                [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required,
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].minLength(6),
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].maxLength(40)
                ]
            ],
            confirmPassword: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            acceptTerms: [false, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].requiredTrue]
        });
    }
    // get f() {
    //   return this.simpleForm.controls;
    //   return this.businessForm.controls;
    // }
    // onReset() {
    //   this.submitted = false;
    //   this.simpleForm.reset();
    //   this.businessForm.reset();
    // }
    onValidate() {
        this.submitted = true;
        return this.simpleForm.status === 'VALID';
        return this.businessForm.status === 'VALID';
    }
    onSaveBusiness(business) {
        console.log(business);
        debugger;
        this.service.saveBusiness(business).subscribe((resp) => {
            console.log("login Reponse:::" + JSON.stringify(resp));
            if (resp && resp.statusCode == 200) {
                console.log("Sucess");
                alert('SUCCESS!');
            }
        });
    }
    onSaveTech(business) {
        debugger;
        this.service.saveTech(business).subscribe((resp) => {
            console.log("login Reponse:::" + JSON.stringify(resp));
            if (resp && resp.statusCode == 200) {
                console.log("Sucess");
                alert('SUCCESS!');
            }
        });
    }
    // onSubmit() {
    //   debugger;
    //   if (this.onValidate()) {
    //     console.warn(this.simpleForm.value);
    //     alert('SUCCESS!');
    //   }
    // }
    onBusinessSubmit() {
        debugger;
        if (this.onValidate()) {
            console.warn(this.businessForm.value);
            alert('SUCCESS!');
        }
    }
    showing() {
        debugger;
        this.showModal = true;
    }
    hide() {
        debugger;
        this.showModal = false;
    }
    addFieldValue() {
        debugger;
        this.fieldArray.push(this.newAttribute);
        console.log(this.fieldArray);
        this.newAttribute = {};
        console.log(this.fieldArray);
    }
    deleteFieldValue(index) {
        this.fieldArray.splice(index, 1);
    }
    icaFieldValue(icaArray) {
        debugger;
        this.myInstance.push(...icaArray);
        this.icaArray.push(this.newicaAttribute);
        this.newicaAttribute = {};
    }
};
ConfigurationComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__["ValidationFormsService"] },
    { type: _service_data_service__WEBPACK_IMPORTED_MODULE_7__["DataService"] },
    { type: _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__["CommonDataService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"] }
];
ConfigurationComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-tabs',
        template: _raw_loader_configuration_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_configuration_component_css__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _validation_forms_service__WEBPACK_IMPORTED_MODULE_5__["ValidationFormsService"], _service_data_service__WEBPACK_IMPORTED_MODULE_7__["DataService"], _Common_common_data_service__WEBPACK_IMPORTED_MODULE_6__["CommonDataService"], _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]])
], ConfigurationComponent);



/***/ }),

/***/ "l/9y":
/*!*************************************************************!*\
  !*** ./src/app/views/configuration/configuration.module.ts ***!
  \*************************************************************/
/*! exports provided: ConfigurationModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationModule", function() { return ConfigurationModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _coreui_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @coreui/angular */ "Iluq");
/* harmony import */ var _coreui_icons_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @coreui/icons-angular */ "rVqu");
/* harmony import */ var _Configuration_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Configuration-routing.module */ "FQ0u");
/* harmony import */ var _Configuration_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Configuration.component */ "ek0A");
/* harmony import */ var ngx_bootstrap_pagination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ngx-bootstrap/pagination */ "6No5");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _forms_validation_forms_validation_forms_routing_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../forms/validation-forms/validation-forms-routing.module */ "jloh");










let ConfigurationModule = class ConfigurationModule {
};
ConfigurationModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
            _Configuration_routing_module__WEBPACK_IMPORTED_MODULE_5__["ConfigurationRoutingModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["CardModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["GridModule"],
            _coreui_icons_angular__WEBPACK_IMPORTED_MODULE_4__["IconModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["SwitchModule"],
            ngx_bootstrap_pagination__WEBPACK_IMPORTED_MODULE_7__["PaginationModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["TabsetModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["BadgeModule"],
            _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"],
            _forms_validation_forms_validation_forms_routing_module__WEBPACK_IMPORTED_MODULE_9__["ValidationFormsRoutingModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["GridModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["CardModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["ButtonModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["BadgeModule"],
            _coreui_angular__WEBPACK_IMPORTED_MODULE_3__["FormModule"],
        ],
        declarations: [_Configuration_component__WEBPACK_IMPORTED_MODULE_6__["ConfigurationComponent"]],
    })
], ConfigurationModule);



/***/ }),

/***/ "udCq":
/*!*****************************************************************!*\
  !*** ./src/app/views/configuration/validation-forms.service.ts ***!
  \*****************************************************************/
/*! exports provided: ValidationFormsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationFormsService", function() { return ValidationFormsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");


let ValidationFormsService = class ValidationFormsService {
    constructor() {
        this.formRules = {
            nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',
            usernameMin: 5,
            passwordMin: 6,
            passwordPattern: '(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'
        };
        this.formErrors = {
            firstName: '',
            lastName: '',
            username: '',
            email: '',
            password: '',
            confirmPassword: '',
            accept: false,
        };
        this.errorMessages = {
            firstName: {
                required: 'First name is required',
            },
            lastName: {
                required: 'Last name is required',
            },
            username: {
                required: 'Username is required',
                minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,
                pattern: 'Must contain letters and/or numbers, no trailing spaces'
            },
            email: {
                required: 'required',
                email: 'Invalid email address',
            },
            password: {
                required: 'Password is required',
                pattern: 'Password must contain: numbers, uppercase and lowercase letters',
                minLength: `Password must be at least ${this.formRules.passwordMin} characters`
            },
            confirmPassword: {
                required: 'Password confirmation is required',
                passwordMismatch: 'Passwords must match'
            },
            accept: {
                requiredTrue: 'You have to accept our Terms and Conditions'
            },
        };
    }
};
ValidationFormsService.ctorParameters = () => [];
ValidationFormsService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [])
], ValidationFormsService);



/***/ })

}]);
//# sourceMappingURL=views-configuration-configuration-module-es2015.js.map