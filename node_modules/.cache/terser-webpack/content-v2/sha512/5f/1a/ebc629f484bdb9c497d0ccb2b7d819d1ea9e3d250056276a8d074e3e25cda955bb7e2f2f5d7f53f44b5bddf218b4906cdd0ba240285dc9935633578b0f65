{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{A1uq:function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,\"MapsModule\",function(){return maps_module_MapsModule});var common=__webpack_require__(\"SVse\"),core=__webpack_require__(\"8Y7J\"),BehaviorSubject=__webpack_require__(\"2Vo4\"),Observable=__webpack_require__(\"HDdC\"),Subject=__webpack_require__(\"XNiG\"),combineLatest=__webpack_require__(\"itXk\"),switchMap=__webpack_require__(\"eIep\"),take=__webpack_require__(\"IzEk\"),map=__webpack_require__(\"lJxs\"),takeUntil=__webpack_require__(\"1G5W\");const _c0=[\"*\"];class google_maps_MapEventManager{constructor(_ngZone){this._ngZone=_ngZone,this._pending=[],this._listeners=[],this._targetStream=new BehaviorSubject.a(void 0)}_clearListeners(){for(const listener of this._listeners)listener.remove();this._listeners=[]}getLazyEmitter(name){return this._targetStream.pipe(Object(switchMap.a)(target=>{const observable=new Observable.a(observer=>{if(!target)return void this._pending.push({observable:observable,observer:observer});const listener=target.addListener(name,event=>{this._ngZone.run(()=>observer.next(event))});return this._listeners.push(listener),()=>listener.remove()});return observable}))}setTarget(target){const currentTarget=this._targetStream.value;target!==currentTarget&&(currentTarget&&(this._clearListeners(),this._pending=[]),this._targetStream.next(target),this._pending.forEach(subscriber=>subscriber.observable.subscribe(subscriber.observer)),this._pending=[])}destroy(){this._clearListeners(),this._pending=[],this._targetStream.complete()}}const DEFAULT_OPTIONS={center:{lat:37.421995,lng:-122.084092},zoom:17,mapTypeId:\"roadmap\"};let google_maps_GoogleMap=(()=>{class GoogleMap{constructor(_elementRef,_ngZone,platformId){this._elementRef=_elementRef,this._ngZone=_ngZone,this._eventManager=new google_maps_MapEventManager(this._ngZone),this.height=\"500px\",this.width=\"500px\",this._options=DEFAULT_OPTIONS,this.boundsChanged=this._eventManager.getLazyEmitter(\"bounds_changed\"),this.centerChanged=this._eventManager.getLazyEmitter(\"center_changed\"),this.mapClick=this._eventManager.getLazyEmitter(\"click\"),this.mapDblclick=this._eventManager.getLazyEmitter(\"dblclick\"),this.mapDrag=this._eventManager.getLazyEmitter(\"drag\"),this.mapDragend=this._eventManager.getLazyEmitter(\"dragend\"),this.mapDragstart=this._eventManager.getLazyEmitter(\"dragstart\"),this.headingChanged=this._eventManager.getLazyEmitter(\"heading_changed\"),this.idle=this._eventManager.getLazyEmitter(\"idle\"),this.maptypeidChanged=this._eventManager.getLazyEmitter(\"maptypeid_changed\"),this.mapMousemove=this._eventManager.getLazyEmitter(\"mousemove\"),this.mapMouseout=this._eventManager.getLazyEmitter(\"mouseout\"),this.mapMouseover=this._eventManager.getLazyEmitter(\"mouseover\"),this.projectionChanged=this._eventManager.getLazyEmitter(\"projection_changed\"),this.mapRightclick=this._eventManager.getLazyEmitter(\"rightclick\"),this.tilesloaded=this._eventManager.getLazyEmitter(\"tilesloaded\"),this.tiltChanged=this._eventManager.getLazyEmitter(\"tilt_changed\"),this.zoomChanged=this._eventManager.getLazyEmitter(\"zoom_changed\"),this._isBrowser=Object(common.C)(platformId),this._isBrowser&&window}set center(center){this._center=center}set zoom(zoom){this._zoom=zoom}set options(options){this._options=options||DEFAULT_OPTIONS}ngOnChanges(changes){(changes.height||changes.width)&&this._setSize();const googleMap=this.googleMap;googleMap&&(changes.options&&googleMap.setOptions(this._combineOptions()),changes.center&&this._center&&googleMap.setCenter(this._center),changes.zoom&&null!=this._zoom&&googleMap.setZoom(this._zoom),changes.mapTypeId&&this.mapTypeId&&googleMap.setMapTypeId(this.mapTypeId))}ngOnInit(){this._isBrowser&&(this._mapEl=this._elementRef.nativeElement.querySelector(\".map-container\"),this._setSize(),this._ngZone.runOutsideAngular(()=>{this.googleMap=new google.maps.Map(this._mapEl,this._combineOptions())}),this._eventManager.setTarget(this.googleMap))}ngOnDestroy(){this._eventManager.destroy()}fitBounds(bounds,padding){this._assertInitialized(),this.googleMap.fitBounds(bounds,padding)}panBy(x,y){this._assertInitialized(),this.googleMap.panBy(x,y)}panTo(latLng){this._assertInitialized(),this.googleMap.panTo(latLng)}panToBounds(latLngBounds,padding){this._assertInitialized(),this.googleMap.panToBounds(latLngBounds,padding)}getBounds(){return this._assertInitialized(),this.googleMap.getBounds()||null}getCenter(){return this._assertInitialized(),this.googleMap.getCenter()}getClickableIcons(){return this._assertInitialized(),this.googleMap.getClickableIcons()}getHeading(){return this._assertInitialized(),this.googleMap.getHeading()}getMapTypeId(){return this._assertInitialized(),this.googleMap.getMapTypeId()}getProjection(){return this._assertInitialized(),this.googleMap.getProjection()}getStreetView(){return this._assertInitialized(),this.googleMap.getStreetView()}getTilt(){return this._assertInitialized(),this.googleMap.getTilt()}getZoom(){return this._assertInitialized(),this.googleMap.getZoom()}get controls(){return this._assertInitialized(),this.googleMap.controls}get data(){return this._assertInitialized(),this.googleMap.data}get mapTypes(){return this._assertInitialized(),this.googleMap.mapTypes}get overlayMapTypes(){return this._assertInitialized(),this.googleMap.overlayMapTypes}_setSize(){if(this._mapEl){const styles=this._mapEl.style;styles.height=null===this.height?\"\":coerceCssPixelValue(this.height)||\"500px\",styles.width=null===this.width?\"\":coerceCssPixelValue(this.width)||\"500px\"}}_combineOptions(){var _a,_b;const options=this._options||{};return Object.assign(Object.assign({},options),{center:this._center||options.center||DEFAULT_OPTIONS.center,zoom:null!==(_b=null!==(_a=this._zoom)&&void 0!==_a?_a:options.zoom)&&void 0!==_b?_b:DEFAULT_OPTIONS.zoom,mapTypeId:this.mapTypeId||options.mapTypeId||DEFAULT_OPTIONS.mapTypeId})}_assertInitialized(){}}return GoogleMap.ɵfac=function(t){return new(t||GoogleMap)(core.Ub(core.n),core.Ub(core.E),core.Ub(core.H))},GoogleMap.ɵcmp=core.Ob({type:GoogleMap,selectors:[[\"google-map\"]],inputs:{height:\"height\",width:\"width\",center:\"center\",zoom:\"zoom\",options:\"options\",mapTypeId:\"mapTypeId\"},outputs:{boundsChanged:\"boundsChanged\",centerChanged:\"centerChanged\",mapClick:\"mapClick\",mapDblclick:\"mapDblclick\",mapDrag:\"mapDrag\",mapDragend:\"mapDragend\",mapDragstart:\"mapDragstart\",headingChanged:\"headingChanged\",idle:\"idle\",maptypeidChanged:\"maptypeidChanged\",mapMousemove:\"mapMousemove\",mapMouseout:\"mapMouseout\",mapMouseover:\"mapMouseover\",projectionChanged:\"projectionChanged\",mapRightclick:\"mapRightclick\",tilesloaded:\"tilesloaded\",tiltChanged:\"tiltChanged\",zoomChanged:\"zoomChanged\"},exportAs:[\"googleMap\"],features:[core.Gb],ngContentSelectors:_c0,decls:2,vars:0,consts:[[1,\"map-container\"]],template:function(rf,ctx){1&rf&&(core.sc(),core.Vb(0,\"div\",0),core.rc(1))},encapsulation:2,changeDetection:0}),GoogleMap})();const cssUnitsPattern=/([A-Za-z%]+)$/;function coerceCssPixelValue(value){return null==value?\"\":cssUnitsPattern.test(value)?value:`${value}px`}let google_maps_MapInfoWindow=(()=>{class MapInfoWindow{constructor(_googleMap,_elementRef,_ngZone){this._googleMap=_googleMap,this._elementRef=_elementRef,this._ngZone=_ngZone,this._eventManager=new google_maps_MapEventManager(this._ngZone),this._options=new BehaviorSubject.a({}),this._position=new BehaviorSubject.a(void 0),this._destroy=new Subject.a,this.closeclick=this._eventManager.getLazyEmitter(\"closeclick\"),this.contentChanged=this._eventManager.getLazyEmitter(\"content_changed\"),this.domready=this._eventManager.getLazyEmitter(\"domready\"),this.positionChanged=this._eventManager.getLazyEmitter(\"position_changed\"),this.zindexChanged=this._eventManager.getLazyEmitter(\"zindex_changed\")}set options(options){this._options.next(options||{})}set position(position){this._position.next(position)}ngOnInit(){this._googleMap._isBrowser&&(this._combineOptions().pipe(Object(take.a)(1)).subscribe(options=>{this._ngZone.runOutsideAngular(()=>{this.infoWindow=new google.maps.InfoWindow(options)}),this._eventManager.setTarget(this.infoWindow)}),this._watchForOptionsChanges(),this._watchForPositionChanges())}ngOnDestroy(){this._eventManager.destroy(),this._destroy.next(),this._destroy.complete(),this.infoWindow&&this.close()}close(){this._assertInitialized(),this.infoWindow.close()}getContent(){return this._assertInitialized(),this.infoWindow.getContent()}getPosition(){return this._assertInitialized(),this.infoWindow.getPosition()}getZIndex(){return this._assertInitialized(),this.infoWindow.getZIndex()}open(anchor){this._assertInitialized();const anchorObject=anchor?anchor.getAnchor():void 0;this.infoWindow.get(\"anchor\")===anchorObject&&anchorObject||(this._elementRef.nativeElement.style.display=\"\",this.infoWindow.open(this._googleMap.googleMap,anchorObject))}_combineOptions(){return Object(combineLatest.a)([this._options,this._position]).pipe(Object(map.a)(([options,position])=>Object.assign(Object.assign({},options),{position:position||options.position,content:this._elementRef.nativeElement})))}_watchForOptionsChanges(){this._options.pipe(Object(takeUntil.a)(this._destroy)).subscribe(options=>{this._assertInitialized(),this.infoWindow.setOptions(options)})}_watchForPositionChanges(){this._position.pipe(Object(takeUntil.a)(this._destroy)).subscribe(position=>{position&&(this._assertInitialized(),this.infoWindow.setPosition(position))})}_assertInitialized(){}}return MapInfoWindow.ɵfac=function(t){return new(t||MapInfoWindow)(core.Ub(google_maps_GoogleMap),core.Ub(core.n),core.Ub(core.E))},MapInfoWindow.ɵdir=core.Pb({type:MapInfoWindow,selectors:[[\"map-info-window\"]],hostAttrs:[2,\"display\",\"none\"],inputs:{options:\"options\",position:\"position\"},outputs:{closeclick:\"closeclick\",contentChanged:\"contentChanged\",domready:\"domready\",positionChanged:\"positionChanged\",zindexChanged:\"zindexChanged\"},exportAs:[\"mapInfoWindow\"]}),MapInfoWindow})();const DEFAULT_MARKER_OPTIONS={position:{lat:37.421995,lng:-122.084092}};let google_maps_MapMarker=(()=>{class MapMarker{constructor(_googleMap,_ngZone){this._googleMap=_googleMap,this._ngZone=_ngZone,this._eventManager=new google_maps_MapEventManager(this._ngZone),this.animationChanged=this._eventManager.getLazyEmitter(\"animation_changed\"),this.mapClick=this._eventManager.getLazyEmitter(\"click\"),this.clickableChanged=this._eventManager.getLazyEmitter(\"clickable_changed\"),this.cursorChanged=this._eventManager.getLazyEmitter(\"cursor_changed\"),this.mapDblclick=this._eventManager.getLazyEmitter(\"dblclick\"),this.mapDrag=this._eventManager.getLazyEmitter(\"drag\"),this.mapDragend=this._eventManager.getLazyEmitter(\"dragend\"),this.draggableChanged=this._eventManager.getLazyEmitter(\"draggable_changed\"),this.mapDragstart=this._eventManager.getLazyEmitter(\"dragstart\"),this.flatChanged=this._eventManager.getLazyEmitter(\"flat_changed\"),this.iconChanged=this._eventManager.getLazyEmitter(\"icon_changed\"),this.mapMousedown=this._eventManager.getLazyEmitter(\"mousedown\"),this.mapMouseout=this._eventManager.getLazyEmitter(\"mouseout\"),this.mapMouseover=this._eventManager.getLazyEmitter(\"mouseover\"),this.mapMouseup=this._eventManager.getLazyEmitter(\"mouseup\"),this.positionChanged=this._eventManager.getLazyEmitter(\"position_changed\"),this.mapRightclick=this._eventManager.getLazyEmitter(\"rightclick\"),this.shapeChanged=this._eventManager.getLazyEmitter(\"shape_changed\"),this.titleChanged=this._eventManager.getLazyEmitter(\"title_changed\"),this.visibleChanged=this._eventManager.getLazyEmitter(\"visible_changed\"),this.zindexChanged=this._eventManager.getLazyEmitter(\"zindex_changed\")}set title(title){this._title=title}set position(position){this._position=position}set label(label){this._label=label}set clickable(clickable){this._clickable=clickable}set options(options){this._options=options}ngOnInit(){this._googleMap._isBrowser&&(this._ngZone.runOutsideAngular(()=>{this.marker=new google.maps.Marker(this._combineOptions())}),this._assertInitialized(),this.marker.setMap(this._googleMap.googleMap),this._eventManager.setTarget(this.marker))}ngOnChanges(changes){const{marker:marker,_title:_title,_position:_position,_label:_label,_clickable:_clickable}=this;marker&&(changes.options&&marker.setOptions(this._combineOptions()),changes.title&&void 0!==_title&&marker.setTitle(_title),changes.position&&_position&&marker.setPosition(_position),changes.label&&void 0!==_label&&marker.setLabel(_label),changes.clickable&&void 0!==_clickable&&marker.setClickable(_clickable))}ngOnDestroy(){this._eventManager.destroy(),this.marker&&this.marker.setMap(null)}getAnimation(){return this._assertInitialized(),this.marker.getAnimation()||null}getClickable(){return this._assertInitialized(),this.marker.getClickable()}getCursor(){return this._assertInitialized(),this.marker.getCursor()||null}getDraggable(){return this._assertInitialized(),!!this.marker.getDraggable()}getIcon(){return this._assertInitialized(),this.marker.getIcon()||null}getLabel(){return this._assertInitialized(),this.marker.getLabel()||null}getOpacity(){return this._assertInitialized(),this.marker.getOpacity()||null}getPosition(){return this._assertInitialized(),this.marker.getPosition()||null}getShape(){return this._assertInitialized(),this.marker.getShape()||null}getTitle(){return this._assertInitialized(),this.marker.getTitle()||null}getVisible(){return this._assertInitialized(),this.marker.getVisible()}getZIndex(){return this._assertInitialized(),this.marker.getZIndex()||null}getAnchor(){return this._assertInitialized(),this.marker}_combineOptions(){const options=this._options||DEFAULT_MARKER_OPTIONS;return Object.assign(Object.assign({},options),{title:this._title||options.title,position:this._position||options.position,label:this._label||options.label,clickable:void 0!==this._clickable?this._clickable:options.clickable,map:this._googleMap.googleMap})}_assertInitialized(){}}return MapMarker.ɵfac=function(t){return new(t||MapMarker)(core.Ub(google_maps_GoogleMap),core.Ub(core.E))},MapMarker.ɵdir=core.Pb({type:MapMarker,selectors:[[\"map-marker\"]],inputs:{title:\"title\",position:\"position\",label:\"label\",clickable:\"clickable\",options:\"options\"},outputs:{animationChanged:\"animationChanged\",mapClick:\"mapClick\",clickableChanged:\"clickableChanged\",cursorChanged:\"cursorChanged\",mapDblclick:\"mapDblclick\",mapDrag:\"mapDrag\",mapDragend:\"mapDragend\",draggableChanged:\"draggableChanged\",mapDragstart:\"mapDragstart\",flatChanged:\"flatChanged\",iconChanged:\"iconChanged\",mapMousedown:\"mapMousedown\",mapMouseout:\"mapMouseout\",mapMouseover:\"mapMouseover\",mapMouseup:\"mapMouseup\",positionChanged:\"positionChanged\",mapRightclick:\"mapRightclick\",shapeChanged:\"shapeChanged\",titleChanged:\"titleChanged\",visibleChanged:\"visibleChanged\",zindexChanged:\"zindexChanged\"},exportAs:[\"mapMarker\"],features:[core.Gb]}),MapMarker})(),google_maps_GoogleMapsModule=(()=>{class GoogleMapsModule{}return GoogleMapsModule.ɵfac=function(t){return new(t||GoogleMapsModule)},GoogleMapsModule.ɵmod=core.Sb({type:GoogleMapsModule}),GoogleMapsModule.ɵinj=core.Rb({}),GoogleMapsModule})();var http=__webpack_require__(\"IheW\"),catchError=__webpack_require__(\"JIr8\"),of=__webpack_require__(\"LRne\");let google_maps_loader_service_GoogleMapsLoaderService=(()=>{class GoogleMapsLoaderService{constructor(httpClient){this.apiLoaded=httpClient.jsonp(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyASyYRBZmULmrmw_P9kgr7_266OhFNinPA\",\"callback\").pipe(Object(map.a)(()=>!0),Object(catchError.a)(()=>Object(of.a)(!1)))}}return GoogleMapsLoaderService.ɵfac=function(t){return new(t||GoogleMapsLoaderService)(core.hc(http.a))},GoogleMapsLoaderService.ɵprov=core.Qb({token:GoogleMapsLoaderService,factory:GoogleMapsLoaderService.ɵfac,providedIn:\"root\"}),GoogleMapsLoaderService})();var data_service=__webpack_require__(\"AwSQ\"),common_data_service=__webpack_require__(\"4qVP\"),coreui_angular=__webpack_require__(\"Iluq\");const google_maps_component_c0=[\"myGoogleMap\"];function GoogleMapsComponent_div_5_map_marker_3_Template(rf,ctx){if(1&rf){const _r7=core.bc();core.ac(0,\"map-marker\",6,7),core.kc(\"mapClick\",function(){core.Ec(_r7);const m_r3=ctx.$implicit,_r5=core.Cc(1);return core.nc(2).openInfoWindow(_r5,m_r3)}),core.Zb()}if(2&rf){const m_r3=ctx.$implicit,ctx_r2=core.nc(2);core.tc(\"label\",m_r3.label)(\"title\",m_r3.title)(\"position\",m_r3.position)(\"options\",ctx_r2.markerOptions)}}function GoogleMapsComponent_div_5_Template(rf,ctx){if(1&rf&&(core.ac(0,\"div\"),core.ac(1,\"google-map\",2,3),core.Mc(3,GoogleMapsComponent_div_5_map_marker_3_Template,2,4,\"map-marker\",4),core.ac(4,\"map-info-window\"),core.ac(5,\"a\",5),core.ac(6,\"strong\"),core.Oc(7),core.Zb(),core.Zb(),core.Zb(),core.ac(8,\"map-info-window\"),core.Oc(9),core.Zb(),core.Zb(),core.Zb()),2&rf){const ctx_r0=core.nc();core.Ib(1),core.tc(\"zoom\",ctx_r0.zoom)(\"center\",ctx_r0.center)(\"options\",ctx_r0.options),core.Ib(2),core.tc(\"ngForOf\",ctx_r0.markers),core.Ib(2),core.uc(\"href\",null==ctx_r0.activeInfoWindow?null:ctx_r0.activeInfoWindow.www,core.Gc),core.Ib(2),core.Pc(null==ctx_r0.activeInfoWindow?null:ctx_r0.activeInfoWindow.title),core.Ib(2),core.Pc(ctx_r0.infoContent)}}let google_maps_component_GoogleMapsComponent=(()=>{class GoogleMapsComponent{constructor(gmLoader,commonData,service,document){this.gmLoader=gmLoader,this.commonData=commonData,this.service=service,this.document=document,this.maxZoom=15,this.minZoom=8,this.title=\"\",this.machines=[],this.options={center:{lat:17.1434937,lng:79.5968943},zoom:11},this.markerOptions={draggable:!0},this.markerPositions=[],this.markers=[{position:{lat:17.1434937,lng:79.5968943},label:\"SVEC11\",title:\"ComputerScience,Suryapet\"},{position:{lat:12.1454937,lng:79.5968943},label:\"SVEC12\",title:\"EEE,Suryapet\"},{position:{lat:11.1434937,lng:75.5968943},label:\"SVEC13\",title:\"Mech,Suryapet\"}]}get infoWindowContent(){return this.activeInfoWindow}set infoWindowContent(marker){this.title=marker.title,this.activeInfoWindow=marker}ngOnInit(){this.getLocations()}ngOnDestroy(){this.removeGoogleMapScript()}getLocations(){this.service.getMachines(this.commonData.merchantId).subscribe(resp=>{if(console.log(\"getMachines Reponse:::\"+JSON.stringify(resp)),resp&&200==resp.statusCode){this.machines=resp.rowMachines;for(let i=0;i<this.machines.length;i++)for(var j=0;j<=this.machines[0].machines.length;j++)this.latitudes=this.machines[i].machines[j].latitude,this.logntitude=this.machines[i].machines[j].logntitude,this.loginId=this.machines[i].machines[j].loginId,this.active=this.machines[i].machines[j].active,this.addresss=this.machines[i].machines[j].address;this.setPositions(this.machines)}})}setPositions(machines){this.markers.forEach(marker=>{const{lat:lat,lng:lng}=Object.assign({},marker.position);this.markerPositions.push({lat:lat,lng:lng})})}onMapClicked(event){console.table(event.coords),this.latitude=event.coords.lat,this.longitude=event.coords.lng}openInfoWindow(marker,item){this.infoWindowContent=item,this.infoWindow.open(marker)}zoomIn(){this.zoom<this.maxZoom&&this.zoom++,console.log(\"Get Zoom\",this.map.getZoom())}zoomOut(){this.zoom>this.minZoom&&this.zoom--}logCenter(){console.log(JSON.stringify(this.map.getCenter()))}removeGoogleMapScript(){const keywords=[\"maps.googleapis\"];window.google=void 0;const scripts=this.document.head.getElementsByTagName(\"script\");for(let i=scripts.length-1;i>=0;i--){const scriptSource=scripts[i].getAttribute(\"src\");null!=scriptSource&&keywords.filter(item=>scriptSource.includes(item)).length&&scripts[i].remove()}}}return GoogleMapsComponent.ɵfac=function(t){return new(t||GoogleMapsComponent)(core.Ub(google_maps_loader_service_GoogleMapsLoaderService),core.Ub(common_data_service.a),core.Ub(data_service.a),core.Ub(common.e))},GoogleMapsComponent.ɵcmp=core.Ob({type:GoogleMapsComponent,selectors:[[\"app-google-maps-integration\"]],viewQuery:function(rf,ctx){if(1&rf&&(core.Tc(google_maps_component_c0,1),core.Tc(google_maps_MapInfoWindow,1),core.Tc(google_maps_MapInfoWindow,1)),2&rf){let _t;core.Bc(_t=core.lc())&&(ctx.map=_t.first),core.Bc(_t=core.lc())&&(ctx.info=_t.first),core.Bc(_t=core.lc())&&(ctx.infoWindow=_t.first)}},features:[core.Hb([google_maps_loader_service_GoogleMapsLoaderService])],decls:8,vars:3,consts:[[1,\"fade-in\"],[4,\"ngIf\"],[\"height\",\"450px\",\"width\",\"100%\",3,\"zoom\",\"center\",\"options\"],[\"myGoogleMap\",\"\"],[3,\"label\",\"title\",\"position\",\"options\",\"mapClick\",4,\"ngFor\",\"ngForOf\"],[\"target\",\"_blank\",1,\"px-2\",3,\"href\"],[3,\"label\",\"title\",\"position\",\"options\",\"mapClick\"],[\"marker\",\"mapMarker\"]],template:function(rf,ctx){1&rf&&(core.ac(0,\"div\",0),core.ac(1,\"c-card\"),core.ac(2,\"c-card-header\"),core.Oc(3,\"Google Maps \"),core.Zb(),core.ac(4,\"c-card-body\"),core.Mc(5,GoogleMapsComponent_div_5_Template,10,7,\"div\",1),core.oc(6,\"async\"),core.Vb(7,\"div\"),core.Zb(),core.Zb(),core.Zb()),2&rf&&(core.Ib(5),core.tc(\"ngIf\",core.pc(6,1,ctx.gmLoader.apiLoaded)))},directives:[coreui_angular.qc,coreui_angular.uc,coreui_angular.rc,common.o,google_maps_GoogleMap,common.n,google_maps_MapInfoWindow,google_maps_MapMarker],pipes:[common.b],styles:[\"\"]}),GoogleMapsComponent})();var router=__webpack_require__(\"iInd\");const routes=[{path:\"\",component:google_maps_component_GoogleMapsComponent,data:{title:\"Google Maps\"}}];let google_maps_routing_module_GoogleMapsRoutingModule=(()=>{class GoogleMapsRoutingModule{}return GoogleMapsRoutingModule.ɵfac=function(t){return new(t||GoogleMapsRoutingModule)},GoogleMapsRoutingModule.ɵmod=core.Sb({type:GoogleMapsRoutingModule}),GoogleMapsRoutingModule.ɵinj=core.Rb({imports:[[router.g.forChild(routes)],router.g]}),GoogleMapsRoutingModule})();var coreui_icons_angular=__webpack_require__(\"rVqu\");let maps_module_MapsModule=(()=>{class MapsModule{}return MapsModule.ɵfac=function(t){return new(t||MapsModule)},MapsModule.ɵmod=core.Sb({type:MapsModule,bootstrap:[google_maps_component_GoogleMapsComponent]}),MapsModule.ɵinj=core.Rb({providers:[],imports:[[common.c,google_maps_GoogleMapsModule,http.c,http.b,google_maps_routing_module_GoogleMapsRoutingModule,coreui_angular.h,coreui_icons_angular.b,coreui_angular.c]]}),MapsModule})()}}]);","name":"37-es2015.797a86d2041d2ff85af2.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[37],{\n\n/***/ \"A1uq\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"MapsModule\", function() { return /* binding */ maps_module_MapsModule; });\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/fesm2015/common.js\nvar common = __webpack_require__(\"SVse\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/fesm2015/core.js + 2 modules\nvar core = __webpack_require__(\"8Y7J\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js\nvar BehaviorSubject = __webpack_require__(\"2Vo4\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Observable.js + 3 modules\nvar Observable = __webpack_require__(\"HDdC\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subject.js\nvar Subject = __webpack_require__(\"XNiG\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js + 3 modules\nvar combineLatest = __webpack_require__(\"itXk\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js\nvar switchMap = __webpack_require__(\"eIep\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/take.js\nvar take = __webpack_require__(\"IzEk\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/map.js\nvar map = __webpack_require__(\"lJxs\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js\nvar takeUntil = __webpack_require__(\"1G5W\");\n\n// CONCATENATED MODULE: ./node_modules/@angular/google-maps/fesm2015/google-maps.js\n\n\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\n\nconst _c0 = [\"*\"];\nclass google_maps_MapEventManager {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        /** Pending listeners that were added before the target was set. */\n        this._pending = [];\n        this._listeners = [];\n        this._targetStream = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n    }\n    /** Clears all currently-registered event listeners. */\n    _clearListeners() {\n        for (const listener of this._listeners) {\n            listener.remove();\n        }\n        this._listeners = [];\n    }\n    /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\n    getLazyEmitter(name) {\n        return this._targetStream.pipe(Object(switchMap[\"a\" /* switchMap */])(target => {\n            const observable = new Observable[\"a\" /* Observable */](observer => {\n                // If the target hasn't been initialized yet, cache the observer so it can be added later.\n                if (!target) {\n                    this._pending.push({ observable, observer });\n                    return undefined;\n                }\n                const listener = target.addListener(name, (event) => {\n                    this._ngZone.run(() => observer.next(event));\n                });\n                this._listeners.push(listener);\n                return () => listener.remove();\n            });\n            return observable;\n        }));\n    }\n    /** Sets the current target that the manager should bind events to. */\n    setTarget(target) {\n        const currentTarget = this._targetStream.value;\n        if (target === currentTarget) {\n            return;\n        }\n        // Clear the listeners from the pre-existing target.\n        if (currentTarget) {\n            this._clearListeners();\n            this._pending = [];\n        }\n        this._targetStream.next(target);\n        // Add the listeners that were bound before the map was initialized.\n        this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\n        this._pending = [];\n    }\n    /** Destroys the manager and clears the event listeners. */\n    destroy() {\n        this._clearListeners();\n        this._pending = [];\n        this._targetStream.complete();\n    }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** default options set to the Googleplex */\nconst DEFAULT_OPTIONS = {\n    center: { lat: 37.421995, lng: -122.084092 },\n    zoom: 17,\n    // Note: the type conversion here isn't necessary for our CI, but it resolves a g3 failure.\n    mapTypeId: 'roadmap'\n};\n/** Arbitrary default height for the map element */\nconst DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\nconst DEFAULT_WIDTH = '500px';\nlet google_maps_GoogleMap = /*@__PURE__*/ (() => {\n    class GoogleMap {\n        constructor(_elementRef, _ngZone, platformId) {\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\n            this.height = DEFAULT_HEIGHT;\n            /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\n            this.width = DEFAULT_WIDTH;\n            this._options = DEFAULT_OPTIONS;\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n             */\n            this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n             */\n            this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n             */\n            this.mapClick = this._eventManager\n                .getLazyEmitter('click');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n             */\n            this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n             */\n            this.mapDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n             */\n            this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n             */\n            this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n             */\n            this.headingChanged = this._eventManager.getLazyEmitter('heading_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n             */\n            this.idle = this._eventManager.getLazyEmitter('idle');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n             */\n            this.maptypeidChanged = this._eventManager.getLazyEmitter('maptypeid_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n             */\n            this.mapMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n             */\n            this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n             */\n            this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n             */\n            this.projectionChanged = this._eventManager.getLazyEmitter('projection_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n             */\n            this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n             */\n            this.tilesloaded = this._eventManager.getLazyEmitter('tilesloaded');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n             */\n            this.tiltChanged = this._eventManager.getLazyEmitter('tilt_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n             */\n            this.zoomChanged = this._eventManager.getLazyEmitter('zoom_changed');\n            this._isBrowser = Object(common[\"C\" /* isPlatformBrowser */])(platformId);\n            if (this._isBrowser) {\n                const googleMapsWindow = window;\n                if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw Error('Namespace google not found, cannot construct embedded google ' +\n                        'map. Please install the Google Maps JavaScript API: ' +\n                        'https://developers.google.com/maps/documentation/javascript/' +\n                        'tutorial#Loading_the_Maps_API');\n                }\n            }\n        }\n        set center(center) {\n            this._center = center;\n        }\n        set zoom(zoom) {\n            this._zoom = zoom;\n        }\n        set options(options) {\n            this._options = options || DEFAULT_OPTIONS;\n        }\n        ngOnChanges(changes) {\n            if (changes['height'] || changes['width']) {\n                this._setSize();\n            }\n            const googleMap = this.googleMap;\n            if (googleMap) {\n                if (changes['options']) {\n                    googleMap.setOptions(this._combineOptions());\n                }\n                if (changes['center'] && this._center) {\n                    googleMap.setCenter(this._center);\n                }\n                // Note that the zoom can be zero.\n                if (changes['zoom'] && this._zoom != null) {\n                    googleMap.setZoom(this._zoom);\n                }\n                if (changes['mapTypeId'] && this.mapTypeId) {\n                    googleMap.setMapTypeId(this.mapTypeId);\n                }\n            }\n        }\n        ngOnInit() {\n            // It should be a noop during server-side rendering.\n            if (this._isBrowser) {\n                this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');\n                this._setSize();\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => {\n                    this.googleMap = new google.maps.Map(this._mapEl, this._combineOptions());\n                });\n                this._eventManager.setTarget(this.googleMap);\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n         */\n        fitBounds(bounds, padding) {\n            this._assertInitialized();\n            this.googleMap.fitBounds(bounds, padding);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n         */\n        panBy(x, y) {\n            this._assertInitialized();\n            this.googleMap.panBy(x, y);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n         */\n        panTo(latLng) {\n            this._assertInitialized();\n            this.googleMap.panTo(latLng);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n         */\n        panToBounds(latLngBounds, padding) {\n            this._assertInitialized();\n            this.googleMap.panToBounds(latLngBounds, padding);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.googleMap.getBounds() || null;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n         */\n        getCenter() {\n            this._assertInitialized();\n            return this.googleMap.getCenter();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n         */\n        getClickableIcons() {\n            this._assertInitialized();\n            return this.googleMap.getClickableIcons();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n         */\n        getHeading() {\n            this._assertInitialized();\n            return this.googleMap.getHeading();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n         */\n        getMapTypeId() {\n            this._assertInitialized();\n            return this.googleMap.getMapTypeId();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n         */\n        getProjection() {\n            this._assertInitialized();\n            return this.googleMap.getProjection();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n         */\n        getStreetView() {\n            this._assertInitialized();\n            return this.googleMap.getStreetView();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n         */\n        getTilt() {\n            this._assertInitialized();\n            return this.googleMap.getTilt();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n         */\n        getZoom() {\n            this._assertInitialized();\n            return this.googleMap.getZoom();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n         */\n        get controls() {\n            this._assertInitialized();\n            return this.googleMap.controls;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n         */\n        get data() {\n            this._assertInitialized();\n            return this.googleMap.data;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n         */\n        get mapTypes() {\n            this._assertInitialized();\n            return this.googleMap.mapTypes;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n         */\n        get overlayMapTypes() {\n            this._assertInitialized();\n            return this.googleMap.overlayMapTypes;\n        }\n        _setSize() {\n            if (this._mapEl) {\n                const styles = this._mapEl.style;\n                styles.height =\n                    this.height === null ? '' : (coerceCssPixelValue(this.height) || DEFAULT_HEIGHT);\n                styles.width = this.width === null ? '' : (coerceCssPixelValue(this.width) || DEFAULT_WIDTH);\n            }\n        }\n        /** Combines the center and zoom and the other map options into a single object */\n        _combineOptions() {\n            var _a, _b;\n            const options = this._options || {};\n            return Object.assign(Object.assign({}, options), {\n                // It's important that we set **some** kind of `center` and `zoom`, otherwise\n                // Google Maps will render a blank rectangle which looks broken.\n                center: this._center || options.center || DEFAULT_OPTIONS.center, zoom: (_b = (_a = this._zoom) !== null && _a !== void 0 ? _a : options.zoom) !== null && _b !== void 0 ? _b : DEFAULT_OPTIONS.zoom,\n                // Passing in an undefined `mapTypeId` seems to break tile loading\n                // so make sure that we have some kind of default (see #22082).\n                mapTypeId: this.mapTypeId || options.mapTypeId || DEFAULT_OPTIONS.mapTypeId\n            });\n        }\n        /** Asserts that the map has been initialized. */\n        _assertInitialized() {\n            if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n        }\n    }\n    GoogleMap.ɵfac = function GoogleMap_Factory(t) { return new (t || GoogleMap)(core[\"Ub\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */]), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */]), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"H\" /* PLATFORM_ID */])); };\n    GoogleMap.ɵcmp = core[\"Ob\" /* ɵɵdefineComponent */]({ type: GoogleMap, selectors: [[\"google-map\"]], inputs: { height: \"height\", width: \"width\", center: \"center\", zoom: \"zoom\", options: \"options\", mapTypeId: \"mapTypeId\" }, outputs: { boundsChanged: \"boundsChanged\", centerChanged: \"centerChanged\", mapClick: \"mapClick\", mapDblclick: \"mapDblclick\", mapDrag: \"mapDrag\", mapDragend: \"mapDragend\", mapDragstart: \"mapDragstart\", headingChanged: \"headingChanged\", idle: \"idle\", maptypeidChanged: \"maptypeidChanged\", mapMousemove: \"mapMousemove\", mapMouseout: \"mapMouseout\", mapMouseover: \"mapMouseover\", projectionChanged: \"projectionChanged\", mapRightclick: \"mapRightclick\", tilesloaded: \"tilesloaded\", tiltChanged: \"tiltChanged\", zoomChanged: \"zoomChanged\" }, exportAs: [\"googleMap\"], features: [core[\"Gb\" /* ɵɵNgOnChangesFeature */]], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"map-container\"]], template: function GoogleMap_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"sc\" /* ɵɵprojectionDef */]();\n                core[\"Vb\" /* ɵɵelement */](0, \"div\", 0);\n                core[\"rc\" /* ɵɵprojection */](1);\n            }\n        }, encapsulation: 2, changeDetection: 0 });\n    return GoogleMap;\n})();\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return cssUnitsPattern.test(value) ? value : `${value}px`;\n}\nlet google_maps_MapBaseLayer = /*@__PURE__*/ (() => {\n    class MapBaseLayer {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._ngZone.runOutsideAngular(() => {\n                    this._initializeObject();\n                });\n                this._assertInitialized();\n                this._setMap();\n            }\n        }\n        ngOnDestroy() {\n            this._unsetMap();\n        }\n        _assertInitialized() {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n        }\n        _initializeObject() { }\n        _setMap() { }\n        _unsetMap() { }\n    }\n    MapBaseLayer.ɵfac = function MapBaseLayer_Factory(t) { return new (t || MapBaseLayer)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapBaseLayer.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapBaseLayer, selectors: [[\"map-base-layer\"]], exportAs: [\"mapBaseLayer\"] });\n    return MapBaseLayer;\n})();\nlet google_maps_MapBicyclingLayer = /*@__PURE__*/ (() => {\n    class MapBicyclingLayer extends google_maps_MapBaseLayer {\n        _initializeObject() {\n            this.bicyclingLayer = new google.maps.BicyclingLayer();\n        }\n        _setMap() {\n            this._assertLayerInitialized();\n            this.bicyclingLayer.setMap(this._map.googleMap);\n        }\n        _unsetMap() {\n            if (this.bicyclingLayer) {\n                this.bicyclingLayer.setMap(null);\n            }\n        }\n        _assertLayerInitialized() {\n            if (!this.bicyclingLayer) {\n                throw Error('Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' +\n                    'Please wait for the Transit Layer to load before trying to interact with it.');\n            }\n        }\n    }\n    MapBicyclingLayer.ɵfac = function MapBicyclingLayer_Factory(t) { return ɵMapBicyclingLayer_BaseFactory(t || MapBicyclingLayer); };\n    MapBicyclingLayer.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapBicyclingLayer, selectors: [[\"map-bicycling-layer\"]], exportAs: [\"mapBicyclingLayer\"], features: [core[\"Fb\" /* ɵɵInheritDefinitionFeature */]] });\n    return MapBicyclingLayer;\n})();\nconst ɵMapBicyclingLayer_BaseFactory = /*@__PURE__*/ core[\"cc\" /* ɵɵgetInheritedFactory */](google_maps_MapBicyclingLayer);\nlet google_maps_MapCircle = /*@__PURE__*/ (() => {\n    class MapCircle {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\n            this._center = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n            this._radius = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n             */\n            this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n             */\n            this.circleClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n             */\n            this.circleDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n             */\n            this.circleDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n             */\n            this.circleDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n             */\n            this.circleDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n             */\n            this.circleMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n             */\n            this.circleMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n             */\n            this.circleMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n             */\n            this.circleMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n             */\n            this.circleMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n             */\n            this.radiusChanged = this._eventManager.getLazyEmitter('radius_changed');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n             */\n            this.circleRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set center(center) {\n            this._center.next(center);\n        }\n        set radius(radius) {\n            this._radius.next(radius);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(Object(take[\"a\" /* take */])(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.circle = new google.maps.Circle(options);\n                    });\n                    this._assertInitialized();\n                    this.circle.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.circle);\n                });\n                this._watchForOptionsChanges();\n                this._watchForCenterChanges();\n                this._watchForRadiusChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.circle) {\n                this.circle.setMap(null);\n            }\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.circle.getBounds();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n         */\n        getCenter() {\n            this._assertInitialized();\n            return this.circle.getCenter();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.circle.getDraggable();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.circle.getEditable();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\n         */\n        getRadius() {\n            this._assertInitialized();\n            return this.circle.getRadius();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.circle.getVisible();\n        }\n        _combineOptions() {\n            return Object(combineLatest[\"a\" /* combineLatest */])([this._options, this._center, this._radius])\n                .pipe(Object(map[\"a\" /* map */])(([options, center, radius]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { center: center || options.center, radius: radius !== undefined ? radius : options.radius });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.circle.setOptions(options);\n            });\n        }\n        _watchForCenterChanges() {\n            this._center.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(center => {\n                if (center) {\n                    this._assertInitialized();\n                    this.circle.setCenter(center);\n                }\n            });\n        }\n        _watchForRadiusChanges() {\n            this._radius.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(radius => {\n                if (radius !== undefined) {\n                    this._assertInitialized();\n                    this.circle.setRadius(radius);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._map.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.circle) {\n                    throw Error('Cannot interact with a Google Map Circle before it has been ' +\n                        'initialized. Please wait for the Circle to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapCircle.ɵfac = function MapCircle_Factory(t) { return new (t || MapCircle)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapCircle.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapCircle, selectors: [[\"map-circle\"]], inputs: { options: \"options\", center: \"center\", radius: \"radius\" }, outputs: { centerChanged: \"centerChanged\", circleClick: \"circleClick\", circleDblclick: \"circleDblclick\", circleDrag: \"circleDrag\", circleDragend: \"circleDragend\", circleDragstart: \"circleDragstart\", circleMousedown: \"circleMousedown\", circleMousemove: \"circleMousemove\", circleMouseout: \"circleMouseout\", circleMouseover: \"circleMouseover\", circleMouseup: \"circleMouseup\", radiusChanged: \"radiusChanged\", circleRightclick: \"circleRightclick\" }, exportAs: [\"mapCircle\"] });\n    return MapCircle;\n})();\nlet google_maps_MapGroundOverlay = /*@__PURE__*/ (() => {\n    class MapGroundOverlay {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._opacity = new BehaviorSubject[\"a\" /* BehaviorSubject */](1);\n            this._url = new BehaviorSubject[\"a\" /* BehaviorSubject */]('');\n            this._bounds = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            /** Whether the overlay is clickable */\n            this.clickable = false;\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n             */\n            this.mapClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/image-overlay\n             * #GroundOverlay.dblclick\n             */\n            this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n        }\n        /** URL of the image that will be shown in the overlay. */\n        set url(url) {\n            this._url.next(url);\n        }\n        /** Bounds for the overlay. */\n        get bounds() {\n            return this._bounds.value;\n        }\n        set bounds(bounds) {\n            this._bounds.next(bounds);\n        }\n        /** Opacity of the overlay. */\n        set opacity(opacity) {\n            this._opacity.next(opacity);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                // The ground overlay setup is slightly different from the other Google Maps objects in that\n                // we have to recreate the `GroundOverlay` object whenever the bounds change, because\n                // Google Maps doesn't provide an API to update the bounds of an existing overlay.\n                this._bounds.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(bounds => {\n                    if (this.groundOverlay) {\n                        this.groundOverlay.setMap(null);\n                        this.groundOverlay = undefined;\n                    }\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    if (bounds) {\n                        this._ngZone.runOutsideAngular(() => {\n                            this.groundOverlay = new google.maps.GroundOverlay(this._url.getValue(), bounds, {\n                                clickable: this.clickable,\n                                opacity: this._opacity.value,\n                            });\n                        });\n                        this._assertInitialized();\n                        this.groundOverlay.setMap(this._map.googleMap);\n                        this._eventManager.setTarget(this.groundOverlay);\n                    }\n                });\n                this._watchForOpacityChanges();\n                this._watchForUrlChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.groundOverlay) {\n                this.groundOverlay.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\n         * #GroundOverlay.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.groundOverlay.getBounds();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\n         * #GroundOverlay.getOpacity\n         */\n        getOpacity() {\n            this._assertInitialized();\n            return this.groundOverlay.getOpacity();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\n         * #GroundOverlay.getUrl\n         */\n        getUrl() {\n            this._assertInitialized();\n            return this.groundOverlay.getUrl();\n        }\n        _watchForOpacityChanges() {\n            this._opacity.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(opacity => {\n                if (opacity != null) {\n                    this._assertInitialized();\n                    this.groundOverlay.setOpacity(opacity);\n                }\n            });\n        }\n        _watchForUrlChanges() {\n            this._url.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(url => {\n                this._assertInitialized();\n                const overlay = this.groundOverlay;\n                overlay.set('url', url);\n                // Google Maps only redraws the overlay if we re-set the map.\n                overlay.setMap(null);\n                overlay.setMap(this._map.googleMap);\n            });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._map.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.groundOverlay) {\n                    throw Error('Cannot interact with a Google Map GroundOverlay before it has been initialized. ' +\n                        'Please wait for the GroundOverlay to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapGroundOverlay.ɵfac = function MapGroundOverlay_Factory(t) { return new (t || MapGroundOverlay)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapGroundOverlay.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapGroundOverlay, selectors: [[\"map-ground-overlay\"]], inputs: { clickable: \"clickable\", url: \"url\", bounds: \"bounds\", opacity: \"opacity\" }, outputs: { mapClick: \"mapClick\", mapDblclick: \"mapDblclick\" }, exportAs: [\"mapGroundOverlay\"] });\n    return MapGroundOverlay;\n})();\nlet google_maps_MapInfoWindow = /*@__PURE__*/ (() => {\n    class MapInfoWindow {\n        constructor(_googleMap, _elementRef, _ngZone) {\n            this._googleMap = _googleMap;\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\n            this._position = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n            this._destroy = new Subject[\"a\" /* Subject */]();\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n             */\n            this.closeclick = this._eventManager.getLazyEmitter('closeclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window\n             * #InfoWindow.content_changed\n             */\n            this.contentChanged = this._eventManager.getLazyEmitter('content_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n             */\n            this.domready = this._eventManager.getLazyEmitter('domready');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window\n             * #InfoWindow.position_changed\n             */\n            this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window\n             * #InfoWindow.zindex_changed\n             */\n            this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set position(position) {\n            this._position.next(position);\n        }\n        ngOnInit() {\n            if (this._googleMap._isBrowser) {\n                const combinedOptionsChanges = this._combineOptions();\n                combinedOptionsChanges.pipe(Object(take[\"a\" /* take */])(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.infoWindow = new google.maps.InfoWindow(options);\n                    });\n                    this._eventManager.setTarget(this.infoWindow);\n                });\n                this._watchForOptionsChanges();\n                this._watchForPositionChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroy.next();\n            this._destroy.complete();\n            // If no info window has been created on the server, we do not try closing it.\n            // On the server, an info window cannot be created and this would cause errors.\n            if (this.infoWindow) {\n                this.close();\n            }\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n         */\n        close() {\n            this._assertInitialized();\n            this.infoWindow.close();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n         */\n        getContent() {\n            this._assertInitialized();\n            return this.infoWindow.getContent();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window\n         * #InfoWindow.getPosition\n         */\n        getPosition() {\n            this._assertInitialized();\n            return this.infoWindow.getPosition();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n         */\n        getZIndex() {\n            this._assertInitialized();\n            return this.infoWindow.getZIndex();\n        }\n        /**\n         * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n         * then the position property of the options input is used instead.\n         */\n        open(anchor) {\n            this._assertInitialized();\n            const anchorObject = anchor ? anchor.getAnchor() : undefined;\n            // Prevent the info window from initializing when trying to reopen on the same anchor.\n            // Note that when the window is opened for the first time, the anchor will always be\n            // undefined. If that's the case, we have to allow it to open in order to handle the\n            // case where the window doesn't have an anchor, but is placed at a particular position.\n            if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\n                this._elementRef.nativeElement.style.display = '';\n                this.infoWindow.open(this._googleMap.googleMap, anchorObject);\n            }\n        }\n        _combineOptions() {\n            return Object(combineLatest[\"a\" /* combineLatest */])([this._options, this._position]).pipe(Object(map[\"a\" /* map */])(([options, position]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { position: position || options.position, content: this._elementRef.nativeElement });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroy)).subscribe(options => {\n                this._assertInitialized();\n                this.infoWindow.setOptions(options);\n            });\n        }\n        _watchForPositionChanges() {\n            this._position.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroy)).subscribe(position => {\n                if (position) {\n                    this._assertInitialized();\n                    this.infoWindow.setPosition(position);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._googleMap.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.infoWindow) {\n                    throw Error('Cannot interact with a Google Map Info Window before it has been ' +\n                        'initialized. Please wait for the Info Window to load before trying to interact with ' +\n                        'it.');\n                }\n            }\n        }\n    }\n    MapInfoWindow.ɵfac = function MapInfoWindow_Factory(t) { return new (t || MapInfoWindow)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */]), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapInfoWindow.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapInfoWindow, selectors: [[\"map-info-window\"]], hostAttrs: [2, \"display\", \"none\"], inputs: { options: \"options\", position: \"position\" }, outputs: { closeclick: \"closeclick\", contentChanged: \"contentChanged\", domready: \"domready\", positionChanged: \"positionChanged\", zindexChanged: \"zindexChanged\" }, exportAs: [\"mapInfoWindow\"] });\n    return MapInfoWindow;\n})();\nlet google_maps_MapKmlLayer = /*@__PURE__*/ (() => {\n    class MapKmlLayer {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\n            this._url = new BehaviorSubject[\"a\" /* BehaviorSubject */]('');\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\n             */\n            this.kmlClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/kml\n             * #KmlLayer.defaultviewport_changed\n             */\n            this.defaultviewportChanged = this._eventManager.getLazyEmitter('defaultviewport_changed');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\n             */\n            this.statusChanged = this._eventManager.getLazyEmitter('status_changed');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set url(url) {\n            this._url.next(url);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(Object(take[\"a\" /* take */])(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => this.kmlLayer = new google.maps.KmlLayer(options));\n                    this._assertInitialized();\n                    this.kmlLayer.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.kmlLayer);\n                });\n                this._watchForOptionsChanges();\n                this._watchForUrlChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.kmlLayer) {\n                this.kmlLayer.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\n         */\n        getDefaultViewport() {\n            this._assertInitialized();\n            return this.kmlLayer.getDefaultViewport();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\n         */\n        getMetadata() {\n            this._assertInitialized();\n            return this.kmlLayer.getMetadata();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\n         */\n        getStatus() {\n            this._assertInitialized();\n            return this.kmlLayer.getStatus();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\n         */\n        getUrl() {\n            this._assertInitialized();\n            return this.kmlLayer.getUrl();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\n         */\n        getZIndex() {\n            this._assertInitialized();\n            return this.kmlLayer.getZIndex();\n        }\n        _combineOptions() {\n            return Object(combineLatest[\"a\" /* combineLatest */])([this._options, this._url]).pipe(Object(map[\"a\" /* map */])(([options, url]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { url: url || options.url });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(options => {\n                if (this.kmlLayer) {\n                    this._assertInitialized();\n                    this.kmlLayer.setOptions(options);\n                }\n            });\n        }\n        _watchForUrlChanges() {\n            this._url.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(url => {\n                if (url && this.kmlLayer) {\n                    this._assertInitialized();\n                    this.kmlLayer.setUrl(url);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._map.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.kmlLayer) {\n                    throw Error('Cannot interact with a Google Map KmlLayer before it has been ' +\n                        'initialized. Please wait for the KmlLayer to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapKmlLayer.ɵfac = function MapKmlLayer_Factory(t) { return new (t || MapKmlLayer)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapKmlLayer.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapKmlLayer, selectors: [[\"map-kml-layer\"]], inputs: { options: \"options\", url: \"url\" }, outputs: { kmlClick: \"kmlClick\", defaultviewportChanged: \"defaultviewportChanged\", statusChanged: \"statusChanged\" }, exportAs: [\"mapKmlLayer\"] });\n    return MapKmlLayer;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nconst DEFAULT_MARKER_OPTIONS = {\n    position: { lat: 37.421995, lng: -122.084092 },\n};\nlet google_maps_MapMarker = /*@__PURE__*/ (() => {\n    class MapMarker {\n        constructor(_googleMap, _ngZone) {\n            this._googleMap = _googleMap;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n             */\n            this.animationChanged = this._eventManager.getLazyEmitter('animation_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n             */\n            this.mapClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n             */\n            this.clickableChanged = this._eventManager.getLazyEmitter('clickable_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n             */\n            this.cursorChanged = this._eventManager.getLazyEmitter('cursor_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n             */\n            this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n             */\n            this.mapDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n             */\n            this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n             */\n            this.draggableChanged = this._eventManager.getLazyEmitter('draggable_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n             */\n            this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n             */\n            this.flatChanged = this._eventManager.getLazyEmitter('flat_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n             */\n            this.iconChanged = this._eventManager.getLazyEmitter('icon_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n             */\n            this.mapMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n             */\n            this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n             */\n            this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n             */\n            this.mapMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n             */\n            this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n             */\n            this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n             */\n            this.shapeChanged = this._eventManager.getLazyEmitter('shape_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n             */\n            this.titleChanged = this._eventManager.getLazyEmitter('title_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n             */\n            this.visibleChanged = this._eventManager.getLazyEmitter('visible_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n             */\n            this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n        }\n        /**\n         * Title of the marker.\n         * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\n         */\n        set title(title) {\n            this._title = title;\n        }\n        /**\n         * Position of the marker. See:\n         * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\n         */\n        set position(position) {\n            this._position = position;\n        }\n        /**\n         * Label for the marker.\n         * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\n         */\n        set label(label) {\n            this._label = label;\n        }\n        /**\n         * Whether the marker is clickable. See:\n         * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\n         */\n        set clickable(clickable) {\n            this._clickable = clickable;\n        }\n        /**\n         * Options used to configure the marker.\n         * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n         */\n        set options(options) {\n            this._options = options;\n        }\n        ngOnInit() {\n            if (this._googleMap._isBrowser) {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => {\n                    this.marker = new google.maps.Marker(this._combineOptions());\n                });\n                this._assertInitialized();\n                this.marker.setMap(this._googleMap.googleMap);\n                this._eventManager.setTarget(this.marker);\n            }\n        }\n        ngOnChanges(changes) {\n            const { marker, _title, _position, _label, _clickable } = this;\n            if (marker) {\n                if (changes['options']) {\n                    marker.setOptions(this._combineOptions());\n                }\n                if (changes['title'] && _title !== undefined) {\n                    marker.setTitle(_title);\n                }\n                if (changes['position'] && _position) {\n                    marker.setPosition(_position);\n                }\n                if (changes['label'] && _label !== undefined) {\n                    marker.setLabel(_label);\n                }\n                if (changes['clickable'] && _clickable !== undefined) {\n                    marker.setClickable(_clickable);\n                }\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            if (this.marker) {\n                this.marker.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n         */\n        getAnimation() {\n            this._assertInitialized();\n            return this.marker.getAnimation() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n         */\n        getClickable() {\n            this._assertInitialized();\n            return this.marker.getClickable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n         */\n        getCursor() {\n            this._assertInitialized();\n            return this.marker.getCursor() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return !!this.marker.getDraggable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n         */\n        getIcon() {\n            this._assertInitialized();\n            return this.marker.getIcon() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n         */\n        getLabel() {\n            this._assertInitialized();\n            return this.marker.getLabel() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n         */\n        getOpacity() {\n            this._assertInitialized();\n            return this.marker.getOpacity() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n         */\n        getPosition() {\n            this._assertInitialized();\n            return this.marker.getPosition() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n         */\n        getShape() {\n            this._assertInitialized();\n            return this.marker.getShape() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n         */\n        getTitle() {\n            this._assertInitialized();\n            return this.marker.getTitle() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.marker.getVisible();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n         */\n        getZIndex() {\n            this._assertInitialized();\n            return this.marker.getZIndex() || null;\n        }\n        /** Gets the anchor point that can be used to attach other Google Maps objects. */\n        getAnchor() {\n            this._assertInitialized();\n            return this.marker;\n        }\n        /** Creates a combined options object using the passed-in options and the individual inputs. */\n        _combineOptions() {\n            const options = this._options || DEFAULT_MARKER_OPTIONS;\n            return Object.assign(Object.assign({}, options), { title: this._title || options.title, position: this._position || options.position, label: this._label || options.label, clickable: this._clickable !== undefined ? this._clickable : options.clickable, map: this._googleMap.googleMap });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._googleMap.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.marker) {\n                    throw Error('Cannot interact with a Google Map Marker before it has been ' +\n                        'initialized. Please wait for the Marker to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapMarker.ɵfac = function MapMarker_Factory(t) { return new (t || MapMarker)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapMarker.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapMarker, selectors: [[\"map-marker\"]], inputs: { title: \"title\", position: \"position\", label: \"label\", clickable: \"clickable\", options: \"options\" }, outputs: { animationChanged: \"animationChanged\", mapClick: \"mapClick\", clickableChanged: \"clickableChanged\", cursorChanged: \"cursorChanged\", mapDblclick: \"mapDblclick\", mapDrag: \"mapDrag\", mapDragend: \"mapDragend\", draggableChanged: \"draggableChanged\", mapDragstart: \"mapDragstart\", flatChanged: \"flatChanged\", iconChanged: \"iconChanged\", mapMousedown: \"mapMousedown\", mapMouseout: \"mapMouseout\", mapMouseover: \"mapMouseover\", mapMouseup: \"mapMouseup\", positionChanged: \"positionChanged\", mapRightclick: \"mapRightclick\", shapeChanged: \"shapeChanged\", titleChanged: \"titleChanged\", visibleChanged: \"visibleChanged\", zindexChanged: \"zindexChanged\" }, exportAs: [\"mapMarker\"], features: [core[\"Gb\" /* ɵɵNgOnChangesFeature */]] });\n    return MapMarker;\n})();\nlet google_maps_MapMarkerClusterer = /*@__PURE__*/ (() => {\n    class MapMarkerClusterer {\n        constructor(_googleMap, _ngZone) {\n            this._googleMap = _googleMap;\n            this._ngZone = _ngZone;\n            this._currentMarkers = new Set();\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._destroy = new Subject[\"a\" /* Subject */]();\n            this.ariaLabelFn = () => '';\n            /**\n             * See\n             * googlemaps.github.io/v3-utility-library/modules/\n             * _google_markerclustererplus.html#clusteringbegin\n             */\n            this.clusteringbegin = this._eventManager.getLazyEmitter('clusteringbegin');\n            /**\n             * See\n             * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\n             */\n            this.clusteringend = this._eventManager.getLazyEmitter('clusteringend');\n            this._canInitialize = this._googleMap._isBrowser;\n        }\n        set averageCenter(averageCenter) {\n            this._averageCenter = averageCenter;\n        }\n        set batchSizeIE(batchSizeIE) {\n            this._batchSizeIE = batchSizeIE;\n        }\n        set calculator(calculator) {\n            this._calculator = calculator;\n        }\n        set clusterClass(clusterClass) {\n            this._clusterClass = clusterClass;\n        }\n        set enableRetinaIcons(enableRetinaIcons) {\n            this._enableRetinaIcons = enableRetinaIcons;\n        }\n        set gridSize(gridSize) {\n            this._gridSize = gridSize;\n        }\n        set ignoreHidden(ignoreHidden) {\n            this._ignoreHidden = ignoreHidden;\n        }\n        set imageExtension(imageExtension) {\n            this._imageExtension = imageExtension;\n        }\n        set imagePath(imagePath) {\n            this._imagePath = imagePath;\n        }\n        set imageSizes(imageSizes) {\n            this._imageSizes = imageSizes;\n        }\n        set maxZoom(maxZoom) {\n            this._maxZoom = maxZoom;\n        }\n        set minimumClusterSize(minimumClusterSize) {\n            this._minimumClusterSize = minimumClusterSize;\n        }\n        set styles(styles) {\n            this._styles = styles;\n        }\n        set title(title) {\n            this._title = title;\n        }\n        set zIndex(zIndex) {\n            this._zIndex = zIndex;\n        }\n        set zoomOnClick(zoomOnClick) {\n            this._zoomOnClick = zoomOnClick;\n        }\n        ngOnInit() {\n            if (this._canInitialize) {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                this._ngZone.runOutsideAngular(() => {\n                    this.markerClusterer = new MarkerClusterer(this._googleMap.googleMap, [], this._combineOptions());\n                });\n                this._assertInitialized();\n                this._eventManager.setTarget(this.markerClusterer);\n            }\n        }\n        ngAfterContentInit() {\n            if (this._canInitialize) {\n                this._watchForMarkerChanges();\n            }\n        }\n        ngOnChanges(changes) {\n            const { markerClusterer: clusterer, ariaLabelFn, _averageCenter, _batchSizeIE, _calculator, _styles, _clusterClass, _enableRetinaIcons, _gridSize, _ignoreHidden, _imageExtension, _imagePath, _imageSizes, _maxZoom, _minimumClusterSize, _title, _zIndex, _zoomOnClick } = this;\n            if (clusterer) {\n                if (changes['ariaLabelFn']) {\n                    clusterer.ariaLabelFn = ariaLabelFn;\n                }\n                if (changes['averageCenter'] && _averageCenter !== undefined) {\n                    clusterer.setAverageCenter(_averageCenter);\n                }\n                if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\n                    clusterer.setBatchSizeIE(_batchSizeIE);\n                }\n                if (changes['calculator'] && _calculator) {\n                    clusterer.setCalculator(_calculator);\n                }\n                if (changes['clusterClass'] && _clusterClass !== undefined) {\n                    clusterer.setClusterClass(_clusterClass);\n                }\n                if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\n                    clusterer.setEnableRetinaIcons(_enableRetinaIcons);\n                }\n                if (changes['gridSize'] && _gridSize !== undefined) {\n                    clusterer.setGridSize(_gridSize);\n                }\n                if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\n                    clusterer.setIgnoreHidden(_ignoreHidden);\n                }\n                if (changes['imageExtension'] && _imageExtension !== undefined) {\n                    clusterer.setImageExtension(_imageExtension);\n                }\n                if (changes['imagePath'] && _imagePath !== undefined) {\n                    clusterer.setImagePath(_imagePath);\n                }\n                if (changes['imageSizes'] && _imageSizes) {\n                    clusterer.setImageSizes(_imageSizes);\n                }\n                if (changes['maxZoom'] && _maxZoom !== undefined) {\n                    clusterer.setMaxZoom(_maxZoom);\n                }\n                if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\n                    clusterer.setMinimumClusterSize(_minimumClusterSize);\n                }\n                if (changes['styles'] && _styles) {\n                    clusterer.setStyles(_styles);\n                }\n                if (changes['title'] && _title !== undefined) {\n                    clusterer.setTitle(_title);\n                }\n                if (changes['zIndex'] && _zIndex !== undefined) {\n                    clusterer.setZIndex(_zIndex);\n                }\n                if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\n                    clusterer.setZoomOnClick(_zoomOnClick);\n                }\n            }\n        }\n        ngOnDestroy() {\n            this._destroy.next();\n            this._destroy.complete();\n            this._eventManager.destroy();\n            if (this.markerClusterer) {\n                this.markerClusterer.setMap(null);\n            }\n        }\n        fitMapToMarkers(padding) {\n            this._assertInitialized();\n            this.markerClusterer.fitMapToMarkers(padding);\n        }\n        getAverageCenter() {\n            this._assertInitialized();\n            return this.markerClusterer.getAverageCenter();\n        }\n        getBatchSizeIE() {\n            this._assertInitialized();\n            return this.markerClusterer.getBatchSizeIE();\n        }\n        getCalculator() {\n            this._assertInitialized();\n            return this.markerClusterer.getCalculator();\n        }\n        getClusterClass() {\n            this._assertInitialized();\n            return this.markerClusterer.getClusterClass();\n        }\n        getClusters() {\n            this._assertInitialized();\n            return this.markerClusterer.getClusters();\n        }\n        getEnableRetinaIcons() {\n            this._assertInitialized();\n            return this.markerClusterer.getEnableRetinaIcons();\n        }\n        getGridSize() {\n            this._assertInitialized();\n            return this.markerClusterer.getGridSize();\n        }\n        getIgnoreHidden() {\n            this._assertInitialized();\n            return this.markerClusterer.getIgnoreHidden();\n        }\n        getImageExtension() {\n            this._assertInitialized();\n            return this.markerClusterer.getImageExtension();\n        }\n        getImagePath() {\n            this._assertInitialized();\n            return this.markerClusterer.getImagePath();\n        }\n        getImageSizes() {\n            this._assertInitialized();\n            return this.markerClusterer.getImageSizes();\n        }\n        getMaxZoom() {\n            this._assertInitialized();\n            return this.markerClusterer.getMaxZoom();\n        }\n        getMinimumClusterSize() {\n            this._assertInitialized();\n            return this.markerClusterer.getMinimumClusterSize();\n        }\n        getStyles() {\n            this._assertInitialized();\n            return this.markerClusterer.getStyles();\n        }\n        getTitle() {\n            this._assertInitialized();\n            return this.markerClusterer.getTitle();\n        }\n        getTotalClusters() {\n            this._assertInitialized();\n            return this.markerClusterer.getTotalClusters();\n        }\n        getTotalMarkers() {\n            this._assertInitialized();\n            return this.markerClusterer.getTotalMarkers();\n        }\n        getZIndex() {\n            this._assertInitialized();\n            return this.markerClusterer.getZIndex();\n        }\n        getZoomOnClick() {\n            this._assertInitialized();\n            return this.markerClusterer.getZoomOnClick();\n        }\n        _combineOptions() {\n            return {\n                ariaLabelFn: this.ariaLabelFn,\n                averageCenter: this._averageCenter,\n                batchSize: this.batchSize,\n                batchSizeIE: this._batchSizeIE,\n                calculator: this._calculator,\n                clusterClass: this._clusterClass,\n                enableRetinaIcons: this._enableRetinaIcons,\n                gridSize: this._gridSize,\n                ignoreHidden: this._ignoreHidden,\n                imageExtension: this._imageExtension,\n                imagePath: this._imagePath,\n                imageSizes: this._imageSizes,\n                maxZoom: this._maxZoom,\n                minimumClusterSize: this._minimumClusterSize,\n                styles: this._styles,\n                title: this._title,\n                zIndex: this._zIndex,\n                zoomOnClick: this._zoomOnClick,\n            };\n        }\n        _watchForMarkerChanges() {\n            this._assertInitialized();\n            const initialMarkers = [];\n            for (const marker of this._getInternalMarkers(this._markers.toArray())) {\n                this._currentMarkers.add(marker);\n                initialMarkers.push(marker);\n            }\n            this.markerClusterer.addMarkers(initialMarkers);\n            this._markers.changes.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroy)).subscribe((markerComponents) => {\n                this._assertInitialized();\n                const newMarkers = new Set(this._getInternalMarkers(markerComponents));\n                const markersToAdd = [];\n                const markersToRemove = [];\n                for (const marker of Array.from(newMarkers)) {\n                    if (!this._currentMarkers.has(marker)) {\n                        this._currentMarkers.add(marker);\n                        markersToAdd.push(marker);\n                    }\n                }\n                for (const marker of Array.from(this._currentMarkers)) {\n                    if (!newMarkers.has(marker)) {\n                        markersToRemove.push(marker);\n                    }\n                }\n                this.markerClusterer.addMarkers(markersToAdd, true);\n                this.markerClusterer.removeMarkers(markersToRemove, true);\n                this.markerClusterer.repaint();\n                for (const marker of markersToRemove) {\n                    this._currentMarkers.delete(marker);\n                }\n            });\n        }\n        _getInternalMarkers(markers) {\n            return markers.filter(markerComponent => !!markerComponent.marker)\n                .map(markerComponent => markerComponent.marker);\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._googleMap.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.markerClusterer) {\n                    throw Error('Cannot interact with a MarkerClusterer before it has been initialized. ' +\n                        'Please wait for the MarkerClusterer to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapMarkerClusterer.ɵfac = function MapMarkerClusterer_Factory(t) { return new (t || MapMarkerClusterer)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapMarkerClusterer.ɵcmp = core[\"Ob\" /* ɵɵdefineComponent */]({ type: MapMarkerClusterer, selectors: [[\"map-marker-clusterer\"]], contentQueries: function MapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Nb\" /* ɵɵcontentQuery */](dirIndex, google_maps_MapMarker, 1);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Bc\" /* ɵɵqueryRefresh */](_t = core[\"lc\" /* ɵɵloadQuery */]()) && (ctx._markers = _t);\n            }\n        }, inputs: { ariaLabelFn: \"ariaLabelFn\", averageCenter: \"averageCenter\", batchSizeIE: \"batchSizeIE\", calculator: \"calculator\", clusterClass: \"clusterClass\", enableRetinaIcons: \"enableRetinaIcons\", gridSize: \"gridSize\", ignoreHidden: \"ignoreHidden\", imageExtension: \"imageExtension\", imagePath: \"imagePath\", imageSizes: \"imageSizes\", maxZoom: \"maxZoom\", minimumClusterSize: \"minimumClusterSize\", styles: \"styles\", title: \"title\", zIndex: \"zIndex\", zoomOnClick: \"zoomOnClick\", batchSize: \"batchSize\" }, outputs: { clusteringbegin: \"clusteringbegin\", clusteringend: \"clusteringend\" }, exportAs: [\"mapMarkerClusterer\"], features: [core[\"Gb\" /* ɵɵNgOnChangesFeature */]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MapMarkerClusterer_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"sc\" /* ɵɵprojectionDef */]();\n                core[\"rc\" /* ɵɵprojection */](0);\n            }\n        }, encapsulation: 2, changeDetection: 0 });\n    return MapMarkerClusterer;\n})();\nlet google_maps_MapPolygon = /*@__PURE__*/ (() => {\n    class MapPolygon {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\n            this._paths = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n             */\n            this.polygonClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n             */\n            this.polygonDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n             */\n            this.polygonDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n             */\n            this.polygonDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n             */\n            this.polygonDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n             */\n            this.polygonMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n             */\n            this.polygonMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n             */\n            this.polygonMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n             */\n            this.polygonMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n             */\n            this.polygonMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n             */\n            this.polygonRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set paths(paths) {\n            this._paths.next(paths);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(Object(take[\"a\" /* take */])(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.polygon = new google.maps.Polygon(options);\n                    });\n                    this._assertInitialized();\n                    this.polygon.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.polygon);\n                });\n                this._watchForOptionsChanges();\n                this._watchForPathChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.polygon) {\n                this.polygon.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.polygon.getDraggable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.polygon.getEditable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n         */\n        getPath() {\n            this._assertInitialized();\n            return this.polygon.getPath();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n         */\n        getPaths() {\n            this._assertInitialized();\n            return this.polygon.getPaths();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.polygon.getVisible();\n        }\n        _combineOptions() {\n            return Object(combineLatest[\"a\" /* combineLatest */])([this._options, this._paths]).pipe(Object(map[\"a\" /* map */])(([options, paths]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { paths: paths || options.paths });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.polygon.setOptions(options);\n            });\n        }\n        _watchForPathChanges() {\n            this._paths.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(paths => {\n                if (paths) {\n                    this._assertInitialized();\n                    this.polygon.setPaths(paths);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._map.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.polygon) {\n                    throw Error('Cannot interact with a Google Map Polygon before it has been ' +\n                        'initialized. Please wait for the Polygon to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapPolygon.ɵfac = function MapPolygon_Factory(t) { return new (t || MapPolygon)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapPolygon.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapPolygon, selectors: [[\"map-polygon\"]], inputs: { options: \"options\", paths: \"paths\" }, outputs: { polygonClick: \"polygonClick\", polygonDblclick: \"polygonDblclick\", polygonDrag: \"polygonDrag\", polygonDragend: \"polygonDragend\", polygonDragstart: \"polygonDragstart\", polygonMousedown: \"polygonMousedown\", polygonMousemove: \"polygonMousemove\", polygonMouseout: \"polygonMouseout\", polygonMouseover: \"polygonMouseover\", polygonMouseup: \"polygonMouseup\", polygonRightclick: \"polygonRightclick\" }, exportAs: [\"mapPolygon\"] });\n    return MapPolygon;\n})();\nlet google_maps_MapPolyline = /*@__PURE__*/ (() => {\n    class MapPolyline {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\n            this._path = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n             */\n            this.polylineClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n             */\n            this.polylineDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n             */\n            this.polylineDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n             */\n            this.polylineDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n             */\n            this.polylineDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n             */\n            this.polylineMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n             */\n            this.polylineMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n             */\n            this.polylineMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n             */\n            this.polylineMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n             */\n            this.polylineMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n             */\n            this.polylineRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set path(path) {\n            this._path.next(path);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(Object(take[\"a\" /* take */])(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => this.polyline = new google.maps.Polyline(options));\n                    this._assertInitialized();\n                    this.polyline.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.polyline);\n                });\n                this._watchForOptionsChanges();\n                this._watchForPathChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.polyline) {\n                this.polyline.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.polyline.getDraggable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.polyline.getEditable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n         */\n        getPath() {\n            this._assertInitialized();\n            return this.polyline.getPath();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.polyline.getVisible();\n        }\n        _combineOptions() {\n            return Object(combineLatest[\"a\" /* combineLatest */])([this._options, this._path]).pipe(Object(map[\"a\" /* map */])(([options, path]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { path: path || options.path });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.polyline.setOptions(options);\n            });\n        }\n        _watchForPathChanges() {\n            this._path.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(path => {\n                if (path) {\n                    this._assertInitialized();\n                    this.polyline.setPath(path);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._map.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.polyline) {\n                    throw Error('Cannot interact with a Google Map Polyline before it has been ' +\n                        'initialized. Please wait for the Polyline to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapPolyline.ɵfac = function MapPolyline_Factory(t) { return new (t || MapPolyline)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapPolyline.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapPolyline, selectors: [[\"map-polyline\"]], inputs: { options: \"options\", path: \"path\" }, outputs: { polylineClick: \"polylineClick\", polylineDblclick: \"polylineDblclick\", polylineDrag: \"polylineDrag\", polylineDragend: \"polylineDragend\", polylineDragstart: \"polylineDragstart\", polylineMousedown: \"polylineMousedown\", polylineMousemove: \"polylineMousemove\", polylineMouseout: \"polylineMouseout\", polylineMouseover: \"polylineMouseover\", polylineMouseup: \"polylineMouseup\", polylineRightclick: \"polylineRightclick\" }, exportAs: [\"mapPolyline\"] });\n    return MapPolyline;\n})();\nlet google_maps_MapRectangle = /*@__PURE__*/ (() => {\n    class MapRectangle {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new google_maps_MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject[\"a\" /* BehaviorSubject */]({});\n            this._bounds = new BehaviorSubject[\"a\" /* BehaviorSubject */](undefined);\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n             */\n            this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n             */\n            this.rectangleClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n             */\n            this.rectangleDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n             */\n            this.rectangleDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n             */\n            this.rectangleDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n             */\n            this.rectangleDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n             */\n            this.rectangleMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n             */\n            this.rectangleMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n             */\n            this.rectangleMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n             */\n            this.rectangleMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n             */\n            this.rectangleMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n             */\n            this.rectangleRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set bounds(bounds) {\n            this._bounds.next(bounds);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(Object(take[\"a\" /* take */])(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.rectangle = new google.maps.Rectangle(options);\n                    });\n                    this._assertInitialized();\n                    this.rectangle.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.rectangle);\n                });\n                this._watchForOptionsChanges();\n                this._watchForBoundsChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.rectangle) {\n                this.rectangle.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.rectangle.getBounds();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.rectangle.getDraggable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.rectangle.getEditable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.rectangle.getVisible();\n        }\n        _combineOptions() {\n            return Object(combineLatest[\"a\" /* combineLatest */])([this._options, this._bounds]).pipe(Object(map[\"a\" /* map */])(([options, bounds]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { bounds: bounds || options.bounds });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.rectangle.setOptions(options);\n            });\n        }\n        _watchForBoundsChanges() {\n            this._bounds.pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(bounds => {\n                if (bounds) {\n                    this._assertInitialized();\n                    this.rectangle.setBounds(bounds);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (!this._map.googleMap) {\n                    throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                        'Please wait for the API to load before trying to interact with it.');\n                }\n                if (!this.rectangle) {\n                    throw Error('Cannot interact with a Google Map Rectangle before it has been initialized. ' +\n                        'Please wait for the Rectangle to load before trying to interact with it.');\n                }\n            }\n        }\n    }\n    MapRectangle.ɵfac = function MapRectangle_Factory(t) { return new (t || MapRectangle)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapRectangle.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapRectangle, selectors: [[\"map-rectangle\"]], inputs: { options: \"options\", bounds: \"bounds\" }, outputs: { boundsChanged: \"boundsChanged\", rectangleClick: \"rectangleClick\", rectangleDblclick: \"rectangleDblclick\", rectangleDrag: \"rectangleDrag\", rectangleDragend: \"rectangleDragend\", rectangleDragstart: \"rectangleDragstart\", rectangleMousedown: \"rectangleMousedown\", rectangleMousemove: \"rectangleMousemove\", rectangleMouseout: \"rectangleMouseout\", rectangleMouseover: \"rectangleMouseover\", rectangleMouseup: \"rectangleMouseup\", rectangleRightclick: \"rectangleRightclick\" }, exportAs: [\"mapRectangle\"] });\n    return MapRectangle;\n})();\nlet google_maps_MapTrafficLayer = /*@__PURE__*/ (() => {\n    class MapTrafficLayer {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._autoRefresh = new BehaviorSubject[\"a\" /* BehaviorSubject */](true);\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n        }\n        /**\n         * Whether the traffic layer refreshes with updated information automatically.\n         */\n        set autoRefresh(autoRefresh) {\n            this._autoRefresh.next(autoRefresh);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(Object(take[\"a\" /* take */])(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.trafficLayer = new google.maps.TrafficLayer(options);\n                    });\n                    this._assertInitialized();\n                    this.trafficLayer.setMap(this._map.googleMap);\n                });\n                this._watchForAutoRefreshChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.trafficLayer) {\n                this.trafficLayer.setMap(null);\n            }\n        }\n        _combineOptions() {\n            return this._autoRefresh.pipe(Object(map[\"a\" /* map */])(autoRefresh => {\n                const combinedOptions = { autoRefresh };\n                return combinedOptions;\n            }));\n        }\n        _watchForAutoRefreshChanges() {\n            this._combineOptions().pipe(Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.trafficLayer.setOptions(options);\n            });\n        }\n        _assertInitialized() {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.trafficLayer) {\n                throw Error('Cannot interact with a Google Map Traffic Layer before it has been initialized. ' +\n                    'Please wait for the Traffic Layer to load before trying to interact with it.');\n            }\n        }\n    }\n    MapTrafficLayer.ɵfac = function MapTrafficLayer_Factory(t) { return new (t || MapTrafficLayer)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_GoogleMap), core[\"Ub\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    MapTrafficLayer.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapTrafficLayer, selectors: [[\"map-traffic-layer\"]], inputs: { autoRefresh: \"autoRefresh\" }, exportAs: [\"mapTrafficLayer\"] });\n    return MapTrafficLayer;\n})();\nlet google_maps_MapTransitLayer = /*@__PURE__*/ (() => {\n    class MapTransitLayer extends google_maps_MapBaseLayer {\n        _initializeObject() {\n            this.transitLayer = new google.maps.TransitLayer();\n        }\n        _setMap() {\n            this._assertLayerInitialized();\n            this.transitLayer.setMap(this._map.googleMap);\n        }\n        _unsetMap() {\n            if (this.transitLayer) {\n                this.transitLayer.setMap(null);\n            }\n        }\n        _assertLayerInitialized() {\n            if (!this.transitLayer) {\n                throw Error('Cannot interact with a Google Map Transit Layer before it has been initialized. ' +\n                    'Please wait for the Transit Layer to load before trying to interact with it.');\n            }\n        }\n    }\n    MapTransitLayer.ɵfac = function MapTransitLayer_Factory(t) { return ɵMapTransitLayer_BaseFactory(t || MapTransitLayer); };\n    MapTransitLayer.ɵdir = core[\"Pb\" /* ɵɵdefineDirective */]({ type: MapTransitLayer, selectors: [[\"map-transit-layer\"]], exportAs: [\"mapTransitLayer\"], features: [core[\"Fb\" /* ɵɵInheritDefinitionFeature */]] });\n    return MapTransitLayer;\n})();\nconst ɵMapTransitLayer_BaseFactory = /*@__PURE__*/ core[\"cc\" /* ɵɵgetInheritedFactory */](google_maps_MapTransitLayer);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [\n    google_maps_GoogleMap,\n    google_maps_MapBaseLayer,\n    google_maps_MapBicyclingLayer,\n    google_maps_MapCircle,\n    google_maps_MapGroundOverlay,\n    google_maps_MapInfoWindow,\n    google_maps_MapKmlLayer,\n    google_maps_MapMarker,\n    google_maps_MapMarkerClusterer,\n    google_maps_MapPolygon,\n    google_maps_MapPolyline,\n    google_maps_MapRectangle,\n    google_maps_MapTrafficLayer,\n    google_maps_MapTransitLayer,\n];\nlet google_maps_GoogleMapsModule = /*@__PURE__*/ (() => {\n    class GoogleMapsModule {\n    }\n    GoogleMapsModule.ɵfac = function GoogleMapsModule_Factory(t) { return new (t || GoogleMapsModule)(); };\n    GoogleMapsModule.ɵmod = core[\"Sb\" /* ɵɵdefineNgModule */]({ type: GoogleMapsModule });\n    GoogleMapsModule.ɵinj = core[\"Rb\" /* ɵɵdefineInjector */]({});\n    return GoogleMapsModule;\n})();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"Hc\" /* ɵɵsetNgModuleScope */](google_maps_GoogleMapsModule, { declarations: [google_maps_GoogleMap, google_maps_MapBaseLayer, google_maps_MapBicyclingLayer, google_maps_MapCircle, google_maps_MapGroundOverlay, google_maps_MapInfoWindow, google_maps_MapKmlLayer, google_maps_MapMarker, google_maps_MapMarkerClusterer, google_maps_MapPolygon, google_maps_MapPolyline, google_maps_MapRectangle, google_maps_MapTrafficLayer, google_maps_MapTransitLayer], exports: [google_maps_GoogleMap, google_maps_MapBaseLayer, google_maps_MapBicyclingLayer, google_maps_MapCircle, google_maps_MapGroundOverlay, google_maps_MapInfoWindow, google_maps_MapKmlLayer, google_maps_MapMarker, google_maps_MapMarkerClusterer, google_maps_MapPolygon, google_maps_MapPolyline, google_maps_MapRectangle, google_maps_MapTrafficLayer, google_maps_MapTransitLayer] }); })();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=google-maps.js.map\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/fesm2015/http.js\nvar http = __webpack_require__(\"IheW\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/catchError.js\nvar catchError = __webpack_require__(\"JIr8\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/of.js\nvar of = __webpack_require__(\"LRne\");\n\n// CONCATENATED MODULE: ./src/app/views/maps/google-maps-loader.service.ts\n\r\n\r\n\r\n\r\n\r\nlet google_maps_loader_service_GoogleMapsLoaderService = /*@__PURE__*/ (() => {\r\n    class GoogleMapsLoaderService {\r\n        constructor(httpClient) {\r\n            // To use the Google Maps JavaScript API, you must register your app project on the Google API Console\r\n            // and get a Google API key which you can add to your app\r\n            // see: https://developers.google.com/maps/gmp-get-started\r\n            const apiKey = 'AIzaSyASyYRBZmULmrmw_P9kgr7_266OhFNinPA'; // CoreUI demo Google API key, to replace\r\n            this.apiLoaded = httpClient.jsonp(`https://maps.googleapis.com/maps/api/js?key=${apiKey}`, 'callback')\r\n                .pipe(Object(map[\"a\" /* map */])(() => true), Object(catchError[\"a\" /* catchError */])(() => Object(of[\"a\" /* of */])(false)));\r\n        }\r\n    }\r\n    GoogleMapsLoaderService.ɵfac = function GoogleMapsLoaderService_Factory(t) { return new (t || GoogleMapsLoaderService)(core[\"hc\" /* ɵɵinject */](http[\"a\" /* HttpClient */])); };\r\n    GoogleMapsLoaderService.ɵprov = core[\"Qb\" /* ɵɵdefineInjectable */]({ token: GoogleMapsLoaderService, factory: GoogleMapsLoaderService.ɵfac, providedIn: 'root' });\r\n    return GoogleMapsLoaderService;\r\n})();\r\n\n// EXTERNAL MODULE: ./src/app/service/data.service.ts + 1 modules\nvar data_service = __webpack_require__(\"AwSQ\");\n\n// EXTERNAL MODULE: ./src/app/Common/common-data.service.ts\nvar common_data_service = __webpack_require__(\"4qVP\");\n\n// EXTERNAL MODULE: ./node_modules/@coreui/angular/fesm2015/coreui-angular.js + 3 modules\nvar coreui_angular = __webpack_require__(\"Iluq\");\n\n// CONCATENATED MODULE: ./src/app/views/maps/google-maps.component.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst google_maps_component_c0 = [\"myGoogleMap\"];\r\nfunction GoogleMapsComponent_div_5_map_marker_3_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        const _r7 = core[\"bc\" /* ɵɵgetCurrentView */]();\r\n        core[\"ac\" /* ɵɵelementStart */](0, \"map-marker\", 6, 7);\r\n        core[\"kc\" /* ɵɵlistener */](\"mapClick\", function GoogleMapsComponent_div_5_map_marker_3_Template_map_marker_mapClick_0_listener() { core[\"Ec\" /* ɵɵrestoreView */](_r7); const m_r3 = ctx.$implicit; const _r5 = core[\"Cc\" /* ɵɵreference */](1); const ctx_r6 = core[\"nc\" /* ɵɵnextContext */](2); return ctx_r6.openInfoWindow(_r5, m_r3); });\r\n        core[\"Zb\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const m_r3 = ctx.$implicit;\r\n        const ctx_r2 = core[\"nc\" /* ɵɵnextContext */](2);\r\n        core[\"tc\" /* ɵɵproperty */](\"label\", m_r3.label)(\"title\", m_r3.title)(\"position\", m_r3.position)(\"options\", ctx_r2.markerOptions);\r\n    }\r\n}\r\nfunction GoogleMapsComponent_div_5_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        core[\"ac\" /* ɵɵelementStart */](0, \"div\");\r\n        core[\"ac\" /* ɵɵelementStart */](1, \"google-map\", 2, 3);\r\n        core[\"Mc\" /* ɵɵtemplate */](3, GoogleMapsComponent_div_5_map_marker_3_Template, 2, 4, \"map-marker\", 4);\r\n        core[\"ac\" /* ɵɵelementStart */](4, \"map-info-window\");\r\n        core[\"ac\" /* ɵɵelementStart */](5, \"a\", 5);\r\n        core[\"ac\" /* ɵɵelementStart */](6, \"strong\");\r\n        core[\"Oc\" /* ɵɵtext */](7);\r\n        core[\"Zb\" /* ɵɵelementEnd */]();\r\n        core[\"Zb\" /* ɵɵelementEnd */]();\r\n        core[\"Zb\" /* ɵɵelementEnd */]();\r\n        core[\"ac\" /* ɵɵelementStart */](8, \"map-info-window\");\r\n        core[\"Oc\" /* ɵɵtext */](9);\r\n        core[\"Zb\" /* ɵɵelementEnd */]();\r\n        core[\"Zb\" /* ɵɵelementEnd */]();\r\n        core[\"Zb\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = core[\"nc\" /* ɵɵnextContext */]();\r\n        core[\"Ib\" /* ɵɵadvance */](1);\r\n        core[\"tc\" /* ɵɵproperty */](\"zoom\", ctx_r0.zoom)(\"center\", ctx_r0.center)(\"options\", ctx_r0.options);\r\n        core[\"Ib\" /* ɵɵadvance */](2);\r\n        core[\"tc\" /* ɵɵproperty */](\"ngForOf\", ctx_r0.markers);\r\n        core[\"Ib\" /* ɵɵadvance */](2);\r\n        core[\"uc\" /* ɵɵpropertyInterpolate */](\"href\", ctx_r0.activeInfoWindow == null ? null : ctx_r0.activeInfoWindow.www, core[\"Gc\" /* ɵɵsanitizeUrl */]);\r\n        core[\"Ib\" /* ɵɵadvance */](2);\r\n        core[\"Pc\" /* ɵɵtextInterpolate */](ctx_r0.activeInfoWindow == null ? null : ctx_r0.activeInfoWindow.title);\r\n        core[\"Ib\" /* ɵɵadvance */](2);\r\n        core[\"Pc\" /* ɵɵtextInterpolate */](ctx_r0.infoContent);\r\n    }\r\n}\r\nlet google_maps_component_GoogleMapsComponent = /*@__PURE__*/ (() => {\r\n    class GoogleMapsComponent {\r\n        constructor(gmLoader, commonData, service, document) {\r\n            this.gmLoader = gmLoader;\r\n            this.commonData = commonData;\r\n            this.service = service;\r\n            this.document = document;\r\n            this.maxZoom = 15;\r\n            this.minZoom = 8;\r\n            this.title = '';\r\n            this.machines = [];\r\n            this.options = {\r\n                center: {\r\n                    lat: 17.1434937,\r\n                    lng: 79.5968943,\r\n                },\r\n                zoom: 11\r\n            };\r\n            this.markerOptions = { draggable: true };\r\n            this.markerPositions = [];\r\n            this.markers = [\r\n                {\r\n                    position: {\r\n                        lat: 17.1434937,\r\n                        lng: 79.5968943,\r\n                    },\r\n                    label: 'SVEC11',\r\n                    title: 'ComputerScience,Suryapet',\r\n                },\r\n                {\r\n                    position: {\r\n                        lat: 12.1454937,\r\n                        lng: 79.5968943,\r\n                    },\r\n                    label: 'SVEC12',\r\n                    title: 'EEE,Suryapet',\r\n                },\r\n                {\r\n                    position: {\r\n                        lat: 11.1434937,\r\n                        lng: 75.5968943,\r\n                    },\r\n                    label: 'SVEC13',\r\n                    title: 'Mech,Suryapet',\r\n                },\r\n            ];\r\n        }\r\n        get infoWindowContent() {\r\n            return this.activeInfoWindow;\r\n        }\r\n        set infoWindowContent(marker) {\r\n            this.title = marker.title;\r\n            this.activeInfoWindow = marker;\r\n        }\r\n        ngOnInit() {\r\n            this.getLocations();\r\n        }\r\n        ngOnDestroy() {\r\n            this.removeGoogleMapScript();\r\n        }\r\n        getLocations() {\r\n            debugger;\r\n            this.service.getMachines(this.commonData.merchantId).subscribe((resp) => {\r\n                console.log(\"getMachines Reponse:::\" + JSON.stringify(resp));\r\n                if (resp && resp.statusCode == 200) {\r\n                    this.machines = resp.rowMachines;\r\n                    for (let i = 0; i < this.machines.length; i++) {\r\n                        for (var j = 0; j <= this.machines[0].machines.length; j++) {\r\n                            this.latitudes = this.machines[i].machines[j].latitude;\r\n                            this.logntitude = this.machines[i].machines[j].logntitude;\r\n                            this.loginId = this.machines[i].machines[j].loginId;\r\n                            this.active = this.machines[i].machines[j].active;\r\n                            this.addresss = this.machines[i].machines[j].address;\r\n                        }\r\n                    }\r\n                    this.setPositions(this.machines);\r\n                }\r\n            });\r\n        }\r\n        setPositions(machines) {\r\n            debugger;\r\n            this.markers.forEach((marker) => {\r\n                const { lat, lng } = Object.assign({}, marker.position);\r\n                this.markerPositions.push({ lat, lng });\r\n            });\r\n        }\r\n        onMapClicked(event) {\r\n            debugger;\r\n            console.table(event.coords);\r\n            this.latitude = event.coords.lat;\r\n            this.longitude = event.coords.lng;\r\n        }\r\n        openInfoWindow(marker, item) {\r\n            debugger;\r\n            this.infoWindowContent = item;\r\n            this.infoWindow.open(marker);\r\n        }\r\n        zoomIn() {\r\n            if (this.zoom < this.maxZoom)\r\n                this.zoom++;\r\n            console.log('Get Zoom', this.map.getZoom());\r\n        }\r\n        zoomOut() {\r\n            if (this.zoom > this.minZoom)\r\n                this.zoom--;\r\n        }\r\n        logCenter() {\r\n            console.log(JSON.stringify(this.map.getCenter()));\r\n        }\r\n        removeGoogleMapScript() {\r\n            // todo: temp workaround for 'You have included the Google Maps API multiple times on this page'\r\n            const keywords = ['maps.googleapis'];\r\n            // Remove google from BOM (window object)\r\n            window.google = undefined;\r\n            // Remove google map scripts from DOM\r\n            const scripts = this.document.head.getElementsByTagName('script');\r\n            for (let i = scripts.length - 1; i >= 0; i--) {\r\n                const scriptSource = scripts[i].getAttribute('src');\r\n                if (scriptSource != null) {\r\n                    if (keywords.filter(item => scriptSource.includes(item)).length) {\r\n                        scripts[i].remove();\r\n                        // scripts[i].parentNode.removeChild(scripts[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    GoogleMapsComponent.ɵfac = function GoogleMapsComponent_Factory(t) { return new (t || GoogleMapsComponent)(core[\"Ub\" /* ɵɵdirectiveInject */](google_maps_loader_service_GoogleMapsLoaderService), core[\"Ub\" /* ɵɵdirectiveInject */](common_data_service[\"a\" /* CommonDataService */]), core[\"Ub\" /* ɵɵdirectiveInject */](data_service[\"a\" /* DataService */]), core[\"Ub\" /* ɵɵdirectiveInject */](common[\"e\" /* DOCUMENT */])); };\r\n    GoogleMapsComponent.ɵcmp = core[\"Ob\" /* ɵɵdefineComponent */]({ type: GoogleMapsComponent, selectors: [[\"app-google-maps-integration\"]], viewQuery: function GoogleMapsComponent_Query(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"Tc\" /* ɵɵviewQuery */](google_maps_component_c0, 1);\r\n                core[\"Tc\" /* ɵɵviewQuery */](google_maps_MapInfoWindow, 1);\r\n                core[\"Tc\" /* ɵɵviewQuery */](google_maps_MapInfoWindow, 1);\r\n            }\r\n            if (rf & 2) {\r\n                let _t;\r\n                core[\"Bc\" /* ɵɵqueryRefresh */](_t = core[\"lc\" /* ɵɵloadQuery */]()) && (ctx.map = _t.first);\r\n                core[\"Bc\" /* ɵɵqueryRefresh */](_t = core[\"lc\" /* ɵɵloadQuery */]()) && (ctx.info = _t.first);\r\n                core[\"Bc\" /* ɵɵqueryRefresh */](_t = core[\"lc\" /* ɵɵloadQuery */]()) && (ctx.infoWindow = _t.first);\r\n            }\r\n        }, features: [core[\"Hb\" /* ɵɵProvidersFeature */]([google_maps_loader_service_GoogleMapsLoaderService])], decls: 8, vars: 3, consts: [[1, \"fade-in\"], [4, \"ngIf\"], [\"height\", \"450px\", \"width\", \"100%\", 3, \"zoom\", \"center\", \"options\"], [\"myGoogleMap\", \"\"], [3, \"label\", \"title\", \"position\", \"options\", \"mapClick\", 4, \"ngFor\", \"ngForOf\"], [\"target\", \"_blank\", 1, \"px-2\", 3, \"href\"], [3, \"label\", \"title\", \"position\", \"options\", \"mapClick\"], [\"marker\", \"mapMarker\"]], template: function GoogleMapsComponent_Template(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"ac\" /* ɵɵelementStart */](0, \"div\", 0);\r\n                core[\"ac\" /* ɵɵelementStart */](1, \"c-card\");\r\n                core[\"ac\" /* ɵɵelementStart */](2, \"c-card-header\");\r\n                core[\"Oc\" /* ɵɵtext */](3, \"Google Maps \");\r\n                core[\"Zb\" /* ɵɵelementEnd */]();\r\n                core[\"ac\" /* ɵɵelementStart */](4, \"c-card-body\");\r\n                core[\"Mc\" /* ɵɵtemplate */](5, GoogleMapsComponent_div_5_Template, 10, 7, \"div\", 1);\r\n                core[\"oc\" /* ɵɵpipe */](6, \"async\");\r\n                core[\"Vb\" /* ɵɵelement */](7, \"div\");\r\n                core[\"Zb\" /* ɵɵelementEnd */]();\r\n                core[\"Zb\" /* ɵɵelementEnd */]();\r\n                core[\"Zb\" /* ɵɵelementEnd */]();\r\n            }\r\n            if (rf & 2) {\r\n                core[\"Ib\" /* ɵɵadvance */](5);\r\n                core[\"tc\" /* ɵɵproperty */](\"ngIf\", core[\"pc\" /* ɵɵpipeBind1 */](6, 1, ctx.gmLoader.apiLoaded));\r\n            }\r\n        }, directives: [coreui_angular[\"qc\" /* ɵt */], coreui_angular[\"uc\" /* ɵx */], coreui_angular[\"rc\" /* ɵu */], common[\"o\" /* NgIf */], google_maps_GoogleMap, common[\"n\" /* NgForOf */], google_maps_MapInfoWindow, google_maps_MapMarker], pipes: [common[\"b\" /* AsyncPipe */]], styles: [\"\"] });\r\n    return GoogleMapsComponent;\r\n})();\r\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/fesm2015/router.js + 7 modules\nvar router = __webpack_require__(\"iInd\");\n\n// CONCATENATED MODULE: ./src/app/views/maps/google-maps-routing.module.ts\n\r\n\r\n\r\n\r\nconst routes = [\r\n    {\r\n        path: '',\r\n        component: google_maps_component_GoogleMapsComponent,\r\n        data: {\r\n            title: 'Google Maps',\r\n        },\r\n    },\r\n];\r\nlet google_maps_routing_module_GoogleMapsRoutingModule = /*@__PURE__*/ (() => {\r\n    class GoogleMapsRoutingModule {\r\n    }\r\n    GoogleMapsRoutingModule.ɵfac = function GoogleMapsRoutingModule_Factory(t) { return new (t || GoogleMapsRoutingModule)(); };\r\n    GoogleMapsRoutingModule.ɵmod = core[\"Sb\" /* ɵɵdefineNgModule */]({ type: GoogleMapsRoutingModule });\r\n    GoogleMapsRoutingModule.ɵinj = core[\"Rb\" /* ɵɵdefineInjector */]({ imports: [[router[\"g\" /* RouterModule */].forChild(routes)], router[\"g\" /* RouterModule */]] });\r\n    return GoogleMapsRoutingModule;\r\n})();\r\n\n// EXTERNAL MODULE: ./node_modules/@coreui/icons-angular/fesm2015/coreui-icons-angular.js\nvar coreui_icons_angular = __webpack_require__(\"rVqu\");\n\n// CONCATENATED MODULE: ./src/app/views/maps/maps.module.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet maps_module_MapsModule = /*@__PURE__*/ (() => {\r\n    class MapsModule {\r\n    }\r\n    MapsModule.ɵfac = function MapsModule_Factory(t) { return new (t || MapsModule)(); };\r\n    MapsModule.ɵmod = core[\"Sb\" /* ɵɵdefineNgModule */]({ type: MapsModule, bootstrap: [google_maps_component_GoogleMapsComponent] });\r\n    MapsModule.ɵinj = core[\"Rb\" /* ɵɵdefineInjector */]({ providers: [], imports: [[\r\n                common[\"c\" /* CommonModule */],\r\n                google_maps_GoogleMapsModule,\r\n                http[\"c\" /* HttpClientModule */],\r\n                http[\"b\" /* HttpClientJsonpModule */],\r\n                google_maps_routing_module_GoogleMapsRoutingModule,\r\n                coreui_angular[\"h\" /* CardModule */],\r\n                coreui_icons_angular[\"b\" /* IconModule */],\r\n                coreui_angular[\"c\" /* BadgeModule */],\r\n            ]] });\r\n    return MapsModule;\r\n})();\r\n\n\n/***/ })\n\n}]);","inputSourceMap":null}