{"version":3,"sources":["webpack:///src/app/views/forms/validation-forms/validation-forms.component.ts","webpack:///src/app/views/forms/validation-forms/validation-forms.component.html","webpack:///src/app/views/forms/validation-forms/validation-forms.service.ts","webpack:///src/app/views/forms/validation-forms/validation-forms-routing.module.ts","webpack:///src/app/views/forms/validation-forms/validation-forms.component.scss"],"names":["confirmPasswordValidator","control","password","get","confirm","value","passwordMismatch","ValidationFormsComponent","fb","vf","submitted","formErrors","errorMessages","createForm","simpleForm","group","firstName","required","lastName","username","minLength","formRules","usernameMin","pattern","nonEmpty","email","passwordMin","passwordPattern","confirmPassword","accept","requiredTrue","validators","controls","reset","status","console","warn","onValidate","alert","template","providers","ValidationFormsService","providedIn","routes","path","component","data","title","ValidationFormsRoutingModule","imports","forChild","exports"],"mappings":"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","file":"default~validation-forms-validation-forms-module~views-business-technical-business-technical-module~~fb80271e-es5.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  FormControl,\r\n  AbstractControl,\r\n  FormGroupName,\r\n} from '@angular/forms';\r\n\r\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\r\nimport { ValidationFormsService } from './validation-forms.service';\r\n\r\n/** passwords must match - custom validator */\r\nexport const confirmPasswordValidator: ValidatorFn = (\r\n  control: FormGroup\r\n): ValidationErrors | null => {\r\n  const password = control.get('password');\r\n  const confirm = control.get('confirmPassword');\r\n  return password && confirm && password.value === confirm.value\r\n    ? null\r\n    : { passwordMismatch: true };\r\n};\r\n\r\n@Component({\r\n  templateUrl: './validation-forms.component.html',\r\n  styleUrls: ['./validation-forms.component.scss'],\r\n  providers: [ValidationFormsService],\r\n})\r\nexport class ValidationFormsComponent {\r\n  simpleForm: FormGroup;\r\n  submitted = false;\r\n  formErrors: any;\r\n\r\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService) {\r\n    this.formErrors = this.vf.errorMessages;\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.simpleForm = this.fb.group(\r\n      {\r\n        firstName: ['', [Validators.required]],\r\n        lastName: ['', [Validators.required]],\r\n        username: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(this.vf.formRules.usernameMin),\r\n            Validators.pattern(this.vf.formRules.nonEmpty),\r\n          ],\r\n        ],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(this.vf.formRules.passwordMin),\r\n            Validators.pattern(this.vf.formRules.passwordPattern),\r\n          ],\r\n        ],\r\n        confirmPassword: ['', [Validators.required]],\r\n        accept: [false, [Validators.requiredTrue]],\r\n      },\r\n      { validators: confirmPasswordValidator }\r\n    );\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.simpleForm.controls;\r\n  }\r\n\r\n  onReset() {\r\n    this.submitted = false;\r\n    this.simpleForm.reset();\r\n  }\r\n\r\n  onValidate() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    return this.simpleForm.status === 'VALID';\r\n  }\r\n\r\n  onSubmit() {\r\n    console.warn(this.onValidate(), this.simpleForm.value);\r\n\r\n    if (this.onValidate()) {\r\n      // TODO: Use EventEmitter with form value\r\n      console.warn(this.simpleForm.value);\r\n      alert('SUCCESS!');\r\n    }\r\n  }\r\n}\r\n","export default \"<div class=\\\"fade-in\\\">\\r\\n  <c-row>\\r\\n    <c-col md=\\\"12\\\">\\r\\n      <c-card>\\r\\n        <c-card-header>\\r\\n          Form Validation\\r\\n        </c-card-header>\\r\\n        <c-card-body>Angular Form Validation\\r\\n          <hr>\\r\\n          <c-row>\\r\\n            <c-col md=\\\"6\\\" >\\r\\n              <h6>Simple Form</h6>\\r\\n              <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                <c-form-group>\\r\\n                  <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">First name</label>\\r\\n                  <input cInput\\r\\n                         id=\\\"firstName\\\"\\r\\n                         formControlName=\\\"firstName\\\"\\r\\n                         placeholder=\\\"First name\\\"\\r\\n                         autocomplete=\\\"given-name\\\"\\r\\n                         required\\r\\n                         [autofocus]=\\\"true\\\"\\r\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.firstName.touched) && f.firstName.invalid, 'is-valid': f.lastName.touched && f.firstName.valid  }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['firstName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['firstName'].errors.required\\\">First Name is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-form-group>\\r\\n                  <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Last name</label>\\r\\n                  <input cInput\\r\\n                         id=\\\"lastName\\\"\\r\\n                         formControlName=\\\"lastName\\\"\\r\\n                         placeholder=\\\"Last name\\\"\\r\\n                         autocomplete=\\\"family-name\\\"\\r\\n                         required\\r\\n                         [ngClass]=\\\"{ 'is-invalid':  (submitted || f.lastName.touched) && f.lastName.invalid, 'is-valid': f.lastName.touched && f.lastName.valid }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['lastName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['lastName'].errors.required\\\">Last Name is required</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-form-group>\\r\\n                  <label class=\\\"col-form-label\\\" for=\\\"username\\\">Username</label>\\r\\n                  <input cInput\\r\\n                         id=\\\"username\\\"\\r\\n                         formControlName=\\\"username\\\"\\r\\n                         placeholder=\\\"Username\\\"\\r\\n                         autocomplete=\\\"username\\\"\\r\\n                         required\\r\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.username.touched) && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['username'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['username'].errors.required\\\">Username is required</div>\\r\\n                    <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}</div>\\r\\n                    <div *ngIf=\\\"f['username'].errors.pattern\\\">{{formErrors.username.pattern}}</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-form-group>\\r\\n                  <label class=\\\"col-form-label\\\" for=\\\"email\\\">Email</label>\\r\\n                  <input cInput\\r\\n                         id=\\\"email\\\"\\r\\n                         type=\\\"email\\\"\\r\\n                         formControlName=\\\"email\\\"\\r\\n                         placeholder=\\\"Email\\\"\\r\\n                         autocomplete=\\\"email\\\"\\r\\n                         required\\r\\n                         [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f['email'].errors.required\\\">Email is required</div>\\r\\n                    <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\r\\n                  </div>\\r\\n                </c-form-group>\\r\\n                <c-row>\\r\\n                  <c-form-group cCol md=\\\"6\\\" >\\r\\n                    <label class=\\\"col-form-label\\\" for=\\\"password\\\">Password</label>\\r\\n                    <input cInput\\r\\n                           id=\\\"password\\\"\\r\\n                           type=\\\"password\\\"\\r\\n                           formControlName=\\\"password\\\"\\r\\n                           placeholder=\\\"Password\\\"\\r\\n                           autocomplete=\\\"new-password\\\"\\r\\n                           required\\r\\n                           [ngClass]=\\\"{ 'is-invalid': (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\r\\n                      <div *ngIf=\\\"f['password'].errors.minlength\\\">{{formErrors.password.minLength}}</div>\\r\\n                      <div *ngIf=\\\"f['password'].errors.pattern\\\">{{formErrors.password.pattern}}</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                  <c-form-group cCol md=\\\"6\\\" >\\r\\n                    <label class=\\\"col-form-label\\\" for=\\\"confirmPassword\\\">Confirm password</label>\\r\\n                    <input cInput\\r\\n                           id=\\\"confirmPassword\\\"\\r\\n                           type=\\\"password\\\"\\r\\n                           formControlName=\\\"confirmPassword\\\"\\r\\n                           placeholder=\\\"Confirm password\\\"\\r\\n                           autocomplete=\\\"new-password\\\"\\r\\n                           required\\r\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && simpleForm.errors, 'is-valid': f.confirmPassword.touched && !simpleForm.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && simpleForm.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"simpleForm.errors['passwordMismatch']\\\">{{formErrors.confirmPassword.passwordMismatch}}</div>\\r\\n                    </div>\\r\\n                  </c-form-group>\\r\\n                </c-row>\\r\\n                <c-form-group>\\r\\n                  <c-form-check variant=\\\"checkbox\\\" custom>\\r\\n                    <input cInput custom\\r\\n                           type=\\\"checkbox\\\"\\r\\n                           id=\\\"accept\\\"\\r\\n                           formControlName=\\\"accept\\\"\\r\\n                           required\\r\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && f.accept.invalid, 'is-valid': f.accept.valid }\\\" />\\r\\n                    <label cLabel custom for=\\\"accept\\\">I accept the terms of use</label>\\r\\n                    <c-form-feedback *ngIf=\\\"submitted && f['accept'].invalid\\\" [valid]=\\\"false\\\">\\r\\n                      <div *ngIf=\\\"f['accept'].errors.required\\\">You have to accept our Terms and Conditions</div>\\r\\n                    </c-form-feedback>\\r\\n                  </c-form-check>\\r\\n                </c-form-group>\\r\\n                <c-form-group>\\r\\n                  <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\" [tabindex]=\\\"'0'\\\">Submit</button>\\r\\n                  <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                  <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Reset</button>\\r\\n                </c-form-group>\\r\\n              </form>\\r\\n            </c-col>\\r\\n            <c-col md=\\\"6\\\">\\r\\n              <c-card class=\\\"bg-dark\\\" [ngClass]=\\\"{ 'bg-info' : simpleForm.valid }\\\">\\r\\n                <c-card-body>\\r\\n                  <pre class=\\\"text-white\\\">Value: <code>{{ simpleForm.value | json }}</code></pre>\\r\\n                  <ul>\\r\\n                    <li>\\r\\n                      Status: {{ simpleForm.status }}\\r\\n                    </li>\\r\\n                    <li>\\r\\n                      Errors: {{ simpleForm.errors | json }}\\r\\n                    </li>\\r\\n                    <li>\\r\\n                      Valid: {{ simpleForm.valid }}\\r\\n                    </li>\\r\\n                    <li>\\r\\n                      Pristine: {{ simpleForm.pristine }}\\r\\n                    </li>\\r\\n                  </ul>\\r\\n                </c-card-body>\\r\\n              </c-card>\\r\\n             </c-col>\\r\\n          </c-row>\\r\\n        </c-card-body>\\r\\n      </c-card>\\r\\n    </c-col>\\r\\n  </c-row>\\r\\n</div>\\r\\n\";","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidationFormsService {\r\n\r\n  errorMessages: any;\r\n\r\n  formRules = {\r\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\r\n    usernameMin: 5,\r\n    passwordMin: 6,\r\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\r\n  };\r\n\r\n  formErrors = {\r\n    firstName: '',\r\n    lastName: '',\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    accept: false,\r\n  };\r\n\r\n  constructor() {\r\n    this.errorMessages = {\r\n      firstName: {\r\n        required: 'First name is required',\r\n      },\r\n      lastName: {\r\n        required: 'Last name is required',\r\n      },\r\n      username: {\r\n        required: 'Username is required',\r\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`,\r\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\r\n      },\r\n      email: {\r\n        required: 'required',\r\n        email: 'Invalid email address',\r\n      },\r\n      password: {\r\n        required: 'Password is required',\r\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\r\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\r\n      },\r\n      confirmPassword: {\r\n        required: 'Password confirmation is required',\r\n        passwordMismatch: 'Passwords must match'\r\n      },\r\n      accept: {\r\n        requiredTrue: 'You have to accept our Terms and Conditions'\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ValidationFormsComponent } from './validation-forms.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ValidationFormsComponent,\r\n    data: {\r\n      title: 'Form Validation',\r\n    },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ValidationFormsRoutingModule {}\r\n","export default \".btn:disabled {\\n  cursor: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcdmFsaWRhdGlvbi1mb3Jtcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7QUFDRiIsImZpbGUiOiJ2YWxpZGF0aW9uLWZvcm1zLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ0bjpkaXNhYmxlZCB7XHJcbiAgY3Vyc29yOiBhdXRvO1xyXG59XHJcbiJdfQ== */\";"]}