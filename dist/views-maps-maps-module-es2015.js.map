{"version":3,"sources":["./src/app/views/maps/google-maps-loader.service.ts","./src/app/views/maps/google-maps-routing.module.ts","./src/app/views/maps/maps.module.ts","./node_modules/@angular/google-maps/fesm2015/google-maps.js","./src/app/views/maps/google-maps.component.scss","./src/app/views/maps/google-maps.component.html","./src/app/views/maps/google-maps.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA2C;AACO;AACD;AACX;IAKzB,uBAAuB,SAAvB,uBAAuB;IAGlC,YACE,UAAsB;QAEtB,sGAAsG;QACtG,yDAAyD;QACzD,0DAA0D;QAC1D,MAAM,MAAM,GAAG,yCAAyC,CAAC,CAAC,yCAAyC;QACnG,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,+CAA+C,MAAM,EAAE,EAAE,UAAU,CAAC;aACnG,IAAI,CACH,0DAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EACf,iEAAU,CAAC,GAAG,EAAE,CAAC,+CAAE,CAAC,KAAK,CAAC,CAAC,CAC5B,CAAC;IACN,CAAC;CACF;;YAvBQ,+DAAU;;AAON,uBAAuB;IAHnC,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;mFAKc,+DAAU;GAJb,uBAAuB,CAgBnC;AAhBmC;;;;;;;;;;;;;;;;;;;;ACRK;AACc;AAEO;AAE9D,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,0EAAmB;QAC9B,IAAI,EAAE;YACJ,KAAK,EAAE,aAAa;SACrB;KACF;CACF,CAAC;IAMW,uBAAuB,SAAvB,uBAAuB;CAAG;AAA1B,uBAAuB;IAJnC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACnBK;AACM;AACS;AACuB;AAEjB;AACS;AAEb;AACP;IAkBtC,UAAU,SAAV,UAAU;CAAG;AAAb,UAAU;IAhBtB,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,qEAAgB;YAChB,qEAAgB;YAChB,0EAAqB;YACrB,mFAAuB;YACvB,0DAAU;YACV,gEAAU;YACV,2DAAW;SACZ;QACD,SAAS,EAAE,EAAE;QACb,YAAY,EAAE,CAAC,0EAAmB,CAAC;QACnC,OAAO,EAAE,CAAC,0EAAmB,CAAC;QAC9B,SAAS,EAAE,CAAC,0EAAmB,CAAC;KACjC,CAAC;GACW,UAAU,CAAG;AAAH;;;;;;;;;;;;;AC3BvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoL;AAChI;AACuB;AACV;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oDAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gEAAS;AAChD,mCAAmC,+CAAU;AAC7C;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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A;AACA,oDAAoD,MAAM;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,eAAe;AACf,iBAAiB;AACjB;AACA,sDAAsD,gCAAgC,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AACpK,oBAAoB,+DAAwB,EAAE,kFAAkF;AAChI;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,QAAQ,EAAE;;AAExF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,+DAA+D;AAC/H,yBAAyB,+DAAwB,EAAE,4GAA4G,wEAAiC,GAAG;AACnM,qDAAqD,mEAA4B;AACjF,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe,GAAG;AAC9C,2BAA2B,oDAAe;AAC1C,2BAA2B,oDAAe;AAC1C,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa;AAC5B,kBAAkB,0DAAG;AACrB,kEAAkE,aAAa,2FAA2F;AAC1K;AACA,SAAS;AACT;AACA;AACA,2BAA2B,gEAAS;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B,gEAAS;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B,gEAAS;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,6BAA6B,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AAC3J,iBAAiB,+DAAwB,EAAE,wDAAwD,yDAAyD,YAAY,ibAAib,2BAA2B;AACpnB;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,cAAc,OAAO,mDAAK,EAAE;AAC5B,cAAc,OAAO,mDAAK,EAAE;AAC5B,qBAAqB,OAAO,oDAAM,EAAE;AACpC,mBAAmB,OAAO,oDAAM,EAAE;AAClC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,kBAAkB,OAAO,oDAAM,EAAE;AACjC,qBAAqB,OAAO,oDAAM,EAAE;AACpC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,qBAAqB,OAAO,oDAAM,EAAE;AACpC,qBAAqB,OAAO,oDAAM,EAAE;AACpC,wBAAwB,OAAO,oDAAM,EAAE;AACvC;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AACjF,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe;AAC3C,wBAAwB,oDAAe;AACvC,2BAA2B,oDAAe;AAC1C,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gEAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEAAS;AACpC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,gEAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oCAAoC,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AAChL,wBAAwB,+DAAwB,EAAE,uEAAuE,2EAA2E,YAAY,mDAAmD,kCAAkC;AACrS;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,WAAW,OAAO,mDAAK,EAAE;AACzB,cAAc,OAAO,mDAAK,EAAE;AAC5B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,oDAAM,EAAE;AAC/B,mBAAmB,OAAO,oDAAM,EAAE;AAClC;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AACjF,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe,GAAG;AAC9C,6BAA6B,oDAAe;AAC5C,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa,uCAAuC,0DAAG;AACtE,kEAAkE,aAAa,kFAAkF;AACjK;AACA,SAAS;AACT;AACA;AACA,2BAA2B,gEAAS;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,gEAAS;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,aAAa,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,oDAAa,GAAG;AACpN,qBAAqB,+DAAwB,EAAE,oGAAoG,2CAA2C,YAAY,uJAAuJ,+BAA+B;AAChY;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,kBAAkB,OAAO,oDAAM,EAAE;AACjC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,gBAAgB,OAAO,oDAAM,EAAE;AAC/B,uBAAuB,OAAO,oDAAM,EAAE;AACtC,qBAAqB,OAAO,oDAAM,EAAE;AACpC;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,wDAAiB,EAAE,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AAC9G,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe,GAAG;AAC9C,wBAAwB,oDAAe;AACvC,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mQAAmQ;AAClmCAAmC,gEAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AACtL,0BAA0B,+DAAwB,EAAE,iJAAiJ;AACrM,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,ueAAue,YAAY,qEAAqE,+CAA+C,kEAA2B,wGAAwG;AAC5vB,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,eAAe,OAAO,mDAAK,EAAE;AAC7B,0BAA0B,OAAO,mDAAK,EAAE;AACxC,cAAc,OAAO,mDAAK,EAAE;AAC5B,aAAa,OAAO,mDAAK,EAAE;AAC3B,cAAc,OAAO,mDAAK,EAAE;AAC5B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,qBAAqB,OAAO,oDAAM,EAAE;AACpC,gBAAgB,OAAO,6DAAe,qBAAqB,oBAAoB,IAAI;AACnF;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,+BAA+B,+DAAiB;AAChD,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AACjF,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,6DAAe;AACjC,+BAA+B,oBAAoB;AACnD,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe,GAAG;AAC9C,0BAA0B,oDAAe;AACzC,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa,oCAAoC,0DAAG;AACnE,kEAAkE,aAAa,gCAAgC;AAC/G;AACA,SAAS;AACT;AACA;AACA,2BAA2B,gEAAS;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,gEAAS;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8BAA8B,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AAC9J,kBAAkB,+DAAwB,EAAE,0DAA0D,qCAAqC,YAAY,uYAAuY,4BAA4B;AAC1jB;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,aAAa,OAAO,mDAAK,EAAE;AAC3B,oBAAoB,OAAO,oDAAM,EAAE;AACnC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,mBAAmB,OAAO,oDAAM,EAAE;AAClC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,yBAAyB,OAAO,oDAAM,EAAE;AACxC;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AACjF,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe,GAAG;AAC9C,yBAAyB,oDAAe;AACxC,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa,mCAAmC,0DAAG;AAClE,kEAAkE,aAAa,6BAA6B;AAC5G;AACA,SAAS;AACT;AACA;AACA,2BAA2B,gEAAS;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,gEAAS;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AACjK,mBAAmB,+DAAwB,EAAE,4DAA4D,mCAAmC,YAAY,6ZAA6Z,6BAA6B;AACllB;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,YAAY,OAAO,mDAAK,EAAE;AAC1B,qBAAqB,OAAO,oDAAM,EAAE;AACpC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,oBAAoB,OAAO,oDAAM,EAAE;AACnC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,yBAAyB,OAAO,oDAAM,EAAE;AACxC,yBAAyB,OAAO,oDAAM,EAAE;AACxC,yBAAyB,OAAO,oDAAM,EAAE;AACxC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,yBAAyB,OAAO,oDAAM,EAAE;AACxC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,0BAA0B,OAAO,oDAAM,EAAE;AACzC;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AACjF,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe,GAAG;AAC9C,2BAA2B,oDAAe;AAC1C,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa,qCAAqC,0DAAG;AACpE,kEAAkE,aAAa,mCAAmC;AAClH;AACA,SAAS;AACT;AACA;AACA,2BAA2B,gEAAS;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B,gEAAS;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AACpK,oBAAoB,+DAAwB,EAAE,8DAA8D,uCAAuC,YAAY,mdAAmd,8BAA8B;AAChpB;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,cAAc,OAAO,mDAAK,EAAE;AAC5B,qBAAqB,OAAO,oDAAM,EAAE;AACpC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,yBAAyB,OAAO,oDAAM,EAAE;AACxC,qBAAqB,OAAO,oDAAM,EAAE;AACpC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,0BAA0B,OAAO,oDAAM,EAAE;AACzC,0BAA0B,OAAO,oDAAM,EAAE;AACzC,0BAA0B,OAAO,oDAAM,EAAE;AACzC,yBAAyB,OAAO,oDAAM,EAAE;AACxC,0BAA0B,OAAO,oDAAM,EAAE;AACzC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,2BAA2B,OAAO,oDAAM,EAAE;AAC1C;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AACjF,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAe;AAC/C,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0DAAG;AACzC,qCAAqC;AACrC;AACA,SAAS;AACT;AACA;AACA,oCAAoC,gEAAS;AAC7C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,aAAa,+DAAwB,CAAC,oDAAa,GAAG;AAC7K,uBAAuB,+DAAwB,EAAE,qEAAqE,6BAA6B,iCAAiC;AACpL;AACA,KAAK,kBAAkB;AACvB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,kBAAkB,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AACjF,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,2DAA2D;AACvH,uBAAuB,+DAAwB,EAAE,sGAAsG,wEAAiC,GAAG;AAC3L,mDAAmD,mEAA4B;AAC/E,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,wBAAwB,8DAAuB,EAAE,yBAAyB;AAC1E,wBAAwB,8DAAuB,GAAG;AAClD,cAAc,oDAAoD,gEAAyB,oBAAoB,sbAAsb,EAAE,EAAE;AACziB,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,sDAAQ;AACtB;AACA;A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","file":"views-maps-maps-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GoogleMapsLoaderService {\r\n  apiLoaded: Observable<boolean>;\r\n\r\n  constructor(\r\n    httpClient: HttpClient\r\n  ) {\r\n    // To use the Google Maps JavaScript API, you must register your app project on the Google API Console\r\n    // and get a Google API key which you can add to your app\r\n    // see: https://developers.google.com/maps/gmp-get-started\r\n    const apiKey = 'AIzaSyASyYRBZmULmrmw_P9kgr7_266OhFNinPA'; // CoreUI demo Google API key, to replace\r\n    this.apiLoaded = httpClient.jsonp(`https://maps.googleapis.com/maps/api/js?key=${apiKey}`, 'callback')\r\n      .pipe(\r\n        map(() => true),\r\n        catchError(() => of(false)),\r\n      );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { GoogleMapsComponent } from './google-maps.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: GoogleMapsComponent,\r\n    data: {\r\n      title: 'Google Maps',\r\n    },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class GoogleMapsRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GoogleMapsModule } from '@angular/google-maps';\r\nimport { HttpClientModule, HttpClientJsonpModule } from '@angular/common/http';\r\n\r\nimport { GoogleMapsComponent } from './google-maps.component';\r\nimport { GoogleMapsRoutingModule } from './google-maps-routing.module';\r\n\r\nimport { BadgeModule, CardModule } from '@coreui/angular';\r\nimport { IconModule } from '@coreui/icons-angular';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    GoogleMapsModule,\r\n    HttpClientModule,\r\n    HttpClientJsonpModule,\r\n    GoogleMapsRoutingModule,\r\n    CardModule,\r\n    IconModule,\r\n    BadgeModule,\r\n  ],\r\n  providers: [],\r\n  declarations: [GoogleMapsComponent],\r\n  exports: [GoogleMapsComponent],\r\n  bootstrap: [GoogleMapsComponent],\r\n})\r\nexport class MapsModule {}\r\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, Directive, ContentChildren, NgModule } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { BehaviorSubject, Observable, Subject, combineLatest } from 'rxjs';\r\nimport { switchMap, take, map, takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\r\nimport * as ɵngcc0 from '@angular/core';\r\n\r\nconst _c0 = [\"*\"];\r\nclass MapEventManager {\r\n    constructor(_ngZone) {\r\n        this._ngZone = _ngZone;\r\n        /** Pending listeners that were added before the target was set. */\r\n        this._pending = [];\r\n        this._listeners = [];\r\n        this._targetStream = new BehaviorSubject(undefined);\r\n    }\r\n    /** Clears all currently-registered event listeners. */\r\n    _clearListeners() {\r\n        for (const listener of this._listeners) {\r\n            listener.remove();\r\n        }\r\n        this._listeners = [];\r\n    }\r\n    /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\r\n    getLazyEmitter(name) {\r\n        return this._targetStream.pipe(switchMap(target => {\r\n            const observable = new Observable(observer => {\r\n                // If the target hasn't been initialized yet, cache the observer so it can be added later.\r\n                if (!target) {\r\n                    this._pending.push({ observable, observer });\r\n                    return undefined;\r\n                }\r\n                const listener = target.addListener(name, (event) => {\r\n                    this._ngZone.run(() => observer.next(event));\r\n                });\r\n                this._listeners.push(listener);\r\n                return () => listener.remove();\r\n            });\r\n            return observable;\r\n        }));\r\n    }\r\n    /** Sets the current target that the manager should bind events to. */\r\n    setTarget(target) {\r\n        const currentTarget = this._targetStream.value;\r\n        if (target === currentTarget) {\r\n            return;\r\n        }\r\n        // Clear the listeners from the pre-existing target.\r\n        if (currentTarget) {\r\n            this._clearListeners();\r\n            this._pending = [];\r\n        }\r\n        this._targetStream.next(target);\r\n        // Add the listeners that were bound before the map was initialized.\r\n        this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\r\n        this._pending = [];\r\n    }\r\n    /** Destroys the manager and clears the event listeners. */\r\n    destroy() {\r\n        this._clearListeners();\r\n        this._pending = [];\r\n        this._targetStream.complete();\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** default options set to the Googleplex */\r\nconst DEFAULT_OPTIONS = {\r\n    center: { lat: 37.421995, lng: -122.084092 },\r\n    zoom: 17,\r\n    // Note: the type conversion here isn't necessary for our CI, but it resolves a g3 failure.\r\n    mapTypeId: 'roadmap'\r\n};\r\n/** Arbitrary default height for the map element */\r\nconst DEFAULT_HEIGHT = '500px';\r\n/** Arbitrary default width for the map element */\r\nconst DEFAULT_WIDTH = '500px';\r\n/**\r\n * Angular component that renders a Google Map via the Google Maps JavaScript\r\n * API.\r\n * @see https://developers.google.com/maps/documentation/javascript/reference/\r\n */\r\nclass GoogleMap {\r\n    constructor(_elementRef, _ngZone, platformId) {\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\r\n        this.height = DEFAULT_HEIGHT;\r\n        /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\r\n        this.width = DEFAULT_WIDTH;\r\n        this._options = DEFAULT_OPTIONS;\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\r\n         */\r\n        this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\r\n         */\r\n        this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\r\n         */\r\n        this.mapClick = this._eventManager\r\n            .getLazyEmitter('click');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\r\n         */\r\n        this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\r\n         */\r\n        this.mapDrag = this._eventManager.getLazyEmitter('drag');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\r\n         */\r\n        this.mapDragend = this._eventManager.getLazyEmitter('dragend');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\r\n         */\r\n        this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\r\n         */\r\n        this.headingChanged = this._eventManager.getLazyEmitter('heading_changed');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\r\n         */\r\n        this.idle = this._eventManager.getLazyEmitter('idle');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\r\n         */\r\n        this.maptypeidChanged = this._eventManager.getLazyEmitter('maptypeid_changed');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\r\n         */\r\n        this.mapMousemove = this._eventManager.getLazyEmitter('mousemove');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\r\n         */\r\n        this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\r\n         */\r\n        this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\r\n         */\r\n        this.projectionChanged = this._eventManager.getLazyEmitter('projection_changed');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\r\n         */\r\n        this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\r\n         */\r\n        this.tilesloaded = this._eventManager.getLazyEmitter('tilesloaded');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\r\n         */\r\n        this.tiltChanged = this._eventManager.getLazyEmitter('tilt_changed');\r\n        /**\r\n         * See\r\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\r\n         */\r\n        this.zoomChanged = this._eventManager.getLazyEmitter('zoom_changed');\r\n        this._isBrowser = isPlatformBrowser(platformId);\r\n        if (this._isBrowser) {\r\n            const googleMapsWindow = window;\r\n            if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw Error('Namespace google not found, cannot construct embedded google ' +\r\n                    'map. Please install the Google Maps JavaScript API: ' +\r\n                    'https://developers.google.com/maps/documentation/javascript/' +\r\n                    'tutorial#Loading_the_Maps_API');\r\n            }\r\n        }\r\n    }\r\n    set center(center) {\r\n        this._center = center;\r\n    }\r\n    set zoom(zoom) {\r\n        this._zoom = zoom;\r\n    }\r\n    set options(options) {\r\n        this._options = options || DEFAULT_OPTIONS;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['height'] || changes['width']) {\r\n            this._setSize();\r\n        }\r\n        const googleMap = this.googleMap;\r\n        if (googleMap) {\r\n            if (changes['options']) {\r\n                googleMap.setOptions(this._combineOptions());\r\n            }\r\n            if (changes['center'] && this._center) {\r\n                googleMap.setCenter(this._center);\r\n            }\r\n            // Note that the zoom can be zero.\r\n            if (changes['zoom'] && this._zoom != null) {\r\n                googleMap.setZoom(this._zoom);\r\n            }\r\n            if (changes['mapTypeId'] && this.mapTypeId) {\r\n                googleMap.setMapTypeId(this.mapTypeId);\r\n            }\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        // It should be a noop during server-side rendering.\r\n        if (this._isBrowser) {\r\n            this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');\r\n            this._setSize();\r\n            // Create the object outside the zone so its events don't trigger change detection.\r\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n            // user has subscribed to.\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this.googleMap = new google.maps.Map(this._mapEl, this._combineOptions());\r\n            });\r\n            this._eventManager.setTarget(this.googleMap);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\r\n     */\r\n    fitBounds(bounds, padding) {\r\n        this._assertInitialized();\r\n        this.googleMap.fitBounds(bounds, padding);\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\r\n     */\r\n    panBy(x, y) {\r\n        this._assertInitialized();\r\n        this.googleMap.panBy(x, y);\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\r\n     */\r\n    panTo(latLng) {\r\n        this._assertInitialized();\r\n        this.googleMap.panTo(latLng);\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\r\n     */\r\n    panToBounds(latLngBounds, padding) {\r\n        this._assertInitialized();\r\n        this.googleMap.panToBounds(latLngBounds, padding);\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\r\n     */\r\n    getBounds() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getBounds() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\r\n     */\r\n    getCenter() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getCenter();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\r\n     */\r\n    getClickableIcons() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getClickableIcons();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\r\n     */\r\n    getHeading() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getHeading();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\r\n     */\r\n    getMapTypeId() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getMapTypeId();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\r\n     */\r\n    getProjection() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getProjection();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\r\n     */\r\n    getStreetView() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getStreetView();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\r\n     */\r\n    getTilt() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getTilt();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\r\n     */\r\n    getZoom() {\r\n        this._assertInitialized();\r\n        return this.googleMap.getZoom();\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\r\n     */\r\n    get controls() {\r\n        this._assertInitialized();\r\n        return this.googleMap.controls;\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\r\n     */\r\n    get data() {\r\n        this._assertInitialized();\r\n        return this.googleMap.data;\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\r\n     */\r\n    get mapTypes() {\r\n        this._assertInitialized();\r\n        return this.googleMap.mapTypes;\r\n    }\r\n    /**\r\n     * See\r\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\r\n     */\r\n    get overlayMapTypes() {\r\n        this._assertInitialized();\r\n        return this.googleMap.overlayMapTypes;\r\n    }\r\n    _setSize() {\r\n        if (this._mapEl) {\r\n            const styles = this._mapEl.style;\r\n            styles.height =\r\n                this.height === null ? '' : (coerceCssPixelValue(this.height) || DEFAULT_HEIGHT);\r\n            styles.width = this.width === null ? '' : (coerceCssPixelValue(this.width) || DEFAULT_WIDTH);\r\n        }\r\n    }\r\n    /** Combines the center and zoom and the other map options into a single object */\r\n    _combineOptions() {\r\n        var _a, _b;\r\n        const options = this._options || {};\r\n        return Object.assign(Object.assign({}, options), { \r\n            // It's important that we set **some** kind of `center` and `zoom`, otherwise\r\n            // Google Maps will render a blank rectangle which looks broken.\r\n            center: this._center || options.center || DEFAULT_OPTIONS.center, zoom: (_b = (_a = this._zoom) !== null && _a !== void 0 ? _a : options.zoom) !== null && _b !== void 0 ? _b : DEFAULT_OPTIONS.zoom, \r\n            // Passing in an undefined `mapTypeId` seems to break tile loading\r\n            // so make sure that we have some kind of default (see #22082).\r\n            mapTypeId: this.mapTypeId || options.mapTypeId || DEFAULT_OPTIONS.mapTypeId });\r\n    }\r\n    /** Asserts that the map has been initialized. */\r\n    _assertInitialized() {\r\n        if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                'Please wait for the API to load before trying to interact with it.');\r\n        }\r\n    }\r\n}\r\nGoogleMap.ɵfac = function GoogleMap_Factory(t) { return new (t || GoogleMap)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\r\nGoogleMap.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GoogleMap, selectors: [[\"google-map\"]], inputs: { height: \"height\", width: \"width\", center: \"center\", zoom: \"zoom\", options: \"options\", mapTypeId: \"mapTypeId\" }, outputs: { boundsChanged: \"boundsChanged\", centerChanged: \"centerChanged\", mapClick: \"mapClick\", mapDblclick: \"mapDblclick\", mapDrag: \"mapDrag\", mapDragend: \"mapDragend\", mapDragstart: \"mapDragstart\", headingChanged: \"headingChanged\", idle: \"idle\", maptypeidChanged: \"maptypeidChanged\", mapMousemove: \"mapMousemove\", mapMouseout: \"mapMouseout\", mapMouseover: \"mapMouseover\", projectionChanged: \"projectionChanged\", mapRightclick: \"mapRightclick\", tilesloaded: \"tilesloaded\", tiltChanged: \"tiltChanged\", zoomChanged: \"zoomChanged\" }, exportAs: [\"googleMap\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"map-container\"]], template: function GoogleMap_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\r\n        ɵngcc0.ɵɵprojection(1);\r\n    } }, encapsulation: 2, changeDetection: 0 });\r\nGoogleMap.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\nGoogleMap.propDecorators = {\r\n    height: [{ type: Input }],\r\n    width: [{ type: Input }],\r\n    mapTypeId: [{ type: Input }],\r\n    center: [{ type: Input }],\r\n    zoom: [{ type: Input }],\r\n    options: [{ type: Input }],\r\n    boundsChanged: [{ type: Output }],\r\n    centerChanged: [{ type: Output }],\r\n    mapClick: [{ type: Output }],\r\n    mapDblclick: [{ type: Output }],\r\n    mapDrag: [{ type: Output }],\r\n    mapDragend: [{ type: Output }],\r\n    mapDragstart: [{ type: Output }],\r\n    headingChanged: [{ type: Output }],\r\n    idle: [{ type: Output }],\r\n    maptypeidChanged: [{ type: Output }],\r\n    mapMousemove: [{ type: Output }],\r\n    mapMouseout: [{ type: Output }],\r\n    mapMouseover: [{ type: Output }],\r\n    projectionChanged: [{ type: Output }],\r\n    mapRightclick: [{ type: Output }],\r\n    tilesloaded: [{ type: Output }],\r\n    tiltChanged: [{ type: Output }],\r\n    zoomChanged: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GoogleMap, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'google-map',\r\n                exportAs: 'googleMap',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                template: '<div class=\"map-container\"></div><ng-content></ng-content>',\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }]; }, { height: [{\r\n            type: Input\r\n        }], width: [{\r\n            type: Input\r\n        }], boundsChanged: [{\r\n            type: Output\r\n        }], centerChanged: [{\r\n            type: Output\r\n        }], mapClick: [{\r\n            type: Output\r\n        }], mapDblclick: [{\r\n            type: Output\r\n        }], mapDrag: [{\r\n            type: Output\r\n        }], mapDragend: [{\r\n            type: Output\r\n        }], mapDragstart: [{\r\n            type: Output\r\n        }], headingChanged: [{\r\n            type: Output\r\n        }], idle: [{\r\n            type: Output\r\n        }], maptypeidChanged: [{\r\n            type: Output\r\n        }], mapMousemove: [{\r\n            type: Output\r\n        }], mapMouseout: [{\r\n            type: Output\r\n        }], mapMouseover: [{\r\n            type: Output\r\n        }], projectionChanged: [{\r\n            type: Output\r\n        }], mapRightclick: [{\r\n            type: Output\r\n        }], tilesloaded: [{\r\n            type: Output\r\n        }], tiltChanged: [{\r\n            type: Output\r\n        }], zoomChanged: [{\r\n            type: Output\r\n        }], center: [{\r\n            type: Input\r\n        }], zoom: [{\r\n            type: Input\r\n        }], options: [{\r\n            type: Input\r\n        }], mapTypeId: [{\r\n            type: Input\r\n        }] }); })();\r\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\r\n/** Coerces a value to a CSS pixel value. */\r\nfunction coerceCssPixelValue(value) {\r\n    if (value == null) {\r\n        return '';\r\n    }\r\n    return cssUnitsPattern.test(value) ? value : `${value}px`;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MapBaseLayer {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this._initializeObject();\r\n            });\r\n            this._assertInitialized();\r\n            this._setMap();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._unsetMap();\r\n    }\r\n    _assertInitialized() {\r\n        if (!this._map.googleMap) {\r\n            throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                'Please wait for the API to load before trying to interact with it.');\r\n        }\r\n    }\r\n    _initializeObject() { }\r\n    _setMap() { }\r\n    _unsetMap() { }\r\n}\r\nMapBaseLayer.ɵfac = function MapBaseLayer_Factory(t) { return new (t || MapBaseLayer)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapBaseLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapBaseLayer, selectors: [[\"map-base-layer\"]], exportAs: [\"mapBaseLayer\"] });\r\nMapBaseLayer.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapBaseLayer, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-base-layer',\r\n                exportAs: 'mapBaseLayer'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Bicycling Layer via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\r\n */\r\nclass MapBicyclingLayer extends MapBaseLayer {\r\n    _initializeObject() {\r\n        this.bicyclingLayer = new google.maps.BicyclingLayer();\r\n    }\r\n    _setMap() {\r\n        this._assertLayerInitialized();\r\n        this.bicyclingLayer.setMap(this._map.googleMap);\r\n    }\r\n    _unsetMap() {\r\n        if (this.bicyclingLayer) {\r\n            this.bicyclingLayer.setMap(null);\r\n        }\r\n    }\r\n    _assertLayerInitialized() {\r\n        if (!this.bicyclingLayer) {\r\n            throw Error('Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' +\r\n                'Please wait for the Transit Layer to load before trying to interact with it.');\r\n        }\r\n    }\r\n}\r\nMapBicyclingLayer.ɵfac = function MapBicyclingLayer_Factory(t) { return ɵMapBicyclingLayer_BaseFactory(t || MapBicyclingLayer); };\r\nMapBicyclingLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapBicyclingLayer, selectors: [[\"map-bicycling-layer\"]], exportAs: [\"mapBicyclingLayer\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nconst ɵMapBicyclingLayer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MapBicyclingLayer);\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapBicyclingLayer, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-bicycling-layer',\r\n                exportAs: 'mapBicyclingLayer'\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\r\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\r\n */\r\nclass MapCircle {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._options = new BehaviorSubject({});\r\n        this._center = new BehaviorSubject(undefined);\r\n        this._radius = new BehaviorSubject(undefined);\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\r\n         */\r\n        this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\r\n         */\r\n        this.circleClick = this._eventManager.getLazyEmitter('click');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\r\n         */\r\n        this.circleDblclick = this._eventManager.getLazyEmitter('dblclick');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\r\n         */\r\n        this.circleDrag = this._eventManager.getLazyEmitter('drag');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\r\n         */\r\n        this.circleDragend = this._eventManager.getLazyEmitter('dragend');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\r\n         */\r\n        this.circleDragstart = this._eventManager.getLazyEmitter('dragstart');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\r\n         */\r\n        this.circleMousedown = this._eventManager.getLazyEmitter('mousedown');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\r\n         */\r\n        this.circleMousemove = this._eventManager.getLazyEmitter('mousemove');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\r\n         */\r\n        this.circleMouseout = this._eventManager.getLazyEmitter('mouseout');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\r\n         */\r\n        this.circleMouseover = this._eventManager.getLazyEmitter('mouseover');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\r\n         */\r\n        this.circleMouseup = this._eventManager.getLazyEmitter('mouseup');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\r\n         */\r\n        this.radiusChanged = this._eventManager.getLazyEmitter('radius_changed');\r\n        /**\r\n         * @see\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\r\n         */\r\n        this.circleRightclick = this._eventManager.getLazyEmitter('rightclick');\r\n    }\r\n    set options(options) {\r\n        this._options.next(options || {});\r\n    }\r\n    set center(center) {\r\n        this._center.next(center);\r\n    }\r\n    set radius(radius) {\r\n        this._radius.next(radius);\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            this._combineOptions().pipe(take(1)).subscribe(options => {\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n                // user has subscribed to.\r\n                this._ngZone.runOutsideAngular(() => {\r\n                    this.circle = new google.maps.Circle(options);\r\n                });\r\n                this._assertInitialized();\r\n                this.circle.setMap(this._map.googleMap);\r\n                this._eventManager.setTarget(this.circle);\r\n            });\r\n            this._watchForOptionsChanges();\r\n            this._watchForCenterChanges();\r\n            this._watchForRadiusChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        if (this.circle) {\r\n            this.circle.setMap(null);\r\n        }\r\n    }\r\n    /**\r\n     * @see\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\r\n     */\r\n    getBounds() {\r\n        this._assertInitialized();\r\n        return this.circle.getBounds();\r\n    }\r\n    /**\r\n     * @see\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\r\n     */\r\n    getCenter() {\r\n        this._assertInitialized();\r\n        return this.circle.getCenter();\r\n    }\r\n    /**\r\n     * @see\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\r\n     */\r\n    getDraggable() {\r\n        this._assertInitialized();\r\n        return this.circle.getDraggable();\r\n    }\r\n    /**\r\n     * @see\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\r\n     */\r\n    getEditable() {\r\n        this._assertInitialized();\r\n        return this.circle.getEditable();\r\n    }\r\n    /**\r\n     * @see\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\r\n     */\r\n    getRadius() {\r\n        this._assertInitialized();\r\n        return this.circle.getRadius();\r\n    }\r\n    /**\r\n     * @see\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\r\n     */\r\n    getVisible() {\r\n        this._assertInitialized();\r\n        return this.circle.getVisible();\r\n    }\r\n    _combineOptions() {\r\n        return combineLatest([this._options, this._center, this._radius])\r\n            .pipe(map(([options, center, radius]) => {\r\n            const combinedOptions = Object.assign(Object.assign({}, options), { center: center || options.center, radius: radius !== undefined ? radius : options.radius });\r\n            return combinedOptions;\r\n        }));\r\n    }\r\n    _watchForOptionsChanges() {\r\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\r\n            this._assertInitialized();\r\n            this.circle.setOptions(options);\r\n        });\r\n    }\r\n    _watchForCenterChanges() {\r\n        this._center.pipe(takeUntil(this._destroyed)).subscribe(center => {\r\n            if (center) {\r\n                this._assertInitialized();\r\n                this.circle.setCenter(center);\r\n            }\r\n        });\r\n    }\r\n    _watchForRadiusChanges() {\r\n        this._radius.pipe(takeUntil(this._destroyed)).subscribe(radius => {\r\n            if (radius !== undefined) {\r\n                this._assertInitialized();\r\n                this.circle.setRadius(radius);\r\n            }\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._map.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.circle) {\r\n                throw Error('Cannot interact with a Google Map Circle before it has been ' +\r\n                    'initialized. Please wait for the Circle to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapCircle.ɵfac = function MapCircle_Factory(t) { return new (t || MapCircle)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapCircle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapCircle, selectors: [[\"map-circle\"]], inputs: { options: \"options\", center: \"center\", radius: \"radius\" }, outputs: { centerChanged: \"centerChanged\", circleClick: \"circleClick\", circleDblclick: \"circleDblclick\", circleDrag: \"circleDrag\", circleDragend: \"circleDragend\", circleDragstart: \"circleDragstart\", circleMousedown: \"circleMousedown\", circleMousemove: \"circleMousemove\", circleMouseout: \"circleMouseout\", circleMouseover: \"circleMouseover\", circleMouseup: \"circleMouseup\", radiusChanged: \"radiusChanged\", circleRightclick: \"circleRightclick\" }, exportAs: [\"mapCircle\"] });\r\nMapCircle.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapCircle.propDecorators = {\r\n    options: [{ type: Input }],\r\n    center: [{ type: Input }],\r\n    radius: [{ type: Input }],\r\n    centerChanged: [{ type: Output }],\r\n    circleClick: [{ type: Output }],\r\n    circleDblclick: [{ type: Output }],\r\n    circleDrag: [{ type: Output }],\r\n    circleDragend: [{ type: Output }],\r\n    circleDragstart: [{ type: Output }],\r\n    circleMousedown: [{ type: Output }],\r\n    circleMousemove: [{ type: Output }],\r\n    circleMouseout: [{ type: Output }],\r\n    circleMouseover: [{ type: Output }],\r\n    circleMouseup: [{ type: Output }],\r\n    radiusChanged: [{ type: Output }],\r\n    circleRightclick: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapCircle, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-circle',\r\n                exportAs: 'mapCircle'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { centerChanged: [{\r\n            type: Output\r\n        }], circleClick: [{\r\n            type: Output\r\n        }], circleDblclick: [{\r\n            type: Output\r\n        }], circleDrag: [{\r\n            type: Output\r\n        }], circleDragend: [{\r\n            type: Output\r\n        }], circleDragstart: [{\r\n            type: Output\r\n        }], circleMousedown: [{\r\n            type: Output\r\n        }], circleMousemove: [{\r\n            type: Output\r\n        }], circleMouseout: [{\r\n            type: Output\r\n        }], circleMouseover: [{\r\n            type: Output\r\n        }], circleMouseup: [{\r\n            type: Output\r\n        }], radiusChanged: [{\r\n            type: Output\r\n        }], circleRightclick: [{\r\n            type: Output\r\n        }], options: [{\r\n            type: Input\r\n        }], center: [{\r\n            type: Input\r\n        }], radius: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\r\n */\r\nclass MapGroundOverlay {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._opacity = new BehaviorSubject(1);\r\n        this._url = new BehaviorSubject('');\r\n        this._bounds = new BehaviorSubject(undefined);\r\n        this._destroyed = new Subject();\r\n        /** Whether the overlay is clickable */\r\n        this.clickable = false;\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\r\n         */\r\n        this.mapClick = this._eventManager.getLazyEmitter('click');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\r\n         * #GroundOverlay.dblclick\r\n         */\r\n        this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\r\n    }\r\n    /** URL of the image that will be shown in the overlay. */\r\n    set url(url) {\r\n        this._url.next(url);\r\n    }\r\n    /** Bounds for the overlay. */\r\n    get bounds() {\r\n        return this._bounds.value;\r\n    }\r\n    set bounds(bounds) {\r\n        this._bounds.next(bounds);\r\n    }\r\n    /** Opacity of the overlay. */\r\n    set opacity(opacity) {\r\n        this._opacity.next(opacity);\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            // The ground overlay setup is slightly different from the other Google Maps objects in that\r\n            // we have to recreate the `GroundOverlay` object whenever the bounds change, because\r\n            // Google Maps doesn't provide an API to update the bounds of an existing overlay.\r\n            this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\r\n                if (this.groundOverlay) {\r\n                    this.groundOverlay.setMap(null);\r\n                    this.groundOverlay = undefined;\r\n                }\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n                // user has subscribed to.\r\n                if (bounds) {\r\n                    this._ngZone.runOutsideAngular(() => {\r\n                        this.groundOverlay = new google.maps.GroundOverlay(this._url.getValue(), bounds, {\r\n                            clickable: this.clickable,\r\n                            opacity: this._opacity.value,\r\n                        });\r\n                    });\r\n                    this._assertInitialized();\r\n                    this.groundOverlay.setMap(this._map.googleMap);\r\n                    this._eventManager.setTarget(this.groundOverlay);\r\n                }\r\n            });\r\n            this._watchForOpacityChanges();\r\n            this._watchForUrlChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        if (this.groundOverlay) {\r\n            this.groundOverlay.setMap(null);\r\n        }\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\r\n     * #GroundOverlay.getBounds\r\n     */\r\n    getBounds() {\r\n        this._assertInitialized();\r\n        return this.groundOverlay.getBounds();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\r\n     * #GroundOverlay.getOpacity\r\n     */\r\n    getOpacity() {\r\n        this._assertInitialized();\r\n        return this.groundOverlay.getOpacity();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\r\n     * #GroundOverlay.getUrl\r\n     */\r\n    getUrl() {\r\n        this._assertInitialized();\r\n        return this.groundOverlay.getUrl();\r\n    }\r\n    _watchForOpacityChanges() {\r\n        this._opacity.pipe(takeUntil(this._destroyed)).subscribe(opacity => {\r\n            if (opacity != null) {\r\n                this._assertInitialized();\r\n                this.groundOverlay.setOpacity(opacity);\r\n            }\r\n        });\r\n    }\r\n    _watchForUrlChanges() {\r\n        this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\r\n            this._assertInitialized();\r\n            const overlay = this.groundOverlay;\r\n            overlay.set('url', url);\r\n            // Google Maps only redraws the overlay if we re-set the map.\r\n            overlay.setMap(null);\r\n            overlay.setMap(this._map.googleMap);\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._map.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.groundOverlay) {\r\n                throw Error('Cannot interact with a Google Map GroundOverlay before it has been initialized. ' +\r\n                    'Please wait for the GroundOverlay to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapGroundOverlay.ɵfac = function MapGroundOverlay_Factory(t) { return new (t || MapGroundOverlay)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapGroundOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapGroundOverlay, selectors: [[\"map-ground-overlay\"]], inputs: { clickable: \"clickable\", url: \"url\", bounds: \"bounds\", opacity: \"opacity\" }, outputs: { mapClick: \"mapClick\", mapDblclick: \"mapDblclick\" }, exportAs: [\"mapGroundOverlay\"] });\r\nMapGroundOverlay.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapGroundOverlay.propDecorators = {\r\n    url: [{ type: Input }],\r\n    bounds: [{ type: Input }],\r\n    clickable: [{ type: Input }],\r\n    opacity: [{ type: Input }],\r\n    mapClick: [{ type: Output }],\r\n    mapDblclick: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapGroundOverlay, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-ground-overlay',\r\n                exportAs: 'mapGroundOverlay'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { clickable: [{\r\n            type: Input\r\n        }], mapClick: [{\r\n            type: Output\r\n        }], mapDblclick: [{\r\n            type: Output\r\n        }], url: [{\r\n            type: Input\r\n        }], bounds: [{\r\n            type: Input\r\n        }], opacity: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/info-window\r\n */\r\nclass MapInfoWindow {\r\n    constructor(_googleMap, _elementRef, _ngZone) {\r\n        this._googleMap = _googleMap;\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._options = new BehaviorSubject({});\r\n        this._position = new BehaviorSubject(undefined);\r\n        this._destroy = new Subject();\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\r\n         */\r\n        this.closeclick = this._eventManager.getLazyEmitter('closeclick');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/info-window\r\n         * #InfoWindow.content_changed\r\n         */\r\n        this.contentChanged = this._eventManager.getLazyEmitter('content_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\r\n         */\r\n        this.domready = this._eventManager.getLazyEmitter('domready');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/info-window\r\n         * #InfoWindow.position_changed\r\n         */\r\n        this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/info-window\r\n         * #InfoWindow.zindex_changed\r\n         */\r\n        this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\r\n    }\r\n    set options(options) {\r\n        this._options.next(options || {});\r\n    }\r\n    set position(position) {\r\n        this._position.next(position);\r\n    }\r\n    ngOnInit() {\r\n        if (this._googleMap._isBrowser) {\r\n            const combinedOptionsChanges = this._combineOptions();\r\n            combinedOptionsChanges.pipe(take(1)).subscribe(options => {\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n                // user has subscribed to.\r\n                this._ngZone.runOutsideAngular(() => {\r\n                    this.infoWindow = new google.maps.InfoWindow(options);\r\n                });\r\n                this._eventManager.setTarget(this.infoWindow);\r\n            });\r\n            this._watchForOptionsChanges();\r\n            this._watchForPositionChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        this._destroy.next();\r\n        this._destroy.complete();\r\n        // If no info window has been created on the server, we do not try closing it.\r\n        // On the server, an info window cannot be created and this would cause errors.\r\n        if (this.infoWindow) {\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\r\n     */\r\n    close() {\r\n        this._assertInitialized();\r\n        this.infoWindow.close();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\r\n     */\r\n    getContent() {\r\n        this._assertInitialized();\r\n        return this.infoWindow.getContent();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/info-window\r\n     * #InfoWindow.getPosition\r\n     */\r\n    getPosition() {\r\n        this._assertInitialized();\r\n        return this.infoWindow.getPosition();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\r\n     */\r\n    getZIndex() {\r\n        this._assertInitialized();\r\n        return this.infoWindow.getZIndex();\r\n    }\r\n    /**\r\n     * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\r\n     * then the position property of the options input is used instead.\r\n     */\r\n    open(anchor) {\r\n        this._assertInitialized();\r\n        const anchorObject = anchor ? anchor.getAnchor() : undefined;\r\n        // Prevent the info window from initializing when trying to reopen on the same anchor.\r\n        // Note that when the window is opened for the first time, the anchor will always be\r\n        // undefined. If that's the case, we have to allow it to open in order to handle the\r\n        // case where the window doesn't have an anchor, but is placed at a particular position.\r\n        if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\r\n            this._elementRef.nativeElement.style.display = '';\r\n            this.infoWindow.open(this._googleMap.googleMap, anchorObject);\r\n        }\r\n    }\r\n    _combineOptions() {\r\n        return combineLatest([this._options, this._position]).pipe(map(([options, position]) => {\r\n            const combinedOptions = Object.assign(Object.assign({}, options), { position: position || options.position, content: this._elementRef.nativeElement });\r\n            return combinedOptions;\r\n        }));\r\n    }\r\n    _watchForOptionsChanges() {\r\n        this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\r\n            this._assertInitialized();\r\n            this.infoWindow.setOptions(options);\r\n        });\r\n    }\r\n    _watchForPositionChanges() {\r\n        this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\r\n            if (position) {\r\n                this._assertInitialized();\r\n                this.infoWindow.setPosition(position);\r\n            }\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._googleMap.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.infoWindow) {\r\n                throw Error('Cannot interact with a Google Map Info Window before it has been ' +\r\n                    'initialized. Please wait for the Info Window to load before trying to interact with ' +\r\n                    'it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapInfoWindow.ɵfac = function MapInfoWindow_Factory(t) { return new (t || MapInfoWindow)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapInfoWindow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapInfoWindow, selectors: [[\"map-info-window\"]], hostAttrs: [2, \"display\", \"none\"], inputs: { options: \"options\", position: \"position\" }, outputs: { closeclick: \"closeclick\", contentChanged: \"contentChanged\", domready: \"domready\", positionChanged: \"positionChanged\", zindexChanged: \"zindexChanged\" }, exportAs: [\"mapInfoWindow\"] });\r\nMapInfoWindow.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\nMapInfoWindow.propDecorators = {\r\n    options: [{ type: Input }],\r\n    position: [{ type: Input }],\r\n    closeclick: [{ type: Output }],\r\n    contentChanged: [{ type: Output }],\r\n    domready: [{ type: Output }],\r\n    positionChanged: [{ type: Output }],\r\n    zindexChanged: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapInfoWindow, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-info-window',\r\n                exportAs: 'mapInfoWindow',\r\n                host: { 'style': 'display: none' }\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { closeclick: [{\r\n            type: Output\r\n        }], contentChanged: [{\r\n            type: Output\r\n        }], domready: [{\r\n            type: Output\r\n        }], positionChanged: [{\r\n            type: Output\r\n        }], zindexChanged: [{\r\n            type: Output\r\n        }], options: [{\r\n            type: Input\r\n        }], position: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps KML Layer via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\r\n */\r\nclass MapKmlLayer {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._options = new BehaviorSubject({});\r\n        this._url = new BehaviorSubject('');\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\r\n         */\r\n        this.kmlClick = this._eventManager.getLazyEmitter('click');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/kml\r\n         * #KmlLayer.defaultviewport_changed\r\n         */\r\n        this.defaultviewportChanged = this._eventManager.getLazyEmitter('defaultviewport_changed');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\r\n         */\r\n        this.statusChanged = this._eventManager.getLazyEmitter('status_changed');\r\n    }\r\n    set options(options) {\r\n        this._options.next(options || {});\r\n    }\r\n    set url(url) {\r\n        this._url.next(url);\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            this._combineOptions().pipe(take(1)).subscribe(options => {\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n                // user has subscribed to.\r\n                this._ngZone.runOutsideAngular(() => this.kmlLayer = new google.maps.KmlLayer(options));\r\n                this._assertInitialized();\r\n                this.kmlLayer.setMap(this._map.googleMap);\r\n                this._eventManager.setTarget(this.kmlLayer);\r\n            });\r\n            this._watchForOptionsChanges();\r\n            this._watchForUrlChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        if (this.kmlLayer) {\r\n            this.kmlLayer.setMap(null);\r\n        }\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\r\n     */\r\n    getDefaultViewport() {\r\n        this._assertInitialized();\r\n        return this.kmlLayer.getDefaultViewport();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\r\n     */\r\n    getMetadata() {\r\n        this._assertInitialized();\r\n        return this.kmlLayer.getMetadata();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\r\n     */\r\n    getStatus() {\r\n        this._assertInitialized();\r\n        return this.kmlLayer.getStatus();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\r\n     */\r\n    getUrl() {\r\n        this._assertInitialized();\r\n        return this.kmlLayer.getUrl();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\r\n     */\r\n    getZIndex() {\r\n        this._assertInitialized();\r\n        return this.kmlLayer.getZIndex();\r\n    }\r\n    _combineOptions() {\r\n        return combineLatest([this._options, this._url]).pipe(map(([options, url]) => {\r\n            const combinedOptions = Object.assign(Object.assign({}, options), { url: url || options.url });\r\n            return combinedOptions;\r\n        }));\r\n    }\r\n    _watchForOptionsChanges() {\r\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\r\n            if (this.kmlLayer) {\r\n                this._assertInitialized();\r\n                this.kmlLayer.setOptions(options);\r\n            }\r\n        });\r\n    }\r\n    _watchForUrlChanges() {\r\n        this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\r\n            if (url && this.kmlLayer) {\r\n                this._assertInitialized();\r\n                this.kmlLayer.setUrl(url);\r\n            }\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._map.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.kmlLayer) {\r\n                throw Error('Cannot interact with a Google Map KmlLayer before it has been ' +\r\n                    'initialized. Please wait for the KmlLayer to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapKmlLayer.ɵfac = function MapKmlLayer_Factory(t) { return new (t || MapKmlLayer)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapKmlLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapKmlLayer, selectors: [[\"map-kml-layer\"]], inputs: { options: \"options\", url: \"url\" }, outputs: { kmlClick: \"kmlClick\", defaultviewportChanged: \"defaultviewportChanged\", statusChanged: \"statusChanged\" }, exportAs: [\"mapKmlLayer\"] });\r\nMapKmlLayer.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapKmlLayer.propDecorators = {\r\n    options: [{ type: Input }],\r\n    url: [{ type: Input }],\r\n    kmlClick: [{ type: Output }],\r\n    defaultviewportChanged: [{ type: Output }],\r\n    statusChanged: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapKmlLayer, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-kml-layer',\r\n                exportAs: 'mapKmlLayer'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { kmlClick: [{\r\n            type: Output\r\n        }], defaultviewportChanged: [{\r\n            type: Output\r\n        }], statusChanged: [{\r\n            type: Output\r\n        }], options: [{\r\n            type: Input\r\n        }], url: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Default options for the Google Maps marker component. Displays a marker\r\n * at the Googleplex.\r\n */\r\nconst DEFAULT_MARKER_OPTIONS = {\r\n    position: { lat: 37.421995, lng: -122.084092 },\r\n};\r\n/**\r\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/marker\r\n */\r\nclass MapMarker {\r\n    constructor(_googleMap, _ngZone) {\r\n        this._googleMap = _googleMap;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\r\n         */\r\n        this.animationChanged = this._eventManager.getLazyEmitter('animation_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\r\n         */\r\n        this.mapClick = this._eventManager.getLazyEmitter('click');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\r\n         */\r\n        this.clickableChanged = this._eventManager.getLazyEmitter('clickable_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\r\n         */\r\n        this.cursorChanged = this._eventManager.getLazyEmitter('cursor_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\r\n         */\r\n        this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\r\n         */\r\n        this.mapDrag = this._eventManager.getLazyEmitter('drag');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\r\n         */\r\n        this.mapDragend = this._eventManager.getLazyEmitter('dragend');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\r\n         */\r\n        this.draggableChanged = this._eventManager.getLazyEmitter('draggable_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\r\n         */\r\n        this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\r\n         */\r\n        this.flatChanged = this._eventManager.getLazyEmitter('flat_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\r\n         */\r\n        this.iconChanged = this._eventManager.getLazyEmitter('icon_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\r\n         */\r\n        this.mapMousedown = this._eventManager.getLazyEmitter('mousedown');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\r\n         */\r\n        this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\r\n         */\r\n        this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\r\n         */\r\n        this.mapMouseup = this._eventManager.getLazyEmitter('mouseup');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\r\n         */\r\n        this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\r\n         */\r\n        this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\r\n         */\r\n        this.shapeChanged = this._eventManager.getLazyEmitter('shape_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\r\n         */\r\n        this.titleChanged = this._eventManager.getLazyEmitter('title_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\r\n         */\r\n        this.visibleChanged = this._eventManager.getLazyEmitter('visible_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\r\n         */\r\n        this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\r\n    }\r\n    /**\r\n     * Title of the marker.\r\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\r\n     */\r\n    set title(title) {\r\n        this._title = title;\r\n    }\r\n    /**\r\n     * Position of the marker. See:\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\r\n     */\r\n    set position(position) {\r\n        this._position = position;\r\n    }\r\n    /**\r\n     * Label for the marker.\r\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\r\n     */\r\n    set label(label) {\r\n        this._label = label;\r\n    }\r\n    /**\r\n     * Whether the marker is clickable. See:\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\r\n     */\r\n    set clickable(clickable) {\r\n        this._clickable = clickable;\r\n    }\r\n    /**\r\n     * Options used to configure the marker.\r\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\r\n     */\r\n    set options(options) {\r\n        this._options = options;\r\n    }\r\n    ngOnInit() {\r\n        if (this._googleMap._isBrowser) {\r\n            // Create the object outside the zone so its events don't trigger change detection.\r\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n            // user has subscribed to.\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this.marker = new google.maps.Marker(this._combineOptions());\r\n            });\r\n            this._assertInitialized();\r\n            this.marker.setMap(this._googleMap.googleMap);\r\n            this._eventManager.setTarget(this.marker);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        const { marker, _title, _position, _label, _clickable } = this;\r\n        if (marker) {\r\n            if (changes['options']) {\r\n                marker.setOptions(this._combineOptions());\r\n            }\r\n            if (changes['title'] && _title !== undefined) {\r\n                marker.setTitle(_title);\r\n            }\r\n            if (changes['position'] && _position) {\r\n                marker.setPosition(_position);\r\n            }\r\n            if (changes['label'] && _label !== undefined) {\r\n                marker.setLabel(_label);\r\n            }\r\n            if (changes['clickable'] && _clickable !== undefined) {\r\n                marker.setClickable(_clickable);\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        if (this.marker) {\r\n            this.marker.setMap(null);\r\n        }\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\r\n     */\r\n    getAnimation() {\r\n        this._assertInitialized();\r\n        return this.marker.getAnimation() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\r\n     */\r\n    getClickable() {\r\n        this._assertInitialized();\r\n        return this.marker.getClickable();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\r\n     */\r\n    getCursor() {\r\n        this._assertInitialized();\r\n        return this.marker.getCursor() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\r\n     */\r\n    getDraggable() {\r\n        this._assertInitialized();\r\n        return !!this.marker.getDraggable();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\r\n     */\r\n    getIcon() {\r\n        this._assertInitialized();\r\n        return this.marker.getIcon() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\r\n     */\r\n    getLabel() {\r\n        this._assertInitialized();\r\n        return this.marker.getLabel() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\r\n     */\r\n    getOpacity() {\r\n        this._assertInitialized();\r\n        return this.marker.getOpacity() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\r\n     */\r\n    getPosition() {\r\n        this._assertInitialized();\r\n        return this.marker.getPosition() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\r\n     */\r\n    getShape() {\r\n        this._assertInitialized();\r\n        return this.marker.getShape() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\r\n     */\r\n    getTitle() {\r\n        this._assertInitialized();\r\n        return this.marker.getTitle() || null;\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\r\n     */\r\n    getVisible() {\r\n        this._assertInitialized();\r\n        return this.marker.getVisible();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\r\n     */\r\n    getZIndex() {\r\n        this._assertInitialized();\r\n        return this.marker.getZIndex() || null;\r\n    }\r\n    /** Gets the anchor point that can be used to attach other Google Maps objects. */\r\n    getAnchor() {\r\n        this._assertInitialized();\r\n        return this.marker;\r\n    }\r\n    /** Creates a combined options object using the passed-in options and the individual inputs. */\r\n    _combineOptions() {\r\n        const options = this._options || DEFAULT_MARKER_OPTIONS;\r\n        return Object.assign(Object.assign({}, options), { title: this._title || options.title, position: this._position || options.position, label: this._label || options.label, clickable: this._clickable !== undefined ? this._clickable : options.clickable, map: this._googleMap.googleMap });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._googleMap.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.marker) {\r\n                throw Error('Cannot interact with a Google Map Marker before it has been ' +\r\n                    'initialized. Please wait for the Marker to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapMarker.ɵfac = function MapMarker_Factory(t) { return new (t || MapMarker)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapMarker.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapMarker, selectors: [[\"map-marker\"]], inputs: { title: \"title\", position: \"position\", label: \"label\", clickable: \"clickable\", options: \"options\" }, outputs: { animationChanged: \"animationChanged\", mapClick: \"mapClick\", clickableChanged: \"clickableChanged\", cursorChanged: \"cursorChanged\", mapDblclick: \"mapDblclick\", mapDrag: \"mapDrag\", mapDragend: \"mapDragend\", draggableChanged: \"draggableChanged\", mapDragstart: \"mapDragstart\", flatChanged: \"flatChanged\", iconChanged: \"iconChanged\", mapMousedown: \"mapMousedown\", mapMouseout: \"mapMouseout\", mapMouseover: \"mapMouseover\", mapMouseup: \"mapMouseup\", positionChanged: \"positionChanged\", mapRightclick: \"mapRightclick\", shapeChanged: \"shapeChanged\", titleChanged: \"titleChanged\", visibleChanged: \"visibleChanged\", zindexChanged: \"zindexChanged\" }, exportAs: [\"mapMarker\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nMapMarker.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapMarker.propDecorators = {\r\n    title: [{ type: Input }],\r\n    position: [{ type: Input }],\r\n    label: [{ type: Input }],\r\n    clickable: [{ type: Input }],\r\n    options: [{ type: Input }],\r\n    animationChanged: [{ type: Output }],\r\n    mapClick: [{ type: Output }],\r\n    clickableChanged: [{ type: Output }],\r\n    cursorChanged: [{ type: Output }],\r\n    mapDblclick: [{ type: Output }],\r\n    mapDrag: [{ type: Output }],\r\n    mapDragend: [{ type: Output }],\r\n    draggableChanged: [{ type: Output }],\r\n    mapDragstart: [{ type: Output }],\r\n    flatChanged: [{ type: Output }],\r\n    iconChanged: [{ type: Output }],\r\n    mapMousedown: [{ type: Output }],\r\n    mapMouseout: [{ type: Output }],\r\n    mapMouseover: [{ type: Output }],\r\n    mapMouseup: [{ type: Output }],\r\n    positionChanged: [{ type: Output }],\r\n    mapRightclick: [{ type: Output }],\r\n    shapeChanged: [{ type: Output }],\r\n    titleChanged: [{ type: Output }],\r\n    visibleChanged: [{ type: Output }],\r\n    zindexChanged: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapMarker, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-marker',\r\n                exportAs: 'mapMarker'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { animationChanged: [{\r\n            type: Output\r\n        }], mapClick: [{\r\n            type: Output\r\n        }], clickableChanged: [{\r\n            type: Output\r\n        }], cursorChanged: [{\r\n            type: Output\r\n        }], mapDblclick: [{\r\n            type: Output\r\n        }], mapDrag: [{\r\n            type: Output\r\n        }], mapDragend: [{\r\n            type: Output\r\n        }], draggableChanged: [{\r\n            type: Output\r\n        }], mapDragstart: [{\r\n            type: Output\r\n        }], flatChanged: [{\r\n            type: Output\r\n        }], iconChanged: [{\r\n            type: Output\r\n        }], mapMousedown: [{\r\n            type: Output\r\n        }], mapMouseout: [{\r\n            type: Output\r\n        }], mapMouseover: [{\r\n            type: Output\r\n        }], mapMouseup: [{\r\n            type: Output\r\n        }], positionChanged: [{\r\n            type: Output\r\n        }], mapRightclick: [{\r\n            type: Output\r\n        }], shapeChanged: [{\r\n            type: Output\r\n        }], titleChanged: [{\r\n            type: Output\r\n        }], visibleChanged: [{\r\n            type: Output\r\n        }], zindexChanged: [{\r\n            type: Output\r\n        }], title: [{\r\n            type: Input\r\n        }], position: [{\r\n            type: Input\r\n        }], label: [{\r\n            type: Input\r\n        }], clickable: [{\r\n            type: Input\r\n        }], options: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component for implementing a Google Maps Marker Clusterer.\r\n *\r\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\r\n */\r\nclass MapMarkerClusterer {\r\n    constructor(_googleMap, _ngZone) {\r\n        this._googleMap = _googleMap;\r\n        this._ngZone = _ngZone;\r\n        this._currentMarkers = new Set();\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._destroy = new Subject();\r\n        this.ariaLabelFn = () => '';\r\n        /**\r\n         * See\r\n         * googlemaps.github.io/v3-utility-library/modules/\r\n         * _google_markerclustererplus.html#clusteringbegin\r\n         */\r\n        this.clusteringbegin = this._eventManager.getLazyEmitter('clusteringbegin');\r\n        /**\r\n         * See\r\n         * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\r\n         */\r\n        this.clusteringend = this._eventManager.getLazyEmitter('clusteringend');\r\n        this._canInitialize = this._googleMap._isBrowser;\r\n    }\r\n    set averageCenter(averageCenter) {\r\n        this._averageCenter = averageCenter;\r\n    }\r\n    set batchSizeIE(batchSizeIE) {\r\n        this._batchSizeIE = batchSizeIE;\r\n    }\r\n    set calculator(calculator) {\r\n        this._calculator = calculator;\r\n    }\r\n    set clusterClass(clusterClass) {\r\n        this._clusterClass = clusterClass;\r\n    }\r\n    set enableRetinaIcons(enableRetinaIcons) {\r\n        this._enableRetinaIcons = enableRetinaIcons;\r\n    }\r\n    set gridSize(gridSize) {\r\n        this._gridSize = gridSize;\r\n    }\r\n    set ignoreHidden(ignoreHidden) {\r\n        this._ignoreHidden = ignoreHidden;\r\n    }\r\n    set imageExtension(imageExtension) {\r\n        this._imageExtension = imageExtension;\r\n    }\r\n    set imagePath(imagePath) {\r\n        this._imagePath = imagePath;\r\n    }\r\n    set imageSizes(imageSizes) {\r\n        this._imageSizes = imageSizes;\r\n    }\r\n    set maxZoom(maxZoom) {\r\n        this._maxZoom = maxZoom;\r\n    }\r\n    set minimumClusterSize(minimumClusterSize) {\r\n        this._minimumClusterSize = minimumClusterSize;\r\n    }\r\n    set styles(styles) {\r\n        this._styles = styles;\r\n    }\r\n    set title(title) {\r\n        this._title = title;\r\n    }\r\n    set zIndex(zIndex) {\r\n        this._zIndex = zIndex;\r\n    }\r\n    set zoomOnClick(zoomOnClick) {\r\n        this._zoomOnClick = zoomOnClick;\r\n    }\r\n    ngOnInit() {\r\n        if (this._canInitialize) {\r\n            // Create the object outside the zone so its events don't trigger change detection.\r\n            // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n            // user has subscribed to.\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this.markerClusterer = new MarkerClusterer(this._googleMap.googleMap, [], this._combineOptions());\r\n            });\r\n            this._assertInitialized();\r\n            this._eventManager.setTarget(this.markerClusterer);\r\n        }\r\n    }\r\n    ngAfterContentInit() {\r\n        if (this._canInitialize) {\r\n            this._watchForMarkerChanges();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        const { markerClusterer: clusterer, ariaLabelFn, _averageCenter, _batchSizeIE, _calculator, _styles, _clusterClass, _enableRetinaIcons, _gridSize, _ignoreHidden, _imageExtension, _imagePath, _imageSizes, _maxZoom, _minimumClusterSize, _title, _zIndex, _zoomOnClick } = this;\r\n        if (clusterer) {\r\n            if (changes['ariaLabelFn']) {\r\n                clusterer.ariaLabelFn = ariaLabelFn;\r\n            }\r\n            if (changes['averageCenter'] && _averageCenter !== undefined) {\r\n                clusterer.setAverageCenter(_averageCenter);\r\n            }\r\n            if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\r\n                clusterer.setBatchSizeIE(_batchSizeIE);\r\n            }\r\n            if (changes['calculator'] && _calculator) {\r\n                clusterer.setCalculator(_calculator);\r\n            }\r\n            if (changes['clusterClass'] && _clusterClass !== undefined) {\r\n                clusterer.setClusterClass(_clusterClass);\r\n            }\r\n            if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\r\n                clusterer.setEnableRetinaIcons(_enableRetinaIcons);\r\n            }\r\n            if (changes['gridSize'] && _gridSize !== undefined) {\r\n                clusterer.setGridSize(_gridSize);\r\n            }\r\n            if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\r\n                clusterer.setIgnoreHidden(_ignoreHidden);\r\n            }\r\n            if (changes['imageExtension'] && _imageExtension !== undefined) {\r\n                clusterer.setImageExtension(_imageExtension);\r\n            }\r\n            if (changes['imagePath'] && _imagePath !== undefined) {\r\n                clusterer.setImagePath(_imagePath);\r\n            }\r\n            if (changes['imageSizes'] && _imageSizes) {\r\n                clusterer.setImageSizes(_imageSizes);\r\n            }\r\n            if (changes['maxZoom'] && _maxZoom !== undefined) {\r\n                clusterer.setMaxZoom(_maxZoom);\r\n            }\r\n            if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\r\n                clusterer.setMinimumClusterSize(_minimumClusterSize);\r\n            }\r\n            if (changes['styles'] && _styles) {\r\n                clusterer.setStyles(_styles);\r\n            }\r\n            if (changes['title'] && _title !== undefined) {\r\n                clusterer.setTitle(_title);\r\n            }\r\n            if (changes['zIndex'] && _zIndex !== undefined) {\r\n                clusterer.setZIndex(_zIndex);\r\n            }\r\n            if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\r\n                clusterer.setZoomOnClick(_zoomOnClick);\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroy.next();\r\n        this._destroy.complete();\r\n        this._eventManager.destroy();\r\n        if (this.markerClusterer) {\r\n            this.markerClusterer.setMap(null);\r\n        }\r\n    }\r\n    fitMapToMarkers(padding) {\r\n        this._assertInitialized();\r\n        this.markerClusterer.fitMapToMarkers(padding);\r\n    }\r\n    getAverageCenter() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getAverageCenter();\r\n    }\r\n    getBatchSizeIE() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getBatchSizeIE();\r\n    }\r\n    getCalculator() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getCalculator();\r\n    }\r\n    getClusterClass() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getClusterClass();\r\n    }\r\n    getClusters() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getClusters();\r\n    }\r\n    getEnableRetinaIcons() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getEnableRetinaIcons();\r\n    }\r\n    getGridSize() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getGridSize();\r\n    }\r\n    getIgnoreHidden() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getIgnoreHidden();\r\n    }\r\n    getImageExtension() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getImageExtension();\r\n    }\r\n    getImagePath() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getImagePath();\r\n    }\r\n    getImageSizes() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getImageSizes();\r\n    }\r\n    getMaxZoom() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getMaxZoom();\r\n    }\r\n    getMinimumClusterSize() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getMinimumClusterSize();\r\n    }\r\n    getStyles() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getStyles();\r\n    }\r\n    getTitle() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getTitle();\r\n    }\r\n    getTotalClusters() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getTotalClusters();\r\n    }\r\n    getTotalMarkers() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getTotalMarkers();\r\n    }\r\n    getZIndex() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getZIndex();\r\n    }\r\n    getZoomOnClick() {\r\n        this._assertInitialized();\r\n        return this.markerClusterer.getZoomOnClick();\r\n    }\r\n    _combineOptions() {\r\n        return {\r\n            ariaLabelFn: this.ariaLabelFn,\r\n            averageCenter: this._averageCenter,\r\n            batchSize: this.batchSize,\r\n            batchSizeIE: this._batchSizeIE,\r\n            calculator: this._calculator,\r\n            clusterClass: this._clusterClass,\r\n            enableRetinaIcons: this._enableRetinaIcons,\r\n            gridSize: this._gridSize,\r\n            ignoreHidden: this._ignoreHidden,\r\n            imageExtension: this._imageExtension,\r\n            imagePath: this._imagePath,\r\n            imageSizes: this._imageSizes,\r\n            maxZoom: this._maxZoom,\r\n            minimumClusterSize: this._minimumClusterSize,\r\n            styles: this._styles,\r\n            title: this._title,\r\n            zIndex: this._zIndex,\r\n            zoomOnClick: this._zoomOnClick,\r\n        };\r\n    }\r\n    _watchForMarkerChanges() {\r\n        this._assertInitialized();\r\n        const initialMarkers = [];\r\n        for (const marker of this._getInternalMarkers(this._markers.toArray())) {\r\n            this._currentMarkers.add(marker);\r\n            initialMarkers.push(marker);\r\n        }\r\n        this.markerClusterer.addMarkers(initialMarkers);\r\n        this._markers.changes.pipe(takeUntil(this._destroy)).subscribe((markerComponents) => {\r\n            this._assertInitialized();\r\n            const newMarkers = new Set(this._getInternalMarkers(markerComponents));\r\n            const markersToAdd = [];\r\n            const markersToRemove = [];\r\n            for (const marker of Array.from(newMarkers)) {\r\n                if (!this._currentMarkers.has(marker)) {\r\n                    this._currentMarkers.add(marker);\r\n                    markersToAdd.push(marker);\r\n                }\r\n            }\r\n            for (const marker of Array.from(this._currentMarkers)) {\r\n                if (!newMarkers.has(marker)) {\r\n                    markersToRemove.push(marker);\r\n                }\r\n            }\r\n            this.markerClusterer.addMarkers(markersToAdd, true);\r\n            this.markerClusterer.removeMarkers(markersToRemove, true);\r\n            this.markerClusterer.repaint();\r\n            for (const marker of markersToRemove) {\r\n                this._currentMarkers.delete(marker);\r\n            }\r\n        });\r\n    }\r\n    _getInternalMarkers(markers) {\r\n        return markers.filter(markerComponent => !!markerComponent.marker)\r\n            .map(markerComponent => markerComponent.marker);\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._googleMap.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.markerClusterer) {\r\n                throw Error('Cannot interact with a MarkerClusterer before it has been initialized. ' +\r\n                    'Please wait for the MarkerClusterer to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapMarkerClusterer.ɵfac = function MapMarkerClusterer_Factory(t) { return new (t || MapMarkerClusterer)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapMarkerClusterer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MapMarkerClusterer, selectors: [[\"map-marker-clusterer\"]], contentQueries: function MapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MapMarker, 1);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._markers = _t);\r\n    } }, inputs: { ariaLabelFn: \"ariaLabelFn\", averageCenter: \"averageCenter\", batchSizeIE: \"batchSizeIE\", calculator: \"calculator\", clusterClass: \"clusterClass\", enableRetinaIcons: \"enableRetinaIcons\", gridSize: \"gridSize\", ignoreHidden: \"ignoreHidden\", imageExtension: \"imageExtension\", imagePath: \"imagePath\", imageSizes: \"imageSizes\", maxZoom: \"maxZoom\", minimumClusterSize: \"minimumClusterSize\", styles: \"styles\", title: \"title\", zIndex: \"zIndex\", zoomOnClick: \"zoomOnClick\", batchSize: \"batchSize\" }, outputs: { clusteringbegin: \"clusteringbegin\", clusteringend: \"clusteringend\" }, exportAs: [\"mapMarkerClusterer\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MapMarkerClusterer_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵprojection(0);\r\n    } }, encapsulation: 2, changeDetection: 0 });\r\nMapMarkerClusterer.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapMarkerClusterer.propDecorators = {\r\n    ariaLabelFn: [{ type: Input }],\r\n    averageCenter: [{ type: Input }],\r\n    batchSize: [{ type: Input }],\r\n    batchSizeIE: [{ type: Input }],\r\n    calculator: [{ type: Input }],\r\n    clusterClass: [{ type: Input }],\r\n    enableRetinaIcons: [{ type: Input }],\r\n    gridSize: [{ type: Input }],\r\n    ignoreHidden: [{ type: Input }],\r\n    imageExtension: [{ type: Input }],\r\n    imagePath: [{ type: Input }],\r\n    imageSizes: [{ type: Input }],\r\n    maxZoom: [{ type: Input }],\r\n    minimumClusterSize: [{ type: Input }],\r\n    styles: [{ type: Input }],\r\n    title: [{ type: Input }],\r\n    zIndex: [{ type: Input }],\r\n    zoomOnClick: [{ type: Input }],\r\n    clusteringbegin: [{ type: Output }],\r\n    clusteringend: [{ type: Output }],\r\n    _markers: [{ type: ContentChildren, args: [MapMarker, { descendants: true },] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapMarkerClusterer, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'map-marker-clusterer',\r\n                exportAs: 'mapMarkerClusterer',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                template: '<ng-content></ng-content>',\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { ariaLabelFn: [{\r\n            type: Input\r\n        }], clusteringbegin: [{\r\n            type: Output\r\n        }], clusteringend: [{\r\n            type: Output\r\n        }], averageCenter: [{\r\n            type: Input\r\n        }], batchSizeIE: [{\r\n            type: Input\r\n        }], calculator: [{\r\n            type: Input\r\n        }], clusterClass: [{\r\n            type: Input\r\n        }], enableRetinaIcons: [{\r\n            type: Input\r\n        }], gridSize: [{\r\n            type: Input\r\n        }], ignoreHidden: [{\r\n            type: Input\r\n        }], imageExtension: [{\r\n            type: Input\r\n        }], imagePath: [{\r\n            type: Input\r\n        }], imageSizes: [{\r\n            type: Input\r\n        }], maxZoom: [{\r\n            type: Input\r\n        }], minimumClusterSize: [{\r\n            type: Input\r\n        }], styles: [{\r\n            type: Input\r\n        }], title: [{\r\n            type: Input\r\n        }], zIndex: [{\r\n            type: Input\r\n        }], zoomOnClick: [{\r\n            type: Input\r\n        }], batchSize: [{\r\n            type: Input\r\n        }], _markers: [{\r\n            type: ContentChildren,\r\n            args: [MapMarker, { descendants: true }]\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\r\n */\r\nclass MapPolygon {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._options = new BehaviorSubject({});\r\n        this._paths = new BehaviorSubject(undefined);\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\r\n         */\r\n        this.polygonClick = this._eventManager.getLazyEmitter('click');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\r\n         */\r\n        this.polygonDblclick = this._eventManager.getLazyEmitter('dblclick');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\r\n         */\r\n        this.polygonDrag = this._eventManager.getLazyEmitter('drag');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\r\n         */\r\n        this.polygonDragend = this._eventManager.getLazyEmitter('dragend');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\r\n         */\r\n        this.polygonDragstart = this._eventManager.getLazyEmitter('dragstart');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\r\n         */\r\n        this.polygonMousedown = this._eventManager.getLazyEmitter('mousedown');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\r\n         */\r\n        this.polygonMousemove = this._eventManager.getLazyEmitter('mousemove');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\r\n         */\r\n        this.polygonMouseout = this._eventManager.getLazyEmitter('mouseout');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\r\n         */\r\n        this.polygonMouseover = this._eventManager.getLazyEmitter('mouseover');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\r\n         */\r\n        this.polygonMouseup = this._eventManager.getLazyEmitter('mouseup');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\r\n         */\r\n        this.polygonRightclick = this._eventManager.getLazyEmitter('rightclick');\r\n    }\r\n    set options(options) {\r\n        this._options.next(options || {});\r\n    }\r\n    set paths(paths) {\r\n        this._paths.next(paths);\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            this._combineOptions().pipe(take(1)).subscribe(options => {\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n                // user has subscribed to.\r\n                this._ngZone.runOutsideAngular(() => {\r\n                    this.polygon = new google.maps.Polygon(options);\r\n                });\r\n                this._assertInitialized();\r\n                this.polygon.setMap(this._map.googleMap);\r\n                this._eventManager.setTarget(this.polygon);\r\n            });\r\n            this._watchForOptionsChanges();\r\n            this._watchForPathChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        if (this.polygon) {\r\n            this.polygon.setMap(null);\r\n        }\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\r\n     */\r\n    getDraggable() {\r\n        this._assertInitialized();\r\n        return this.polygon.getDraggable();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\r\n     */\r\n    getEditable() {\r\n        this._assertInitialized();\r\n        return this.polygon.getEditable();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\r\n     */\r\n    getPath() {\r\n        this._assertInitialized();\r\n        return this.polygon.getPath();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\r\n     */\r\n    getPaths() {\r\n        this._assertInitialized();\r\n        return this.polygon.getPaths();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\r\n     */\r\n    getVisible() {\r\n        this._assertInitialized();\r\n        return this.polygon.getVisible();\r\n    }\r\n    _combineOptions() {\r\n        return combineLatest([this._options, this._paths]).pipe(map(([options, paths]) => {\r\n            const combinedOptions = Object.assign(Object.assign({}, options), { paths: paths || options.paths });\r\n            return combinedOptions;\r\n        }));\r\n    }\r\n    _watchForOptionsChanges() {\r\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\r\n            this._assertInitialized();\r\n            this.polygon.setOptions(options);\r\n        });\r\n    }\r\n    _watchForPathChanges() {\r\n        this._paths.pipe(takeUntil(this._destroyed)).subscribe(paths => {\r\n            if (paths) {\r\n                this._assertInitialized();\r\n                this.polygon.setPaths(paths);\r\n            }\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._map.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.polygon) {\r\n                throw Error('Cannot interact with a Google Map Polygon before it has been ' +\r\n                    'initialized. Please wait for the Polygon to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapPolygon.ɵfac = function MapPolygon_Factory(t) { return new (t || MapPolygon)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapPolygon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapPolygon, selectors: [[\"map-polygon\"]], inputs: { options: \"options\", paths: \"paths\" }, outputs: { polygonClick: \"polygonClick\", polygonDblclick: \"polygonDblclick\", polygonDrag: \"polygonDrag\", polygonDragend: \"polygonDragend\", polygonDragstart: \"polygonDragstart\", polygonMousedown: \"polygonMousedown\", polygonMousemove: \"polygonMousemove\", polygonMouseout: \"polygonMouseout\", polygonMouseover: \"polygonMouseover\", polygonMouseup: \"polygonMouseup\", polygonRightclick: \"polygonRightclick\" }, exportAs: [\"mapPolygon\"] });\r\nMapPolygon.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapPolygon.propDecorators = {\r\n    options: [{ type: Input }],\r\n    paths: [{ type: Input }],\r\n    polygonClick: [{ type: Output }],\r\n    polygonDblclick: [{ type: Output }],\r\n    polygonDrag: [{ type: Output }],\r\n    polygonDragend: [{ type: Output }],\r\n    polygonDragstart: [{ type: Output }],\r\n    polygonMousedown: [{ type: Output }],\r\n    polygonMousemove: [{ type: Output }],\r\n    polygonMouseout: [{ type: Output }],\r\n    polygonMouseover: [{ type: Output }],\r\n    polygonMouseup: [{ type: Output }],\r\n    polygonRightclick: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapPolygon, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-polygon',\r\n                exportAs: 'mapPolygon'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { polygonClick: [{\r\n            type: Output\r\n        }], polygonDblclick: [{\r\n            type: Output\r\n        }], polygonDrag: [{\r\n            type: Output\r\n        }], polygonDragend: [{\r\n            type: Output\r\n        }], polygonDragstart: [{\r\n            type: Output\r\n        }], polygonMousedown: [{\r\n            type: Output\r\n        }], polygonMousemove: [{\r\n            type: Output\r\n        }], polygonMouseout: [{\r\n            type: Output\r\n        }], polygonMouseover: [{\r\n            type: Output\r\n        }], polygonMouseup: [{\r\n            type: Output\r\n        }], polygonRightclick: [{\r\n            type: Output\r\n        }], options: [{\r\n            type: Input\r\n        }], paths: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\r\n */\r\nclass MapPolyline {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._options = new BehaviorSubject({});\r\n        this._path = new BehaviorSubject(undefined);\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\r\n         */\r\n        this.polylineClick = this._eventManager.getLazyEmitter('click');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\r\n         */\r\n        this.polylineDblclick = this._eventManager.getLazyEmitter('dblclick');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\r\n         */\r\n        this.polylineDrag = this._eventManager.getLazyEmitter('drag');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\r\n         */\r\n        this.polylineDragend = this._eventManager.getLazyEmitter('dragend');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\r\n         */\r\n        this.polylineDragstart = this._eventManager.getLazyEmitter('dragstart');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\r\n         */\r\n        this.polylineMousedown = this._eventManager.getLazyEmitter('mousedown');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\r\n         */\r\n        this.polylineMousemove = this._eventManager.getLazyEmitter('mousemove');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\r\n         */\r\n        this.polylineMouseout = this._eventManager.getLazyEmitter('mouseout');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\r\n         */\r\n        this.polylineMouseover = this._eventManager.getLazyEmitter('mouseover');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\r\n         */\r\n        this.polylineMouseup = this._eventManager.getLazyEmitter('mouseup');\r\n        /**\r\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\r\n         */\r\n        this.polylineRightclick = this._eventManager.getLazyEmitter('rightclick');\r\n    }\r\n    set options(options) {\r\n        this._options.next(options || {});\r\n    }\r\n    set path(path) {\r\n        this._path.next(path);\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            this._combineOptions().pipe(take(1)).subscribe(options => {\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n                // user has subscribed to.\r\n                this._ngZone.runOutsideAngular(() => this.polyline = new google.maps.Polyline(options));\r\n                this._assertInitialized();\r\n                this.polyline.setMap(this._map.googleMap);\r\n                this._eventManager.setTarget(this.polyline);\r\n            });\r\n            this._watchForOptionsChanges();\r\n            this._watchForPathChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        if (this.polyline) {\r\n            this.polyline.setMap(null);\r\n        }\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\r\n     */\r\n    getDraggable() {\r\n        this._assertInitialized();\r\n        return this.polyline.getDraggable();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\r\n     */\r\n    getEditable() {\r\n        this._assertInitialized();\r\n        return this.polyline.getEditable();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\r\n     */\r\n    getPath() {\r\n        this._assertInitialized();\r\n        return this.polyline.getPath();\r\n    }\r\n    /**\r\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\r\n     */\r\n    getVisible() {\r\n        this._assertInitialized();\r\n        return this.polyline.getVisible();\r\n    }\r\n    _combineOptions() {\r\n        return combineLatest([this._options, this._path]).pipe(map(([options, path]) => {\r\n            const combinedOptions = Object.assign(Object.assign({}, options), { path: path || options.path });\r\n            return combinedOptions;\r\n        }));\r\n    }\r\n    _watchForOptionsChanges() {\r\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\r\n            this._assertInitialized();\r\n            this.polyline.setOptions(options);\r\n        });\r\n    }\r\n    _watchForPathChanges() {\r\n        this._path.pipe(takeUntil(this._destroyed)).subscribe(path => {\r\n            if (path) {\r\n                this._assertInitialized();\r\n                this.polyline.setPath(path);\r\n            }\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._map.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.polyline) {\r\n                throw Error('Cannot interact with a Google Map Polyline before it has been ' +\r\n                    'initialized. Please wait for the Polyline to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapPolyline.ɵfac = function MapPolyline_Factory(t) { return new (t || MapPolyline)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapPolyline.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapPolyline, selectors: [[\"map-polyline\"]], inputs: { options: \"options\", path: \"path\" }, outputs: { polylineClick: \"polylineClick\", polylineDblclick: \"polylineDblclick\", polylineDrag: \"polylineDrag\", polylineDragend: \"polylineDragend\", polylineDragstart: \"polylineDragstart\", polylineMousedown: \"polylineMousedown\", polylineMousemove: \"polylineMousemove\", polylineMouseout: \"polylineMouseout\", polylineMouseover: \"polylineMouseover\", polylineMouseup: \"polylineMouseup\", polylineRightclick: \"polylineRightclick\" }, exportAs: [\"mapPolyline\"] });\r\nMapPolyline.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapPolyline.propDecorators = {\r\n    options: [{ type: Input }],\r\n    path: [{ type: Input }],\r\n    polylineClick: [{ type: Output }],\r\n    polylineDblclick: [{ type: Output }],\r\n    polylineDrag: [{ type: Output }],\r\n    polylineDragend: [{ type: Output }],\r\n    polylineDragstart: [{ type: Output }],\r\n    polylineMousedown: [{ type: Output }],\r\n    polylineMousemove: [{ type: Output }],\r\n    polylineMouseout: [{ type: Output }],\r\n    polylineMouseover: [{ type: Output }],\r\n    polylineMouseup: [{ type: Output }],\r\n    polylineRightclick: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapPolyline, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-polyline',\r\n                exportAs: 'mapPolyline'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { polylineClick: [{\r\n            type: Output\r\n        }], polylineDblclick: [{\r\n            type: Output\r\n        }], polylineDrag: [{\r\n            type: Output\r\n        }], polylineDragend: [{\r\n            type: Output\r\n        }], polylineDragstart: [{\r\n            type: Output\r\n        }], polylineMousedown: [{\r\n            type: Output\r\n        }], polylineMousemove: [{\r\n            type: Output\r\n        }], polylineMouseout: [{\r\n            type: Output\r\n        }], polylineMouseover: [{\r\n            type: Output\r\n        }], polylineMouseup: [{\r\n            type: Output\r\n        }], polylineRightclick: [{\r\n            type: Output\r\n        }], options: [{\r\n            type: Input\r\n        }], path: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\r\n */\r\nclass MapRectangle {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n        this._eventManager = new MapEventManager(this._ngZone);\r\n        this._options = new BehaviorSubject({});\r\n        this._bounds = new BehaviorSubject(undefined);\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\r\n         */\r\n        this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\r\n         */\r\n        this.rectangleClick = this._eventManager.getLazyEmitter('click');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\r\n         */\r\n        this.rectangleDblclick = this._eventManager.getLazyEmitter('dblclick');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\r\n         */\r\n        this.rectangleDrag = this._eventManager.getLazyEmitter('drag');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\r\n         */\r\n        this.rectangleDragend = this._eventManager.getLazyEmitter('dragend');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\r\n         */\r\n        this.rectangleDragstart = this._eventManager.getLazyEmitter('dragstart');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\r\n         */\r\n        this.rectangleMousedown = this._eventManager.getLazyEmitter('mousedown');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\r\n         */\r\n        this.rectangleMousemove = this._eventManager.getLazyEmitter('mousemove');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\r\n         */\r\n        this.rectangleMouseout = this._eventManager.getLazyEmitter('mouseout');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\r\n         */\r\n        this.rectangleMouseover = this._eventManager.getLazyEmitter('mouseover');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\r\n         */\r\n        this.rectangleMouseup = this._eventManager.getLazyEmitter('mouseup');\r\n        /**\r\n         * See\r\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\r\n         */\r\n        this.rectangleRightclick = this._eventManager.getLazyEmitter('rightclick');\r\n    }\r\n    set options(options) {\r\n        this._options.next(options || {});\r\n    }\r\n    set bounds(bounds) {\r\n        this._bounds.next(bounds);\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            this._combineOptions().pipe(take(1)).subscribe(options => {\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\r\n                // user has subscribed to.\r\n                this._ngZone.runOutsideAngular(() => {\r\n                    this.rectangle = new google.maps.Rectangle(options);\r\n                });\r\n                this._assertInitialized();\r\n                this.rectangle.setMap(this._map.googleMap);\r\n                this._eventManager.setTarget(this.rectangle);\r\n            });\r\n            this._watchForOptionsChanges();\r\n            this._watchForBoundsChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._eventManager.destroy();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        if (this.rectangle) {\r\n            this.rectangle.setMap(null);\r\n        }\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\r\n     */\r\n    getBounds() {\r\n        this._assertInitialized();\r\n        return this.rectangle.getBounds();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\r\n     */\r\n    getDraggable() {\r\n        this._assertInitialized();\r\n        return this.rectangle.getDraggable();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\r\n     */\r\n    getEditable() {\r\n        this._assertInitialized();\r\n        return this.rectangle.getEditable();\r\n    }\r\n    /**\r\n     * See\r\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\r\n     */\r\n    getVisible() {\r\n        this._assertInitialized();\r\n        return this.rectangle.getVisible();\r\n    }\r\n    _combineOptions() {\r\n        return combineLatest([this._options, this._bounds]).pipe(map(([options, bounds]) => {\r\n            const combinedOptions = Object.assign(Object.assign({}, options), { bounds: bounds || options.bounds });\r\n            return combinedOptions;\r\n        }));\r\n    }\r\n    _watchForOptionsChanges() {\r\n        this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\r\n            this._assertInitialized();\r\n            this.rectangle.setOptions(options);\r\n        });\r\n    }\r\n    _watchForBoundsChanges() {\r\n        this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\r\n            if (bounds) {\r\n                this._assertInitialized();\r\n                this.rectangle.setBounds(bounds);\r\n            }\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!this._map.googleMap) {\r\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                    'Please wait for the API to load before trying to interact with it.');\r\n            }\r\n            if (!this.rectangle) {\r\n                throw Error('Cannot interact with a Google Map Rectangle before it has been initialized. ' +\r\n                    'Please wait for the Rectangle to load before trying to interact with it.');\r\n            }\r\n        }\r\n    }\r\n}\r\nMapRectangle.ɵfac = function MapRectangle_Factory(t) { return new (t || MapRectangle)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapRectangle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapRectangle, selectors: [[\"map-rectangle\"]], inputs: { options: \"options\", bounds: \"bounds\" }, outputs: { boundsChanged: \"boundsChanged\", rectangleClick: \"rectangleClick\", rectangleDblclick: \"rectangleDblclick\", rectangleDrag: \"rectangleDrag\", rectangleDragend: \"rectangleDragend\", rectangleDragstart: \"rectangleDragstart\", rectangleMousedown: \"rectangleMousedown\", rectangleMousemove: \"rectangleMousemove\", rectangleMouseout: \"rectangleMouseout\", rectangleMouseover: \"rectangleMouseover\", rectangleMouseup: \"rectangleMouseup\", rectangleRightclick: \"rectangleRightclick\" }, exportAs: [\"mapRectangle\"] });\r\nMapRectangle.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapRectangle.propDecorators = {\r\n    options: [{ type: Input }],\r\n    bounds: [{ type: Input }],\r\n    boundsChanged: [{ type: Output }],\r\n    rectangleClick: [{ type: Output }],\r\n    rectangleDblclick: [{ type: Output }],\r\n    rectangleDrag: [{ type: Output }],\r\n    rectangleDragend: [{ type: Output }],\r\n    rectangleDragstart: [{ type: Output }],\r\n    rectangleMousedown: [{ type: Output }],\r\n    rectangleMousemove: [{ type: Output }],\r\n    rectangleMouseout: [{ type: Output }],\r\n    rectangleMouseover: [{ type: Output }],\r\n    rectangleMouseup: [{ type: Output }],\r\n    rectangleRightclick: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapRectangle, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-rectangle',\r\n                exportAs: 'mapRectangle'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { boundsChanged: [{\r\n            type: Output\r\n        }], rectangleClick: [{\r\n            type: Output\r\n        }], rectangleDblclick: [{\r\n            type: Output\r\n        }], rectangleDrag: [{\r\n            type: Output\r\n        }], rectangleDragend: [{\r\n            type: Output\r\n        }], rectangleDragstart: [{\r\n            type: Output\r\n        }], rectangleMousedown: [{\r\n            type: Output\r\n        }], rectangleMousemove: [{\r\n            type: Output\r\n        }], rectangleMouseout: [{\r\n            type: Output\r\n        }], rectangleMouseover: [{\r\n            type: Output\r\n        }], rectangleMouseup: [{\r\n            type: Output\r\n        }], rectangleRightclick: [{\r\n            type: Output\r\n        }], options: [{\r\n            type: Input\r\n        }], bounds: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Traffic Layer via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\r\n */\r\nclass MapTrafficLayer {\r\n    constructor(_map, _ngZone) {\r\n        this._map = _map;\r\n        this._ngZone = _ngZone;\r\n        this._autoRefresh = new BehaviorSubject(true);\r\n        this._destroyed = new Subject();\r\n    }\r\n    /**\r\n     * Whether the traffic layer refreshes with updated information automatically.\r\n     */\r\n    set autoRefresh(autoRefresh) {\r\n        this._autoRefresh.next(autoRefresh);\r\n    }\r\n    ngOnInit() {\r\n        if (this._map._isBrowser) {\r\n            this._combineOptions().pipe(take(1)).subscribe(options => {\r\n                // Create the object outside the zone so its events don't trigger change detection.\r\n                this._ngZone.runOutsideAngular(() => {\r\n                    this.trafficLayer = new google.maps.TrafficLayer(options);\r\n                });\r\n                this._assertInitialized();\r\n                this.trafficLayer.setMap(this._map.googleMap);\r\n            });\r\n            this._watchForAutoRefreshChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        if (this.trafficLayer) {\r\n            this.trafficLayer.setMap(null);\r\n        }\r\n    }\r\n    _combineOptions() {\r\n        return this._autoRefresh.pipe(map(autoRefresh => {\r\n            const combinedOptions = { autoRefresh };\r\n            return combinedOptions;\r\n        }));\r\n    }\r\n    _watchForAutoRefreshChanges() {\r\n        this._combineOptions().pipe(takeUntil(this._destroyed)).subscribe(options => {\r\n            this._assertInitialized();\r\n            this.trafficLayer.setOptions(options);\r\n        });\r\n    }\r\n    _assertInitialized() {\r\n        if (!this._map.googleMap) {\r\n            throw Error('Cannot access Google Map information before the API has been initialized. ' +\r\n                'Please wait for the API to load before trying to interact with it.');\r\n        }\r\n        if (!this.trafficLayer) {\r\n            throw Error('Cannot interact with a Google Map Traffic Layer before it has been initialized. ' +\r\n                'Please wait for the Traffic Layer to load before trying to interact with it.');\r\n        }\r\n    }\r\n}\r\nMapTrafficLayer.ɵfac = function MapTrafficLayer_Factory(t) { return new (t || MapTrafficLayer)(ɵngcc0.ɵɵdirectiveInject(GoogleMap), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nMapTrafficLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapTrafficLayer, selectors: [[\"map-traffic-layer\"]], inputs: { autoRefresh: \"autoRefresh\" }, exportAs: [\"mapTrafficLayer\"] });\r\nMapTrafficLayer.ctorParameters = () => [\r\n    { type: GoogleMap },\r\n    { type: NgZone }\r\n];\r\nMapTrafficLayer.propDecorators = {\r\n    autoRefresh: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapTrafficLayer, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-traffic-layer',\r\n                exportAs: 'mapTrafficLayer'\r\n            }]\r\n    }], function () { return [{ type: GoogleMap }, { type: ɵngcc0.NgZone }]; }, { autoRefresh: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Angular component that renders a Google Maps Transit Layer via the Google Maps JavaScript API.\r\n *\r\n * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\r\n */\r\nclass MapTransitLayer extends MapBaseLayer {\r\n    _initializeObject() {\r\n        this.transitLayer = new google.maps.TransitLayer();\r\n    }\r\n    _setMap() {\r\n        this._assertLayerInitialized();\r\n        this.transitLayer.setMap(this._map.googleMap);\r\n    }\r\n    _unsetMap() {\r\n        if (this.transitLayer) {\r\n            this.transitLayer.setMap(null);\r\n        }\r\n    }\r\n    _assertLayerInitialized() {\r\n        if (!this.transitLayer) {\r\n            throw Error('Cannot interact with a Google Map Transit Layer before it has been initialized. ' +\r\n                'Please wait for the Transit Layer to load before trying to interact with it.');\r\n        }\r\n    }\r\n}\r\nMapTransitLayer.ɵfac = function MapTransitLayer_Factory(t) { return ɵMapTransitLayer_BaseFactory(t || MapTransitLayer); };\r\nMapTransitLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MapTransitLayer, selectors: [[\"map-transit-layer\"]], exportAs: [\"mapTransitLayer\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nconst ɵMapTransitLayer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MapTransitLayer);\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapTransitLayer, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'map-transit-layer',\r\n                exportAs: 'mapTransitLayer'\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst COMPONENTS = [\r\n    GoogleMap,\r\n    MapBaseLayer,\r\n    MapBicyclingLayer,\r\n    MapCircle,\r\n    MapGroundOverlay,\r\n    MapInfoWindow,\r\n    MapKmlLayer,\r\n    MapMarker,\r\n    MapMarkerClusterer,\r\n    MapPolygon,\r\n    MapPolyline,\r\n    MapRectangle,\r\n    MapTrafficLayer,\r\n    MapTransitLayer,\r\n];\r\nclass GoogleMapsModule {\r\n}\r\nGoogleMapsModule.ɵfac = function GoogleMapsModule_Factory(t) { return new (t || GoogleMapsModule)(); };\r\nGoogleMapsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GoogleMapsModule });\r\nGoogleMapsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GoogleMapsModule, { declarations: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer], exports: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GoogleMapsModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: COMPONENTS,\r\n                exports: COMPONENTS\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { GoogleMap, GoogleMapsModule, MapBaseLayer, MapBicyclingLayer, MapCircle, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer };\r\n\r\n//# sourceMappingURL=google-maps.js.map","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJnb29nbGUtbWFwcy5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<div class=\\\"fade-in\\\">\\r\\n  <c-card>\\r\\n    <c-card-header>Google Maps\\r\\n      <!-- Google Maps <c-badge color=\\\"info\\\"></c-badge> -->      \\r\\n    </c-card-header>\\r\\n    <c-card-body>\\r\\n      <div *ngIf=\\\"gmLoader.apiLoaded | async\\\">\\r\\n        <!-- this creates a google map on the page with the given lat/lng from -->\\r\\n        <!-- the component as the initial center of the map: -->\\r\\n         <google-map \\r\\n         #myGoogleMap\\r\\n          height=\\\"450px\\\"\\r\\n          width=\\\"100%\\\"\\r\\n          [zoom]=\\\"zoom\\\"\\r\\n          [center]=\\\"center\\\"\\r\\n          [options]=\\\"options\\\"\\r\\n          \\r\\n         >\\r\\n          <map-marker #marker=\\\"mapMarker\\\"\\r\\n                      *ngFor=\\\"let m of markers; let i = index\\\"\\r\\n                      [label]=\\\"m.label\\\"\\r\\n                      [title]=\\\"m.title\\\"\\r\\n                      [position]=\\\"m.position\\\"\\r\\n                      [options]=\\\"markerOptions\\\"\\r\\n                      (mapClick)=\\\"openInfoWindow(marker, m)\\\">\\r\\n          </map-marker>\\r\\n          <map-info-window>\\r\\n            <a href=\\\"{{activeInfoWindow?.www}}\\\" target=\\\"_blank\\\" class=\\\"px-2\\\"><strong>{{activeInfoWindow?.title}}</strong></a>\\r\\n          </map-info-window>\\r\\n          <map-info-window>{{ infoContent }}</map-info-window>\\r\\n        </google-map> \\r\\n        <!-- <img src=\\\"../../../assets/images/map1.JPG\\\" style=\\\"width: 100%;\\\" /> -->\\r\\n      </div>\\r\\n      <div>\\r\\n      </div>\\r\\n\\r\\n    </c-card-body>\\r\\n  </c-card>\\r\\n</div>\\r\\n\";","import { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { GoogleMap,MapInfoWindow, MapMarker } from '@angular/google-maps';\r\nimport { GoogleMapsLoaderService } from './google-maps-loader.service';\r\nimport { DataService } from '../../service/data.service';\r\nimport { CommonDataService } from '../../Common/common-data.service';\r\nimport { Router } from '@angular/router';\r\n\r\n/// <reference types=\"googlemaps\" />\r\n//https://www.freakyjolly.com/angular-google-maps-integration-with-markers-info-windows-tutorial/\r\n// Marker interface for type safety\r\ninterface Marker {\r\n  position: google.maps.LatLngLiteral;\r\n  label?: string;\r\n  title: string;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-google-maps-integration',\r\n  templateUrl: 'google-maps.component.html',\r\n  styleUrls: ['google-maps.component.scss'],\r\n  providers: [GoogleMapsLoaderService],\r\n})\r\nexport class GoogleMapsComponent implements OnInit, OnDestroy {\r\n  apiLoaded: Observable<boolean>;\r\n  maxZoom = 15;\r\n  minZoom = 8;\r\n  title: string = '';\r\n  latitude: number;\r\n  longitude: number;\r\n  zoom: number;\r\n  address: string;\r\n  private geoCoder;\r\n  public machines: any = [];\r\n  machinecount: number ;\r\n\r\n            latitudes:  any ;\r\n           logntitude:  any ;\r\n            loginId:  any ;\r\n            active:  any ;\r\n            addresss:  any ;\r\n\r\n  @ViewChild('myGoogleMap', { static: false })\r\n  map!: GoogleMap;\r\n  @ViewChild(MapInfoWindow, { static: false })\r\n  info!: MapInfoWindow;\r\n\r\n\r\n  options: google.maps.MapOptions = {\r\n    center: {\r\n      lat: 17.1434937,\r\n      lng: 79.5968943,\r\n    },\r\n    zoom: 11\r\n  };\r\n\r\n  markerOptions: google.maps.MarkerOptions = {draggable: true};\r\n  markerPositions: google.maps.LatLngLiteral[] = [];\r\n\r\n  \r\n\r\n  @ViewChild(MapInfoWindow) infoWindow: MapInfoWindow;\r\n  private activeInfoWindow: Marker;\r\n\r\n  get infoWindowContent() {\r\n    return this.activeInfoWindow;\r\n  }\r\n\r\n  set infoWindowContent(marker) {\r\n    this.title = marker.title;\r\n    this.activeInfoWindow = marker;\r\n  }\r\n\r\n  constructor(\r\n    public gmLoader: GoogleMapsLoaderService,private commonData: CommonDataService,private service: DataService, \r\n    @Inject(DOCUMENT) private document: any\r\n  ) { }\r\n\r\n  ngOnInit() { \r\n    this.getLocations() \r\n  }\r\n  ngOnDestroy() {\r\n    this.removeGoogleMapScript();\r\n  }\r\n  getLocations(){\r\n    debugger;\r\n    this.service.getMachines(this.commonData.merchantId).subscribe((resp: any) => {\r\n      console.log(\"getMachines Reponse:::\" + JSON.stringify(resp));\r\n      if (resp && resp.statusCode == 200) {\r\n        this.machines = resp.rowMachines;\r\n        \r\n        for (let i = 0; i < this.machines.length; i++) {\r\n          for (var j = 0; j <= this.machines[0].machines.length; j++) {\r\n            \r\n            this.latitudes=this.machines[i].machines[j].latitude\r\n            this.logntitude=this.machines[i].machines[j].logntitude\r\n            this.loginId=this.machines[i].machines[j].loginId;\r\n            this.active=this.machines[i].machines[j].active;\r\n            this.addresss=this.machines[i].machines[j].address;\r\n            \r\n          }\r\n        }\r\n        \r\n        this.setPositions(this.machines);      \r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  \r\n  markers: Marker[] = [\r\n    {\r\n      position: {\r\n        lat: 17.1434937,\r\n        lng: 79.5968943,\r\n      },\r\n      label: 'SVEC11',\r\n      title: 'ComputerScience,Suryapet',\r\n    },\r\n    {\r\n      position: {\r\n        lat: 12.1454937,\r\n        lng: 79.5968943,\r\n      },\r\n      label: 'SVEC12',\r\n      title: 'EEE,Suryapet',\r\n    },\r\n    {\r\n      position: {\r\n        lat: 11.1434937,\r\n        lng: 75.5968943,\r\n      },\r\n      label: 'SVEC13',\r\n      title: 'Mech,Suryapet',\r\n    },\r\n  ]\r\n\r\n  setPositions(machines:any []) {\r\n    debugger;\r\n    this.markers.forEach((marker) => {\r\n      const {lat, lng} = {...marker.position};\r\n      this.markerPositions.push({lat, lng});\r\n    });\r\n  }\r\n\r\n  onMapClicked(event: any){\r\n    debugger;\r\n    console.table(event.coords);\r\n    this.latitude = event.coords.lat;\r\n    this.longitude = event.coords.lng;\r\n  }\r\n\r\n  openInfoWindow(marker: MapMarker, item: Marker) {\r\n    debugger;\r\n    this.infoWindowContent = item;\r\n    this.infoWindow.open(marker);\r\n  }\r\n\r\n  zoomIn() {\r\n    if (this.zoom < this.maxZoom) this.zoom++;\r\n    console.log('Get Zoom',this.map.getZoom());\r\n  }\r\n\r\n  zoomOut() {\r\n    if (this.zoom > this.minZoom) this.zoom--;\r\n  }\r\n\r\n  logCenter() {\r\n    console.log(JSON.stringify(this.map.getCenter()))\r\n  }\r\n\r\n  removeGoogleMapScript() {\r\n    // todo: temp workaround for 'You have included the Google Maps API multiple times on this page'\r\n    const keywords = ['maps.googleapis'];\r\n\r\n    // Remove google from BOM (window object)\r\n    window.google = undefined;\r\n\r\n    // Remove google map scripts from DOM\r\n    const scripts = this.document.head.getElementsByTagName('script');\r\n    for (let i = scripts.length - 1; i >= 0; i--) {\r\n      const scriptSource = scripts[i].getAttribute('src');\r\n      if (scriptSource != null) {\r\n        if (keywords.filter(item => scriptSource.includes(item)).length) {\r\n          scripts[i].remove();\r\n          // scripts[i].parentNode.removeChild(scripts[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}