{"version":3,"sources":["./src/app/views/merchant/merchant.component.ts","./src/app/views/merchant/validation-forms.service.ts","./src/app/views/merchant/merchant.component.css","./src/app/views/merchant/merchant.component.html","./src/app/views/merchant/merchant-routing.module.ts","./src/app/views/merchant/merchant.module.ts"],"names":[],"mappings":"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","file":"views-merchant-merchant-module-es2015.js","sourcesContent":["import {\r\n  Component,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  FormControl,\r\n  AbstractControl,\r\n  FormGroupName,\r\n} from '@angular/forms';\r\n\r\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\r\nimport { ValidationFormsService } from './validation-forms.service';\r\nimport { CommonDataService } from '../../Common/common-data.service';\r\nimport { DataService } from '../../service/data.service';\r\nimport { Router } from '@angular/router';\r\nimport { Customer } from './customer';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { createAutoCorrectedDatePipe } from 'text-mask-addons';\r\n/** passwords must match - custom validator */\r\nexport const confirmPasswordValidator: ValidatorFn = (\r\n  control: FormGroup\r\n  \r\n): ValidationErrors | null => {\r\n  const password = control.get('password');\r\n  const confirm = control.get('confirmPassword');\r\n  return password && confirm && password.value === confirm.value\r\n    ? null\r\n    : { passwordMismatch: true };\r\n    \r\n};\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  templateUrl: './merchant.component.html',\r\n  styleUrls: ['./merchant.component.css'],\r\n  providers: [ValidationFormsService],\r\n})\r\nexport class MerchantComponent implements OnDestroy, OnInit, OnChanges {\r\n\r\n  public dateModel = '';\r\n  public dateMask = {\r\n    mask: [/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/],\r\n    pipe: createAutoCorrectedDatePipe('mm/dd/yyyy'),\r\n    placeholder: 'Please enter a date',\r\n    keepCharPositions: true,\r\n  };\r\n\r\n  minDate = new Date(2017, 5, 10);\r\n  maxDate = new Date(2022, 9, 15);\r\n\r\n  bsValue: Date = new Date();\r\n  bsRangeValue: any = [new Date(2020, 7, 4), new Date(2020, 7, 20)];\r\n\r\n  customer:any = {};\r\n  private _setTab: number;\r\n  get setTab() {\r\n    return this._setTab;\r\n  }\r\n  set setTab(value: number) {\r\n    this._setTab = value || 0;\r\n  }\r\n  private interval;\r\n\r\n  private _lorem: string[] = [\r\n      ];\r\n  public get lorem() {\r\n    return [...this._lorem];\r\n  }\r\n\r\n  private _tabs: any[] = [\r\n    { header: 'Merchant Info', panel: this.lorem[0], icon: 'cil-user' },\r\n    { header: 'Payment Info', panel: this.lorem[1], icon: 'cil-mobile' },\r\n    { header: 'Payment Gateway', panel: this.lorem[2], icon: 'cil-credit-card' },\r\n    \r\n    //{ header: 'Certificates', panel: this.lorem[3], icon: 'cil-envelope-closed' },\r\n  ];\r\n\r\n  public get tabs() {\r\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n    // console.log('tabs:', tabs);\r\n    // return tabs;\r\n    return this._tabs;\r\n  }\r\n\r\n  public get tabs2() {\r\n    // const tabs = this._tabs.map((item) => Object.assign(Object.create(null), item));\r\n    // console.log('tabs:', tabs);\r\n    // return tabs;\r\n    return this._tabs.filter((tab) => !tab.disabled);\r\n  }\r\n\r\n  simpleForm: FormGroup;\r\n  submitted = false;\r\n  formErrors: any;\r\n\r\n  constructor(private fb: FormBuilder, public vf: ValidationFormsService, private service: DataService, private commonData: CommonDataService,private router: Router, ) {\r\n    this.formErrors = this.vf.errorMessages;\r\n    this.createForm();\r\n    this.setTab = 0;\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // clearInterval(this.interval);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    console.log('ngOnChanges', changes, this.setTab);\r\n  }\r\n\r\n  onTabChange(e) {\r\n    console.log('onTabChange', e);\r\n  }\r\n\r\n  createForm() {\r\n    this.simpleForm = this.fb.group(\r\n      {\r\n        merchantName: ['', [Validators.required]],\r\n        loginId: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(this.vf.formRules.loginIdMin),\r\n            Validators.pattern(this.vf.formRules.nonEmpty),\r\n          ],\r\n        ],\r\n        merchantId: ['', [Validators.required]],\r\n        companyName: ['', [Validators.required]],\r\n\r\n        billingPlan: ['', [Validators.required]],\r\n        panNo: ['', [Validators.required]],\r\n        gstNo: ['', [Validators.required]],\r\n\r\n        phone: ['', [Validators.required]],\r\n        \r\n        address: ['', [Validators.required]],\r\n\r\n        country: ['', [Validators.required]],\r\n        pincode: ['', [Validators.required]],\r\n\r\n        primaryContact: ['', [Validators.required]],\r\n        primaryName: ['', [Validators.required]],\r\n        primaryPhone: ['', [Validators.required]],\r\n        primaryEmail: ['', [Validators.required]],\r\n        \r\n        secondaryContact: ['', [Validators.required]],\r\n        secondaryName: ['', [Validators.required]],\r\n        secondaryPhone: ['', [Validators.required]],\r\n        secondaryEmail: ['', [Validators.required]],\r\n        city: ['', [Validators.required]],\r\n        state: ['', [Validators.required]],\r\n        email: ['', [Validators.required, Validators.email]],\r\n\r\n\r\n        date:['', [Validators.required]],\r\n        modeofPayment:['', [Validators.required]],\r\n        details:['', [Validators.required]],\r\n        amount:['', [Validators.required]],\r\n\r\n\r\n        paymentgateway:['', [Validators.required]],\r\n        user:['', [Validators.required]],\r\n        password:['', [Validators.required]],\r\n        testapikey:['', [Validators.required]],\r\n        productionapikey:['', [Validators.required]],\r\n        callbackUrl:['', [Validators.required]],\r\n        paymentNotificationUrl:['', [Validators.required]],\r\n        successNotificationUrl:['', [Validators.required]],\r\n        acceptNotificationUrl:['', [Validators.required]],\r\n        remarksNotificationUrl:['', [Validators.required]],\r\n\r\n      },\r\n      { validators: confirmPasswordValidator }\r\n    );\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.simpleForm.controls;\r\n  }\r\n\r\n  onReset() {\r\n    this.submitted = false;\r\n    this.simpleForm.reset();\r\n  }\r\n\r\n  onValidate() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    return this.simpleForm.status === 'VALID';\r\n  }\r\n\r\n  onSaveMerchant(customer : Customer){\r\n    debugger;\r\n    this.service.saveCustomers(customer).subscribe((resp: any) => {\r\n      console.log(\"login Reponse:::\" + JSON.stringify(resp));\r\n      if(resp && resp.statusCode == 200) {\r\n          console.log(\"Sucess\")\r\n          alert('SUCCESS!');\r\n      }    \r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    debugger;\r\n    //console.warn(this.onValidate(), this.simpleForm.value);\r\n    if (this.onValidate()) {\r\n      console.warn(this.simpleForm.value);\r\n      alert('SUCCESS!');\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidationFormsService {\r\n\r\n  errorMessages: any;\r\n\r\n  formRules = {\r\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\r\n    loginIdMin: 5,\r\n    passwordMin: 6,\r\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\r\n  };\r\n\r\n  formErrors = {\r\n    firstName: '',\r\n    lastName: '',\r\n    loginId: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    accept: false,\r\n  };\r\n\r\n  constructor() {\r\n    this.errorMessages = {\r\n      firstName: {\r\n        required: 'First name is required',\r\n      },\r\n      lastName: {\r\n        required: 'Last name is required',\r\n      },\r\n      loginId: {\r\n        required: 'loginId is required',\r\n        minLength: `'loginId must be ${this.formRules.loginIdMin} characters or more`,\r\n        pattern: 'Must contain letters and/or numbers, no trailing spaces'\r\n      },\r\n      email: {\r\n        required: 'required',\r\n        email: 'Invalid email address',\r\n      },\r\n      password: {\r\n        required: 'Password is required',\r\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\r\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\r\n      },\r\n      confirmPassword: {\r\n        required: 'Password confirmation is required',\r\n        passwordMismatch: 'Passwords must match'\r\n      },\r\n      accept: {\r\n        requiredTrue: 'You have to accept our Terms and Conditions'\r\n      },\r\n    };\r\n  }\r\n}\r\n","export default \"::ng-deep .card-body {\\r\\n  flex: 1 1 auto;\\r\\n  min-height: 1px;\\r\\n  padding: 1.25rem;\\r\\n  margin-bottom: 280px;\\r\\n}\\r\\n\\r\\n::ng-deep .nav-tabs-boxed .tab-content {\\r\\n  padding: 0.75rem 1.25rem;\\r\\n  border: 1px solid;\\r\\n  border-radius: 0 0.25rem 0.25rem 0.25rem;\\r\\n  color: #768192;\\r\\n  background-color: #fff;\\r\\n  border-color: #d8dbe0;\\r\\n}\\r\\n\\r\\n::ng-deep .card-style {\\r\\n  border: none;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmNoYW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsaUJBQWlCO0VBQ2pCLHdDQUF3QztFQUN4QyxjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLFlBQVk7QUFDZCIsImZpbGUiOiJtZXJjaGFudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOjpuZy1kZWVwIC5jYXJkLWJvZHkge1xyXG4gIGZsZXg6IDEgMSBhdXRvO1xyXG4gIG1pbi1oZWlnaHQ6IDFweDtcclxuICBwYWRkaW5nOiAxLjI1cmVtO1xyXG4gIG1hcmdpbi1ib3R0b206IDI4MHB4O1xyXG59XHJcblxyXG46Om5nLWRlZXAgLm5hdi10YWJzLWJveGVkIC50YWItY29udGVudCB7XHJcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkO1xyXG4gIGJvcmRlci1yYWRpdXM6IDAgMC4yNXJlbSAwLjI1cmVtIDAuMjVyZW07XHJcbiAgY29sb3I6ICM3NjgxOTI7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICBib3JkZXItY29sb3I6ICNkOGRiZTA7XHJcbn1cclxuXHJcbjo6bmctZGVlcCAuY2FyZC1zdHlsZSB7XHJcbiAgYm9yZGVyOiBub25lO1xyXG59Il19 */\";","export default \"<div class=\\\"fade-in\\\">\\r\\n  <c-row>\\r\\n    <c-col>\\r\\n      <c-card>\\r\\n        <c-card-body>\\r\\n          <c-tabset  fill=\\\"fill\\\" variant=\\\"pills\\\" boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\r\\n            <c-tablist>\\r\\n              <c-tab *ngFor=\\\"let tab of tabs2\\\">\\r\\n                <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\r\\n                {{tab.header}}\\r\\n              </c-tab>\\r\\n            </c-tablist>\\r\\n            <c-tab-content>\\r\\n              <c-tab-pane *ngFor=\\\"let tab of tabs2; let i = index\\\">\\r\\n\\r\\n                <ng-container *ngIf=\\\"i===0\\\">\\r\\n                  <c-col md=\\\"12\\\" >\\r\\n                    <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                      <c-row>\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"merchantName\\\">Merchant Name :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"merchantName\\\"\\r\\n                               formControlName=\\\"merchantName\\\"\\r\\n                               placeholder=\\\"Merchant name\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.merchantName.touched) && f.merchantName.invalid, 'is-valid': f.loginId.touched && f.merchantName.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['merchantName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['merchantName'].errors.required\\\">Merchant Short Name is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"loginId\\\">loginId :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"loginId\\\"\\r\\n                               formControlName=\\\"loginId\\\"\\r\\n                               placeholder=\\\"loginId\\\"\\r\\n                               autocomplete=\\\"loginId\\\"\\r\\n                               required\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.loginId.touched) && f.loginId.errors, 'is-valid': f.merchantId.touched && !f.loginId.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['loginId'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['loginId'].errors.required\\\">LoginId is required</div>\\r\\n                          <div *ngIf=\\\"f['loginId'].errors.minlength\\\">{{formErrors.loginId.minLength}}</div>\\r\\n                          <div *ngIf=\\\"f['loginId'].errors.pattern\\\">{{formErrors.loginId.pattern}}</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">company Reg Certificate Attachment :</h6>\\r\\n                        <c-col md=\\\"9\\\">\\r\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" accept=\\\"pdf\\\" name=\\\"file-input\\\">\\r\\n                        </c-col>\\r\\n                      </c-form-group>\\r\\n                      <!-- <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"merchantId\\\">merchantId :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"merchantId\\\"\\r\\n                               formControlName=\\\"merchantId\\\"\\r\\n                               placeholder=\\\"merchantId\\\"\\r\\n                               autocomplete=\\\"family-name\\\"\\r\\n                               required\\r\\n                               [ngClass]=\\\"{ 'is-invalid':  (submitted || f.merchantId.touched) && f.merchantId.invalid, 'is-valid': f.panNo.touched && f.merchantId.valid }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['merchantId'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['merchantId'].errors.required\\\">MerchantId is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group> -->\\r\\n                    </c-row>\\r\\n                    <c-row>\\r\\n                      <c-form-group cCol md=\\\"3\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"panNo\\\">Pan Number :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"panNo\\\"\\r\\n                               formControlName=\\\"panNo\\\"\\r\\n                               placeholder=\\\"Pan Number\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.panNo.touched) && f.panNo.invalid, 'is-valid': f.gstNo.touched && f.panNo.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['panNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['panNo'].errors.required\\\">Pan Number is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                      <c-form-group cCol md=\\\"3\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">Pan File Attachment :</h6>\\r\\n                        <c-col md=\\\"9\\\">\\r\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" accept=\\\"pdf\\\" name=\\\"file-input\\\">\\r\\n                        </c-col>\\r\\n                      </c-form-group>\\r\\n\\r\\n                      <c-form-group cCol md=\\\"3\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"gstNo\\\">Gst Number :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"gstNo\\\"\\r\\n                               formControlName=\\\"gstNo\\\"\\r\\n                               placeholder=\\\"Gst Number\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.gstNo.touched) && f.gstNo.invalid, 'is-valid': f.billingPlan.touched && f.gstNo.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['gstNo'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['gstNo'].errors.required\\\">Gst Number is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n      \\r\\n                      <c-form-group cCol md=\\\"3\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"file-input\\\">Gst File Attachment :</h6>\\r\\n                        <c-col md=\\\"9\\\">\\r\\n                          <input cInput type=\\\"file\\\" id=\\\"file-input\\\" name=\\\"file-input\\\">\\r\\n                        </c-col>\\r\\n                      </c-form-group>\\r\\n                    </c-row>\\r\\n                    <c-row>\\r\\n                      \\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"billingPlan\\\">Billing Plan :</h6>\\r\\n                               <select  cSelect name=\\\"billingPlan\\\"\\r\\n                               id=\\\"billingPlan\\\"\\r\\n                               formControlName=\\\"billingPlan\\\"\\r\\n                               placeholder=\\\"Billing Plan\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.billingPlan.touched) && f.billingPlan.invalid, 'is-valid': f.phone.touched && f.billingPlan.valid  }\\\"                              \\r\\n                               >\\r\\n                                <option value=\\\"1\\\">Basic</option>\\r\\n                                <option value=\\\"2\\\">Standard</option>\\r\\n                                <option value=\\\"3\\\">Enterprise</option>\\r\\n                                <option value=\\\"3\\\">custom</option>\\r\\n                              </select>\\r\\n                               <div *ngIf=\\\"submitted && f['billingPlan'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['billingPlan'].errors.required\\\">Billing Plan is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"phone\\\">Merchant Phone Number :</h6>\\r\\n                        <input cInput\\r\\n                              id=\\\"phone\\\"\\r\\n                              formControlName=\\\"phone\\\"\\r\\n                              placeholder=\\\"Phone Number\\\"\\r\\n                              autocomplete=\\\"given-name\\\"\\r\\n                              required\\r\\n                              [autofocus]=\\\"true\\\"\\r\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.phone.touched) && f.phone.invalid, 'is-valid': f.address.touched && f.phone.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['phone'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['phone'].errors.required\\\">Merchant Phone Number is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                       <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"phone\\\">Merchant Email :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"email\\\"\\r\\n                               type=\\\"email\\\"\\r\\n                               formControlName=\\\"email\\\"\\r\\n                               placeholder=\\\"Email\\\"\\r\\n                               autocomplete=\\\"email\\\"\\r\\n                               required\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['email'].errors.required\\\">Merchant Email is required</div>\\r\\n                          <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\r\\n                        </div>\\r\\n                      </c-form-group> \\r\\n\\r\\n                    </c-row>\\r\\n                    <c-row>\\r\\n                    <c-form-group cCol md=\\\"4\\\">\\r\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"address\\\">Address :</h6>\\r\\n                      <input cInput\\r\\n                            id=\\\"address\\\"\\r\\n                            formControlName=\\\"address\\\"\\r\\n                            placeholder=\\\"enter street name\\\"\\r\\n                            autocomplete=\\\"given-name\\\"\\r\\n                            required\\r\\n                            [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.address.touched) && f.address.invalid, 'is-valid': f.country.touched && f.address.valid  }\\\" />\\r\\n                      <div *ngIf=\\\"submitted && f['address'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"f['address'].errors.required\\\">Address is required</div>\\r\\n                      </div>\\r\\n                    </c-form-group>\\r\\n\\r\\n                    <c-form-group cCol md=\\\"4\\\">\\r\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"city\\\">City :</h6>\\r\\n                      <input cInput\\r\\n                            id=\\\"city\\\"\\r\\n                            formControlName=\\\"city\\\"\\r\\n                            placeholder=\\\"city\\\"\\r\\n                            autocomplete=\\\"given-name\\\"\\r\\n                            required\\r\\n                            [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.city.touched) && f.city.invalid, 'is-valid': f.country.touched && f.city.valid  }\\\" />\\r\\n                      <div *ngIf=\\\"submitted && f['city'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"f['city'].errors.required\\\">city is required</div>\\r\\n                      </div>\\r\\n                    </c-form-group>\\r\\n\\r\\n                    <c-form-group cCol md=\\\"4\\\">\\r\\n                      <h6 class=\\\"col-form-label\\\" for=\\\"state\\\">State :</h6>\\r\\n                      <input cInput\\r\\n                            id=\\\"state\\\"\\r\\n                            formControlName=\\\"state\\\"\\r\\n                            placeholder=\\\"state\\\"\\r\\n                            autocomplete=\\\"given-name\\\"\\r\\n                            required\\r\\n                            [autofocus]=\\\"true\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.state.touched) && f.state.invalid, 'is-valid': f.country.touched && f.state.valid  }\\\" />\\r\\n                      <div *ngIf=\\\"submitted && f['state'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"f['state'].errors.required\\\">state is required</div>\\r\\n                      </div>\\r\\n                    </c-form-group>\\r\\n\\r\\n                    </c-row>\\r\\n                    <c-row>\\r\\n                      <c-form-group cCol md=\\\"3\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"country\\\">country :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"country\\\"\\r\\n                               formControlName=\\\"country\\\"\\r\\n                               placeholder=\\\"country\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.country.touched) && f.country.invalid, 'is-valid': f.pincode.touched && f.country.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['country'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['country'].errors.required\\\">country is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n      \\r\\n                      <c-form-group cCol md=\\\"3\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"pincode\\\">pincode :</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"pincode\\\"\\r\\n                               formControlName=\\\"pincode\\\"\\r\\n                               placeholder=\\\"pincode\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.pincode.touched) && f.pincode.invalid, 'is-valid': f.primaryContact.touched && f.pincode.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['pincode'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['pincode'].errors.required\\\">pincode is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n                    </c-row>\\r\\n                    <c-row>\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryName\\\">primaryName :</h6>\\r\\n                        <input cInput\\r\\n                              id=\\\"primaryName\\\"\\r\\n                              formControlName=\\\"primaryName\\\"\\r\\n                              placeholder=\\\"primaryName\\\"\\r\\n                              autocomplete=\\\"given-name\\\"\\r\\n                              required\\r\\n                              [autofocus]=\\\"true\\\"\\r\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryName.touched) && f.primaryName.invalid, 'is-valid': f.primaryPhone.touched && f.primaryName.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['primaryName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['primaryName'].errors.required\\\">primaryName is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryPhone\\\">primaryPhone :</h6>\\r\\n                        <input cInput\\r\\n                              id=\\\"primaryPhone\\\"\\r\\n                              formControlName=\\\"primaryPhone\\\"\\r\\n                              placeholder=\\\"primaryPhone\\\"\\r\\n                              autocomplete=\\\"given-name\\\"\\r\\n                              required\\r\\n                              [autofocus]=\\\"true\\\"\\r\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryPhone.touched) && f.primaryPhone.invalid, 'is-valid': f.primaryEmail.touched && f.primaryPhone.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['primaryPhone'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['primaryPhone'].errors.required\\\">primaryPhone is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"primaryEmail\\\">primaryEmail :</h6>\\r\\n                        <input cInput\\r\\n                              id=\\\"primaryEmail\\\"\\r\\n                              formControlName=\\\"primaryEmail\\\"\\r\\n                              placeholder=\\\"primaryEmail\\\"\\r\\n                              autocomplete=\\\"given-name\\\"\\r\\n                              required\\r\\n                              [autofocus]=\\\"true\\\"\\r\\n                              [ngClass]=\\\"{ 'is-invalid': (submitted || f.primaryEmail.touched) && f.primaryEmail.invalid, 'is-valid': f.secondaryContact.touched && f.primaryEmail.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['primaryEmail'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['primaryEmail'].errors.required\\\">primaryEmail is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                    </c-row>\\r\\n\\r\\n                    <c-row>\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryName\\\">secondaryName:</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"secondaryName\\\"\\r\\n                               formControlName=\\\"secondaryName\\\"\\r\\n                               placeholder=\\\"secondaryName\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryName.touched) && f.secondaryName.invalid, 'is-valid': f.secondaryName.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['secondaryName'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['secondaryName'].errors.required\\\">secondaryName is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryPhone\\\">secondaryPhone:</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"secondaryPhone\\\"\\r\\n                               formControlName=\\\"secondaryPhone\\\"\\r\\n                               placeholder=\\\"secondaryPhone\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryPhone.touched) && f.secondaryPhone.invalid, 'is-valid': f.secondaryPhone.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['secondaryPhone'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['secondaryPhone'].errors.required\\\">secondaryPhone is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                      <c-form-group cCol md=\\\"4\\\">\\r\\n                        <h6 class=\\\"col-form-label\\\" for=\\\"secondaryEmail\\\">secondaryEmail:</h6>\\r\\n                        <input cInput\\r\\n                               id=\\\"secondaryEmail\\\"\\r\\n                               formControlName=\\\"secondaryEmail\\\"\\r\\n                               placeholder=\\\"secondaryEmail\\\"\\r\\n                               autocomplete=\\\"given-name\\\"\\r\\n                               required\\r\\n                               [autofocus]=\\\"true\\\"\\r\\n                               [ngClass]=\\\"{ 'is-invalid': (submitted || f.secondaryEmail.touched) && f.secondaryEmail.invalid, 'is-valid': f.secondaryEmail.valid  }\\\" />\\r\\n                        <div *ngIf=\\\"submitted && f['secondaryEmail'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f['secondaryEmail'].errors.required\\\">secondaryEmail is required</div>\\r\\n                        </div>\\r\\n                      </c-form-group>\\r\\n\\r\\n                    </c-row>\\r\\n\\r\\n                      <c-form-group>\\r\\n                        <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Submit</button>\\r\\n                        <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                        <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n                      </c-form-group>\\r\\n                    </form>\\r\\n                  </c-col>\\r\\n                  </ng-container>\\r\\n      \\r\\n                  <ng-container *ngIf=\\\"i===1\\\">\\r\\n                    <c-col md=\\\"12\\\" >\\r\\n                      <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                        <c-row>                         \\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"date\\\">Date :</h6>\\r\\n                            <input cInput\\r\\n                                   id=\\\"date-input\\\" \\r\\n                                   type=\\\"date\\\" \\r\\n                                   name=\\\"date-input\\\" \\r\\n                                   placeholder=\\\"date\\\"\\r\\n                                   formControlName=\\\"date\\\"\\r\\n                                   autocomplete=\\\"given-name\\\"\\r\\n                                   required\\r\\n                                   [autofocus]=\\\"true\\\"\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.date.touched) && f.date.invalid, 'is-valid': f.loginId.touched && f.date.valid  }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['date'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['date'].errors.required\\\">date is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"modeofPayment\\\">mode of Payment :</h6>\\r\\n                                   <select  cSelect name=\\\"modeofPayment\\\"\\r\\n                                   id=\\\"modeofPayment\\\"\\r\\n                                   formControlName=\\\"modeofPayment\\\"\\r\\n                                   placeholder=\\\"Billing Plan\\\"\\r\\n                                   autocomplete=\\\"given-name\\\"\\r\\n                                   required\\r\\n                                   [autofocus]=\\\"true\\\"\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.modeofPayment.touched) && f.modeofPayment.invalid, 'is-valid': f.phone.touched && f.modeofPayment.valid  }\\\"                              \\r\\n                                   >\\r\\n                                    <option value=\\\"1\\\">Card</option>\\r\\n                                    <option value=\\\"2\\\">OnlineTransfer</option>\\r\\n                                    <option value=\\\"3\\\">Cash</option>\\r\\n                                  </select>\\r\\n                                   <div *ngIf=\\\"submitted && f['modeofPayment'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['modeofPayment'].errors.required\\\">ModeofPayment is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"details\\\">Details :</h6>\\r\\n                          <input cInput\\r\\n                                 id=\\\"details\\\"\\r\\n                                 formControlName=\\\"details\\\"\\r\\n                                 placeholder=\\\"details\\\"\\r\\n                                 autocomplete=\\\"family-name\\\"\\r\\n                                 required\\r\\n                                 [ngClass]=\\\"{ 'is-invalid':  (submitted || f.details.touched) && f.details.invalid, 'is-valid': f.panNo.touched && f.details.valid }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['details'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['details'].errors.required\\\">details is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                      </c-row>\\r\\n                      <c-row>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"amount\\\">Amount :</h6>\\r\\n                          <input cInput\\r\\n                                 id=\\\"amount\\\"\\r\\n                                 formControlName=\\\"amount\\\"\\r\\n                                 placeholder=\\\"amount\\\"\\r\\n                                 autocomplete=\\\"given-name\\\"\\r\\n                                 required\\r\\n                                 [autofocus]=\\\"true\\\"\\r\\n                                 [ngClass]=\\\"{ 'is-invalid': (submitted || f.amount.touched) && f.amount.invalid, 'is-valid': f.gstNo.touched && f.amount.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['amount'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['amount'].errors.required\\\">Billing Plan is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>                                \\r\\n                      </c-row>\\r\\n                        <c-form-group>\\r\\n                          <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Save</button>\\r\\n                          <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                          <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n                        </c-form-group>\\r\\n                      </form>\\r\\n                    </c-col>\\r\\n                    </ng-container>\\r\\n      \\r\\n                    <ng-container *ngIf=\\\"i===2\\\">\\r\\n                      <c-col md=\\\"12\\\" >\\r\\n                        <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\r\\n                          <c-row>\\r\\n                            <c-form-group cCol md=\\\"4\\\">\\r\\n                              <h6 class=\\\"col-form-label\\\" for=\\\"paymentgateway\\\">Payment Gateway :</h6>\\r\\n                                     <select  cSelect name=\\\"paymentgateway\\\"\\r\\n                                     id=\\\"paymentgateway\\\"\\r\\n                                     formControlName=\\\"paymentgateway\\\"\\r\\n                                     placeholder=\\\"paymentgateway\\\"\\r\\n                                     autocomplete=\\\"given-name\\\"\\r\\n                                     required\\r\\n                                     [autofocus]=\\\"true\\\"\\r\\n                                     [ngClass]=\\\"{ 'is-invalid': (submitted || f.paymentgateway.touched) && f.paymentgateway.invalid, 'is-valid': f.phone.touched && f.paymentgateway.valid  }\\\">\\r\\n                                      <option value=\\\"1\\\">Paytm</option>\\r\\n                                      <option value=\\\"2\\\">RazorPay</option>\\r\\n                                      <option value=\\\"3\\\">PayU</option>\\r\\n                                    </select>\\r\\n                                     <div *ngIf=\\\"submitted && f['paymentgateway'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"f['paymentgateway'].errors.required\\\">paymentgateway is required</div>\\r\\n                              </div>\\r\\n                            </c-form-group>\\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"user\\\">User :</h6>\\r\\n                            <input cInput\\r\\n                                   id=\\\"user\\\"\\r\\n                                   formControlName=\\\"user\\\"\\r\\n                                   placeholder=\\\"user\\\"\\r\\n                                   autocomplete=\\\"user\\\"\\r\\n                                   required\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.user.touched) && f.user.errors, 'is-valid': f.merchantId.touched && !f.user.errors }\\\" />\\r\\n                              <div *ngIf=\\\"submitted && f['user'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['user'].errors.required\\\">User is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"password\\\">Password :</h6>\\r\\n                            <input cInput\\r\\n                                  type=\\\"password\\\"\\r\\n                                  placeholder=\\\"Password\\\"\\r\\n                                  autocomplete=\\\"current-password\\\"\\r\\n                                  required\\r\\n                                   id=\\\"password\\\"\\r\\n                                   autocomplete=\\\"family-name\\\"\\r\\n                                   required\\r\\n                                   [ngClass]=\\\"{ 'is-invalid':  (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.panNo.touched && f.password.valid }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                        </c-row>\\r\\n                        <c-row>\\r\\n                          <c-form-group cCol md=\\\"6\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"testapikey\\\">TestApikey :</h6>\\r\\n                            <input cInput\\r\\n                                   id=\\\"testapikey\\\"\\r\\n                                   formControlName=\\\"testapikey\\\"\\r\\n                                   placeholder=\\\"testapikey\\\"\\r\\n                                   autocomplete=\\\"given-name\\\"\\r\\n                                   required\\r\\n                                   [autofocus]=\\\"true\\\"\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.testapikey.touched) && f.testapikey.invalid, 'is-valid': f.gstNo.touched && f.testapikey.valid  }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['testapikey'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['testapikey'].errors.required\\\">TestApikey is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                          <c-form-group cCol md=\\\"6\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"productionapikey\\\">ProductionApikey :</h6>\\r\\n                            <input cInput\\r\\n                                   id=\\\"productionapikey\\\"\\r\\n                                   formControlName=\\\"productionapikey\\\"\\r\\n                                   placeholder=\\\"productionapikey\\\"\\r\\n                                   autocomplete=\\\"given-name\\\"\\r\\n                                   required\\r\\n                                   [autofocus]=\\\"true\\\"\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.productionapikey.touched) && f.productionapikey.invalid, 'is-valid': f.billingPlan.touched && f.productionapikey.valid  }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['productionapikey'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['productionapikey'].errors.required\\\">productionapikey is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n          \\r\\n                        </c-row>\\r\\n                        <c-row>\\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"callbackUrl\\\">CallbackUrl :</h6>\\r\\n                            <input cInput\\r\\n                                   id=\\\"callbackUrl\\\"\\r\\n                                   formControlName=\\\"callbackUrl\\\"\\r\\n                                   placeholder=\\\"callbackUrl\\\"\\r\\n                                   autocomplete=\\\"given-name\\\"\\r\\n                                   required\\r\\n                                   [autofocus]=\\\"true\\\"\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.callbackUrl.touched) && f.callbackUrl.invalid, 'is-valid': f.phone.touched && f.callbackUrl.valid  }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['callbackUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['callbackUrl'].errors.required\\\">CallbackUrl is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"paymentNotificationUrl\\\">paymentNotificationUrl :</h6>\\r\\n                            <input cInput\\r\\n                                  id=\\\"paymentNotificationUrl\\\"\\r\\n                                  formControlName=\\\"paymentNotificationUrl\\\"\\r\\n                                  placeholder=\\\"paymentNotificationUrl\\\"\\r\\n                                  autocomplete=\\\"given-name\\\"\\r\\n                                  required\\r\\n                                  [autofocus]=\\\"true\\\"\\r\\n                                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.paymentNotificationUrl.touched) && f.paymentNotificationUrl.invalid, 'is-valid': f.address.touched && f.paymentNotificationUrl.valid  }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['paymentNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['paymentNotificationUrl'].errors.required\\\">paymentNotificationUrl is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                        </c-row>\\r\\n                        <c-row>\\r\\n                        <c-form-group cCol md=\\\"4\\\">\\r\\n                          <h6 class=\\\"col-form-label\\\" for=\\\"successNotificationUrl\\\">SuccessNotificationUrl :</h6>\\r\\n                          <input cInput\\r\\n                                id=\\\"successNotificationUrl\\\"\\r\\n                                formControlName=\\\"successNotificationUrl\\\"\\r\\n                                placeholder=\\\"successNotificationUrl\\\"\\r\\n                                autocomplete=\\\"given-name\\\"\\r\\n                                required\\r\\n                                [autofocus]=\\\"true\\\"\\r\\n                                [ngClass]=\\\"{ 'is-invalid': (submitted || f.successNotificationUrl.touched) && f.successNotificationUrl.invalid, 'is-valid': f.country.touched && f.successNotificationUrl.valid  }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f['successNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f['successNotificationUrl'].errors.required\\\">successNotificationUrl is required</div>\\r\\n                          </div>\\r\\n                        </c-form-group>\\r\\n                        \\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"acceptNotificationUrl\\\">AcceptNotificationUrl :</h6>\\r\\n                            <input cInput\\r\\n                                   id=\\\"acceptNotificationUrl\\\"\\r\\n                                   formControlName=\\\"acceptNotificationUrl\\\"\\r\\n                                   placeholder=\\\"acceptNotificationUrl\\\"\\r\\n                                   autocomplete=\\\"given-name\\\"\\r\\n                                   required\\r\\n                                   [autofocus]=\\\"true\\\"\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.acceptNotificationUrl.touched) && f.acceptNotificationUrl.invalid, 'is-valid': f.pincode.touched && f.acceptNotificationUrl.valid  }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['acceptNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['acceptNotificationUrl'].errors.required\\\">acceptNotificationUrl is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>          \\r\\n                          <c-form-group cCol md=\\\"4\\\">\\r\\n                            <h6 class=\\\"col-form-label\\\" for=\\\"remarksNotificationUrl\\\">RemarksNotificationUrl :</h6>\\r\\n                            <input cInput\\r\\n                                   id=\\\"remarksNotificationUrl\\\"\\r\\n                                   formControlName=\\\"remarksNotificationUrl\\\"\\r\\n                                   placeholder=\\\"remarksNotificationUrl\\\"\\r\\n                                   autocomplete=\\\"given-name\\\"\\r\\n                                   required\\r\\n                                   [autofocus]=\\\"true\\\"\\r\\n                                   [ngClass]=\\\"{ 'is-invalid': (submitted || f.remarksNotificationUrl.touched) && f.remarksNotificationUrl.invalid, 'is-valid': f.primaryContact.touched && f.remarksNotificationUrl.valid  }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['remarksNotificationUrl'].invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f['remarksNotificationUrl'].errors.required\\\">remarksNotificationUrl is required</div>\\r\\n                            </div>\\r\\n                          </c-form-group>\\r\\n                        </c-row> \\r\\n                          <c-form-group>\\r\\n                            <button cButton color=\\\"primary\\\" class=\\\"mfe-1\\\" type=\\\"submit\\\" (click)=\\\"onSaveMerchant(simpleForm.value)\\\" [disabled]=\\\"simpleForm.valid\\\" [tabindex]=\\\"'0'\\\" >Submit</button>\\r\\n                            <button cButton color=\\\"success\\\" class=\\\"mfe-1\\\" [disabled]=\\\"simpleForm.valid\\\" (click)=\\\"onValidate()\\\" [tabindex]=\\\"'0'\\\">Validate</button>\\r\\n                            <button cButton color=\\\"danger\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\" [tabindex]=\\\"'0'\\\">Clear</button>\\r\\n                          </c-form-group>\\r\\n                        </form>\\r\\n                      </c-col>\\r\\n                      </ng-container>\\r\\n\\r\\n              </c-tab-pane>\\r\\n            </c-tab-content>\\r\\n          </c-tabset>\\r\\n        </c-card-body>\\r\\n      </c-card>\\r\\n    </c-col>\\r\\n  </c-row>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MerchantComponent } from './merchant.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MerchantComponent,\r\n    data: {\r\n      title: 'Merchant',\r\n    }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MerchantRoutingModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { BadgeModule, ButtonModule, CardModule, FormModule, GridModule, SwitchModule, TabsetModule } from '@coreui/angular';\r\nimport { IconModule } from '@coreui/icons-angular';\r\nimport { MerchantRoutingModule } from './merchant-routing.module';\r\nimport { MerchantComponent } from './merchant.component';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ValidationFormsRoutingModule } from '../forms/validation-forms/validation-forms-routing.module';\r\n// Timepicker\r\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\r\n\r\n// Datepicker\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\n\r\n// Ng2-select\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n// CoreUI\r\nimport { AlertModule, TextMaskModule } from '@coreui/angular';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MerchantRoutingModule,\r\n    CardModule,\r\n    GridModule,\r\n    IconModule,\r\n    SwitchModule,\r\n    PaginationModule,\r\n    FormsModule,\r\n    TabsetModule,\r\n    BadgeModule,\r\n    FormsModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ValidationFormsRoutingModule,\r\n    GridModule,\r\n    CardModule,\r\n    ButtonModule,\r\n    BadgeModule,\r\n    FormModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    TimepickerModule.forRoot(),\r\n    BsDatepickerModule.forRoot(),\r\n    NgSelectModule,\r\n    CardModule,\r\n    GridModule,\r\n    ButtonModule,\r\n    FormModule,\r\n    IconModule,\r\n    AlertModule,\r\n    TextMaskModule,\r\n  ],\r\n  declarations: [MerchantComponent],\r\n})\r\nexport class MerchantModule {}\r\n"],"sourceRoot":"webpack:///"}